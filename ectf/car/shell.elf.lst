
shell.elf:     file format elf32-littlearm


Disassembly of section .data:

20000000 <__echo>:
20000000:	Address 0x0000000020000000 is out of bounds.


Disassembly of section .bss:

20000004 <_bss>:
20000004:	00000000 	andeq	r0, r0, r0

20000008 <selected_mode>:

#include "memlog.h"
#include "string.h"

static rgn_info_t inp_buf_rgn, out_buf_rgn;
static mode_t selected_mode = NONE;
20000008:	00000000 	andeq	r0, r0, r0

2000000c <out_buf_rgn>:
	...

20000018 <inp_buf_rgn>:
	...

20000024 <__write_char__>:
#include "shell_config.h"
#include "string.h"

int (*__read_char__)(void);
int (*__read_char2__)(void);
void (*__write_char__)(char c);
20000024:	00000000 	andeq	r0, r0, r0

20000028 <total_num_commands>:
 * To reduce the shell size the history feature
 * is made optional. Skip history feature if
 * SHELL_NO_HISTORY is defined.
 */
#ifndef SHELL_NO_HISTORY
static volatile int total_num_commands = 0;
20000028:	00000000 	andeq	r0, r0, r0

2000002c <cmd_history>:
	...

2000006c <__cmd_exec_status>:
static volatile int __cmd_exec_status;
2000006c:	00000000 	andeq	r0, r0, r0

20000070 <curr_command_ptr>:
static volatile int curr_command_ptr = 0;
20000070:	00000000 	andeq	r0, r0, r0

20000074 <__read_char__>:
int (*__read_char__)(void);
20000074:	00000000 	andeq	r0, r0, r0

20000078 <__read_char2__>:
int (*__read_char2__)(void);
20000078:	00000000 	andeq	r0, r0, r0

2000007c <__write_char2__>:
void (*__write_char2__)(char c);
2000007c:	00000000 	andeq	r0, r0, r0

Disassembly of section .text:

00000000 <vector_table>:
       0:	20007ffc 	strdcs	r7, [r0], -ip
       4:	00001655 	andeq	r1, r0, r5, asr r6
       8:	00000525 	andeq	r0, r0, r5, lsr #10
       c:	00000525 	andeq	r0, r0, r5, lsr #10
      10:	00000525 	andeq	r0, r0, r5, lsr #10
      14:	00000525 	andeq	r0, r0, r5, lsr #10
      18:	00000525 	andeq	r0, r0, r5, lsr #10
	...
      2c:	00000525 	andeq	r0, r0, r5, lsr #10
      30:	00000525 	andeq	r0, r0, r5, lsr #10
      34:	00000525 	andeq	r0, r0, r5, lsr #10
	...
      40:	00000525 	andeq	r0, r0, r5, lsr #10
      44:	00000525 	andeq	r0, r0, r5, lsr #10
      48:	00000525 	andeq	r0, r0, r5, lsr #10
      4c:	00000525 	andeq	r0, r0, r5, lsr #10
      50:	00000525 	andeq	r0, r0, r5, lsr #10
      54:	00000525 	andeq	r0, r0, r5, lsr #10
      58:	00000525 	andeq	r0, r0, r5, lsr #10
      5c:	00000525 	andeq	r0, r0, r5, lsr #10
      60:	00000525 	andeq	r0, r0, r5, lsr #10
      64:	00000525 	andeq	r0, r0, r5, lsr #10
      68:	00000525 	andeq	r0, r0, r5, lsr #10
      6c:	00000525 	andeq	r0, r0, r5, lsr #10
      70:	00000525 	andeq	r0, r0, r5, lsr #10
      74:	00000525 	andeq	r0, r0, r5, lsr #10
      78:	00000525 	andeq	r0, r0, r5, lsr #10
      7c:	00000525 	andeq	r0, r0, r5, lsr #10
      80:	00000525 	andeq	r0, r0, r5, lsr #10
      84:	00000525 	andeq	r0, r0, r5, lsr #10
      88:	00000525 	andeq	r0, r0, r5, lsr #10
      8c:	00000525 	andeq	r0, r0, r5, lsr #10
      90:	00000525 	andeq	r0, r0, r5, lsr #10
      94:	00000525 	andeq	r0, r0, r5, lsr #10
      98:	00000525 	andeq	r0, r0, r5, lsr #10
      9c:	00000525 	andeq	r0, r0, r5, lsr #10
      a0:	00000525 	andeq	r0, r0, r5, lsr #10
      a4:	00000525 	andeq	r0, r0, r5, lsr #10
      a8:	00000525 	andeq	r0, r0, r5, lsr #10
      ac:	00000525 	andeq	r0, r0, r5, lsr #10
      b0:	00000525 	andeq	r0, r0, r5, lsr #10
      b4:	00000525 	andeq	r0, r0, r5, lsr #10
      b8:	00000525 	andeq	r0, r0, r5, lsr #10
      bc:	00000525 	andeq	r0, r0, r5, lsr #10
      c0:	00000525 	andeq	r0, r0, r5, lsr #10
      c4:	00000525 	andeq	r0, r0, r5, lsr #10
      c8:	00000525 	andeq	r0, r0, r5, lsr #10
      cc:	00000525 	andeq	r0, r0, r5, lsr #10
      d0:	00000525 	andeq	r0, r0, r5, lsr #10
      d4:	00000525 	andeq	r0, r0, r5, lsr #10
      d8:	00000525 	andeq	r0, r0, r5, lsr #10
      dc:	00000525 	andeq	r0, r0, r5, lsr #10
      e0:	00000525 	andeq	r0, r0, r5, lsr #10
      e4:	00000525 	andeq	r0, r0, r5, lsr #10
      e8:	00000525 	andeq	r0, r0, r5, lsr #10
      ec:	00000525 	andeq	r0, r0, r5, lsr #10
      f0:	00000525 	andeq	r0, r0, r5, lsr #10
      f4:	00000525 	andeq	r0, r0, r5, lsr #10
      f8:	00000525 	andeq	r0, r0, r5, lsr #10
      fc:	00000525 	andeq	r0, r0, r5, lsr #10
     100:	00000525 	andeq	r0, r0, r5, lsr #10
     104:	00000525 	andeq	r0, r0, r5, lsr #10
     108:	00000525 	andeq	r0, r0, r5, lsr #10
     10c:	00000525 	andeq	r0, r0, r5, lsr #10
     110:	00000525 	andeq	r0, r0, r5, lsr #10
     114:	00000525 	andeq	r0, r0, r5, lsr #10
     118:	00000525 	andeq	r0, r0, r5, lsr #10
     11c:	00000525 	andeq	r0, r0, r5, lsr #10
     120:	00000525 	andeq	r0, r0, r5, lsr #10
     124:	00000525 	andeq	r0, r0, r5, lsr #10
     128:	00000525 	andeq	r0, r0, r5, lsr #10
     12c:	00000525 	andeq	r0, r0, r5, lsr #10
     130:	00000525 	andeq	r0, r0, r5, lsr #10
     134:	00000525 	andeq	r0, r0, r5, lsr #10
     138:	00000525 	andeq	r0, r0, r5, lsr #10
     13c:	00000525 	andeq	r0, r0, r5, lsr #10
     140:	00000525 	andeq	r0, r0, r5, lsr #10
     144:	00000525 	andeq	r0, r0, r5, lsr #10
     148:	00000525 	andeq	r0, r0, r5, lsr #10
     14c:	00000525 	andeq	r0, r0, r5, lsr #10
     150:	00000525 	andeq	r0, r0, r5, lsr #10
     154:	00000525 	andeq	r0, r0, r5, lsr #10
     158:	00000525 	andeq	r0, r0, r5, lsr #10
     15c:	00000525 	andeq	r0, r0, r5, lsr #10
     160:	00000525 	andeq	r0, r0, r5, lsr #10
     164:	00000525 	andeq	r0, r0, r5, lsr #10
     168:	00000525 	andeq	r0, r0, r5, lsr #10
     16c:	00000525 	andeq	r0, r0, r5, lsr #10
     170:	00000525 	andeq	r0, r0, r5, lsr #10
     174:	00000525 	andeq	r0, r0, r5, lsr #10
     178:	00000525 	andeq	r0, r0, r5, lsr #10
     17c:	00000525 	andeq	r0, r0, r5, lsr #10
     180:	00000525 	andeq	r0, r0, r5, lsr #10
     184:	00000525 	andeq	r0, r0, r5, lsr #10
     188:	00000525 	andeq	r0, r0, r5, lsr #10
     18c:	00000525 	andeq	r0, r0, r5, lsr #10
     190:	00000525 	andeq	r0, r0, r5, lsr #10
     194:	00000525 	andeq	r0, r0, r5, lsr #10
     198:	00000525 	andeq	r0, r0, r5, lsr #10
     19c:	00000525 	andeq	r0, r0, r5, lsr #10
     1a0:	00000525 	andeq	r0, r0, r5, lsr #10
     1a4:	00000525 	andeq	r0, r0, r5, lsr #10
     1a8:	00000525 	andeq	r0, r0, r5, lsr #10
     1ac:	00000525 	andeq	r0, r0, r5, lsr #10
     1b0:	00000525 	andeq	r0, r0, r5, lsr #10
     1b4:	00000525 	andeq	r0, r0, r5, lsr #10
     1b8:	00000525 	andeq	r0, r0, r5, lsr #10
     1bc:	00000525 	andeq	r0, r0, r5, lsr #10
     1c0:	00000525 	andeq	r0, r0, r5, lsr #10
     1c4:	00000525 	andeq	r0, r0, r5, lsr #10
     1c8:	00000525 	andeq	r0, r0, r5, lsr #10
     1cc:	00000525 	andeq	r0, r0, r5, lsr #10
     1d0:	00000525 	andeq	r0, r0, r5, lsr #10
     1d4:	00000525 	andeq	r0, r0, r5, lsr #10
     1d8:	00000525 	andeq	r0, r0, r5, lsr #10
     1dc:	00000525 	andeq	r0, r0, r5, lsr #10
     1e0:	00000525 	andeq	r0, r0, r5, lsr #10
     1e4:	00000525 	andeq	r0, r0, r5, lsr #10
     1e8:	00000525 	andeq	r0, r0, r5, lsr #10
     1ec:	00000525 	andeq	r0, r0, r5, lsr #10
     1f0:	00000525 	andeq	r0, r0, r5, lsr #10
     1f4:	00000525 	andeq	r0, r0, r5, lsr #10
     1f8:	00000525 	andeq	r0, r0, r5, lsr #10
     1fc:	00000525 	andeq	r0, r0, r5, lsr #10
     200:	00000525 	andeq	r0, r0, r5, lsr #10
     204:	00000525 	andeq	r0, r0, r5, lsr #10
     208:	00000525 	andeq	r0, r0, r5, lsr #10
     20c:	00000525 	andeq	r0, r0, r5, lsr #10
     210:	00000525 	andeq	r0, r0, r5, lsr #10
     214:	00000525 	andeq	r0, r0, r5, lsr #10
     218:	00000525 	andeq	r0, r0, r5, lsr #10
     21c:	00000525 	andeq	r0, r0, r5, lsr #10
     220:	00000525 	andeq	r0, r0, r5, lsr #10
     224:	00000525 	andeq	r0, r0, r5, lsr #10
     228:	00000525 	andeq	r0, r0, r5, lsr #10
     22c:	00000525 	andeq	r0, r0, r5, lsr #10
     230:	00000525 	andeq	r0, r0, r5, lsr #10
     234:	00000525 	andeq	r0, r0, r5, lsr #10
     238:	00000525 	andeq	r0, r0, r5, lsr #10
     23c:	00000525 	andeq	r0, r0, r5, lsr #10
     240:	00000525 	andeq	r0, r0, r5, lsr #10
     244:	00000525 	andeq	r0, r0, r5, lsr #10
     248:	00000525 	andeq	r0, r0, r5, lsr #10
     24c:	00000525 	andeq	r0, r0, r5, lsr #10
	...

000003c0 <ping>:

#include "shell.h"


int ping(int argc, char** argv) {
     3c0:	b508      	push	{r3, lr}
    printf("MESG Received a ping\n");
     3c2:	4802      	ldr	r0, [pc, #8]	; (3cc <ping+0xc>)
     3c4:	f000 f9b4 	bl	730 <printf>
    return 0;
}
     3c8:	2000      	movs	r0, #0
     3ca:	bd08      	pop	{r3, pc}
     3cc:	000016e4 	andeq	r1, r0, r4, ror #13

000003d0 <uputc>:
 * limitations under the License.
 **/

#include "uart.h"

void uputc(char c) {
     3d0:	b508      	push	{r3, lr}
  while ((UARTFR >> 5) & 1)
     3d2:	4b07      	ldr	r3, [pc, #28]	; (3f0 <uputc+0x20>)
     3d4:	699b      	ldr	r3, [r3, #24]
     3d6:	f013 0f20 	tst.w	r3, #32
     3da:	d1fa      	bne.n	3d2 <uputc+0x2>
    ;

  UART_DR = c;
     3dc:	4b04      	ldr	r3, [pc, #16]	; (3f0 <uputc+0x20>)
     3de:	6018      	str	r0, [r3, #0]
  if (c == '\n')
     3e0:	280a      	cmp	r0, #10
     3e2:	d000      	beq.n	3e6 <uputc+0x16>
    uputc('\r');
}
     3e4:	bd08      	pop	{r3, pc}
    uputc('\r');
     3e6:	200d      	movs	r0, #13
     3e8:	f7ff fff2 	bl	3d0 <uputc>
}
     3ec:	e7fa      	b.n	3e4 <uputc+0x14>
     3ee:	bf00      	nop
     3f0:	4000c000 	andmi	ip, r0, r0

000003f4 <ugetc>:

int ugetc(void) {
  if (!((UARTFR >> 4) & 1)) return UART_DR;
     3f4:	4b05      	ldr	r3, [pc, #20]	; (40c <ugetc+0x18>)
     3f6:	699b      	ldr	r3, [r3, #24]
     3f8:	f013 0f10 	tst.w	r3, #16
     3fc:	d102      	bne.n	404 <ugetc+0x10>
     3fe:	4b03      	ldr	r3, [pc, #12]	; (40c <ugetc+0x18>)
     400:	6818      	ldr	r0, [r3, #0]
     402:	4770      	bx	lr

  return -1;
     404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     408:	4770      	bx	lr
     40a:	bf00      	nop
     40c:	4000c000 	andmi	ip, r0, r0

00000410 <uart_init>:

void uart_init(void) {
  /* Disable UART0 */
  UARTCTL = 0;
     410:	4b07      	ldr	r3, [pc, #28]	; (430 <uart_init+0x20>)
     412:	2200      	movs	r2, #0
     414:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the Baud to 115200 */
  UARTIBRD = 8;
     416:	2108      	movs	r1, #8
     418:	6259      	str	r1, [r3, #36]	; 0x24
  UARTFBRD = 44;
     41a:	212c      	movs	r1, #44	; 0x2c
     41c:	6299      	str	r1, [r3, #40]	; 0x28

  /* Use system clock for Uart */
  UARTCC = 0;
     41e:	f8c3 2fc8 	str.w	r2, [r3, #4040]	; 0xfc8

  /* 8n1 and no fifo */
  UARTLCRH = 0x60;
     422:	2260      	movs	r2, #96	; 0x60
     424:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable UART0, TXE and RXE */
  UARTCTL = 0x301;
     426:	f240 3201 	movw	r2, #769	; 0x301
     42a:	631a      	str	r2, [r3, #48]	; 0x30
}
     42c:	4770      	bx	lr
     42e:	bf00      	nop
     430:	4000c000 	andmi	ip, r0, r0

00000434 <u2putc>:
 * limitations under the License.
 **/

#include "uart2.h"

void u2putc(char c) {
     434:	b508      	push	{r3, lr}
  while ((UART2FR >> 5) & 1)
     436:	4b07      	ldr	r3, [pc, #28]	; (454 <u2putc+0x20>)
     438:	699b      	ldr	r3, [r3, #24]
     43a:	f013 0f20 	tst.w	r3, #32
     43e:	d1fa      	bne.n	436 <u2putc+0x2>
    ;

  UART2_DR = c;
     440:	4b04      	ldr	r3, [pc, #16]	; (454 <u2putc+0x20>)
     442:	6018      	str	r0, [r3, #0]
  if (c == '\n')
     444:	280a      	cmp	r0, #10
     446:	d000      	beq.n	44a <u2putc+0x16>
    u2putc('\r');
}
     448:	bd08      	pop	{r3, pc}
    u2putc('\r');
     44a:	200d      	movs	r0, #13
     44c:	f7ff fff2 	bl	434 <u2putc>
}
     450:	e7fa      	b.n	448 <u2putc+0x14>
     452:	bf00      	nop
     454:	4000d000 	andmi	sp, r0, r0

00000458 <u2getc>:

int u2getc(void) {
  if (!((UART2FR >> 4) & 1)) return UART2_DR;
     458:	4b05      	ldr	r3, [pc, #20]	; (470 <u2getc+0x18>)
     45a:	699b      	ldr	r3, [r3, #24]
     45c:	f013 0f10 	tst.w	r3, #16
     460:	d102      	bne.n	468 <u2getc+0x10>
     462:	4b03      	ldr	r3, [pc, #12]	; (470 <u2getc+0x18>)
     464:	6818      	ldr	r0, [r3, #0]
     466:	4770      	bx	lr

  return -1;
     468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     46c:	4770      	bx	lr
     46e:	bf00      	nop
     470:	4000d000 	andmi	sp, r0, r0

00000474 <uart2_init>:

void uart2_init(void) {
  /* Disable the UART */
  UART2CTL = 0;
     474:	4b07      	ldr	r3, [pc, #28]	; (494 <uart2_init+0x20>)
     476:	2200      	movs	r2, #0
     478:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the Baud to 115200 */
  UART2IBRD = 8;
     47a:	2108      	movs	r1, #8
     47c:	6259      	str	r1, [r3, #36]	; 0x24
  UART2FBRD = 44;
     47e:	212c      	movs	r1, #44	; 0x2c
     480:	6299      	str	r1, [r3, #40]	; 0x28

  /* Use system clock for Uart */
  UART2CC = 0;
     482:	f8c3 2fc8 	str.w	r2, [r3, #4040]	; 0xfc8

  /* 8n1 and no fifo */
  UART2LCRH = 0x60;
     486:	2260      	movs	r2, #96	; 0x60
     488:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable UART with TXE and RXE */
  UART2CTL = 0x301;
     48a:	f240 3201 	movw	r2, #769	; 0x301
     48e:	631a      	str	r2, [r3, #48]	; 0x30
}
     490:	4770      	bx	lr
     492:	bf00      	nop
     494:	4000d000 	andmi	sp, r0, r0

00000498 <pin_setup>:


void pin_setup() {
  /* Enable clock for UART0 and GPIO */
  // RCGCUART |= 1;
  RCGCUART |= 3;
     498:	4b13      	ldr	r3, [pc, #76]	; (4e8 <pin_setup+0x50>)
     49a:	f8d3 2618 	ldr.w	r2, [r3, #1560]	; 0x618
     49e:	f042 0203 	orr.w	r2, r2, #3
     4a2:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
   // RCGCGPIO |= 1;
  RCGCGPIO |= 3;
     4a6:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
     4aa:	f042 0203 	orr.w	r2, r2, #3
     4ae:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608

  /* Set PIN PA0 and PA1 as uart */
  GPIODEN = 0x03;
     4b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     4b6:	2203      	movs	r2, #3
     4b8:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
  GPIOAFSEL = 0x03;
     4bc:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  GPIOPCTL |= 0x00000011;
     4c0:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
     4c4:	f041 0111 	orr.w	r1, r1, #17
     4c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c

    /* Set PIN PA0 and PA1 as uart */
  GPIODEN2 = 0x03;
     4cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     4d0:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
  GPIOAFSEL2 = 0x03;
     4d4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  GPIOPCTL2 |= 0x00000011;
     4d8:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
     4dc:	f042 0211 	orr.w	r2, r2, #17
     4e0:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
}
     4e4:	4770      	bx	lr
     4e6:	bf00      	nop
     4e8:	400fe000 	andmi	lr, pc, r0

000004ec <platform_init>:

/**
 * @brief Inilialize the platform
 *
 */
void platform_init() {
     4ec:	b508      	push	{r3, lr}
    pin_setup();
     4ee:	f7ff ffd3 	bl	498 <pin_setup>
    uart_init();
     4f2:	f7ff ff8d 	bl	410 <uart_init>
    uart2_init();
     4f6:	f7ff ffbd 	bl	474 <uart2_init>
    set_read_char(ugetc);
     4fa:	4806      	ldr	r0, [pc, #24]	; (514 <platform_init+0x28>)
     4fc:	f000 ff52 	bl	13a4 <set_read_char>
    set_read_char2(u2getc);
     500:	4805      	ldr	r0, [pc, #20]	; (518 <platform_init+0x2c>)
     502:	f000 ff55 	bl	13b0 <set_read_char2>
    set_write_char(uputc);
     506:	4805      	ldr	r0, [pc, #20]	; (51c <platform_init+0x30>)
     508:	f000 ff58 	bl	13bc <set_write_char>
    set_write_char2(u2putc);
     50c:	4804      	ldr	r0, [pc, #16]	; (520 <platform_init+0x34>)
     50e:	f000 ff5b 	bl	13c8 <set_write_char2>
}
     512:	bd08      	pop	{r3, pc}
     514:	000003f5 	strdeq	r0, [r0], -r5
     518:	00000459 	andeq	r0, r0, r9, asr r4
     51c:	000003d1 	ldrdeq	r0, [r0], -r1
     520:	00000435 	andeq	r0, r0, r5, lsr r4

00000524 <default_handler>:

extern int _STACK_TOP_;
extern void reset_handler(void);

void default_handler(void) {
  while (1)
     524:	e7fe      	b.n	524 <default_handler>
	...

00000528 <memlog_init>:

void memlog_init(uint8_t *addr, uint32_t size, mode_t mode) {
  selected_mode = mode;
     528:	4b0e      	ldr	r3, [pc, #56]	; (564 <memlog_init+0x3c>)
     52a:	701a      	strb	r2, [r3, #0]

  if (selected_mode == NONE) {
     52c:	b1ca      	cbz	r2, 562 <memlog_init+0x3a>
void memlog_init(uint8_t *addr, uint32_t size, mode_t mode) {
     52e:	b570      	push	{r4, r5, r6, lr}
    return;
  }

  out_buf_rgn.addr = addr;
     530:	6058      	str	r0, [r3, #4]
  out_buf_rgn.size = size / 2;
     532:	084c      	lsrs	r4, r1, #1
     534:	609c      	str	r4, [r3, #8]
  out_buf_rgn.curr_index = 0;
     536:	2500      	movs	r5, #0
     538:	60dd      	str	r5, [r3, #12]

  inp_buf_rgn.addr = addr + size / 2;
     53a:	1906      	adds	r6, r0, r4
     53c:	611e      	str	r6, [r3, #16]
  inp_buf_rgn.size = size / 2;
     53e:	615c      	str	r4, [r3, #20]
  inp_buf_rgn.curr_index = 0;
     540:	619d      	str	r5, [r3, #24]

  if (!(selected_mode & INP)) {
     542:	f012 0f01 	tst.w	r2, #1
     546:	d105      	bne.n	554 <memlog_init+0x2c>
    // No input, use the extra memory for output.

    out_buf_rgn.size = size;
     548:	6099      	str	r1, [r3, #8]

    inp_buf_rgn.addr = addr;
    inp_buf_rgn.size = size;
  }

  memset(addr, 0, size);
     54a:	460a      	mov	r2, r1
     54c:	2100      	movs	r1, #0
     54e:	f000 fd65 	bl	101c <memset>
}
     552:	bd70      	pop	{r4, r5, r6, pc}
  } else if (!(selected_mode & OUT)) {
     554:	f012 0f02 	tst.w	r2, #2
     558:	d1f7      	bne.n	54a <memlog_init+0x22>
    inp_buf_rgn.addr = addr;
     55a:	4b02      	ldr	r3, [pc, #8]	; (564 <memlog_init+0x3c>)
     55c:	6118      	str	r0, [r3, #16]
    inp_buf_rgn.size = size;
     55e:	6159      	str	r1, [r3, #20]
     560:	e7f3      	b.n	54a <memlog_init+0x22>
     562:	4770      	bx	lr
     564:	20000008 	andcs	r0, r0, r8

00000568 <memlog_getc>:

int memlog_getc() {
  if (!(selected_mode & INP)) {
     568:	4b0e      	ldr	r3, [pc, #56]	; (5a4 <memlog_getc+0x3c>)
     56a:	781b      	ldrb	r3, [r3, #0]
     56c:	f013 0f01 	tst.w	r3, #1
     570:	d012      	beq.n	598 <memlog_getc+0x30>
    return -1;
  }

  if (inp_buf_rgn.addr[inp_buf_rgn.curr_index] == 0) {
     572:	4b0c      	ldr	r3, [pc, #48]	; (5a4 <memlog_getc+0x3c>)
     574:	691a      	ldr	r2, [r3, #16]
     576:	699b      	ldr	r3, [r3, #24]
     578:	5cd1      	ldrb	r1, [r2, r3]
     57a:	b181      	cbz	r1, 59e <memlog_getc+0x36>
    return -1;
  }

  int val = inp_buf_rgn.addr[inp_buf_rgn.curr_index];
     57c:	5cd0      	ldrb	r0, [r2, r3]
     57e:	b2c0      	uxtb	r0, r0
  inp_buf_rgn.addr[inp_buf_rgn.curr_index] = 0;
     580:	2100      	movs	r1, #0
     582:	54d1      	strb	r1, [r2, r3]
  inp_buf_rgn.curr_index++;
     584:	3301      	adds	r3, #1
     586:	4a07      	ldr	r2, [pc, #28]	; (5a4 <memlog_getc+0x3c>)
     588:	6193      	str	r3, [r2, #24]

  if (inp_buf_rgn.curr_index == inp_buf_rgn.size) {
     58a:	6952      	ldr	r2, [r2, #20]
     58c:	4293      	cmp	r3, r2
     58e:	d000      	beq.n	592 <memlog_getc+0x2a>
    inp_buf_rgn.curr_index = 0;
  }

  return val;
}
     590:	4770      	bx	lr
    inp_buf_rgn.curr_index = 0;
     592:	4b04      	ldr	r3, [pc, #16]	; (5a4 <memlog_getc+0x3c>)
     594:	6199      	str	r1, [r3, #24]
     596:	4770      	bx	lr
    return -1;
     598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     59c:	4770      	bx	lr
    return -1;
     59e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     5a2:	e7f5      	b.n	590 <memlog_getc+0x28>
     5a4:	20000008 	andcs	r0, r0, r8

000005a8 <memlog_putc>:

void memlog_putc(char c) {
  if (!(selected_mode & OUT) || c == 0) {
     5a8:	4b09      	ldr	r3, [pc, #36]	; (5d0 <memlog_putc+0x28>)
     5aa:	781b      	ldrb	r3, [r3, #0]
     5ac:	f013 0f02 	tst.w	r3, #2
     5b0:	d009      	beq.n	5c6 <memlog_putc+0x1e>
     5b2:	b140      	cbz	r0, 5c6 <memlog_putc+0x1e>
    return;
  }

  out_buf_rgn.addr[out_buf_rgn.curr_index] = (uint8_t) c;
     5b4:	4a06      	ldr	r2, [pc, #24]	; (5d0 <memlog_putc+0x28>)
     5b6:	6851      	ldr	r1, [r2, #4]
     5b8:	68d3      	ldr	r3, [r2, #12]
     5ba:	54c8      	strb	r0, [r1, r3]
  out_buf_rgn.curr_index++;
     5bc:	3301      	adds	r3, #1
     5be:	60d3      	str	r3, [r2, #12]

  if (out_buf_rgn.curr_index == out_buf_rgn.size) {
     5c0:	6892      	ldr	r2, [r2, #8]
     5c2:	4293      	cmp	r3, r2
     5c4:	d000      	beq.n	5c8 <memlog_putc+0x20>
    out_buf_rgn.curr_index = 0;
  }
}
     5c6:	4770      	bx	lr
    out_buf_rgn.curr_index = 0;
     5c8:	4b01      	ldr	r3, [pc, #4]	; (5d0 <memlog_putc+0x28>)
     5ca:	2200      	movs	r2, #0
     5cc:	60da      	str	r2, [r3, #12]
     5ce:	e7fa      	b.n	5c6 <memlog_putc+0x1e>
     5d0:	20000008 	andcs	r0, r0, r8

000005d4 <outstr>:
} printf_state;

static char hextable[] = {'0', '1', '2', '3', '4', '5', '6', '7',
                          '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

static void outstr(const char *str) {
     5d4:	b510      	push	{r4, lr}
     5d6:	4604      	mov	r4, r0
  while (*str != '\0') {
     5d8:	e003      	b.n	5e2 <outstr+0xe>
    __write_char__(*str);
     5da:	4b04      	ldr	r3, [pc, #16]	; (5ec <outstr+0x18>)
     5dc:	681b      	ldr	r3, [r3, #0]
     5de:	4798      	blx	r3
    str++;
     5e0:	3401      	adds	r4, #1
  while (*str != '\0') {
     5e2:	7820      	ldrb	r0, [r4, #0]
     5e4:	2800      	cmp	r0, #0
     5e6:	d1f8      	bne.n	5da <outstr+0x6>
  }
}
     5e8:	bd10      	pop	{r4, pc}
     5ea:	bf00      	nop
     5ec:	20000024 	andcs	r0, r0, r4, lsr #32

000005f0 <printf_numbers>:

static bool printf_numbers(const char fmt, va_list *args, int l_count) {
     5f0:	b530      	push	{r4, r5, lr}
     5f2:	b085      	sub	sp, #20
     5f4:	4614      	mov	r4, r2
  char num[MAX_DIGITS];
  int num_len = 0;

  switch (fmt) {
     5f6:	2864      	cmp	r0, #100	; 0x64
     5f8:	d01d      	beq.n	636 <printf_numbers+0x46>
     5fa:	d914      	bls.n	626 <printf_numbers+0x36>
     5fc:	2875      	cmp	r0, #117	; 0x75
     5fe:	d001      	beq.n	604 <printf_numbers+0x14>
     600:	2878      	cmp	r0, #120	; 0x78
     602:	d112      	bne.n	62a <printf_numbers+0x3a>
#ifndef SHELL_NO_PRINTF_LL
      long long unsigned int value = 0;
#else
      unsigned int value = 0;
#endif  // SHELL_NO_PRINTF_LL
      if (l_count == 0) {
     604:	2c00      	cmp	r4, #0
     606:	f040 8086 	bne.w	716 <printf_numbers+0x126>
        value = va_arg(*args, unsigned int);
     60a:	680b      	ldr	r3, [r1, #0]
     60c:	1d1a      	adds	r2, r3, #4
     60e:	600a      	str	r2, [r1, #0]
     610:	681d      	ldr	r5, [r3, #0]
#endif  // SHELL_NO_PRINTF_LL
      } else {
        return false;
      }

      if (fmt == 'u') {
     612:	2875      	cmp	r0, #117	; 0x75
     614:	d043      	beq.n	69e <printf_numbers+0xae>

        while (num_len > 0) {
          __write_char__(num[--num_len]);
        };
      } else {
        if (value == 0) {
     616:	2d00      	cmp	r5, #0
     618:	d176      	bne.n	708 <printf_numbers+0x118>
          __write_char__(hextable[0]);
     61a:	4b40      	ldr	r3, [pc, #256]	; (71c <printf_numbers+0x12c>)
     61c:	681b      	ldr	r3, [r3, #0]
     61e:	2030      	movs	r0, #48	; 0x30
     620:	4798      	blx	r3
    }
    default:
      outstr("\nprintf-error\n");
      return false;
  }
  return true;
     622:	2001      	movs	r0, #1
     624:	e005      	b.n	632 <printf_numbers+0x42>
  switch (fmt) {
     626:	2858      	cmp	r0, #88	; 0x58
     628:	d0ec      	beq.n	604 <printf_numbers+0x14>
      outstr("\nprintf-error\n");
     62a:	483d      	ldr	r0, [pc, #244]	; (720 <printf_numbers+0x130>)
     62c:	f7ff ffd2 	bl	5d4 <outstr>
      return false;
     630:	2000      	movs	r0, #0
}
     632:	b005      	add	sp, #20
     634:	bd30      	pop	{r4, r5, pc}
      if (l_count == 0) {
     636:	2a00      	cmp	r2, #0
     638:	d16b      	bne.n	712 <printf_numbers+0x122>
        value = va_arg(*args, int);
     63a:	680b      	ldr	r3, [r1, #0]
     63c:	1d1a      	adds	r2, r3, #4
     63e:	600a      	str	r2, [r1, #0]
     640:	681d      	ldr	r5, [r3, #0]
      if (value < 0) {
     642:	2d00      	cmp	r5, #0
     644:	db17      	blt.n	676 <printf_numbers+0x86>
        num[num_len++] = hextable[value % 10];
     646:	4a37      	ldr	r2, [pc, #220]	; (724 <printf_numbers+0x134>)
     648:	fb82 3205 	smull	r3, r2, r2, r5
     64c:	17eb      	asrs	r3, r5, #31
     64e:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
     652:	4619      	mov	r1, r3
     654:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     658:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
     65c:	4832      	ldr	r0, [pc, #200]	; (728 <printf_numbers+0x138>)
     65e:	5cc0      	ldrb	r0, [r0, r3]
     660:	4623      	mov	r3, r4
     662:	3310      	adds	r3, #16
     664:	446b      	add	r3, sp
     666:	3401      	adds	r4, #1
     668:	f803 0c0c 	strb.w	r0, [r3, #-12]
        value = value / 10;
     66c:	462b      	mov	r3, r5
     66e:	460d      	mov	r5, r1
      } while (value > 0);
     670:	2b09      	cmp	r3, #9
     672:	dce8      	bgt.n	646 <printf_numbers+0x56>
     674:	e00f      	b.n	696 <printf_numbers+0xa6>
        __write_char__('-');
     676:	4b29      	ldr	r3, [pc, #164]	; (71c <printf_numbers+0x12c>)
     678:	681b      	ldr	r3, [r3, #0]
     67a:	202d      	movs	r0, #45	; 0x2d
     67c:	4798      	blx	r3
        value = -value;
     67e:	426d      	negs	r5, r5
     680:	e7e1      	b.n	646 <printf_numbers+0x56>
        __write_char__(num[--num_len]);
     682:	3c01      	subs	r4, #1
     684:	f104 0310 	add.w	r3, r4, #16
     688:	eb0d 0203 	add.w	r2, sp, r3
     68c:	4b23      	ldr	r3, [pc, #140]	; (71c <printf_numbers+0x12c>)
     68e:	681b      	ldr	r3, [r3, #0]
     690:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
     694:	4798      	blx	r3
      while (num_len > 0) {
     696:	2c00      	cmp	r4, #0
     698:	dcf3      	bgt.n	682 <printf_numbers+0x92>
  return true;
     69a:	2001      	movs	r0, #1
     69c:	e7c9      	b.n	632 <printf_numbers+0x42>
          num[num_len++] = hextable[value % 10];
     69e:	4b23      	ldr	r3, [pc, #140]	; (72c <printf_numbers+0x13c>)
     6a0:	fba3 2305 	umull	r2, r3, r3, r5
     6a4:	08db      	lsrs	r3, r3, #3
     6a6:	4619      	mov	r1, r3
     6a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     6ac:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
     6b0:	481d      	ldr	r0, [pc, #116]	; (728 <printf_numbers+0x138>)
     6b2:	5cc0      	ldrb	r0, [r0, r3]
     6b4:	4623      	mov	r3, r4
     6b6:	3310      	adds	r3, #16
     6b8:	446b      	add	r3, sp
     6ba:	3401      	adds	r4, #1
     6bc:	f803 0c0c 	strb.w	r0, [r3, #-12]
          value = value / 10;
     6c0:	462b      	mov	r3, r5
     6c2:	460d      	mov	r5, r1
        } while (value > 0);
     6c4:	2b09      	cmp	r3, #9
     6c6:	d8ea      	bhi.n	69e <printf_numbers+0xae>
        while (num_len > 0) {
     6c8:	2c00      	cmp	r4, #0
     6ca:	dd0a      	ble.n	6e2 <printf_numbers+0xf2>
          __write_char__(num[--num_len]);
     6cc:	3c01      	subs	r4, #1
     6ce:	f104 0310 	add.w	r3, r4, #16
     6d2:	eb0d 0203 	add.w	r2, sp, r3
     6d6:	4b11      	ldr	r3, [pc, #68]	; (71c <printf_numbers+0x12c>)
     6d8:	681b      	ldr	r3, [r3, #0]
     6da:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
     6de:	4798      	blx	r3
     6e0:	e7f2      	b.n	6c8 <printf_numbers+0xd8>
  return true;
     6e2:	2001      	movs	r0, #1
     6e4:	e7a5      	b.n	632 <printf_numbers+0x42>
              __write_char__(hextable[val]);
     6e6:	4a0d      	ldr	r2, [pc, #52]	; (71c <printf_numbers+0x12c>)
     6e8:	6812      	ldr	r2, [r2, #0]
     6ea:	490f      	ldr	r1, [pc, #60]	; (728 <printf_numbers+0x138>)
     6ec:	5cc8      	ldrb	r0, [r1, r3]
     6ee:	4790      	blx	r2
              leading_zero_ignored = true;
     6f0:	2201      	movs	r2, #1
            start_bit -= 4;
     6f2:	3c04      	subs	r4, #4
          while (start_bit >= 0) {
     6f4:	2c00      	cmp	r4, #0
     6f6:	db0a      	blt.n	70e <printf_numbers+0x11e>
            int val = (value >> start_bit) & 0xF;
     6f8:	fa25 f304 	lsr.w	r3, r5, r4
            if (val || leading_zero_ignored) {
     6fc:	f013 030f 	ands.w	r3, r3, #15
     700:	d1f1      	bne.n	6e6 <printf_numbers+0xf6>
     702:	2a00      	cmp	r2, #0
     704:	d0f5      	beq.n	6f2 <printf_numbers+0x102>
     706:	e7ee      	b.n	6e6 <printf_numbers+0xf6>
          bool leading_zero_ignored = false;
     708:	2200      	movs	r2, #0
          int start_bit = LAST_NIBBLE_FIRST_BIT;
     70a:	241c      	movs	r4, #28
     70c:	e7f2      	b.n	6f4 <printf_numbers+0x104>
  return true;
     70e:	2001      	movs	r0, #1
     710:	e78f      	b.n	632 <printf_numbers+0x42>
        return false;
     712:	2000      	movs	r0, #0
     714:	e78d      	b.n	632 <printf_numbers+0x42>
        return false;
     716:	2000      	movs	r0, #0
     718:	e78b      	b.n	632 <printf_numbers+0x42>
     71a:	bf00      	nop
     71c:	20000024 	andcs	r0, r0, r4, lsr #32
     720:	0000171c 	andeq	r1, r0, ip, lsl r7
     724:	66666667 	strbtvs	r6, [r6], -r7, ror #12
     728:	0000172c 	andeq	r1, r0, ip, lsr #14
     72c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

00000730 <printf>:

int printf(const char *fmt, ...) {
     730:	b40f      	push	{r0, r1, r2, r3}
     732:	b530      	push	{r4, r5, lr}
     734:	b083      	sub	sp, #12
     736:	ab06      	add	r3, sp, #24
     738:	f853 4b04 	ldr.w	r4, [r3], #4
  printf_state state = CHECK_CH;
  va_list args;

  va_start(args, fmt);
     73c:	9301      	str	r3, [sp, #4]
  printf_state state = CHECK_CH;
     73e:	2500      	movs	r5, #0

  while (*fmt) {
     740:	e005      	b.n	74e <printf+0x1e>
    switch (state) {
      case CHECK_CH: {
        if (*fmt == '%') {
     742:	2825      	cmp	r0, #37	; 0x25
     744:	d00a      	beq.n	75c <printf+0x2c>
          state = PARSE_FMT_STR;
          fmt++;
          continue;
        }
        __write_char__(*fmt);
     746:	4b30      	ldr	r3, [pc, #192]	; (808 <printf+0xd8>)
     748:	681b      	ldr	r3, [r3, #0]
     74a:	4798      	blx	r3
        fmt++;
     74c:	3401      	adds	r4, #1
  while (*fmt) {
     74e:	7820      	ldrb	r0, [r4, #0]
     750:	2800      	cmp	r0, #0
     752:	d050      	beq.n	7f6 <printf+0xc6>
    switch (state) {
     754:	2d00      	cmp	r5, #0
     756:	d0f4      	beq.n	742 <printf+0x12>
     758:	b925      	cbnz	r5, 764 <printf+0x34>
     75a:	e7f8      	b.n	74e <printf+0x1e>
          fmt++;
     75c:	3401      	adds	r4, #1
          state = PARSE_FMT_STR;
     75e:	2501      	movs	r5, #1
          continue;
     760:	e7f5      	b.n	74e <printf+0x1e>
        break;
      }
      case PARSE_FMT_STR: {
        // Support only basic format specifiers
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
          fmt++;
     762:	3401      	adds	r4, #1
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
     764:	7820      	ldrb	r0, [r4, #0]
     766:	b130      	cbz	r0, 776 <printf+0x46>
     768:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     76c:	b2db      	uxtb	r3, r3
     76e:	2b09      	cmp	r3, #9
     770:	d9f7      	bls.n	762 <printf+0x32>
     772:	282d      	cmp	r0, #45	; 0x2d
     774:	d0f5      	beq.n	762 <printf+0x32>
        }

        switch (*fmt) {
     776:	2863      	cmp	r0, #99	; 0x63
     778:	d019      	beq.n	7ae <printf+0x7e>
     77a:	d80b      	bhi.n	794 <printf+0x64>
     77c:	2843      	cmp	r0, #67	; 0x43
     77e:	d016      	beq.n	7ae <printf+0x7e>
     780:	2853      	cmp	r0, #83	; 0x53
     782:	d00b      	beq.n	79c <printf+0x6c>
     784:	2825      	cmp	r0, #37	; 0x25
     786:	d12c      	bne.n	7e2 <printf+0xb2>
          case '%':
            __write_char__(*fmt);
     788:	4b1f      	ldr	r3, [pc, #124]	; (808 <printf+0xd8>)
     78a:	681b      	ldr	r3, [r3, #0]
     78c:	4798      	blx	r3
            fmt++;
     78e:	3401      	adds	r4, #1
            state = CHECK_CH;
     790:	2500      	movs	r5, #0
            break;
     792:	e7dc      	b.n	74e <printf+0x1e>
     794:	286c      	cmp	r0, #108	; 0x6c
     796:	d014      	beq.n	7c2 <printf+0x92>
     798:	2873      	cmp	r0, #115	; 0x73
     79a:	d122      	bne.n	7e2 <printf+0xb2>
            fmt++;
            state = CHECK_CH;
            break;
          case 's':
          case 'S':
            outstr(va_arg(args, const char *));
     79c:	9b01      	ldr	r3, [sp, #4]
     79e:	1d1a      	adds	r2, r3, #4
     7a0:	9201      	str	r2, [sp, #4]
     7a2:	6818      	ldr	r0, [r3, #0]
     7a4:	f7ff ff16 	bl	5d4 <outstr>
            fmt++;
     7a8:	3401      	adds	r4, #1
            state = CHECK_CH;
     7aa:	2500      	movs	r5, #0
            break;
     7ac:	e7cf      	b.n	74e <printf+0x1e>
            __write_char__(va_arg(args, int));
     7ae:	4b16      	ldr	r3, [pc, #88]	; (808 <printf+0xd8>)
     7b0:	681a      	ldr	r2, [r3, #0]
     7b2:	9b01      	ldr	r3, [sp, #4]
     7b4:	1d19      	adds	r1, r3, #4
     7b6:	9101      	str	r1, [sp, #4]
     7b8:	7818      	ldrb	r0, [r3, #0]
     7ba:	4790      	blx	r2
            fmt++;
     7bc:	3401      	adds	r4, #1
            state = CHECK_CH;
     7be:	2500      	movs	r5, #0
            break;
     7c0:	e7c5      	b.n	74e <printf+0x1e>
          case 'l': {
            int l_count = 1;
            fmt++;
     7c2:	1c65      	adds	r5, r4, #1
            if (*fmt == 'l') {
     7c4:	7863      	ldrb	r3, [r4, #1]
     7c6:	2b6c      	cmp	r3, #108	; 0x6c
     7c8:	d008      	beq.n	7dc <printf+0xac>
            int l_count = 1;
     7ca:	2201      	movs	r2, #1
              l_count++;
              fmt++;
            }
            if (printf_numbers(*fmt, &args, l_count)) {
     7cc:	a901      	add	r1, sp, #4
     7ce:	7828      	ldrb	r0, [r5, #0]
     7d0:	f7ff ff0e 	bl	5f0 <printf_numbers>
     7d4:	b168      	cbz	r0, 7f2 <printf+0xc2>
              state = CHECK_CH;
              fmt++;
     7d6:	1c6c      	adds	r4, r5, #1
              state = CHECK_CH;
     7d8:	2500      	movs	r5, #0
              break;
     7da:	e7b8      	b.n	74e <printf+0x1e>
              fmt++;
     7dc:	1ca5      	adds	r5, r4, #2
              l_count++;
     7de:	2202      	movs	r2, #2
     7e0:	e7f4      	b.n	7cc <printf+0x9c>
            }
            return -1;
          }
          default: {
            if (printf_numbers(*fmt, &args, 0)) {
     7e2:	2200      	movs	r2, #0
     7e4:	a901      	add	r1, sp, #4
     7e6:	f7ff ff03 	bl	5f0 <printf_numbers>
     7ea:	b148      	cbz	r0, 800 <printf+0xd0>
              state = CHECK_CH;
              fmt++;
     7ec:	3401      	adds	r4, #1
              state = CHECK_CH;
     7ee:	2500      	movs	r5, #0
              break;
     7f0:	e7ad      	b.n	74e <printf+0x1e>
            return -1;
     7f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  va_end(args);
  return 0;
}
     7f6:	b003      	add	sp, #12
     7f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     7fc:	b004      	add	sp, #16
     7fe:	4770      	bx	lr
            return -1;
     800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     804:	e7f7      	b.n	7f6 <printf+0xc6>
     806:	bf00      	nop
     808:	20000024 	andcs	r0, r0, r4, lsr #32

0000080c <printf2>:
}

#endif  // SHELL_PRINTF_LITE


int printf2(const char *fmt, ...) {
     80c:	b40f      	push	{r0, r1, r2, r3}
     80e:	b510      	push	{r4, lr}
     810:	9c02      	ldr	r4, [sp, #8]
  while (*fmt != '\0') {
     812:	e003      	b.n	81c <printf2+0x10>
    __write_char2__(*fmt);
     814:	4b05      	ldr	r3, [pc, #20]	; (82c <printf2+0x20>)
     816:	681b      	ldr	r3, [r3, #0]
     818:	4798      	blx	r3
    fmt++;
     81a:	3401      	adds	r4, #1
  while (*fmt != '\0') {
     81c:	7820      	ldrb	r0, [r4, #0]
     81e:	2800      	cmp	r0, #0
     820:	d1f8      	bne.n	814 <printf2+0x8>
  }
  return 0;
     822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     826:	b004      	add	sp, #16
     828:	4770      	bx	lr
     82a:	bf00      	nop
     82c:	2000007c 	andcs	r0, r0, ip, ror r0

00000830 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
     830:	b510      	push	{r4, lr}
     832:	b082      	sub	sp, #8
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
     834:	2200      	movs	r2, #0
     836:	e012      	b.n	85e <KeyExpansion+0x2e>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
     838:	0093      	lsls	r3, r2, #2
     83a:	f811 4022 	ldrb.w	r4, [r1, r2, lsl #2]
     83e:	f800 4022 	strb.w	r4, [r0, r2, lsl #2]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
     842:	1c5c      	adds	r4, r3, #1
     844:	f811 c004 	ldrb.w	ip, [r1, r4]
     848:	f800 c004 	strb.w	ip, [r0, r4]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
     84c:	1c9c      	adds	r4, r3, #2
     84e:	f811 c004 	ldrb.w	ip, [r1, r4]
     852:	f800 c004 	strb.w	ip, [r0, r4]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
     856:	3303      	adds	r3, #3
     858:	5ccc      	ldrb	r4, [r1, r3]
     85a:	54c4      	strb	r4, [r0, r3]
  for (i = 0; i < Nk; ++i)
     85c:	3201      	adds	r2, #1
     85e:	2a03      	cmp	r2, #3
     860:	d9ea      	bls.n	838 <KeyExpansion+0x8>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     862:	2304      	movs	r3, #4
     864:	e024      	b.n	8b0 <KeyExpansion+0x80>
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
     866:	0099      	lsls	r1, r3, #2
     868:	1f1a      	subs	r2, r3, #4
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
     86a:	f810 c022 	ldrb.w	ip, [r0, r2, lsl #2]
     86e:	f89d 4004 	ldrb.w	r4, [sp, #4]
     872:	ea8c 0c04 	eor.w	ip, ip, r4
     876:	f800 c023 	strb.w	ip, [r0, r3, lsl #2]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
     87a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
     87e:	f892 c001 	ldrb.w	ip, [r2, #1]
     882:	f89d e005 	ldrb.w	lr, [sp, #5]
     886:	1c4c      	adds	r4, r1, #1
     888:	ea8c 0c0e 	eor.w	ip, ip, lr
     88c:	f800 c004 	strb.w	ip, [r0, r4]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
     890:	f892 c002 	ldrb.w	ip, [r2, #2]
     894:	f89d e006 	ldrb.w	lr, [sp, #6]
     898:	1c8c      	adds	r4, r1, #2
     89a:	ea8c 0c0e 	eor.w	ip, ip, lr
     89e:	f800 c004 	strb.w	ip, [r0, r4]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
     8a2:	78d2      	ldrb	r2, [r2, #3]
     8a4:	f89d 4007 	ldrb.w	r4, [sp, #7]
     8a8:	3103      	adds	r1, #3
     8aa:	4062      	eors	r2, r4
     8ac:	5442      	strb	r2, [r0, r1]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     8ae:	3301      	adds	r3, #1
     8b0:	2b2b      	cmp	r3, #43	; 0x2b
     8b2:	d833      	bhi.n	91c <KeyExpansion+0xec>
      k = (i - 1) * 4;
     8b4:	1e5a      	subs	r2, r3, #1
      tempa[0]=RoundKey[k + 0];
     8b6:	f810 1022 	ldrb.w	r1, [r0, r2, lsl #2]
     8ba:	f88d 1004 	strb.w	r1, [sp, #4]
      tempa[1]=RoundKey[k + 1];
     8be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
     8c2:	7854      	ldrb	r4, [r2, #1]
     8c4:	f88d 4005 	strb.w	r4, [sp, #5]
      tempa[2]=RoundKey[k + 2];
     8c8:	f892 e002 	ldrb.w	lr, [r2, #2]
     8cc:	f88d e006 	strb.w	lr, [sp, #6]
      tempa[3]=RoundKey[k + 3];
     8d0:	f892 c003 	ldrb.w	ip, [r2, #3]
     8d4:	f88d c007 	strb.w	ip, [sp, #7]
    if (i % Nk == 0)
     8d8:	f013 0f03 	tst.w	r3, #3
     8dc:	d1c3      	bne.n	866 <KeyExpansion+0x36>
        tempa[0] = tempa[1];
     8de:	f88d 4004 	strb.w	r4, [sp, #4]
        tempa[1] = tempa[2];
     8e2:	f88d e005 	strb.w	lr, [sp, #5]
        tempa[2] = tempa[3];
     8e6:	f88d c006 	strb.w	ip, [sp, #6]
        tempa[3] = u8tmp;
     8ea:	f88d 1007 	strb.w	r1, [sp, #7]
        tempa[0] = getSBoxValue(tempa[0]);
     8ee:	4a0c      	ldr	r2, [pc, #48]	; (920 <KeyExpansion+0xf0>)
     8f0:	5d14      	ldrb	r4, [r2, r4]
     8f2:	f88d 4004 	strb.w	r4, [sp, #4]
        tempa[1] = getSBoxValue(tempa[1]);
     8f6:	f812 e00e 	ldrb.w	lr, [r2, lr]
     8fa:	f88d e005 	strb.w	lr, [sp, #5]
        tempa[2] = getSBoxValue(tempa[2]);
     8fe:	f812 c00c 	ldrb.w	ip, [r2, ip]
     902:	f88d c006 	strb.w	ip, [sp, #6]
        tempa[3] = getSBoxValue(tempa[3]);
     906:	5c51      	ldrb	r1, [r2, r1]
     908:	f88d 1007 	strb.w	r1, [sp, #7]
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
     90c:	eb02 0293 	add.w	r2, r2, r3, lsr #2
     910:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
     914:	4054      	eors	r4, r2
     916:	f88d 4004 	strb.w	r4, [sp, #4]
     91a:	e7a4      	b.n	866 <KeyExpansion+0x36>
  }
}
     91c:	b002      	add	sp, #8
     91e:	bd10      	pop	{r4, pc}
     920:	0000173c 	andeq	r1, r0, ip, lsr r7

00000924 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
     924:	b530      	push	{r4, r5, lr}
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
     926:	f04f 0e00 	mov.w	lr, #0
     92a:	e014      	b.n	956 <AddRoundKey+0x32>
  {
    for (j = 0; j < 4; ++j)
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
     92c:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
     930:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
     934:	f812 c00c 	ldrb.w	ip, [r2, ip]
     938:	eb01 048e 	add.w	r4, r1, lr, lsl #2
     93c:	5ce5      	ldrb	r5, [r4, r3]
     93e:	ea8c 0c05 	eor.w	ip, ip, r5
     942:	f804 c003 	strb.w	ip, [r4, r3]
    for (j = 0; j < 4; ++j)
     946:	3301      	adds	r3, #1
     948:	b2db      	uxtb	r3, r3
     94a:	2b03      	cmp	r3, #3
     94c:	d9ee      	bls.n	92c <AddRoundKey+0x8>
  for (i = 0; i < 4; ++i)
     94e:	f10e 0e01 	add.w	lr, lr, #1
     952:	fa5f fe8e 	uxtb.w	lr, lr
     956:	f1be 0f03 	cmp.w	lr, #3
     95a:	d801      	bhi.n	960 <AddRoundKey+0x3c>
    for (j = 0; j < 4; ++j)
     95c:	2300      	movs	r3, #0
     95e:	e7f4      	b.n	94a <AddRoundKey+0x26>
    }
  }
}
     960:	bd30      	pop	{r4, r5, pc}

00000962 <SubBytes>:
// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
     962:	2200      	movs	r2, #0
     964:	2a03      	cmp	r2, #3
     966:	d81b      	bhi.n	9a0 <SubBytes+0x3e>
  {
    for (j = 0; j < 4; ++j)
     968:	2300      	movs	r3, #0
     96a:	2b03      	cmp	r3, #3
     96c:	d815      	bhi.n	99a <SubBytes+0x38>
{
     96e:	b410      	push	{r4}
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
     970:	eb00 0183 	add.w	r1, r0, r3, lsl #2
     974:	f811 c002 	ldrb.w	ip, [r1, r2]
     978:	4c0a      	ldr	r4, [pc, #40]	; (9a4 <SubBytes+0x42>)
     97a:	f814 c00c 	ldrb.w	ip, [r4, ip]
     97e:	f801 c002 	strb.w	ip, [r1, r2]
    for (j = 0; j < 4; ++j)
     982:	3301      	adds	r3, #1
     984:	b2db      	uxtb	r3, r3
     986:	2b03      	cmp	r3, #3
     988:	d9f2      	bls.n	970 <SubBytes+0xe>
  for (i = 0; i < 4; ++i)
     98a:	3201      	adds	r2, #1
     98c:	b2d2      	uxtb	r2, r2
     98e:	2a03      	cmp	r2, #3
     990:	d801      	bhi.n	996 <SubBytes+0x34>
    for (j = 0; j < 4; ++j)
     992:	2300      	movs	r3, #0
     994:	e7f7      	b.n	986 <SubBytes+0x24>
    }
  }
}
     996:	bc10      	pop	{r4}
     998:	4770      	bx	lr
  for (i = 0; i < 4; ++i)
     99a:	3201      	adds	r2, #1
     99c:	b2d2      	uxtb	r2, r2
     99e:	e7e1      	b.n	964 <SubBytes+0x2>
     9a0:	4770      	bx	lr
     9a2:	bf00      	nop
     9a4:	0000173c 	andeq	r1, r0, ip, lsr r7

000009a8 <ShiftRows>:
static void ShiftRows(state_t* state)
{
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
     9a8:	7843      	ldrb	r3, [r0, #1]
  (*state)[0][1] = (*state)[1][1];
     9aa:	7942      	ldrb	r2, [r0, #5]
     9ac:	7042      	strb	r2, [r0, #1]
  (*state)[1][1] = (*state)[2][1];
     9ae:	7a42      	ldrb	r2, [r0, #9]
     9b0:	7142      	strb	r2, [r0, #5]
  (*state)[2][1] = (*state)[3][1];
     9b2:	7b42      	ldrb	r2, [r0, #13]
     9b4:	7242      	strb	r2, [r0, #9]
  (*state)[3][1] = temp;
     9b6:	7343      	strb	r3, [r0, #13]

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
     9b8:	7883      	ldrb	r3, [r0, #2]
  (*state)[0][2] = (*state)[2][2];
     9ba:	7a82      	ldrb	r2, [r0, #10]
     9bc:	7082      	strb	r2, [r0, #2]
  (*state)[2][2] = temp;
     9be:	7283      	strb	r3, [r0, #10]

  temp           = (*state)[1][2];
     9c0:	7983      	ldrb	r3, [r0, #6]
  (*state)[1][2] = (*state)[3][2];
     9c2:	7b82      	ldrb	r2, [r0, #14]
     9c4:	7182      	strb	r2, [r0, #6]
  (*state)[3][2] = temp;
     9c6:	7383      	strb	r3, [r0, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
     9c8:	78c3      	ldrb	r3, [r0, #3]
  (*state)[0][3] = (*state)[3][3];
     9ca:	7bc2      	ldrb	r2, [r0, #15]
     9cc:	70c2      	strb	r2, [r0, #3]
  (*state)[3][3] = (*state)[2][3];
     9ce:	7ac2      	ldrb	r2, [r0, #11]
     9d0:	73c2      	strb	r2, [r0, #15]
  (*state)[2][3] = (*state)[1][3];
     9d2:	79c2      	ldrb	r2, [r0, #7]
     9d4:	72c2      	strb	r2, [r0, #11]
  (*state)[1][3] = temp;
     9d6:	71c3      	strb	r3, [r0, #7]
}
     9d8:	4770      	bx	lr

000009da <xtime>:

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
     9da:	09c3      	lsrs	r3, r0, #7
     9dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     9e0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     9e4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
     9e8:	b2c0      	uxtb	r0, r0
     9ea:	4770      	bx	lr

000009ec <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
     9ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9f0:	4681      	mov	r9, r0
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
     9f2:	2500      	movs	r5, #0
     9f4:	e02f      	b.n	a56 <MixColumns+0x6a>
  {  
    t   = (*state)[i][0];
     9f6:	f819 a025 	ldrb.w	sl, [r9, r5, lsl #2]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
     9fa:	eb09 0685 	add.w	r6, r9, r5, lsl #2
     9fe:	f896 b001 	ldrb.w	fp, [r6, #1]
     a02:	ea8b 000a 	eor.w	r0, fp, sl
     a06:	f896 8002 	ldrb.w	r8, [r6, #2]
     a0a:	78f7      	ldrb	r7, [r6, #3]
     a0c:	ea80 0408 	eor.w	r4, r0, r8
     a10:	407c      	eors	r4, r7
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
     a12:	f7ff ffe2 	bl	9da <xtime>
     a16:	4060      	eors	r0, r4
     a18:	ea8a 0000 	eor.w	r0, sl, r0
     a1c:	f809 0025 	strb.w	r0, [r9, r5, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
     a20:	ea8b 0008 	eor.w	r0, fp, r8
     a24:	f7ff ffd9 	bl	9da <xtime>
     a28:	4060      	eors	r0, r4
     a2a:	ea8b 0b00 	eor.w	fp, fp, r0
     a2e:	f886 b001 	strb.w	fp, [r6, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
     a32:	ea88 0007 	eor.w	r0, r8, r7
     a36:	f7ff ffd0 	bl	9da <xtime>
     a3a:	4060      	eors	r0, r4
     a3c:	ea88 0800 	eor.w	r8, r8, r0
     a40:	f886 8002 	strb.w	r8, [r6, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
     a44:	ea87 000a 	eor.w	r0, r7, sl
     a48:	f7ff ffc7 	bl	9da <xtime>
     a4c:	4044      	eors	r4, r0
     a4e:	407c      	eors	r4, r7
     a50:	70f4      	strb	r4, [r6, #3]
  for (i = 0; i < 4; ++i)
     a52:	3501      	adds	r5, #1
     a54:	b2ed      	uxtb	r5, r5
     a56:	2d03      	cmp	r5, #3
     a58:	d9cd      	bls.n	9f6 <MixColumns+0xa>
  }
}
     a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000a5e <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
     a5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a62:	b08b      	sub	sp, #44	; 0x2c
     a64:	9000      	str	r0, [sp, #0]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
     a66:	f04f 0900 	mov.w	r9, #0
     a6a:	e0a4      	b.n	bb6 <InvMixColumns+0x158>
  { 
    a = (*state)[i][0];
     a6c:	9b00      	ldr	r3, [sp, #0]
     a6e:	f813 b029 	ldrb.w	fp, [r3, r9, lsl #2]
    b = (*state)[i][1];
     a72:	eb03 0789 	add.w	r7, r3, r9, lsl #2
     a76:	f897 a001 	ldrb.w	sl, [r7, #1]
    c = (*state)[i][2];
     a7a:	f897 8002 	ldrb.w	r8, [r7, #2]
    d = (*state)[i][3];
     a7e:	78fc      	ldrb	r4, [r7, #3]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
     a80:	4658      	mov	r0, fp
     a82:	f7ff ffaa 	bl	9da <xtime>
     a86:	9006      	str	r0, [sp, #24]
     a88:	f7ff ffa7 	bl	9da <xtime>
     a8c:	9001      	str	r0, [sp, #4]
     a8e:	f7ff ffa4 	bl	9da <xtime>
     a92:	9007      	str	r0, [sp, #28]
     a94:	4650      	mov	r0, sl
     a96:	f7ff ffa0 	bl	9da <xtime>
     a9a:	9002      	str	r0, [sp, #8]
     a9c:	f7ff ff9d 	bl	9da <xtime>
     aa0:	9003      	str	r0, [sp, #12]
     aa2:	f7ff ff9a 	bl	9da <xtime>
     aa6:	4606      	mov	r6, r0
     aa8:	4640      	mov	r0, r8
     aaa:	f7ff ff96 	bl	9da <xtime>
     aae:	9008      	str	r0, [sp, #32]
     ab0:	f7ff ff93 	bl	9da <xtime>
     ab4:	9004      	str	r0, [sp, #16]
     ab6:	f7ff ff90 	bl	9da <xtime>
     aba:	4605      	mov	r5, r0
     abc:	4620      	mov	r0, r4
     abe:	f7ff ff8c 	bl	9da <xtime>
     ac2:	9009      	str	r0, [sp, #36]	; 0x24
     ac4:	f7ff ff89 	bl	9da <xtime>
     ac8:	9005      	str	r0, [sp, #20]
     aca:	f7ff ff86 	bl	9da <xtime>
     ace:	f8dd e018 	ldr.w	lr, [sp, #24]
     ad2:	9a01      	ldr	r2, [sp, #4]
     ad4:	ea8e 0302 	eor.w	r3, lr, r2
     ad8:	b2db      	uxtb	r3, r3
     ada:	9907      	ldr	r1, [sp, #28]
     adc:	404b      	eors	r3, r1
     ade:	b2db      	uxtb	r3, r3
     ae0:	f8dd c008 	ldr.w	ip, [sp, #8]
     ae4:	ea8c 020a 	eor.w	r2, ip, sl
     ae8:	b2d2      	uxtb	r2, r2
     aea:	4072      	eors	r2, r6
     aec:	b2d2      	uxtb	r2, r2
     aee:	4053      	eors	r3, r2
     af0:	9a04      	ldr	r2, [sp, #16]
     af2:	ea82 0208 	eor.w	r2, r2, r8
     af6:	b2d2      	uxtb	r2, r2
     af8:	406a      	eors	r2, r5
     afa:	b2d2      	uxtb	r2, r2
     afc:	4053      	eors	r3, r2
     afe:	ea80 0204 	eor.w	r2, r0, r4
     b02:	b2d2      	uxtb	r2, r2
     b04:	4053      	eors	r3, r2
     b06:	f8dd c000 	ldr.w	ip, [sp]
     b0a:	f80c 3029 	strb.w	r3, [ip, r9, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
     b0e:	ea81 030b 	eor.w	r3, r1, fp
     b12:	b2da      	uxtb	r2, r3
     b14:	f8dd c008 	ldr.w	ip, [sp, #8]
     b18:	9b03      	ldr	r3, [sp, #12]
     b1a:	ea8c 0303 	eor.w	r3, ip, r3
     b1e:	b2db      	uxtb	r3, r3
     b20:	4073      	eors	r3, r6
     b22:	b2db      	uxtb	r3, r3
     b24:	4053      	eors	r3, r2
     b26:	f8dd c020 	ldr.w	ip, [sp, #32]
     b2a:	ea8c 0208 	eor.w	r2, ip, r8
     b2e:	b2d2      	uxtb	r2, r2
     b30:	406a      	eors	r2, r5
     b32:	b2d2      	uxtb	r2, r2
     b34:	4053      	eors	r3, r2
     b36:	9a05      	ldr	r2, [sp, #20]
     b38:	4062      	eors	r2, r4
     b3a:	b2d2      	uxtb	r2, r2
     b3c:	4042      	eors	r2, r0
     b3e:	b2d2      	uxtb	r2, r2
     b40:	4053      	eors	r3, r2
     b42:	707b      	strb	r3, [r7, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
     b44:	9b01      	ldr	r3, [sp, #4]
     b46:	ea83 030b 	eor.w	r3, r3, fp
     b4a:	b2db      	uxtb	r3, r3
     b4c:	404b      	eors	r3, r1
     b4e:	b2db      	uxtb	r3, r3
     b50:	ea86 020a 	eor.w	r2, r6, sl
     b54:	b2d2      	uxtb	r2, r2
     b56:	4053      	eors	r3, r2
     b58:	4662      	mov	r2, ip
     b5a:	f8dd c010 	ldr.w	ip, [sp, #16]
     b5e:	ea82 020c 	eor.w	r2, r2, ip
     b62:	b2d2      	uxtb	r2, r2
     b64:	406a      	eors	r2, r5
     b66:	b2d2      	uxtb	r2, r2
     b68:	4053      	eors	r3, r2
     b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b6c:	4054      	eors	r4, r2
     b6e:	b2e4      	uxtb	r4, r4
     b70:	4044      	eors	r4, r0
     b72:	b2e4      	uxtb	r4, r4
     b74:	4063      	eors	r3, r4
     b76:	70bb      	strb	r3, [r7, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
     b78:	ea8e 0b0b 	eor.w	fp, lr, fp
     b7c:	fa5f fb8b 	uxtb.w	fp, fp
     b80:	ea81 0b0b 	eor.w	fp, r1, fp
     b84:	fa5f fb8b 	uxtb.w	fp, fp
     b88:	9b03      	ldr	r3, [sp, #12]
     b8a:	ea83 0a0a 	eor.w	sl, r3, sl
     b8e:	fa5f fa8a 	uxtb.w	sl, sl
     b92:	ea86 060a 	eor.w	r6, r6, sl
     b96:	b2f6      	uxtb	r6, r6
     b98:	ea8b 0606 	eor.w	r6, fp, r6
     b9c:	ea85 0508 	eor.w	r5, r5, r8
     ba0:	b2ed      	uxtb	r5, r5
     ba2:	4075      	eors	r5, r6
     ba4:	9b05      	ldr	r3, [sp, #20]
     ba6:	4053      	eors	r3, r2
     ba8:	b2db      	uxtb	r3, r3
     baa:	4058      	eors	r0, r3
     bac:	b2c0      	uxtb	r0, r0
     bae:	4068      	eors	r0, r5
     bb0:	70f8      	strb	r0, [r7, #3]
  for (i = 0; i < 4; ++i)
     bb2:	f109 0901 	add.w	r9, r9, #1
     bb6:	f1b9 0f03 	cmp.w	r9, #3
     bba:	f77f af57 	ble.w	a6c <InvMixColumns+0xe>
  }
}
     bbe:	b00b      	add	sp, #44	; 0x2c
     bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000bc4 <InvSubBytes>:
// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
     bc4:	2100      	movs	r1, #0
     bc6:	2903      	cmp	r1, #3
     bc8:	d81c      	bhi.n	c04 <InvSubBytes+0x40>
  {
    for (j = 0; j < 4; ++j)
     bca:	2300      	movs	r3, #0
     bcc:	2b03      	cmp	r3, #3
     bce:	d816      	bhi.n	bfe <InvSubBytes+0x3a>
{
     bd0:	b500      	push	{lr}
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
     bd2:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
     bd6:	f81c e001 	ldrb.w	lr, [ip, r1]
     bda:	4a0b      	ldr	r2, [pc, #44]	; (c08 <InvSubBytes+0x44>)
     bdc:	4472      	add	r2, lr
     bde:	f892 210c 	ldrb.w	r2, [r2, #268]	; 0x10c
     be2:	f80c 2001 	strb.w	r2, [ip, r1]
    for (j = 0; j < 4; ++j)
     be6:	3301      	adds	r3, #1
     be8:	b2db      	uxtb	r3, r3
     bea:	2b03      	cmp	r3, #3
     bec:	d9f1      	bls.n	bd2 <InvSubBytes+0xe>
  for (i = 0; i < 4; ++i)
     bee:	3101      	adds	r1, #1
     bf0:	b2c9      	uxtb	r1, r1
     bf2:	2903      	cmp	r1, #3
     bf4:	d801      	bhi.n	bfa <InvSubBytes+0x36>
    for (j = 0; j < 4; ++j)
     bf6:	2300      	movs	r3, #0
     bf8:	e7f7      	b.n	bea <InvSubBytes+0x26>
    }
  }
}
     bfa:	f85d fb04 	ldr.w	pc, [sp], #4
  for (i = 0; i < 4; ++i)
     bfe:	3101      	adds	r1, #1
     c00:	b2c9      	uxtb	r1, r1
     c02:	e7e0      	b.n	bc6 <InvSubBytes+0x2>
     c04:	4770      	bx	lr
     c06:	bf00      	nop
     c08:	0000173c 	andeq	r1, r0, ip, lsr r7

00000c0c <InvShiftRows>:
static void InvShiftRows(state_t* state)
{
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
     c0c:	7b43      	ldrb	r3, [r0, #13]
  (*state)[3][1] = (*state)[2][1];
     c0e:	7a42      	ldrb	r2, [r0, #9]
     c10:	7342      	strb	r2, [r0, #13]
  (*state)[2][1] = (*state)[1][1];
     c12:	7942      	ldrb	r2, [r0, #5]
     c14:	7242      	strb	r2, [r0, #9]
  (*state)[1][1] = (*state)[0][1];
     c16:	7842      	ldrb	r2, [r0, #1]
     c18:	7142      	strb	r2, [r0, #5]
  (*state)[0][1] = temp;
     c1a:	7043      	strb	r3, [r0, #1]

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
     c1c:	7883      	ldrb	r3, [r0, #2]
  (*state)[0][2] = (*state)[2][2];
     c1e:	7a82      	ldrb	r2, [r0, #10]
     c20:	7082      	strb	r2, [r0, #2]
  (*state)[2][2] = temp;
     c22:	7283      	strb	r3, [r0, #10]

  temp = (*state)[1][2];
     c24:	7983      	ldrb	r3, [r0, #6]
  (*state)[1][2] = (*state)[3][2];
     c26:	7b82      	ldrb	r2, [r0, #14]
     c28:	7182      	strb	r2, [r0, #6]
  (*state)[3][2] = temp;
     c2a:	7383      	strb	r3, [r0, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
     c2c:	78c3      	ldrb	r3, [r0, #3]
  (*state)[0][3] = (*state)[1][3];
     c2e:	79c2      	ldrb	r2, [r0, #7]
     c30:	70c2      	strb	r2, [r0, #3]
  (*state)[1][3] = (*state)[2][3];
     c32:	7ac2      	ldrb	r2, [r0, #11]
     c34:	71c2      	strb	r2, [r0, #7]
  (*state)[2][3] = (*state)[3][3];
     c36:	7bc2      	ldrb	r2, [r0, #15]
     c38:	72c2      	strb	r2, [r0, #11]
  (*state)[3][3] = temp;
     c3a:	73c3      	strb	r3, [r0, #15]
}
     c3c:	4770      	bx	lr

00000c3e <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
     c3e:	b570      	push	{r4, r5, r6, lr}
     c40:	4605      	mov	r5, r0
     c42:	460e      	mov	r6, r1
  uint8_t round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
     c44:	460a      	mov	r2, r1
     c46:	4601      	mov	r1, r0
     c48:	2000      	movs	r0, #0
     c4a:	f7ff fe6b 	bl	924 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
     c4e:	2401      	movs	r4, #1
     c50:	e009      	b.n	c66 <Cipher+0x28>
    SubBytes(state);
    ShiftRows(state);
    if (round == Nr) {
      break;
    }
    MixColumns(state);
     c52:	4628      	mov	r0, r5
     c54:	f7ff feca 	bl	9ec <MixColumns>
    AddRoundKey(round, state, RoundKey);
     c58:	4632      	mov	r2, r6
     c5a:	4629      	mov	r1, r5
     c5c:	4620      	mov	r0, r4
     c5e:	f7ff fe61 	bl	924 <AddRoundKey>
  for (round = 1; ; ++round)
     c62:	3401      	adds	r4, #1
     c64:	b2e4      	uxtb	r4, r4
    SubBytes(state);
     c66:	4628      	mov	r0, r5
     c68:	f7ff fe7b 	bl	962 <SubBytes>
    ShiftRows(state);
     c6c:	4628      	mov	r0, r5
     c6e:	f7ff fe9b 	bl	9a8 <ShiftRows>
    if (round == Nr) {
     c72:	2c0a      	cmp	r4, #10
     c74:	d1ed      	bne.n	c52 <Cipher+0x14>
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
     c76:	4632      	mov	r2, r6
     c78:	4629      	mov	r1, r5
     c7a:	200a      	movs	r0, #10
     c7c:	f7ff fe52 	bl	924 <AddRoundKey>
}
     c80:	bd70      	pop	{r4, r5, r6, pc}

00000c82 <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
     c82:	b570      	push	{r4, r5, r6, lr}
     c84:	4605      	mov	r5, r0
     c86:	460e      	mov	r6, r1
  uint8_t round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
     c88:	460a      	mov	r2, r1
     c8a:	4601      	mov	r1, r0
     c8c:	200a      	movs	r0, #10
     c8e:	f7ff fe49 	bl	924 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
     c92:	2409      	movs	r4, #9
     c94:	e004      	b.n	ca0 <InvCipher+0x1e>
    InvSubBytes(state);
    AddRoundKey(round, state, RoundKey);
    if (round == 0) {
      break;
    }
    InvMixColumns(state);
     c96:	4628      	mov	r0, r5
     c98:	f7ff fee1 	bl	a5e <InvMixColumns>
  for (round = (Nr - 1); ; --round)
     c9c:	3c01      	subs	r4, #1
     c9e:	b2e4      	uxtb	r4, r4
    InvShiftRows(state);
     ca0:	4628      	mov	r0, r5
     ca2:	f7ff ffb3 	bl	c0c <InvShiftRows>
    InvSubBytes(state);
     ca6:	4628      	mov	r0, r5
     ca8:	f7ff ff8c 	bl	bc4 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
     cac:	4632      	mov	r2, r6
     cae:	4629      	mov	r1, r5
     cb0:	4620      	mov	r0, r4
     cb2:	f7ff fe37 	bl	924 <AddRoundKey>
    if (round == 0) {
     cb6:	2c00      	cmp	r4, #0
     cb8:	d1ed      	bne.n	c96 <InvCipher+0x14>
  }

}
     cba:	bd70      	pop	{r4, r5, r6, pc}

00000cbc <XorWithIv>:


static void XorWithIv(uint8_t* buf, const uint8_t* Iv)
{
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
     cbc:	2300      	movs	r3, #0
     cbe:	e007      	b.n	cd0 <XorWithIv+0x14>
  {
    buf[i] ^= Iv[i];
     cc0:	5cca      	ldrb	r2, [r1, r3]
     cc2:	f810 c003 	ldrb.w	ip, [r0, r3]
     cc6:	ea82 020c 	eor.w	r2, r2, ip
     cca:	54c2      	strb	r2, [r0, r3]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
     ccc:	3301      	adds	r3, #1
     cce:	b2db      	uxtb	r3, r3
     cd0:	2b0f      	cmp	r3, #15
     cd2:	d9f5      	bls.n	cc0 <XorWithIv+0x4>
  }
}
     cd4:	4770      	bx	lr

00000cd6 <AES_init_ctx>:
{
     cd6:	b508      	push	{r3, lr}
  KeyExpansion(ctx->RoundKey, key);
     cd8:	f7ff fdaa 	bl	830 <KeyExpansion>
}
     cdc:	bd08      	pop	{r3, pc}

00000cde <AES_init_ctx_iv>:
{
     cde:	b538      	push	{r3, r4, r5, lr}
     ce0:	4604      	mov	r4, r0
     ce2:	4615      	mov	r5, r2
  KeyExpansion(ctx->RoundKey, key);
     ce4:	f7ff fda4 	bl	830 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     ce8:	2210      	movs	r2, #16
     cea:	4629      	mov	r1, r5
     cec:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
     cf0:	f000 f989 	bl	1006 <memcpy>
}
     cf4:	bd38      	pop	{r3, r4, r5, pc}

00000cf6 <AES_ctx_set_iv>:
{
     cf6:	b508      	push	{r3, lr}
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     cf8:	2210      	movs	r2, #16
     cfa:	30b0      	adds	r0, #176	; 0xb0
     cfc:	f000 f983 	bl	1006 <memcpy>
}
     d00:	bd08      	pop	{r3, pc}

00000d02 <AES_ECB_encrypt>:
{
     d02:	b508      	push	{r3, lr}
     d04:	460b      	mov	r3, r1
  Cipher((state_t*)buf, ctx->RoundKey);
     d06:	4601      	mov	r1, r0
     d08:	4618      	mov	r0, r3
     d0a:	f7ff ff98 	bl	c3e <Cipher>
}
     d0e:	bd08      	pop	{r3, pc}

00000d10 <AES_ECB_decrypt>:
{
     d10:	b508      	push	{r3, lr}
     d12:	460b      	mov	r3, r1
  InvCipher((state_t*)buf, ctx->RoundKey);
     d14:	4601      	mov	r1, r0
     d16:	4618      	mov	r0, r3
     d18:	f7ff ffb3 	bl	c82 <InvCipher>
}
     d1c:	bd08      	pop	{r3, pc}

00000d1e <AES_CBC_encrypt_buffer>:

void AES_CBC_encrypt_buffer(struct AES_ctx *ctx, uint8_t* buf, size_t length)
{
     d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d22:	4606      	mov	r6, r0
     d24:	460c      	mov	r4, r1
     d26:	4617      	mov	r7, r2
  size_t i;
  uint8_t *Iv = ctx->Iv;
     d28:	f100 08b0 	add.w	r8, r0, #176	; 0xb0
     d2c:	4641      	mov	r1, r8
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d2e:	2500      	movs	r5, #0
     d30:	e009      	b.n	d46 <AES_CBC_encrypt_buffer+0x28>
  {
    XorWithIv(buf, Iv);
     d32:	4620      	mov	r0, r4
     d34:	f7ff ffc2 	bl	cbc <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
     d38:	4631      	mov	r1, r6
     d3a:	4620      	mov	r0, r4
     d3c:	f7ff ff7f 	bl	c3e <Cipher>
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d40:	3510      	adds	r5, #16
    Iv = buf;
     d42:	4621      	mov	r1, r4
    buf += AES_BLOCKLEN;
     d44:	3410      	adds	r4, #16
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d46:	42bd      	cmp	r5, r7
     d48:	d3f3      	bcc.n	d32 <AES_CBC_encrypt_buffer+0x14>
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
     d4a:	2210      	movs	r2, #16
     d4c:	4640      	mov	r0, r8
     d4e:	f000 f95a 	bl	1006 <memcpy>
}
     d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000d56 <AES_CBC_decrypt_buffer>:

void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
     d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d5a:	b084      	sub	sp, #16
     d5c:	4607      	mov	r7, r0
     d5e:	460c      	mov	r4, r1
     d60:	4690      	mov	r8, r2
  size_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d62:	2500      	movs	r5, #0
     d64:	e015      	b.n	d92 <AES_CBC_decrypt_buffer+0x3c>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
     d66:	2210      	movs	r2, #16
     d68:	4621      	mov	r1, r4
     d6a:	4668      	mov	r0, sp
     d6c:	f000 f94b 	bl	1006 <memcpy>
    InvCipher((state_t*)buf, ctx->RoundKey);
     d70:	4639      	mov	r1, r7
     d72:	4620      	mov	r0, r4
     d74:	f7ff ff85 	bl	c82 <InvCipher>
    XorWithIv(buf, ctx->Iv);
     d78:	f107 06b0 	add.w	r6, r7, #176	; 0xb0
     d7c:	4631      	mov	r1, r6
     d7e:	4620      	mov	r0, r4
     d80:	f7ff ff9c 	bl	cbc <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
     d84:	2210      	movs	r2, #16
     d86:	4669      	mov	r1, sp
     d88:	4630      	mov	r0, r6
     d8a:	f000 f93c 	bl	1006 <memcpy>
    buf += AES_BLOCKLEN;
     d8e:	3410      	adds	r4, #16
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d90:	3510      	adds	r5, #16
     d92:	4545      	cmp	r5, r8
     d94:	d3e7      	bcc.n	d66 <AES_CBC_decrypt_buffer+0x10>
  }

}
     d96:	b004      	add	sp, #16
     d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000d9c <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
     d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d9e:	b085      	sub	sp, #20
     da0:	4607      	mov	r7, r0
     da2:	460d      	mov	r5, r1
     da4:	4616      	mov	r6, r2
  uint8_t buffer[AES_BLOCKLEN];
  
  size_t i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     da6:	2310      	movs	r3, #16
     da8:	2400      	movs	r4, #0
     daa:	e013      	b.n	dd4 <AES_CTR_xcrypt_buffer+0x38>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
	{
          ctx->Iv[bi] = 0;
     dac:	18fa      	adds	r2, r7, r3
     dae:	2100      	movs	r1, #0
     db0:	f882 10b0 	strb.w	r1, [r2, #176]	; 0xb0
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     db4:	3b01      	subs	r3, #1
     db6:	e01c      	b.n	df2 <AES_CTR_xcrypt_buffer+0x56>
          continue;
        } 
        ctx->Iv[bi] += 1;
        break;   
      }
      bi = 0;
     db8:	2300      	movs	r3, #0
    }

    buf[i] = (buf[i] ^ buffer[bi]);
     dba:	f815 c004 	ldrb.w	ip, [r5, r4]
     dbe:	f103 0210 	add.w	r2, r3, #16
     dc2:	446a      	add	r2, sp
     dc4:	f812 ec10 	ldrb.w	lr, [r2, #-16]
     dc8:	ea8c 0c0e 	eor.w	ip, ip, lr
     dcc:	f805 c004 	strb.w	ip, [r5, r4]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     dd0:	3401      	adds	r4, #1
     dd2:	3301      	adds	r3, #1
     dd4:	42b4      	cmp	r4, r6
     dd6:	d219      	bcs.n	e0c <AES_CTR_xcrypt_buffer+0x70>
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
     dd8:	2b10      	cmp	r3, #16
     dda:	d1ee      	bne.n	dba <AES_CTR_xcrypt_buffer+0x1e>
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
     ddc:	2210      	movs	r2, #16
     dde:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
     de2:	4668      	mov	r0, sp
     de4:	f000 f90f 	bl	1006 <memcpy>
      Cipher((state_t*)buffer,ctx->RoundKey);
     de8:	4639      	mov	r1, r7
     dea:	4668      	mov	r0, sp
     dec:	f7ff ff27 	bl	c3e <Cipher>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     df0:	230f      	movs	r3, #15
     df2:	2b00      	cmp	r3, #0
     df4:	dbe0      	blt.n	db8 <AES_CTR_xcrypt_buffer+0x1c>
        if (ctx->Iv[bi] == 255)
     df6:	18fa      	adds	r2, r7, r3
     df8:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
     dfc:	2aff      	cmp	r2, #255	; 0xff
     dfe:	d0d5      	beq.n	dac <AES_CTR_xcrypt_buffer+0x10>
        ctx->Iv[bi] += 1;
     e00:	443b      	add	r3, r7
     e02:	3201      	adds	r2, #1
     e04:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
      bi = 0;
     e08:	2300      	movs	r3, #0
        break;   
     e0a:	e7d6      	b.n	dba <AES_CTR_xcrypt_buffer+0x1e>
  }
}
     e0c:	b005      	add	sp, #20
     e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000e10 <atoi>:
 * limitations under the License.
 **/

#include "a2i.h"

int atoi(const char* str) {
     e10:	4601      	mov	r1, r0
  int res = 0;
  for (int i = 0; str[i] != '\0'; ++i) {
     e12:	2200      	movs	r2, #0
  int res = 0;
     e14:	4610      	mov	r0, r2
  for (int i = 0; str[i] != '\0'; ++i) {
     e16:	e005      	b.n	e24 <atoi+0x14>
    res = res * 10 + str[i] - '0';
     e18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     e1c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
     e20:	3830      	subs	r0, #48	; 0x30
  for (int i = 0; str[i] != '\0'; ++i) {
     e22:	3201      	adds	r2, #1
     e24:	5c8b      	ldrb	r3, [r1, r2]
     e26:	2b00      	cmp	r3, #0
     e28:	d1f6      	bne.n	e18 <atoi+0x8>
  }
  return res;
}
     e2a:	4770      	bx	lr

00000e2c <atoh>:

uint32_t atoh(const char* str) {
     e2c:	4684      	mov	ip, r0
  uint32_t hex = 0;
  uint32_t value = 0;

  for (uint32_t i = 0; str[i] != '\0'; i++) {
     e2e:	2100      	movs	r1, #0
  uint32_t hex = 0;
     e30:	4608      	mov	r0, r1
  for (uint32_t i = 0; str[i] != '\0'; i++) {
     e32:	e008      	b.n	e46 <atoh+0x1a>
    if (str[i] >= '0' && str[i] <= '9') {
      value = str[i] - '0';
    } else if (str[i] >= 'a' && str[i] <= 'f') {
     e34:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
     e38:	b2d2      	uxtb	r2, r2
     e3a:	2a05      	cmp	r2, #5
     e3c:	d80d      	bhi.n	e5a <atoh+0x2e>
      value = str[i] - 'a' + 10;
     e3e:	3b57      	subs	r3, #87	; 0x57
      continue;
    }

    // make space for the new nibble on the right
    hex = hex << 4;
    hex |= value;
     e40:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
  for (uint32_t i = 0; str[i] != '\0'; i++) {
     e44:	3101      	adds	r1, #1
     e46:	f81c 3001 	ldrb.w	r3, [ip, r1]
     e4a:	b16b      	cbz	r3, e68 <atoh+0x3c>
    if (str[i] >= '0' && str[i] <= '9') {
     e4c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
     e50:	b2d2      	uxtb	r2, r2
     e52:	2a09      	cmp	r2, #9
     e54:	d8ee      	bhi.n	e34 <atoh+0x8>
      value = str[i] - '0';
     e56:	3b30      	subs	r3, #48	; 0x30
     e58:	e7f2      	b.n	e40 <atoh+0x14>
    } else if (str[i] >= 'A' && str[i] <= 'F') {
     e5a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     e5e:	b2d2      	uxtb	r2, r2
     e60:	2a05      	cmp	r2, #5
     e62:	d8ef      	bhi.n	e44 <atoh+0x18>
      value = str[i] - 'A' + 10;
     e64:	3b37      	subs	r3, #55	; 0x37
     e66:	e7eb      	b.n	e40 <atoh+0x14>
  }

  return hex;
}
     e68:	4770      	bx	lr
	...

00000e6c <r32>:
/*
 * Memory manipulation utilities can be skipped to reduce
 * final binary size. Skip if SHELL_NO_UTILS is defined.
 */
#ifndef SHELL_NO_UTILS
int r32(int argc, char *argv[]) {
     e6c:	b508      	push	{r3, lr}
  if (argc < 2) {
     e6e:	2801      	cmp	r0, #1
     e70:	dd09      	ble.n	e86 <r32+0x1a>
    printf("Usage: %s <address> (in hex)\n", argv[0]);
    return -1;
  }

  uint32_t addr = atoh(argv[1]);
     e72:	6848      	ldr	r0, [r1, #4]
     e74:	f7ff ffda 	bl	e2c <atoh>
     e78:	4601      	mov	r1, r0
  uint32_t data;

  data = reg32(addr);
     e7a:	6802      	ldr	r2, [r0, #0]

  printf("0x%x: 0x%x\n", addr, data);
     e7c:	4805      	ldr	r0, [pc, #20]	; (e94 <r32+0x28>)
     e7e:	f7ff fc57 	bl	730 <printf>
  return 0;
     e82:	2000      	movs	r0, #0
}
     e84:	bd08      	pop	{r3, pc}
    printf("Usage: %s <address> (in hex)\n", argv[0]);
     e86:	6809      	ldr	r1, [r1, #0]
     e88:	4803      	ldr	r0, [pc, #12]	; (e98 <r32+0x2c>)
     e8a:	f7ff fc51 	bl	730 <printf>
    return -1;
     e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     e92:	e7f7      	b.n	e84 <r32+0x18>
     e94:	00001968 	andeq	r1, r0, r8, ror #18
     e98:	00001948 	andeq	r1, r0, r8, asr #18

00000e9c <w32>:

int w32(int argc, char *argv[]) {
     e9c:	b538      	push	{r3, r4, r5, lr}
     e9e:	460c      	mov	r4, r1
  if (argc < 3) {
     ea0:	2802      	cmp	r0, #2
     ea2:	dd09      	ble.n	eb8 <w32+0x1c>
    printf("Usage: %s <address> (in hex) <value> (in hex)\n", argv[0]);
    return -1;
  }
  uint32_t addr = atoh(argv[1]);
     ea4:	6848      	ldr	r0, [r1, #4]
     ea6:	f7ff ffc1 	bl	e2c <atoh>
     eaa:	4605      	mov	r5, r0
  uint32_t data = atoh(argv[2]);
     eac:	68a0      	ldr	r0, [r4, #8]
     eae:	f7ff ffbd 	bl	e2c <atoh>
  reg32(addr) = data;
     eb2:	6028      	str	r0, [r5, #0]

  return 0;
     eb4:	2000      	movs	r0, #0
}
     eb6:	bd38      	pop	{r3, r4, r5, pc}
    printf("Usage: %s <address> (in hex) <value> (in hex)\n", argv[0]);
     eb8:	6809      	ldr	r1, [r1, #0]
     eba:	4803      	ldr	r0, [pc, #12]	; (ec8 <w32+0x2c>)
     ebc:	f7ff fc38 	bl	730 <printf>
    return -1;
     ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     ec4:	e7f7      	b.n	eb6 <w32+0x1a>
     ec6:	bf00      	nop
     ec8:	00001974 	andeq	r1, r0, r4, ror r9

00000ecc <read_mem>:

int read_mem(int argc, char *argv[]) {
     ecc:	b570      	push	{r4, r5, r6, lr}
     ece:	460d      	mov	r5, r1
  if (argc < 3) {
     ed0:	2802      	cmp	r0, #2
     ed2:	dd09      	ble.n	ee8 <read_mem+0x1c>
    printf("Usage: %s <address> (in hex) <num_words> (in decimal)\n", argv[0]);
    return -1;
  }

  uint32_t addr = atoh(argv[1]);
     ed4:	6848      	ldr	r0, [r1, #4]
     ed6:	f7ff ffa9 	bl	e2c <atoh>
     eda:	4604      	mov	r4, r0
  uint32_t length = atoi(argv[2]);
     edc:	68a8      	ldr	r0, [r5, #8]
     ede:	f7ff ff97 	bl	e10 <atoi>
     ee2:	4606      	mov	r6, r0

  for (uint32_t i = 0, data = 0; i < length; i++) {
     ee4:	2500      	movs	r5, #0
     ee6:	e00d      	b.n	f04 <read_mem+0x38>
    printf("Usage: %s <address> (in hex) <num_words> (in decimal)\n", argv[0]);
     ee8:	6809      	ldr	r1, [r1, #0]
     eea:	4808      	ldr	r0, [pc, #32]	; (f0c <read_mem+0x40>)
     eec:	f7ff fc20 	bl	730 <printf>
    return -1;
     ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     ef4:	e009      	b.n	f0a <read_mem+0x3e>
    data = reg32(addr);
     ef6:	6822      	ldr	r2, [r4, #0]
    printf("0x%x: 0x%x\n", addr, data);
     ef8:	4621      	mov	r1, r4
     efa:	4805      	ldr	r0, [pc, #20]	; (f10 <read_mem+0x44>)
     efc:	f7ff fc18 	bl	730 <printf>

    addr += 4;
     f00:	3404      	adds	r4, #4
  for (uint32_t i = 0, data = 0; i < length; i++) {
     f02:	3501      	adds	r5, #1
     f04:	42b5      	cmp	r5, r6
     f06:	d3f6      	bcc.n	ef6 <read_mem+0x2a>
  }

  return 0;
     f08:	2000      	movs	r0, #0
}
     f0a:	bd70      	pop	{r4, r5, r6, pc}
     f0c:	000019a4 	andeq	r1, r0, r4, lsr #19
     f10:	00001968 	andeq	r1, r0, r8, ror #18

00000f14 <w32_bit>:

#ifndef SHELL_NO_BIT_UTILS
int w32_bit(int argc, char *argv[])
{
     f14:	b570      	push	{r4, r5, r6, lr}
     f16:	460c      	mov	r4, r1
  if (argc < 4) {
     f18:	2803      	cmp	r0, #3
     f1a:	dd22      	ble.n	f62 <w32_bit+0x4e>
    goto usage;
  }

  uint32_t addr = atoh(argv[1]);
     f1c:	6848      	ldr	r0, [r1, #4]
     f1e:	f7ff ff85 	bl	e2c <atoh>
     f22:	4606      	mov	r6, r0
  uint32_t bit_loc = atoi(argv[2]);
     f24:	68a0      	ldr	r0, [r4, #8]
     f26:	f7ff ff73 	bl	e10 <atoi>
     f2a:	4605      	mov	r5, r0
  uint32_t bit_val = atoi(argv[3]);
     f2c:	68e0      	ldr	r0, [r4, #12]
     f2e:	f7ff ff6f 	bl	e10 <atoi>
     f32:	4603      	mov	r3, r0

  if (bit_loc > 31) {
     f34:	2d1f      	cmp	r5, #31
     f36:	d80d      	bhi.n	f54 <w32_bit+0x40>
    printf("Error: Invalid bit location argument\n");
    goto usage;
  }

  if (bit_val != 0 && bit_val != 1) {
     f38:	2801      	cmp	r0, #1
     f3a:	d80f      	bhi.n	f5c <w32_bit+0x48>
    printf("Error: Invalid bit value argument\n");
    goto usage;
  }

  uint32_t data = reg32(addr);
     f3c:	6832      	ldr	r2, [r6, #0]
  data = data | (bit_val << bit_loc);
     f3e:	40a8      	lsls	r0, r5
     f40:	4310      	orrs	r0, r2
  data = data & ~(!bit_val << bit_loc);
     f42:	fab3 f383 	clz	r3, r3
     f46:	095b      	lsrs	r3, r3, #5
     f48:	40ab      	lsls	r3, r5
     f4a:	ea20 0303 	bic.w	r3, r0, r3
  reg32(addr) = data;
     f4e:	6033      	str	r3, [r6, #0]

  return 0;
     f50:	2000      	movs	r0, #0
usage:
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)> <bit_value(0 or 1)>\n", argv[0]);
  return -1;
}
     f52:	bd70      	pop	{r4, r5, r6, pc}
    printf("Error: Invalid bit location argument\n");
     f54:	4806      	ldr	r0, [pc, #24]	; (f70 <w32_bit+0x5c>)
     f56:	f7ff fbeb 	bl	730 <printf>
    goto usage;
     f5a:	e002      	b.n	f62 <w32_bit+0x4e>
    printf("Error: Invalid bit value argument\n");
     f5c:	4805      	ldr	r0, [pc, #20]	; (f74 <w32_bit+0x60>)
     f5e:	f7ff fbe7 	bl	730 <printf>
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)> <bit_value(0 or 1)>\n", argv[0]);
     f62:	6821      	ldr	r1, [r4, #0]
     f64:	4804      	ldr	r0, [pc, #16]	; (f78 <w32_bit+0x64>)
     f66:	f7ff fbe3 	bl	730 <printf>
  return -1;
     f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     f6e:	e7f0      	b.n	f52 <w32_bit+0x3e>
     f70:	000019dc 	ldrdeq	r1, [r0], -ip
     f74:	00001a04 	andeq	r1, r0, r4, lsl #20
     f78:	00001a28 	andeq	r1, r0, r8, lsr #20

00000f7c <r32_bit>:

int r32_bit(int argc, char *argv[])
{
     f7c:	b538      	push	{r3, r4, r5, lr}
     f7e:	460c      	mov	r4, r1
  if (argc < 3) {
     f80:	2802      	cmp	r0, #2
     f82:	dd16      	ble.n	fb2 <r32_bit+0x36>
    goto usage;
  }

  uint32_t addr = atoh(argv[1]);
     f84:	6848      	ldr	r0, [r1, #4]
     f86:	f7ff ff51 	bl	e2c <atoh>
     f8a:	4605      	mov	r5, r0
  uint32_t bit_loc = atoi(argv[2]);
     f8c:	68a0      	ldr	r0, [r4, #8]
     f8e:	f7ff ff3f 	bl	e10 <atoi>
     f92:	4601      	mov	r1, r0

  if (bit_loc > 31) {
     f94:	281f      	cmp	r0, #31
     f96:	d809      	bhi.n	fac <r32_bit+0x30>
    printf("Error: Invalid bit location argument\n");
    goto usage;
  }

  uint32_t data = reg32(addr);
     f98:	682b      	ldr	r3, [r5, #0]
  uint32_t bit_val = (data >> bit_loc) & 0x1;
     f9a:	40c3      	lsrs	r3, r0
  printf("Bit %u @ 0x%08x: %u\n", bit_loc, addr, bit_val);
     f9c:	f003 0301 	and.w	r3, r3, #1
     fa0:	462a      	mov	r2, r5
     fa2:	4807      	ldr	r0, [pc, #28]	; (fc0 <r32_bit+0x44>)
     fa4:	f7ff fbc4 	bl	730 <printf>
  return 0;
     fa8:	2000      	movs	r0, #0

usage:
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)\n", argv[0]);
  return -1;
}
     faa:	bd38      	pop	{r3, r4, r5, pc}
    printf("Error: Invalid bit location argument\n");
     fac:	4805      	ldr	r0, [pc, #20]	; (fc4 <r32_bit+0x48>)
     fae:	f7ff fbbf 	bl	730 <printf>
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)\n", argv[0]);
     fb2:	6821      	ldr	r1, [r4, #0]
     fb4:	4804      	ldr	r0, [pc, #16]	; (fc8 <r32_bit+0x4c>)
     fb6:	f7ff fbbb 	bl	730 <printf>
  return -1;
     fba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     fbe:	e7f4      	b.n	faa <r32_bit+0x2e>
     fc0:	00001a84 	andeq	r1, r0, r4, lsl #21
     fc4:	000019dc 	ldrdeq	r1, [r0], -ip
     fc8:	00001a9c 	muleq	r0, ip, sl

00000fcc <strlen>:
 * limitations under the License.
 **/

#include "string.h"

size_t strlen(const char *str) {
     fcc:	4602      	mov	r2, r0
  size_t len = 0;
     fce:	2000      	movs	r0, #0
  while (str[len]) {
     fd0:	e000      	b.n	fd4 <strlen+0x8>
    len++;
     fd2:	3001      	adds	r0, #1
  while (str[len]) {
     fd4:	5c13      	ldrb	r3, [r2, r0]
     fd6:	2b00      	cmp	r3, #0
     fd8:	d1fb      	bne.n	fd2 <strlen+0x6>
  }
  return len;
}
     fda:	4770      	bx	lr

00000fdc <strcmp>:

int strcmp(const char *str1, const char *str2) {
  while (*str1 && (*str1 == *str2)) {
     fdc:	e001      	b.n	fe2 <strcmp+0x6>
    str1++;
     fde:	3001      	adds	r0, #1
    str2++;
     fe0:	3101      	adds	r1, #1
  while (*str1 && (*str1 == *str2)) {
     fe2:	7803      	ldrb	r3, [r0, #0]
     fe4:	b113      	cbz	r3, fec <strcmp+0x10>
     fe6:	780a      	ldrb	r2, [r1, #0]
     fe8:	4293      	cmp	r3, r2
     fea:	d0f8      	beq.n	fde <strcmp+0x2>
  }
  return *str1 - *str2;
     fec:	7808      	ldrb	r0, [r1, #0]
}
     fee:	1a18      	subs	r0, r3, r0
     ff0:	4770      	bx	lr

00000ff2 <strcpy>:

char *strcpy(char *str1, const char *str2) {
  while (*str2) {
     ff2:	e002      	b.n	ffa <strcpy+0x8>
    *(str1++) = *(str2++);
     ff4:	3101      	adds	r1, #1
     ff6:	f800 3b01 	strb.w	r3, [r0], #1
  while (*str2) {
     ffa:	780b      	ldrb	r3, [r1, #0]
     ffc:	2b00      	cmp	r3, #0
     ffe:	d1f9      	bne.n	ff4 <strcpy+0x2>
  }
  *str1 = '\0';
    1000:	7003      	strb	r3, [r0, #0]
  return 0;
}
    1002:	4618      	mov	r0, r3
    1004:	4770      	bx	lr

00001006 <memcpy>:

void *memcpy(void *dest, const void *src, size_t size) {
  size_t i;
  char *src_char = (char *)src;
  char *dest_char = (char *)dest;
  for (i = 0; i < size; i++) {
    1006:	2300      	movs	r3, #0
    1008:	e004      	b.n	1014 <memcpy+0xe>
    dest_char[i] = src_char[i];
    100a:	f811 c003 	ldrb.w	ip, [r1, r3]
    100e:	f800 c003 	strb.w	ip, [r0, r3]
  for (i = 0; i < size; i++) {
    1012:	3301      	adds	r3, #1
    1014:	4293      	cmp	r3, r2
    1016:	d3f8      	bcc.n	100a <memcpy+0x4>
  }
  return 0;
}
    1018:	2000      	movs	r0, #0
    101a:	4770      	bx	lr

0000101c <memset>:

void *memset(void *dest, int val, size_t size) {
  size_t i;
  char *dest_char = (char *)dest;
  for (i = 0; i < size; i++) {
    101c:	2300      	movs	r3, #0
    101e:	e001      	b.n	1024 <memset+0x8>
    dest_char[i] = val;
    1020:	54c1      	strb	r1, [r0, r3]
  for (i = 0; i < size; i++) {
    1022:	3301      	adds	r3, #1
    1024:	4293      	cmp	r3, r2
    1026:	d3fb      	bcc.n	1020 <memset+0x4>
  }

  return 0;
}
    1028:	2000      	movs	r0, #0
    102a:	4770      	bx	lr

0000102c <initial_setup>:
         "@" BUILD_HOST "] - " __DATE__ " - " __TIME__ "\n");
  return 0;
}


void __attribute__((optimize("O0"), weak)) initial_setup(void) {
    102c:	b580      	push	{r7, lr}
    102e:	b082      	sub	sp, #8
    1030:	af00      	add	r7, sp, #0
   * and zero the .bss section. This helps keep the user/custom
   * linker script and makefiles free from special variables to be declared.
   * Less burden on the user.
   */
  extern char _etext, _data, _edata, _bss, _ebss;
  char *src = &_etext, *dst = &_data;
    1032:	4b14      	ldr	r3, [pc, #80]	; (1084 <initial_setup+0x58>)
    1034:	607b      	str	r3, [r7, #4]
    1036:	4b14      	ldr	r3, [pc, #80]	; (1088 <initial_setup+0x5c>)
    1038:	603b      	str	r3, [r7, #0]
  /**
   * Copy over the data section from ROM to RAM.
   * In case of RAM based target, we skip this since
   * src and dst would point to same location in RAM
   */
  if (dst != src)
    103a:	683a      	ldr	r2, [r7, #0]
    103c:	687b      	ldr	r3, [r7, #4]
    103e:	429a      	cmp	r2, r3
    1040:	d00c      	beq.n	105c <initial_setup+0x30>
    while (dst < &_edata) *(dst++) = *(src++);
    1042:	e007      	b.n	1054 <initial_setup+0x28>
    1044:	687a      	ldr	r2, [r7, #4]
    1046:	1c53      	adds	r3, r2, #1
    1048:	607b      	str	r3, [r7, #4]
    104a:	683b      	ldr	r3, [r7, #0]
    104c:	1c59      	adds	r1, r3, #1
    104e:	6039      	str	r1, [r7, #0]
    1050:	7812      	ldrb	r2, [r2, #0]
    1052:	701a      	strb	r2, [r3, #0]
    1054:	683b      	ldr	r3, [r7, #0]
    1056:	4a0d      	ldr	r2, [pc, #52]	; (108c <initial_setup+0x60>)
    1058:	4293      	cmp	r3, r2
    105a:	d3f3      	bcc.n	1044 <initial_setup+0x18>

  /* Clear .bss*/
  for (dst = &_bss; dst < &_ebss; dst++) *dst = 0;
    105c:	4b0c      	ldr	r3, [pc, #48]	; (1090 <initial_setup+0x64>)
    105e:	603b      	str	r3, [r7, #0]
    1060:	e005      	b.n	106e <initial_setup+0x42>
    1062:	683b      	ldr	r3, [r7, #0]
    1064:	2200      	movs	r2, #0
    1066:	701a      	strb	r2, [r3, #0]
    1068:	683b      	ldr	r3, [r7, #0]
    106a:	3301      	adds	r3, #1
    106c:	603b      	str	r3, [r7, #0]
    106e:	683b      	ldr	r3, [r7, #0]
    1070:	4a08      	ldr	r2, [pc, #32]	; (1094 <initial_setup+0x68>)
    1072:	4293      	cmp	r3, r2
    1074:	d3f5      	bcc.n	1062 <initial_setup+0x36>
   *   uart_init();
   *   set_read_char(uart_getchar);
   *   set_write_char(uart_putchar);
   * }
   */
  platform_init();
    1076:	f7ff fa39 	bl	4ec <platform_init>
}
    107a:	bf00      	nop
    107c:	3708      	adds	r7, #8
    107e:	46bd      	mov	sp, r7
    1080:	bd80      	pop	{r7, pc}
    1082:	bf00      	nop
    1084:	0000165c 	andeq	r1, r0, ip, asr r6
    1088:	20000000 	andcs	r0, r0, r0
    108c:	20000001 	andcs	r0, r0, r1
    1090:	20000004 	andcs	r0, r0, r4
    1094:	20000080 	andcs	r0, r0, r0, lsl #1

00001098 <delete>:
static void delete(void) {
    1098:	b510      	push	{r4, lr}
  __write_char__(BACK_SPACE);
    109a:	4c05      	ldr	r4, [pc, #20]	; (10b0 <delete+0x18>)
    109c:	6823      	ldr	r3, [r4, #0]
    109e:	2008      	movs	r0, #8
    10a0:	4798      	blx	r3
  __write_char__(SPACE);
    10a2:	6823      	ldr	r3, [r4, #0]
    10a4:	2020      	movs	r0, #32
    10a6:	4798      	blx	r3
  __write_char__(BACK_SPACE);
    10a8:	6823      	ldr	r3, [r4, #0]
    10aa:	2008      	movs	r0, #8
    10ac:	4798      	blx	r3
}
    10ae:	bd10      	pop	{r4, pc}
    10b0:	20000024 	andcs	r0, r0, r4, lsr #32

000010b4 <clear_prompt>:
static void clear_prompt(int char_count) {
    10b4:	b510      	push	{r4, lr}
    10b6:	4604      	mov	r4, r0
  while (char_count) {
    10b8:	e002      	b.n	10c0 <clear_prompt+0xc>
    delete ();
    10ba:	f7ff ffed 	bl	1098 <delete>
    char_count--;
    10be:	3c01      	subs	r4, #1
  while (char_count) {
    10c0:	2c00      	cmp	r4, #0
    10c2:	d1fa      	bne.n	10ba <clear_prompt+0x6>
}
    10c4:	bd10      	pop	{r4, pc}

000010c6 <exec_auto_cmds>:
static void exec_auto_cmds(void) {
    10c6:	b510      	push	{r4, lr}
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    10c8:	2400      	movs	r4, #0
    10ca:	e004      	b.n	10d6 <exec_auto_cmds+0x10>
    auto_load[i].command(0, NULL);
    10cc:	688b      	ldr	r3, [r1, #8]
    10ce:	2100      	movs	r1, #0
    10d0:	4608      	mov	r0, r1
    10d2:	4798      	blx	r3
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    10d4:	3401      	adds	r4, #1
    10d6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    10da:	0093      	lsls	r3, r2, #2
    10dc:	4a02      	ldr	r2, [pc, #8]	; (10e8 <exec_auto_cmds+0x22>)
    10de:	1899      	adds	r1, r3, r2
    10e0:	589b      	ldr	r3, [r3, r2]
    10e2:	2b00      	cmp	r3, #0
    10e4:	d1f2      	bne.n	10cc <exec_auto_cmds+0x6>
}
    10e6:	bd10      	pop	{r4, pc}
    10e8:	000016cc 	andeq	r1, r0, ip, asr #13

000010ec <show_history>:
static int show_history(int argc, char **argv) {
    10ec:	b538      	push	{r3, r4, r5, lr}
  uint32_t end_index = total_num_commands-1;
    10ee:	4b0c      	ldr	r3, [pc, #48]	; (1120 <show_history+0x34>)
    10f0:	685d      	ldr	r5, [r3, #4]
    10f2:	3d01      	subs	r5, #1
  if (total_num_commands > NUM_HISTORY_ENTRIES) {
    10f4:	685b      	ldr	r3, [r3, #4]
    10f6:	2b02      	cmp	r3, #2
    10f8:	dd03      	ble.n	1102 <show_history+0x16>
    beg_index = total_num_commands - NUM_HISTORY_ENTRIES;
    10fa:	4b09      	ldr	r3, [pc, #36]	; (1120 <show_history+0x34>)
    10fc:	685c      	ldr	r4, [r3, #4]
    10fe:	3c02      	subs	r4, #2
    1100:	e00a      	b.n	1118 <show_history+0x2c>
  uint32_t beg_index = 0;
    1102:	2400      	movs	r4, #0
    1104:	e008      	b.n	1118 <show_history+0x2c>
    printf("%s\n", cmd_history[index % NUM_HISTORY_ENTRIES]);
    1106:	f004 0101 	and.w	r1, r4, #1
    110a:	4b06      	ldr	r3, [pc, #24]	; (1124 <show_history+0x38>)
    110c:	eb03 1141 	add.w	r1, r3, r1, lsl #5
    1110:	4805      	ldr	r0, [pc, #20]	; (1128 <show_history+0x3c>)
    1112:	f7ff fb0d 	bl	730 <printf>
  for (uint32_t index = beg_index; index <= end_index; ++index) {
    1116:	3401      	adds	r4, #1
    1118:	42ac      	cmp	r4, r5
    111a:	d9f4      	bls.n	1106 <show_history+0x1a>
}
    111c:	2000      	movs	r0, #0
    111e:	bd38      	pop	{r3, r4, r5, pc}
    1120:	20000024 	andcs	r0, r0, r4, lsr #32
    1124:	2000002c 	andcs	r0, r0, ip, lsr #32
    1128:	00001bac 	andeq	r1, r0, ip, lsr #23

0000112c <cmd_exec_status>:
  }

  return 0;
}

int cmd_exec_status(int argc, char **argv) {
    112c:	b508      	push	{r3, lr}
  printf("%d\n", __cmd_exec_status);
    112e:	4b03      	ldr	r3, [pc, #12]	; (113c <cmd_exec_status+0x10>)
    1130:	6c99      	ldr	r1, [r3, #72]	; 0x48
    1132:	4803      	ldr	r0, [pc, #12]	; (1140 <cmd_exec_status+0x14>)
    1134:	f7ff fafc 	bl	730 <printf>
  return 0;
}
    1138:	2000      	movs	r0, #0
    113a:	bd08      	pop	{r3, pc}
    113c:	20000024 	andcs	r0, r0, r4, lsr #32
    1140:	00001bb0 			; <UNDEFINED> instruction: 0x00001bb0

00001144 <build_info>:
static int build_info(int argc, char **argv) {
    1144:	b508      	push	{r3, lr}
  printf("Build: [" SHELL_VERSION ":" USER_REPO_VERSION "] - [" BUILD_USER
    1146:	4802      	ldr	r0, [pc, #8]	; (1150 <build_info+0xc>)
    1148:	f7ff faf2 	bl	730 <printf>
}
    114c:	2000      	movs	r0, #0
    114e:	bd08      	pop	{r3, pc}
    1150:	00001bb4 			; <UNDEFINED> instruction: 0x00001bb4

00001154 <execute>:
static void execute(int argc, char **argv) {
    1154:	e92d 4178 	stmdb	sp!, {r3, r4, r5, r6, r8, lr}
    1158:	4680      	mov	r8, r0
    115a:	460e      	mov	r6, r1
  for (int i = 0; table[i].command_name != NULL; i++) {
    115c:	2500      	movs	r5, #0
    115e:	e000      	b.n	1162 <execute+0xe>
    1160:	3501      	adds	r5, #1
    1162:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    1166:	00a4      	lsls	r4, r4, #2
    1168:	4b0d      	ldr	r3, [pc, #52]	; (11a0 <execute+0x4c>)
    116a:	5919      	ldr	r1, [r3, r4]
    116c:	b169      	cbz	r1, 118a <execute+0x36>
    if (strcmp(argv[0], table[i].command_name) == 0) {
    116e:	6830      	ldr	r0, [r6, #0]
    1170:	f7ff ff34 	bl	fdc <strcmp>
    1174:	2800      	cmp	r0, #0
    1176:	d1f3      	bne.n	1160 <execute+0xc>
      __cmd_exec_status = table[i].command(argc, &argv[0]);
    1178:	4b09      	ldr	r3, [pc, #36]	; (11a0 <execute+0x4c>)
    117a:	441c      	add	r4, r3
    117c:	68a3      	ldr	r3, [r4, #8]
    117e:	4631      	mov	r1, r6
    1180:	4640      	mov	r0, r8
    1182:	4798      	blx	r3
    1184:	4b07      	ldr	r3, [pc, #28]	; (11a4 <execute+0x50>)
    1186:	6498      	str	r0, [r3, #72]	; 0x48
  if (match_found == FALSE) {
    1188:	e007      	b.n	119a <execute+0x46>
    printf("\"%s\": command not found. Use \"help\" to list all command.\n",
    118a:	6831      	ldr	r1, [r6, #0]
    118c:	4806      	ldr	r0, [pc, #24]	; (11a8 <execute+0x54>)
    118e:	f7ff facf 	bl	730 <printf>
    __cmd_exec_status = -1;
    1192:	4b04      	ldr	r3, [pc, #16]	; (11a4 <execute+0x50>)
    1194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1198:	649a      	str	r2, [r3, #72]	; 0x48
}
    119a:	e8bd 8178 	ldmia.w	sp!, {r3, r4, r5, r6, r8, pc}
    119e:	bf00      	nop
    11a0:	00001660 	andeq	r1, r0, r0, ror #12
    11a4:	20000024 	andcs	r0, r0, r4, lsr #32
    11a8:	00001bf8 	strdeq	r1, [r0], -r8

000011ac <help>:
int help(int argc, char **argv) {
    11ac:	b570      	push	{r4, r5, r6, lr}
  if (argc > 1 && (strcmp(argv[1], "-l")==0)) {
    11ae:	2801      	cmp	r0, #1
    11b0:	dd05      	ble.n	11be <help+0x12>
    11b2:	460b      	mov	r3, r1
    11b4:	4912      	ldr	r1, [pc, #72]	; (1200 <help+0x54>)
    11b6:	6858      	ldr	r0, [r3, #4]
    11b8:	f7ff ff10 	bl	fdc <strcmp>
    11bc:	b1e0      	cbz	r0, 11f8 <help+0x4c>
    printf("use: help -l for list only.\n\n");
    11be:	4811      	ldr	r0, [pc, #68]	; (1204 <help+0x58>)
    11c0:	f7ff fab6 	bl	730 <printf>
  bool verbose = true;
    11c4:	2601      	movs	r6, #1
    verbose = false;
    11c6:	2500      	movs	r5, #0
    11c8:	e003      	b.n	11d2 <help+0x26>
    printf("\n");
    11ca:	480f      	ldr	r0, [pc, #60]	; (1208 <help+0x5c>)
    11cc:	f7ff fab0 	bl	730 <printf>
    i++;
    11d0:	3501      	adds	r5, #1
  while (table[i].command_name != NULL) {
    11d2:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    11d6:	00a4      	lsls	r4, r4, #2
    11d8:	4b0c      	ldr	r3, [pc, #48]	; (120c <help+0x60>)
    11da:	5918      	ldr	r0, [r3, r4]
    11dc:	b170      	cbz	r0, 11fc <help+0x50>
    printf(table[i].command_name);
    11de:	f7ff faa7 	bl	730 <printf>
    if (verbose) {
    11e2:	2e00      	cmp	r6, #0
    11e4:	d0f1      	beq.n	11ca <help+0x1e>
      printf("\n\t");
    11e6:	480a      	ldr	r0, [pc, #40]	; (1210 <help+0x64>)
    11e8:	f7ff faa2 	bl	730 <printf>
      printf(table[i].command_help);
    11ec:	4b07      	ldr	r3, [pc, #28]	; (120c <help+0x60>)
    11ee:	441c      	add	r4, r3
    11f0:	6860      	ldr	r0, [r4, #4]
    11f2:	f7ff fa9d 	bl	730 <printf>
    11f6:	e7e8      	b.n	11ca <help+0x1e>
    verbose = false;
    11f8:	2600      	movs	r6, #0
    11fa:	e7e4      	b.n	11c6 <help+0x1a>
}
    11fc:	bd70      	pop	{r4, r5, r6, pc}
    11fe:	bf00      	nop
    1200:	00001c34 	andeq	r1, r0, r4, lsr ip
    1204:	00001c38 	andeq	r1, r0, r8, lsr ip
    1208:	00001c5c 	andeq	r1, r0, ip, asr ip
    120c:	00001660 	andeq	r1, r0, r0, ror #12
    1210:	00001c58 	andeq	r1, r0, r8, asr ip

00001214 <add_command_to_history>:
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    1214:	b1d8      	cbz	r0, 124e <add_command_to_history+0x3a>
static void add_command_to_history(const char *cmd_str) {
    1216:	b538      	push	{r3, r4, r5, lr}
    1218:	4605      	mov	r5, r0
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    121a:	490d      	ldr	r1, [pc, #52]	; (1250 <add_command_to_history+0x3c>)
    121c:	f7ff fede 	bl	fdc <strcmp>
    1220:	b900      	cbnz	r0, 1224 <add_command_to_history+0x10>
}
    1222:	bd38      	pop	{r3, r4, r5, pc}
  int index = total_num_commands % NUM_HISTORY_ENTRIES;
    1224:	4c0b      	ldr	r4, [pc, #44]	; (1254 <add_command_to_history+0x40>)
    1226:	6860      	ldr	r0, [r4, #4]
    1228:	2800      	cmp	r0, #0
    122a:	f000 0001 	and.w	r0, r0, #1
    122e:	bfb8      	it	lt
    1230:	4240      	neglt	r0, r0
  memcpy(&cmd_history[index], cmd_str, LINE_BUFF_SIZE);
    1232:	f104 0308 	add.w	r3, r4, #8
    1236:	2220      	movs	r2, #32
    1238:	4629      	mov	r1, r5
    123a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    123e:	f7ff fee2 	bl	1006 <memcpy>
  total_num_commands++;
    1242:	6863      	ldr	r3, [r4, #4]
    1244:	3301      	adds	r3, #1
    1246:	6063      	str	r3, [r4, #4]
  curr_command_ptr = total_num_commands;
    1248:	6863      	ldr	r3, [r4, #4]
    124a:	64e3      	str	r3, [r4, #76]	; 0x4c
    124c:	e7e9      	b.n	1222 <add_command_to_history+0xe>
    124e:	4770      	bx	lr
    1250:	00001c60 	andeq	r1, r0, r0, ror #24
    1254:	20000024 	andcs	r0, r0, r4, lsr #32

00001258 <parse_line>:
static int parse_line(char **argv, char *line_buff, int argument_size) {
    1258:	b538      	push	{r3, r4, r5, lr}
    125a:	4605      	mov	r5, r0
    125c:	460c      	mov	r4, r1
  int length = strlen(line_buff);
    125e:	4608      	mov	r0, r1
    1260:	f7ff feb4 	bl	fcc <strlen>
    1264:	4684      	mov	ip, r0
  int pos = 0;
    1266:	2300      	movs	r3, #0
  int argc = 0;
    1268:	4618      	mov	r0, r3
  while (pos <= length) {
    126a:	e00f      	b.n	128c <parse_line+0x34>
         pos++)
    126c:	3301      	adds	r3, #1
    for (; line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    126e:	18e1      	adds	r1, r4, r3
    1270:	5ce2      	ldrb	r2, [r4, r3]
    1272:	2a09      	cmp	r2, #9
    1274:	d003      	beq.n	127e <parse_line+0x26>
    1276:	2a20      	cmp	r2, #32
    1278:	d001      	beq.n	127e <parse_line+0x26>
    127a:	2a00      	cmp	r2, #0
    127c:	d1f6      	bne.n	126c <parse_line+0x14>
    if (line_buff[pos] == '\t' || line_buff[pos] == SPACE)
    127e:	2a09      	cmp	r2, #9
    1280:	d001      	beq.n	1286 <parse_line+0x2e>
    1282:	2a20      	cmp	r2, #32
    1284:	d101      	bne.n	128a <parse_line+0x32>
      line_buff[pos] = END_OF_LINE;
    1286:	2200      	movs	r2, #0
    1288:	700a      	strb	r2, [r1, #0]
    pos++;
    128a:	3301      	adds	r3, #1
  while (pos <= length) {
    128c:	4563      	cmp	r3, ip
    128e:	dc0b      	bgt.n	12a8 <parse_line+0x50>
    if (line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    1290:	18e1      	adds	r1, r4, r3
    1292:	5ce2      	ldrb	r2, [r4, r3]
    1294:	2a09      	cmp	r2, #9
    1296:	d0ea      	beq.n	126e <parse_line+0x16>
    1298:	2a20      	cmp	r2, #32
    129a:	d0e8      	beq.n	126e <parse_line+0x16>
    129c:	2a00      	cmp	r2, #0
    129e:	d0e6      	beq.n	126e <parse_line+0x16>
      argv[argc++] = &line_buff[pos];
    12a0:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
    12a4:	3001      	adds	r0, #1
    12a6:	e7e2      	b.n	126e <parse_line+0x16>
}
    12a8:	bd38      	pop	{r3, r4, r5, pc}

000012aa <prefix_match>:
  if (sub == NULL || str == NULL || len <= 0 || len > strlen(str)) {
    12aa:	b1d0      	cbz	r0, 12e2 <prefix_match+0x38>
static int prefix_match(char *sub, int len, const char *str) {
    12ac:	b570      	push	{r4, r5, r6, lr}
    12ae:	460d      	mov	r5, r1
    12b0:	4614      	mov	r4, r2
    12b2:	4606      	mov	r6, r0
  if (sub == NULL || str == NULL || len <= 0 || len > strlen(str)) {
    12b4:	b17a      	cbz	r2, 12d6 <prefix_match+0x2c>
    12b6:	2900      	cmp	r1, #0
    12b8:	dd0d      	ble.n	12d6 <prefix_match+0x2c>
    12ba:	4610      	mov	r0, r2
    12bc:	f7ff fe86 	bl	fcc <strlen>
    12c0:	42a8      	cmp	r0, r5
    12c2:	d308      	bcc.n	12d6 <prefix_match+0x2c>
  for (int i = 0; i<len; ++i) {
    12c4:	2300      	movs	r3, #0
    12c6:	42ab      	cmp	r3, r5
    12c8:	da07      	bge.n	12da <prefix_match+0x30>
    if (sub[i] != str[i]) {
    12ca:	5cf1      	ldrb	r1, [r6, r3]
    12cc:	5ce2      	ldrb	r2, [r4, r3]
    12ce:	4291      	cmp	r1, r2
    12d0:	d105      	bne.n	12de <prefix_match+0x34>
  for (int i = 0; i<len; ++i) {
    12d2:	3301      	adds	r3, #1
    12d4:	e7f7      	b.n	12c6 <prefix_match+0x1c>
    return FALSE;
    12d6:	2000      	movs	r0, #0
}
    12d8:	bd70      	pop	{r4, r5, r6, pc}
  return TRUE;
    12da:	2001      	movs	r0, #1
    12dc:	e7fc      	b.n	12d8 <prefix_match+0x2e>
      return FALSE;
    12de:	2000      	movs	r0, #0
    12e0:	e7fa      	b.n	12d8 <prefix_match+0x2e>
    return FALSE;
    12e2:	2000      	movs	r0, #0
}
    12e4:	4770      	bx	lr

000012e6 <handle_up_arrow>:
static void handle_up_arrow(char *cmd_buff, int *char_count) {
    12e6:	b538      	push	{r3, r4, r5, lr}
    12e8:	4604      	mov	r4, r0
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    12ea:	4a16      	ldr	r2, [pc, #88]	; (1344 <handle_up_arrow+0x5e>)
    12ec:	6853      	ldr	r3, [r2, #4]
    12ee:	3b02      	subs	r3, #2
    12f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    12f2:	4293      	cmp	r3, r2
    12f4:	dc03      	bgt.n	12fe <handle_up_arrow+0x18>
    12f6:	460d      	mov	r5, r1
      curr_command_ptr == 0) {
    12f8:	4b12      	ldr	r3, [pc, #72]	; (1344 <handle_up_arrow+0x5e>)
    12fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    12fc:	b923      	cbnz	r3, 1308 <handle_up_arrow+0x22>
    printf("%s", cmd_buff);
    12fe:	4621      	mov	r1, r4
    1300:	4811      	ldr	r0, [pc, #68]	; (1348 <handle_up_arrow+0x62>)
    1302:	f7ff fa15 	bl	730 <printf>
}
    1306:	bd38      	pop	{r3, r4, r5, pc}
  memset(cmd_buff, 0, LINE_BUFF_SIZE);
    1308:	2220      	movs	r2, #32
    130a:	2100      	movs	r1, #0
    130c:	f7ff fe86 	bl	101c <memset>
  curr_command_ptr--;
    1310:	4b0c      	ldr	r3, [pc, #48]	; (1344 <handle_up_arrow+0x5e>)
    1312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    1314:	3a01      	subs	r2, #1
    1316:	64da      	str	r2, [r3, #76]	; 0x4c
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    1318:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    131a:	2900      	cmp	r1, #0
    131c:	f001 0101 	and.w	r1, r1, #1
    1320:	bfb8      	it	lt
    1322:	4249      	neglt	r1, r1
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    1324:	3308      	adds	r3, #8
    1326:	2220      	movs	r2, #32
    1328:	eb03 1141 	add.w	r1, r3, r1, lsl #5
    132c:	4620      	mov	r0, r4
    132e:	f7ff fe6a 	bl	1006 <memcpy>
  *char_count = strlen(cmd_buff);
    1332:	4620      	mov	r0, r4
    1334:	f7ff fe4a 	bl	fcc <strlen>
    1338:	6028      	str	r0, [r5, #0]
  printf("%s", cmd_buff);
    133a:	4621      	mov	r1, r4
    133c:	4802      	ldr	r0, [pc, #8]	; (1348 <handle_up_arrow+0x62>)
    133e:	f7ff f9f7 	bl	730 <printf>
    1342:	e7e0      	b.n	1306 <handle_up_arrow+0x20>
    1344:	20000024 	andcs	r0, r0, r4, lsr #32
    1348:	00001c64 	andeq	r1, r0, r4, ror #24

0000134c <handle_down_arrow>:
static void handle_down_arrow(char *cmd_buff, int *char_count) {
    134c:	b538      	push	{r3, r4, r5, lr}
    134e:	4604      	mov	r4, r0
    1350:	460d      	mov	r5, r1
  memset(cmd_buff, 0, LINE_BUFF_SIZE);
    1352:	2220      	movs	r2, #32
    1354:	2100      	movs	r1, #0
    1356:	f7ff fe61 	bl	101c <memset>
  *char_count = 0;
    135a:	2300      	movs	r3, #0
    135c:	602b      	str	r3, [r5, #0]
  if (curr_command_ptr == total_num_commands) return;
    135e:	4b0f      	ldr	r3, [pc, #60]	; (139c <handle_down_arrow+0x50>)
    1360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    1362:	685b      	ldr	r3, [r3, #4]
    1364:	429a      	cmp	r2, r3
    1366:	d018      	beq.n	139a <handle_down_arrow+0x4e>
  curr_command_ptr++;
    1368:	490c      	ldr	r1, [pc, #48]	; (139c <handle_down_arrow+0x50>)
    136a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    136c:	3301      	adds	r3, #1
    136e:	64cb      	str	r3, [r1, #76]	; 0x4c
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    1370:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    1372:	2b00      	cmp	r3, #0
    1374:	f003 0301 	and.w	r3, r3, #1
    1378:	bfb8      	it	lt
    137a:	425b      	neglt	r3, r3
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    137c:	3108      	adds	r1, #8
    137e:	2220      	movs	r2, #32
    1380:	eb01 1143 	add.w	r1, r1, r3, lsl #5
    1384:	4620      	mov	r0, r4
    1386:	f7ff fe3e 	bl	1006 <memcpy>
  *char_count = strlen(cmd_buff);
    138a:	4620      	mov	r0, r4
    138c:	f7ff fe1e 	bl	fcc <strlen>
    1390:	6028      	str	r0, [r5, #0]
  printf("%s", cmd_buff);
    1392:	4621      	mov	r1, r4
    1394:	4802      	ldr	r0, [pc, #8]	; (13a0 <handle_down_arrow+0x54>)
    1396:	f7ff f9cb 	bl	730 <printf>
}
    139a:	bd38      	pop	{r3, r4, r5, pc}
    139c:	20000024 	andcs	r0, r0, r4, lsr #32
    13a0:	00001c64 	andeq	r1, r0, r4, ror #24

000013a4 <set_read_char>:
void set_read_char(int (*func)(void)) { __read_char__ = func; }
    13a4:	4b01      	ldr	r3, [pc, #4]	; (13ac <set_read_char+0x8>)
    13a6:	6518      	str	r0, [r3, #80]	; 0x50
    13a8:	4770      	bx	lr
    13aa:	bf00      	nop
    13ac:	20000024 	andcs	r0, r0, r4, lsr #32

000013b0 <set_read_char2>:
void set_read_char2(int (*func)(void)) { __read_char2__ = func; }
    13b0:	4b01      	ldr	r3, [pc, #4]	; (13b8 <set_read_char2+0x8>)
    13b2:	6558      	str	r0, [r3, #84]	; 0x54
    13b4:	4770      	bx	lr
    13b6:	bf00      	nop
    13b8:	20000024 	andcs	r0, r0, r4, lsr #32

000013bc <set_write_char>:
void set_write_char(void (*func)(char)) { __write_char__ = func; }
    13bc:	4b01      	ldr	r3, [pc, #4]	; (13c4 <set_write_char+0x8>)
    13be:	6018      	str	r0, [r3, #0]
    13c0:	4770      	bx	lr
    13c2:	bf00      	nop
    13c4:	20000024 	andcs	r0, r0, r4, lsr #32

000013c8 <set_write_char2>:
void set_write_char2(void (*func)(char)) { __write_char2__ = func; }
    13c8:	4b01      	ldr	r3, [pc, #4]	; (13d0 <set_write_char2+0x8>)
    13ca:	6598      	str	r0, [r3, #88]	; 0x58
    13cc:	4770      	bx	lr
    13ce:	bf00      	nop
    13d0:	20000024 	andcs	r0, r0, r4, lsr #32

000013d4 <setup>:
}
    13d4:	4770      	bx	lr

000013d6 <loop>:
}
    13d6:	4770      	bx	lr

000013d8 <prepend_prompt>:
}
    13d8:	4770      	bx	lr

000013da <handle_tab>:
  if (cmd_buff == NULL || char_count <= 0) {
    13da:	2800      	cmp	r0, #0
    13dc:	d046      	beq.n	146c <handle_tab+0x92>
static void handle_tab(char *cmd_buff, int *char_count) {
    13de:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
    13e2:	460e      	mov	r6, r1
    13e4:	4680      	mov	r8, r0
  if (cmd_buff == NULL || char_count <= 0) {
    13e6:	b309      	cbz	r1, 142c <handle_tab+0x52>
  int last_match = -1;
    13e8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
  int match_count = 0;
    13ec:	f04f 0900 	mov.w	r9, #0
  int i = 0;
    13f0:	464d      	mov	r5, r9
    13f2:	e000      	b.n	13f6 <handle_tab+0x1c>
    i++;
    13f4:	3501      	adds	r5, #1
  while (table[i].command_name != NULL) { //loop over all commands
    13f6:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    13fa:	00a4      	lsls	r4, r4, #2
    13fc:	4b1c      	ldr	r3, [pc, #112]	; (1470 <handle_tab+0x96>)
    13fe:	591a      	ldr	r2, [r3, r4]
    1400:	b172      	cbz	r2, 1420 <handle_tab+0x46>
    if (prefix_match(cmd_buff, *char_count, table[i].command_name)) {
    1402:	6831      	ldr	r1, [r6, #0]
    1404:	4640      	mov	r0, r8
    1406:	f7ff ff50 	bl	12aa <prefix_match>
    140a:	2800      	cmp	r0, #0
    140c:	d0f2      	beq.n	13f4 <handle_tab+0x1a>
      match_count++;
    140e:	f109 0901 	add.w	r9, r9, #1
      printf("\n%s", table[i].command_name);
    1412:	4b17      	ldr	r3, [pc, #92]	; (1470 <handle_tab+0x96>)
    1414:	5919      	ldr	r1, [r3, r4]
    1416:	4817      	ldr	r0, [pc, #92]	; (1474 <handle_tab+0x9a>)
    1418:	f7ff f98a 	bl	730 <printf>
      last_match = i;
    141c:	46aa      	mov	sl, r5
    141e:	e7e9      	b.n	13f4 <handle_tab+0x1a>
  if (match_count == 1) {
    1420:	f1b9 0f01 	cmp.w	r9, #1
    1424:	d004      	beq.n	1430 <handle_tab+0x56>
  if (match_count) {
    1426:	f1b9 0f00 	cmp.w	r9, #0
    142a:	d10e      	bne.n	144a <handle_tab+0x70>
}
    142c:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
    memcpy(cmd_buff, table[last_match].command_name, LINE_BUFF_SIZE);
    1430:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    1434:	2220      	movs	r2, #32
    1436:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
    143a:	4640      	mov	r0, r8
    143c:	f7ff fde3 	bl	1006 <memcpy>
    *char_count = strlen(cmd_buff);
    1440:	4640      	mov	r0, r8
    1442:	f7ff fdc3 	bl	fcc <strlen>
    1446:	6030      	str	r0, [r6, #0]
    1448:	e7ed      	b.n	1426 <handle_tab+0x4c>
    printf("\n");
    144a:	4c0b      	ldr	r4, [pc, #44]	; (1478 <handle_tab+0x9e>)
    144c:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    1450:	f7ff f96e 	bl	730 <printf>
    prepend_prompt();
    1454:	f7ff ffc0 	bl	13d8 <prepend_prompt>
    printf(PROMPT);
    1458:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    145c:	f7ff f968 	bl	730 <printf>
    printf("%s", cmd_buff);
    1460:	4641      	mov	r1, r8
    1462:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    1466:	f7ff f963 	bl	730 <printf>
    146a:	e7df      	b.n	142c <handle_tab+0x52>
    146c:	4770      	bx	lr
    146e:	bf00      	nop
    1470:	00001660 	andeq	r1, r0, r0, ror #12
    1474:	00001c68 	andeq	r1, r0, r8, ror #24
    1478:	00001bac 	andeq	r1, r0, ip, lsr #23

0000147c <active_prompt>:
__attribute__((weak)) int active_prompt() { return TRUE; }
    147c:	2001      	movs	r0, #1
    147e:	4770      	bx	lr

00001480 <shell>:
static void shell(void) {
    1480:	b530      	push	{r4, r5, lr}
    1482:	b09b      	sub	sp, #108	; 0x6c
  int count = 0;
    1484:	2300      	movs	r3, #0
    1486:	9319      	str	r3, [sp, #100]	; 0x64
  for (int i = 0; i < LINE_BUFF_SIZE; i++) line_buff[i] = 0;
    1488:	e006      	b.n	1498 <shell+0x18>
    148a:	f103 0268 	add.w	r2, r3, #104	; 0x68
    148e:	446a      	add	r2, sp
    1490:	2100      	movs	r1, #0
    1492:	f802 1c24 	strb.w	r1, [r2, #-36]
    1496:	3301      	adds	r3, #1
    1498:	2b1f      	cmp	r3, #31
    149a:	ddf6      	ble.n	148a <shell+0xa>
  for (int i = 0; i < MAX_ARG_COUNT; i++) argv[i] = NULL;
    149c:	2300      	movs	r3, #0
    149e:	2b0f      	cmp	r3, #15
    14a0:	dc07      	bgt.n	14b2 <shell+0x32>
    14a2:	aa1a      	add	r2, sp, #104	; 0x68
    14a4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    14a8:	2100      	movs	r1, #0
    14aa:	f842 1c64 	str.w	r1, [r2, #-100]
    14ae:	3301      	adds	r3, #1
    14b0:	e7f5      	b.n	149e <shell+0x1e>
  prepend_prompt();
    14b2:	f7ff ff91 	bl	13d8 <prepend_prompt>
  printf(PROMPT);
    14b6:	4849      	ldr	r0, [pc, #292]	; (15dc <shell+0x15c>)
    14b8:	f7ff f93a 	bl	730 <printf>
  int special_key = 0;
    14bc:	2500      	movs	r5, #0
    14be:	e05d      	b.n	157c <shell+0xfc>
        special_key = 1;
    14c0:	2501      	movs	r5, #1
    14c2:	e05b      	b.n	157c <shell+0xfc>
        line_buff[count] = END_OF_LINE;
    14c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    14c6:	3368      	adds	r3, #104	; 0x68
    14c8:	446b      	add	r3, sp
    14ca:	2200      	movs	r2, #0
    14cc:	f803 2c24 	strb.w	r2, [r3, #-36]
        __write_char__(NEW_LINE);
    14d0:	4b43      	ldr	r3, [pc, #268]	; (15e0 <shell+0x160>)
    14d2:	681b      	ldr	r3, [r3, #0]
    14d4:	200a      	movs	r0, #10
    14d6:	4798      	blx	r3
  add_command_to_history(line_buff);
    14d8:	a811      	add	r0, sp, #68	; 0x44
    14da:	f7ff fe9b 	bl	1214 <add_command_to_history>
  argc = parse_line(argv, line_buff, MAX_ARG_COUNT);
    14de:	2210      	movs	r2, #16
    14e0:	a911      	add	r1, sp, #68	; 0x44
    14e2:	a801      	add	r0, sp, #4
    14e4:	f7ff feb8 	bl	1258 <parse_line>
  if (argc > 0) execute(argc, argv);
    14e8:	2800      	cmp	r0, #0
    14ea:	dc73      	bgt.n	15d4 <shell+0x154>
}
    14ec:	b01b      	add	sp, #108	; 0x6c
    14ee:	bd30      	pop	{r4, r5, pc}
        if (!__echo) {
    14f0:	4b3c      	ldr	r3, [pc, #240]	; (15e4 <shell+0x164>)
    14f2:	781b      	ldrb	r3, [r3, #0]
    14f4:	b1a3      	cbz	r3, 1520 <shell+0xa0>
        if (count == 0) continue;
    14f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    14f8:	2b00      	cmp	r3, #0
    14fa:	d03f      	beq.n	157c <shell+0xfc>
        count--;
    14fc:	3b01      	subs	r3, #1
    14fe:	9319      	str	r3, [sp, #100]	; 0x64
        line_buff[count] = END_OF_LINE;
    1500:	3368      	adds	r3, #104	; 0x68
    1502:	446b      	add	r3, sp
    1504:	2200      	movs	r2, #0
    1506:	f803 2c24 	strb.w	r2, [r3, #-36]
        delete ();
    150a:	f7ff fdc5 	bl	1098 <delete>
      if (__echo) {
    150e:	4b35      	ldr	r3, [pc, #212]	; (15e4 <shell+0x164>)
    1510:	781b      	ldrb	r3, [r3, #0]
    1512:	2b00      	cmp	r3, #0
    1514:	d032      	beq.n	157c <shell+0xfc>
        __write_char__(c);
    1516:	4b32      	ldr	r3, [pc, #200]	; (15e0 <shell+0x160>)
    1518:	681b      	ldr	r3, [r3, #0]
    151a:	4620      	mov	r0, r4
    151c:	4798      	blx	r3
    151e:	e02d      	b.n	157c <shell+0xfc>
          delete ();
    1520:	f7ff fdba 	bl	1098 <delete>
          delete ();
    1524:	f7ff fdb8 	bl	1098 <delete>
    1528:	e7e5      	b.n	14f6 <shell+0x76>
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    152a:	2d01      	cmp	r5, #1
    152c:	d13d      	bne.n	15aa <shell+0x12a>
        special_key = 2;
    152e:	2502      	movs	r5, #2
    1530:	e024      	b.n	157c <shell+0xfc>
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    1532:	2d00      	cmp	r5, #0
    1534:	d03e      	beq.n	15b4 <shell+0x134>
        special_key = 0;
    1536:	2500      	movs	r5, #0
    1538:	e020      	b.n	157c <shell+0xfc>
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    153a:	2d02      	cmp	r5, #2
    153c:	d13f      	bne.n	15be <shell+0x13e>
        if (!__echo) {
    153e:	4b29      	ldr	r3, [pc, #164]	; (15e4 <shell+0x164>)
    1540:	781b      	ldrb	r3, [r3, #0]
    1542:	b95b      	cbnz	r3, 155c <shell+0xdc>
          clear_prompt(count + 4);
    1544:	9819      	ldr	r0, [sp, #100]	; 0x64
    1546:	3004      	adds	r0, #4
    1548:	f7ff fdb4 	bl	10b4 <clear_prompt>
        if (c == 'A') {
    154c:	2c41      	cmp	r4, #65	; 0x41
    154e:	d009      	beq.n	1564 <shell+0xe4>
          handle_down_arrow(line_buff, &count);
    1550:	a919      	add	r1, sp, #100	; 0x64
    1552:	a811      	add	r0, sp, #68	; 0x44
    1554:	f7ff fefa 	bl	134c <handle_down_arrow>
        special_key = 0;
    1558:	2500      	movs	r5, #0
        continue;
    155a:	e00f      	b.n	157c <shell+0xfc>
          clear_prompt(count);
    155c:	9819      	ldr	r0, [sp, #100]	; 0x64
    155e:	f7ff fda9 	bl	10b4 <clear_prompt>
    1562:	e7f3      	b.n	154c <shell+0xcc>
          handle_up_arrow(line_buff, &count);
    1564:	a919      	add	r1, sp, #100	; 0x64
    1566:	a811      	add	r0, sp, #68	; 0x44
    1568:	f7ff febd 	bl	12e6 <handle_up_arrow>
    156c:	e7f4      	b.n	1558 <shell+0xd8>
        handle_tab(line_buff, &count);
    156e:	a919      	add	r1, sp, #100	; 0x64
    1570:	a811      	add	r0, sp, #68	; 0x44
    1572:	f7ff ff32 	bl	13da <handle_tab>
        continue;
    1576:	e001      	b.n	157c <shell+0xfc>
      loop();
    1578:	f7ff ff2d 	bl	13d6 <loop>
    if (!active_prompt()) {
    157c:	f7ff ff7e 	bl	147c <active_prompt>
    1580:	2800      	cmp	r0, #0
    1582:	d0fb      	beq.n	157c <shell+0xfc>
    s = __read_char__();
    1584:	4b16      	ldr	r3, [pc, #88]	; (15e0 <shell+0x160>)
    1586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1588:	4798      	blx	r3
    if (s != -1) {
    158a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    158e:	d0f3      	beq.n	1578 <shell+0xf8>
      c = (char)s;
    1590:	b2c4      	uxtb	r4, r0
      if (c == CARRIAGE_RETURN || c == NEW_LINE) {
    1592:	2c0d      	cmp	r4, #13
    1594:	d096      	beq.n	14c4 <shell+0x44>
    1596:	2c0a      	cmp	r4, #10
    1598:	d094      	beq.n	14c4 <shell+0x44>
      if (c == DELETE || c == BACK_SPACE) {
    159a:	2c7f      	cmp	r4, #127	; 0x7f
    159c:	d0a8      	beq.n	14f0 <shell+0x70>
    159e:	2c08      	cmp	r4, #8
    15a0:	d0a6      	beq.n	14f0 <shell+0x70>
      } else if (c == ESCAPE) {
    15a2:	2c1b      	cmp	r4, #27
    15a4:	d08c      	beq.n	14c0 <shell+0x40>
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    15a6:	2c5b      	cmp	r4, #91	; 0x5b
    15a8:	d0bf      	beq.n	152a <shell+0xaa>
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    15aa:	f1a4 0343 	sub.w	r3, r4, #67	; 0x43
    15ae:	b2db      	uxtb	r3, r3
    15b0:	2b01      	cmp	r3, #1
    15b2:	d9be      	bls.n	1532 <shell+0xb2>
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    15b4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    15b8:	b2db      	uxtb	r3, r3
    15ba:	2b01      	cmp	r3, #1
    15bc:	d9bd      	bls.n	153a <shell+0xba>
      else if (c == TAB) {
    15be:	2c09      	cmp	r4, #9
    15c0:	d0d5      	beq.n	156e <shell+0xee>
        line_buff[count] = c;
    15c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15c4:	f103 0268 	add.w	r2, r3, #104	; 0x68
    15c8:	446a      	add	r2, sp
    15ca:	f802 4c24 	strb.w	r4, [r2, #-36]
        count++;
    15ce:	3301      	adds	r3, #1
    15d0:	9319      	str	r3, [sp, #100]	; 0x64
    15d2:	e79c      	b.n	150e <shell+0x8e>
  if (argc > 0) execute(argc, argv);
    15d4:	a901      	add	r1, sp, #4
    15d6:	f7ff fdbd 	bl	1154 <execute>
}
    15da:	e787      	b.n	14ec <shell+0x6c>
    15dc:	00001c6c 	andeq	r1, r0, ip, ror #24
    15e0:	20000024 	andcs	r0, r0, r4, lsr #32
    15e4:	20000000 	andcs	r0, r0, r0

000015e8 <prompt>:
void prompt() {
    15e8:	b508      	push	{r3, lr}
  initial_setup();
    15ea:	f7ff fd1f 	bl	102c <initial_setup>
  exec_auto_cmds();
    15ee:	f7ff fd6a 	bl	10c6 <exec_auto_cmds>
  setup();
    15f2:	f7ff feef 	bl	13d4 <setup>
    shell();
    15f6:	f7ff ff43 	bl	1480 <shell>
  while (TRUE) {
    15fa:	e7fc      	b.n	15f6 <prompt+0xe>

000015fc <exec>:
int exec(char *cmd_str) {
    15fc:	b500      	push	{lr}
    15fe:	b091      	sub	sp, #68	; 0x44
    1600:	4601      	mov	r1, r0
  argc = parse_line(argv, cmd_str, MAX_ARG_COUNT);
    1602:	2210      	movs	r2, #16
    1604:	4668      	mov	r0, sp
    1606:	f7ff fe27 	bl	1258 <parse_line>
  if (argc > 0) execute(argc, argv);
    160a:	2800      	cmp	r0, #0
    160c:	dc04      	bgt.n	1618 <exec+0x1c>
  return __cmd_exec_status;
    160e:	4b04      	ldr	r3, [pc, #16]	; (1620 <exec+0x24>)
    1610:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    1612:	b011      	add	sp, #68	; 0x44
    1614:	f85d fb04 	ldr.w	pc, [sp], #4
  if (argc > 0) execute(argc, argv);
    1618:	4669      	mov	r1, sp
    161a:	f7ff fd9b 	bl	1154 <execute>
    161e:	e7f6      	b.n	160e <exec+0x12>
    1620:	20000024 	andcs	r0, r0, r4, lsr #32

00001624 <get_function_addr>:
cmd get_function_addr(char *cmd_str) {
    1624:	b570      	push	{r4, r5, r6, lr}
    1626:	4606      	mov	r6, r0
  for (int i = 0; table[i].command_name != NULL; i++) {
    1628:	2500      	movs	r5, #0
    162a:	e000      	b.n	162e <get_function_addr+0xa>
    162c:	3501      	adds	r5, #1
    162e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    1632:	00a4      	lsls	r4, r4, #2
    1634:	4b06      	ldr	r3, [pc, #24]	; (1650 <get_function_addr+0x2c>)
    1636:	5919      	ldr	r1, [r3, r4]
    1638:	b141      	cbz	r1, 164c <get_function_addr+0x28>
    if (strcmp(cmd_str, table[i].command_name) == 0) {
    163a:	4630      	mov	r0, r6
    163c:	f7ff fcce 	bl	fdc <strcmp>
    1640:	2800      	cmp	r0, #0
    1642:	d1f3      	bne.n	162c <get_function_addr+0x8>
      return table[i].command;
    1644:	4b02      	ldr	r3, [pc, #8]	; (1650 <get_function_addr+0x2c>)
    1646:	441c      	add	r4, r3
    1648:	68a0      	ldr	r0, [r4, #8]
    164a:	e000      	b.n	164e <get_function_addr+0x2a>
  return NULL;
    164c:	2000      	movs	r0, #0
}
    164e:	bd70      	pop	{r4, r5, r6, pc}
    1650:	00001660 	andeq	r1, r0, r0, ror #12

00001654 <reset_handler>:
    1654:	f7ff ffc8 	bl	15e8 <prompt>
    1658:	f7ff fffe 	bl	1658 <reset_handler+0x4>

Disassembly of section .rodata:

00001660 <_varping>:

ADD_CMD(PING, "Pings the other board", ping);
    1660:	000016fc 	strdeq	r1, [r0], -ip
    1664:	00001704 	andeq	r1, r0, r4, lsl #14
    1668:	000003c1 	andeq	r0, r0, r1, asr #7

0000166c <_varread_mem>:
ADD_CMD(rb, "read a bit to memory location", r32_bit);
#endif //SHELL_NO_BIT_UTILS

ADD_CMD(r32, "reads a 32 bit memory location", r32);
ADD_CMD(w32, "writes a 32 bit value to a memory location", w32);
ADD_CMD(read, "Reads number of bytes from memory", read_mem);
    166c:	00001ae4 	andeq	r1, r0, r4, ror #21
    1670:	00001aec 	andeq	r1, r0, ip, ror #21
    1674:	00000ecd 	andeq	r0, r0, sp, asr #29

00001678 <_varw32>:
ADD_CMD(w32, "writes a 32 bit value to a memory location", w32);
    1678:	00001b10 	andeq	r1, r0, r0, lsl fp
    167c:	00001b14 	andeq	r1, r0, r4, lsl fp
    1680:	00000e9d 	muleq	r0, sp, lr

00001684 <_varr32>:
ADD_CMD(r32, "reads a 32 bit memory location", r32);
    1684:	00001b40 	andeq	r1, r0, r0, asr #22
    1688:	00001b44 	andeq	r1, r0, r4, asr #22
    168c:	00000e6d 	andeq	r0, r0, sp, ror #28

00001690 <_varr32_bit>:
ADD_CMD(rb, "read a bit to memory location", r32_bit);
    1690:	00001b64 	andeq	r1, r0, r4, ror #22
    1694:	00001b68 	andeq	r1, r0, r8, ror #22
    1698:	00000f7d 	andeq	r0, r0, sp, ror pc

0000169c <_varw32_bit>:
ADD_CMD(wb, "write a bit to memory location", w32_bit);
    169c:	00001b88 	andeq	r1, r0, r8, lsl #23
    16a0:	00001b8c 	andeq	r1, r0, ip, lsl #23
    16a4:	00000f15 	andeq	r0, r0, r5, lsl pc

000016a8 <_varcmd_exec_status>:

// DO NOT REMOVE THESE
AUTO_CMD(version, "Prints details of the build", build_info);
ADD_CMD(help, "Prints all available commands", help);
ADD_CMD(status, "Returns exit status of last executed command",
    16a8:	00001c70 	andeq	r1, r0, r0, ror ip
    16ac:	00001c78 	andeq	r1, r0, r8, ror ip
    16b0:	0000112d 	andeq	r1, r0, sp, lsr #2

000016b4 <_varhelp>:
ADD_CMD(help, "Prints all available commands", help);
    16b4:	00001ca8 	andeq	r1, r0, r8, lsr #25
    16b8:	00001cb0 			; <UNDEFINED> instruction: 0x00001cb0
    16bc:	000011ad 	andeq	r1, r0, sp, lsr #3

000016c0 <_varshow_history>:
ADD_CMD(history, "Show command history", show_history);
    16c0:	00001cf4 	strdeq	r1, [r0], -r4
    16c4:	00001cfc 	strdeq	r1, [r0], -ip
    16c8:	000010ed 	andeq	r1, r0, sp, ror #1

000016cc <_varbuild_info>:
AUTO_CMD(version, "Prints details of the build", build_info);
    16cc:	00001cd0 	ldrdeq	r1, [r0], -r0
    16d0:	00001cd8 	ldrdeq	r1, [r0], -r8
    16d4:	00001145 	andeq	r1, r0, r5, asr #2

000016d8 <cmd_end_>:
	...
    16e4:	4753454d 	ldrbmi	r4, [r3, -sp, asr #10]
    16e8:	63655220 	cmnvs	r5, #32, 4
    16ec:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    16f0:	20612064 	rsbcs	r2, r1, r4, rrx
    16f4:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
    16f8:	0000000a 	andeq	r0, r0, sl
    16fc:	474e4950 	smlsldmi	r4, lr, r0, r9
    1700:	00000000 	andeq	r0, r0, r0
    1704:	676e6950 			; <UNDEFINED> instruction: 0x676e6950
    1708:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
    170c:	746f2065 	strbtvc	r2, [pc], #-101	; 1714 <cmd_end_+0x3c>
    1710:	20726568 	rsbscs	r6, r2, r8, ror #10
    1714:	72616f62 	rsbvc	r6, r1, #392	; 0x188
    1718:	00000064 	andeq	r0, r0, r4, rrx
    171c:	6972700a 	ldmdbvs	r2!, {r1, r3, ip, sp, lr}^
    1720:	2d66746e 	cfstrdcs	mvd7, [r6, #-440]!	; 0xfffffe48
    1724:	6f727265 	svcvs	0x00727265
    1728:	00000a72 	andeq	r0, r0, r2, ror sl

0000172c <hextable>:
static char hextable[] = {'0', '1', '2', '3', '4', '5', '6', '7',
    172c:	33323130 	teqcc	r2, #48, 2
    1730:	37363534 			; <UNDEFINED> instruction: 0x37363534
    1734:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    1738:	46454443 	strbmi	r4, [r5], -r3, asr #8

0000173c <sbox>:
static const uint8_t sbox[256] = {
    173c:	7b777c63 	blvc	1de08d0 <__ROM_SIZE__+0x1da08d0>
    1740:	c56f6bf2 	strbgt	r6, [pc, #-3058]!	; b56 <InvMixColumns+0xf8>
    1744:	2b670130 	blcs	19c1c0c <__ROM_SIZE__+0x1981c0c>
    1748:	76abd7fe 			; <UNDEFINED> instruction: 0x76abd7fe
    174c:	7dc982ca 	sfmvc	f0, 3, [r9, #808]	; 0x328
    1750:	f04759fa 			; <UNDEFINED> instruction: 0xf04759fa
    1754:	afa2d4ad 	svcge	0x00a2d4ad
    1758:	c072a49c 			; <UNDEFINED> instruction: 0xc072a49c
    175c:	2693fdb7 			; <UNDEFINED> instruction: 0x2693fdb7
    1760:	ccf73f36 	ldclgt	15, cr3, [r7], #216	; 0xd8
    1764:	f1e5a534 			; <UNDEFINED> instruction: 0xf1e5a534
    1768:	1531d871 	ldrne	sp, [r1, #-2161]!	; 0xfffff78f
    176c:	c323c704 			; <UNDEFINED> instruction: 0xc323c704
    1770:	9a059618 	bls	166fd8 <__ROM_SIZE__+0x126fd8>
    1774:	e2801207 	add	r1, r0, #1879048192	; 0x70000000
    1778:	75b227eb 	ldrvc	r2, [r2, #2027]!	; 0x7eb
    177c:	1a2c8309 	bne	b223a8 <__ROM_SIZE__+0xae23a8>
    1780:	a05a6e1b 	subsge	r6, sl, fp, lsl lr
    1784:	b3d63b52 	bicslt	r3, r6, #83968	; 0x14800
    1788:	842fe329 	strthi	lr, [pc], #-809	; 1790 <sbox+0x54>
    178c:	ed00d153 	stfd	f5, [r0, #-332]	; 0xfffffeb4
    1790:	5bb1fc20 	blpl	fec80818 <_STACK_TOP_+0xdec7881c>
    1794:	39becb6a 	ldmibcc	lr!, {r1, r3, r5, r6, r8, r9, fp, lr, pc}
    1798:	cf584c4a 	svcgt	0x00584c4a
    179c:	fbaaefd0 	blx	feabd6e6 <_STACK_TOP_+0xdeab56ea>
    17a0:	85334d43 	ldrhi	r4, [r3, #-3395]!	; 0xfffff2bd
    17a4:	7f02f945 	svcvc	0x0002f945
    17a8:	a89f3c50 	ldmge	pc, {r4, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
    17ac:	8f40a351 	svchi	0x0040a351
    17b0:	f5389d92 			; <UNDEFINED> instruction: 0xf5389d92
    17b4:	21dab6bc 	ldrhcs	fp, [sl, #108]	; 0x6c
    17b8:	d2f3ff10 	rscsle	pc, r3, #16, 30	; 0x40
    17bc:	ec130ccd 	ldc	12, cr0, [r3], {205}	; 0xcd
    17c0:	1744975f 	smlsldne	r9, r4, pc, r7	; <UNPREDICTABLE>
    17c4:	3d7ea7c4 	ldclcc	7, cr10, [lr, #-784]!	; 0xfffffcf0
    17c8:	73195d64 	tstvc	r9, #100, 26	; 0x1900
    17cc:	dc4f8160 	stflep	f0, [pc], {96}	; 0x60
    17d0:	88902a22 	ldmhi	r0, {r1, r5, r9, fp, sp}
    17d4:	14b8ee46 	ldrtne	lr, [r8], #3654	; 0xe46
    17d8:	db0b5ede 	blle	2d9358 <__ROM_SIZE__+0x299358>
    17dc:	0a3a32e0 	beq	e8e364 <__ROM_SIZE__+0xe4e364>
    17e0:	5c240649 	stcpl	6, cr0, [r4], #-292	; 0xfffffedc
    17e4:	62acd3c2 	adcvs	sp, ip, #134217731	; 0x8000003
    17e8:	79e49591 	stmibvc	r4!, {r0, r4, r7, r8, sl, ip, pc}^
    17ec:	6d37c8e7 	ldcvs	8, cr12, [r7, #-924]!	; 0xfffffc64
    17f0:	a94ed58d 	stmdbge	lr, {r0, r2, r3, r7, r8, sl, ip, lr, pc}^
    17f4:	eaf4566c 	b	ffd171ac <_STACK_TOP_+0xdfd0f1b0>
    17f8:	08ae7a65 	stmiaeq	lr!, {r0, r2, r5, r6, r9, fp, ip, sp, lr}
    17fc:	2e2578ba 	mcrcs	8, 1, r7, cr5, cr10, {5}
    1800:	c6b4a61c 	ssatgt	sl, #21, ip, lsl #12
    1804:	1f74dde8 	svcne	0x0074dde8
    1808:	8a8bbd4b 	bhi	fe2f0d3c <_STACK_TOP_+0xde2e8d40>
    180c:	66b53e70 			; <UNDEFINED> instruction: 0x66b53e70
    1810:	0ef60348 	cdpeq	3, 15, cr0, cr6, cr8, {2}
    1814:	b9573561 	ldmdblt	r7, {r0, r5, r6, r8, sl, ip, sp}^
    1818:	9e1dc186 	mnfls<illegal precision>	f4, f6
    181c:	1198f8e1 	orrsne	pc, r8, r1, ror #17
    1820:	948ed969 	strls	sp, [lr], #2409	; 0x969
    1824:	e9871e9b 	stmib	r7, {r0, r1, r3, r4, r7, r9, sl, fp, ip}
    1828:	df2855ce 	svcle	0x002855ce
    182c:	0d89a18c 	stfeqd	f2, [r9, #560]	; 0x230
    1830:	6842e6bf 	stmdavs	r2, {r0, r1, r2, r3, r4, r5, r7, r9, sl, sp, lr, pc}^
    1834:	0f2d9941 	svceq	0x002d9941
    1838:	16bb54b0 			; <UNDEFINED> instruction: 0x16bb54b0

0000183c <Rcon>:
static const uint8_t Rcon[11] = {
    183c:	0402018d 	streq	r0, [r2], #-397	; 0xfffffe73
    1840:	40201008 	eormi	r1, r0, r8
    1844:	00361b80 	eorseq	r1, r6, r0, lsl #23

00001848 <rsbox>:
static const uint8_t rsbox[256] = {
    1848:	d56a0952 	strble	r0, [sl, #-2386]!	; 0xfffff6ae
    184c:	38a53630 	stmiacc	r5!, {r4, r5, r9, sl, ip, sp}
    1850:	9ea340bf 	mcrls	0, 5, r4, cr3, cr15, {5}
    1854:	fbd7f381 	blx	ff5fe662 <_STACK_TOP_+0xdf5f6666>
    1858:	8239e37c 	eorshi	lr, r9, #124, 6	; 0xf0000001
    185c:	87ff2f9b 			; <UNDEFINED> instruction: 0x87ff2f9b
    1860:	44438e34 	strbmi	r8, [r3], #-3636	; 0xfffff1cc
    1864:	cbe9dec4 	blgt	ffa7937c <_STACK_TOP_+0xdfa71380>
    1868:	32947b54 	addscc	r7, r4, #84, 22	; 0x15000
    186c:	3d23c2a6 	sfmcc	f4, 1, [r3, #-664]!	; 0xfffffd68
    1870:	0b954cee 	bleq	fe554c30 <_STACK_TOP_+0xde54cc34>
    1874:	4ec3fa42 			; <UNDEFINED> instruction: 0x4ec3fa42
    1878:	66a12e08 	strtvs	r2, [r1], r8, lsl #28
    187c:	b224d928 	eorlt	sp, r4, #40, 18	; 0xa0000
    1880:	49a25b76 	stmibmi	r2!, {r1, r2, r4, r5, r6, r8, r9, fp, ip, lr}
    1884:	25d18b6d 	ldrbcs	r8, [r1, #2925]	; 0xb6d
    1888:	64f6f872 	ldrbtvs	pc, [r6], #2162	; 0x872	; <UNPREDICTABLE>
    188c:	16986886 	ldrne	r6, [r8], r6, lsl #17
    1890:	cc5ca4d4 	cfldrdgt	mvd10, [ip], {212}	; 0xd4
    1894:	92b6655d 	adcsls	r6, r6, #390070272	; 0x17400000
    1898:	5048706c 	subpl	r7, r8, ip, rrx
    189c:	dab9edfd 	ble	fee7d098 <_STACK_TOP_+0xdee7509c>
    18a0:	5746155e 	smlsldpl	r1, r6, lr, r5
    18a4:	849d8da7 	ldrhi	r8, [sp], #3495	; 0xda7
    18a8:	00abd890 	umlaleq	sp, fp, r0, r8
    18ac:	0ad3bc8c 	beq	ff4f0ae4 <_STACK_TOP_+0xdf4e8ae8>
    18b0:	0558e4f7 	ldrbeq	lr, [r8, #-1271]	; 0xfffffb09
    18b4:	0645b3b8 			; <UNDEFINED> instruction: 0x0645b3b8
    18b8:	8f1e2cd0 	svchi	0x001e2cd0
    18bc:	020f3fca 	andeq	r3, pc, #808	; 0x328
    18c0:	03bdafc1 			; <UNDEFINED> instruction: 0x03bdafc1
    18c4:	6b8a1301 	blvs	fe2864d0 <_STACK_TOP_+0xde27e4d4>
    18c8:	4111913a 	tstmi	r1, sl, lsr r1
    18cc:	eadc674f 	b	ff71b610 <_STACK_TOP_+0xdf713614>
    18d0:	cecff297 	mcrgt	2, 6, pc, cr15, cr7, {4}	; <UNPREDICTABLE>
    18d4:	73e6b4f0 	mvnvc	fp, #240, 8	; 0xf0000000
    18d8:	2274ac96 	rsbscs	sl, r4, #38400	; 0x9600
    18dc:	8535ade7 	ldrhi	sl, [r5, #-3559]!	; 0xfffff219
    18e0:	e837f9e2 	ldmda	r7!, {r1, r5, r6, r7, r8, fp, ip, sp, lr, pc}
    18e4:	6edf751c 	mrcvs	5, 6, r7, cr15, cr12, {0}
    18e8:	711af147 	tstvc	sl, r7, asr #2	; <UNPREDICTABLE>
    18ec:	89c5291d 	stmibhi	r5, {r0, r2, r3, r4, r8, fp, sp}^
    18f0:	0e62b76f 	cdpeq	7, 6, cr11, cr2, cr15, {3}
    18f4:	1bbe18aa 	blne	fef87ba4 <_STACK_TOP_+0xdef7fba8>
    18f8:	4b3e56fc 	blmi	f974f0 <__ROM_SIZE__+0xf574f0>
    18fc:	2079d2c6 	rsbscs	sp, r9, r6, asr #5
    1900:	fec0db9a 	mcr2	11, 6, sp, cr0, cr10, {4}	; <UNPREDICTABLE>
    1904:	f45acd78 			; <UNDEFINED> instruction: 0xf45acd78
    1908:	33a8dd1f 			; <UNDEFINED> instruction: 0x33a8dd1f
    190c:	31c70788 	biccc	r0, r7, r8, lsl #15
    1910:	591012b1 	ldmdbpl	r0, {r0, r4, r5, r7, r9, ip}
    1914:	5fec8027 	svcpl	0x00ec8027
    1918:	a97f5160 	ldmdbge	pc!, {r5, r6, r8, ip, lr}^	; <UNPREDICTABLE>
    191c:	0d4ab519 	cfstr64eq	mvdx11, [sl, #-100]	; 0xffffff9c
    1920:	9f7ae52d 	svcls	0x007ae52d
    1924:	ef9cc993 	svc	0x009cc993
    1928:	4d3be0a0 	ldcmi	0, cr14, [fp, #-640]!	; 0xfffffd80
    192c:	b0f52aae 	rscslt	r2, r5, lr, lsr #21
    1930:	3cbbebc8 	vldmiacc	fp!, {d14-<overflow reg d49>}
    1934:	61995383 	orrsvs	r5, r9, r3, lsl #7
    1938:	7e042b17 	vmovvc.32	d4[0], r2
    193c:	26d677ba 			; <UNDEFINED> instruction: 0x26d677ba
    1940:	631469e1 	tstvs	r4, #3686400	; 0x384000
    1944:	7d0c2155 	stfvcs	f2, [ip, #-340]	; 0xfffffeac
    1948:	67617355 			; <UNDEFINED> instruction: 0x67617355
    194c:	25203a65 	strcs	r3, [r0, #-2661]!	; 0xfffff59b
    1950:	613c2073 	teqvs	ip, r3, ror r0
    1954:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1958:	203e7373 	eorscs	r7, lr, r3, ror r3
    195c:	206e6928 	rsbcs	r6, lr, r8, lsr #18
    1960:	29786568 	ldmdbcs	r8!, {r3, r5, r6, r8, sl, sp, lr}^
    1964:	0000000a 	andeq	r0, r0, sl
    1968:	78257830 	stmdavc	r5!, {r4, r5, fp, ip, sp, lr}
    196c:	7830203a 	ldmdavc	r0!, {r1, r3, r4, r5, sp}
    1970:	000a7825 	andeq	r7, sl, r5, lsr #16
    1974:	67617355 			; <UNDEFINED> instruction: 0x67617355
    1978:	25203a65 	strcs	r3, [r0, #-2661]!	; 0xfffff59b
    197c:	613c2073 	teqvs	ip, r3, ror r0
    1980:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1984:	203e7373 	eorscs	r7, lr, r3, ror r3
    1988:	206e6928 	rsbcs	r6, lr, r8, lsr #18
    198c:	29786568 	ldmdbcs	r8!, {r3, r5, r6, r8, sl, sp, lr}^
    1990:	61763c20 	cmnvs	r6, r0, lsr #24
    1994:	3e65756c 	cdpcc	5, 6, cr7, cr5, cr12, {3}
    1998:	6e692820 	cdpvs	8, 6, cr2, cr9, cr0, {1}
    199c:	78656820 	stmdavc	r5!, {r5, fp, sp, lr}^
    19a0:	00000a29 	andeq	r0, r0, r9, lsr #20
    19a4:	67617355 			; <UNDEFINED> instruction: 0x67617355
    19a8:	25203a65 	strcs	r3, [r0, #-2661]!	; 0xfffff59b
    19ac:	613c2073 	teqvs	ip, r3, ror r0
    19b0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    19b4:	203e7373 	eorscs	r7, lr, r3, ror r3
    19b8:	206e6928 	rsbcs	r6, lr, r8, lsr #18
    19bc:	29786568 	ldmdbcs	r8!, {r3, r5, r6, r8, sl, sp, lr}^
    19c0:	756e3c20 	strbvc	r3, [lr, #-3104]!	; 0xfffff3e0
    19c4:	6f775f6d 	svcvs	0x00775f6d
    19c8:	3e736472 	mrccc	4, 3, r6, cr3, cr2, {3}
    19cc:	6e692820 	cdpvs	8, 6, cr2, cr9, cr0, {1}
    19d0:	63656420 	cmnvs	r5, #32, 8	; 0x20000000
    19d4:	6c616d69 	stclvs	13, cr6, [r1], #-420	; 0xfffffe5c
    19d8:	00000a29 	andeq	r0, r0, r9, lsr #20
    19dc:	6f727245 	svcvs	0x00727245
    19e0:	49203a72 	stmdbmi	r0!, {r1, r4, r5, r6, r9, fp, ip, sp}
    19e4:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    19e8:	62206469 	eorvs	r6, r0, #1761607680	; 0x69000000
    19ec:	6c207469 	cfstrsvs	mvf7, [r0], #-420	; 0xfffffe5c
    19f0:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    19f4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
    19f8:	75677261 	strbvc	r7, [r7, #-609]!	; 0xfffffd9f
    19fc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1a00:	0000000a 	andeq	r0, r0, sl
    1a04:	6f727245 	svcvs	0x00727245
    1a08:	49203a72 	stmdbmi	r0!, {r1, r4, r5, r6, r9, fp, ip, sp}
    1a0c:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    1a10:	62206469 	eorvs	r6, r0, #1761607680	; 0x69000000
    1a14:	76207469 	strtvc	r7, [r0], -r9, ror #8
    1a18:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1a1c:	67726120 	ldrbvs	r6, [r2, -r0, lsr #2]!
    1a20:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1a24:	00000a74 	andeq	r0, r0, r4, ror sl
    1a28:	67617355 			; <UNDEFINED> instruction: 0x67617355
    1a2c:	25203a65 	strcs	r3, [r0, #-2661]!	; 0xfffff59b
    1a30:	613c2073 	teqvs	ip, r3, ror r0
    1a34:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1a38:	695f7373 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1a3c:	65685f6e 	strbvs	r5, [r8, #-3950]!	; 0xfffff092
    1a40:	32332878 	eorscc	r2, r3, #120, 16	; 0x780000
    1a44:	7469622d 	strbtvc	r6, [r9], #-557	; 0xfffffdd3
    1a48:	203e2973 	eorscs	r2, lr, r3, ror r9
    1a4c:	7469623c 	strbtvc	r6, [r9], #-572	; 0xfffffdc4
    1a50:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    1a54:	6f697461 	svcvs	0x00697461
    1a58:	6e695f6e 	cdpvs	15, 6, cr5, cr9, cr14, {3}
    1a5c:	6365645f 	cmnvs	r5, #1593835520	; 0x5f000000
    1a60:	6c616d69 	stclvs	13, cr6, [r1], #-420	; 0xfffffe5c
    1a64:	74203028 	strtvc	r3, [r0], #-40	; 0xffffffd8
    1a68:	3133206f 	teqcc	r3, pc, rrx
    1a6c:	3c203e29 	stccc	14, cr3, [r0], #-164	; 0xffffff5c
    1a70:	5f746962 	svcpl	0x00746962
    1a74:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    1a78:	20302865 	eorscs	r2, r0, r5, ror #16
    1a7c:	3120726f 			; <UNDEFINED> instruction: 0x3120726f
    1a80:	000a3e29 	andeq	r3, sl, r9, lsr #28
    1a84:	20746942 	rsbscs	r6, r4, r2, asr #18
    1a88:	40207525 	eormi	r7, r0, r5, lsr #10
    1a8c:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
    1a90:	3a783830 	bcc	1e0fb58 <__ROM_SIZE__+0x1dcfb58>
    1a94:	0a752520 	beq	1d4af1c <__ROM_SIZE__+0x1d0af1c>
    1a98:	00000000 	andeq	r0, r0, r0
    1a9c:	67617355 			; <UNDEFINED> instruction: 0x67617355
    1aa0:	25203a65 	strcs	r3, [r0, #-2661]!	; 0xfffff59b
    1aa4:	613c2073 	teqvs	ip, r3, ror r0
    1aa8:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1aac:	695f7373 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1ab0:	65685f6e 	strbvs	r5, [r8, #-3950]!	; 0xfffff092
    1ab4:	32332878 	eorscc	r2, r3, #120, 16	; 0x780000
    1ab8:	7469622d 	strbtvc	r6, [r9], #-557	; 0xfffffdd3
    1abc:	203e2973 	eorscs	r2, lr, r3, ror r9
    1ac0:	7469623c 	strbtvc	r6, [r9], #-572	; 0xfffffdc4
    1ac4:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    1ac8:	6f697461 	svcvs	0x00697461
    1acc:	6e695f6e 	cdpvs	15, 6, cr5, cr9, cr14, {3}
    1ad0:	6365645f 	cmnvs	r5, #1593835520	; 0x5f000000
    1ad4:	6c616d69 	stclvs	13, cr6, [r1], #-420	; 0xfffffe5c
    1ad8:	74203028 	strtvc	r3, [r0], #-40	; 0xffffffd8
    1adc:	3133206f 	teqcc	r3, pc, rrx
    1ae0:	00000a29 	andeq	r0, r0, r9, lsr #20
    1ae4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1ae8:	00000000 	andeq	r0, r0, r0
    1aec:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1af0:	756e2073 	strbvc	r2, [lr, #-115]!	; 0xffffff8d
    1af4:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    1af8:	20666f20 	rsbcs	r6, r6, r0, lsr #30
    1afc:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    1b00:	72662073 	rsbvc	r2, r6, #115	; 0x73
    1b04:	6d206d6f 	stcvs	13, cr6, [r0, #-444]!	; 0xfffffe44
    1b08:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1b0c:	00000079 	andeq	r0, r0, r9, ror r0
    1b10:	00323377 	eorseq	r3, r2, r7, ror r3
    1b14:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1b18:	61207365 			; <UNDEFINED> instruction: 0x61207365
    1b1c:	20323320 	eorscs	r3, r2, r0, lsr #6
    1b20:	20746962 	rsbscs	r6, r4, r2, ror #18
    1b24:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    1b28:	6f742065 	svcvs	0x00742065
    1b2c:	6d206120 	stfvss	f6, [r0, #-128]!	; 0xffffff80
    1b30:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1b34:	6f6c2079 	svcvs	0x006c2079
    1b38:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    1b3c:	00006e6f 	andeq	r6, r0, pc, ror #28
    1b40:	00323372 	eorseq	r3, r2, r2, ror r3
    1b44:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1b48:	20612073 	rsbcs	r2, r1, r3, ror r0
    1b4c:	62203233 	eorvs	r3, r0, #805306371	; 0x30000003
    1b50:	6d207469 	cfstrsvs	mvf7, [r0, #-420]!	; 0xfffffe5c
    1b54:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1b58:	6f6c2079 	svcvs	0x006c2079
    1b5c:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    1b60:	00006e6f 	andeq	r6, r0, pc, ror #28
    1b64:	00006272 	andeq	r6, r0, r2, ror r2
    1b68:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1b6c:	62206120 	eorvs	r6, r0, #32, 2
    1b70:	74207469 	strtvc	r7, [r0], #-1129	; 0xfffffb97
    1b74:	656d206f 	strbvs	r2, [sp, #-111]!	; 0xffffff91
    1b78:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1b7c:	636f6c20 	cmnvs	pc, #32, 24	; 0x2000
    1b80:	6f697461 	svcvs	0x00697461
    1b84:	0000006e 	andeq	r0, r0, lr, rrx
    1b88:	00006277 	andeq	r6, r0, r7, ror r2
    1b8c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1b90:	20612065 	rsbcs	r2, r1, r5, rrx
    1b94:	20746962 	rsbscs	r6, r4, r2, ror #18
    1b98:	6d206f74 	stcvs	15, cr6, [r0, #-464]!	; 0xfffffe30
    1b9c:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1ba0:	6f6c2079 	svcvs	0x006c2079
    1ba4:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    1ba8:	00006e6f 	andeq	r6, r0, pc, ror #28
    1bac:	000a7325 	andeq	r7, sl, r5, lsr #6
    1bb0:	000a6425 	andeq	r6, sl, r5, lsr #8
    1bb4:	6c697542 	cfstr64vs	mvdx7, [r9], #-264	; 0xfffffef8
    1bb8:	5b203a64 	blpl	810550 <__ROM_SIZE__+0x7d0550>
    1bbc:	61343861 	teqvs	r4, r1, ror #16
    1bc0:	3a643839 	bcc	190fcac <__ROM_SIZE__+0x18cfcac>
    1bc4:	61343861 	teqvs	r4, r1, ror #16
    1bc8:	5d643839 	stclpl	8, cr3, [r4, #-228]!	; 0xffffff1c
    1bcc:	5b202d20 	blpl	80d054 <__ROM_SIZE__+0x7cd054>
    1bd0:	61647264 	cmnvs	r4, r4, ror #4
    1bd4:	65406576 	strbvs	r6, [r0, #-1398]	; 0xfffffa8a
    1bd8:	5d6d7261 	sfmpl	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1bdc:	41202d20 			; <UNDEFINED> instruction: 0x41202d20
    1be0:	31207270 			; <UNDEFINED> instruction: 0x31207270
    1be4:	30322033 	eorscc	r2, r2, r3, lsr r0
    1be8:	2d203332 	stccs	3, cr3, [r0, #-200]!	; 0xffffff38
    1bec:	3a333120 	bcc	cce074 <__ROM_SIZE__+0xc8e074>
    1bf0:	353a3133 	ldrcc	r3, [sl, #-307]!	; 0xfffffecd
    1bf4:	00000a37 	andeq	r0, r0, r7, lsr sl
    1bf8:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
    1bfc:	6f63203a 	svcvs	0x0063203a
    1c00:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    1c04:	6f6e2064 	svcvs	0x006e2064
    1c08:	6f662074 	svcvs	0x00662074
    1c0c:	2e646e75 	mcrcs	14, 3, r6, cr4, cr5, {3}
    1c10:	65735520 	ldrbvs	r5, [r3, #-1312]!	; 0xfffffae0
    1c14:	65682220 	strbvs	r2, [r8, #-544]!	; 0xfffffde0
    1c18:	2022706c 	eorcs	r7, r2, ip, rrx
    1c1c:	6c206f74 	stcvs	15, cr6, [r0], #-464	; 0xfffffe30
    1c20:	20747369 	rsbscs	r7, r4, r9, ror #6
    1c24:	206c6c61 	rsbcs	r6, ip, r1, ror #24
    1c28:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    1c2c:	2e646e61 	cdpcs	14, 6, cr6, cr4, cr1, {3}
    1c30:	0000000a 	andeq	r0, r0, sl
    1c34:	00006c2d 	andeq	r6, r0, sp, lsr #24
    1c38:	3a657375 	bcc	195ea14 <__ROM_SIZE__+0x191ea14>
    1c3c:	6c656820 	stclvs	8, cr6, [r5], #-128	; 0xffffff80
    1c40:	6c2d2070 	stcvs	0, cr2, [sp], #-448	; 0xfffffe40
    1c44:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
    1c48:	73696c20 	cmnvc	r9, #32, 24	; 0x2000
    1c4c:	6e6f2074 	mcrvs	0, 3, r2, cr15, cr4, {3}
    1c50:	0a2e796c 	beq	ba0208 <__ROM_SIZE__+0xb60208>
    1c54:	0000000a 	andeq	r0, r0, sl
    1c58:	0000090a 	andeq	r0, r0, sl, lsl #18
    1c5c:	0000000a 	andeq	r0, r0, sl
    1c60:	00000000 	andeq	r0, r0, r0
    1c64:	00007325 	andeq	r7, r0, r5, lsr #6
    1c68:	0073250a 	rsbseq	r2, r3, sl, lsl #10
    1c6c:	00002023 	andeq	r2, r0, r3, lsr #32
    1c70:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1c74:	00007375 	andeq	r7, r0, r5, ror r3
    1c78:	75746552 	ldrbvc	r6, [r4, #-1362]!	; 0xfffffaae
    1c7c:	20736e72 	rsbscs	r6, r3, r2, ror lr
    1c80:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
    1c84:	61747320 	cmnvs	r4, r0, lsr #6
    1c88:	20737574 	rsbscs	r7, r3, r4, ror r5
    1c8c:	6c20666f 	stcvs	6, cr6, [r0], #-444	; 0xfffffe44
    1c90:	20747361 	rsbscs	r7, r4, r1, ror #6
    1c94:	63657865 	cmnvs	r5, #6619136	; 0x650000
    1c98:	64657475 	strbtvs	r7, [r5], #-1141	; 0xfffffb8b
    1c9c:	6d6f6320 	stclvs	3, cr6, [pc, #-128]!	; 1c24 <rsbox+0x3dc>
    1ca0:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
    1ca4:	00000000 	andeq	r0, r0, r0
    1ca8:	706c6568 	rsbvc	r6, ip, r8, ror #10
    1cac:	00000000 	andeq	r0, r0, r0
    1cb0:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
    1cb4:	61207374 			; <UNDEFINED> instruction: 0x61207374
    1cb8:	61206c6c 			; <UNDEFINED> instruction: 0x61206c6c
    1cbc:	6c696176 	stfvse	f6, [r9], #-472	; 0xfffffe28
    1cc0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1cc4:	6d6f6320 	stclvs	3, cr6, [pc, #-128]!	; 1c4c <rsbox+0x404>
    1cc8:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
    1ccc:	00000073 	andeq	r0, r0, r3, ror r0
    1cd0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1cd4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1cd8:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
    1cdc:	64207374 	strtvs	r7, [r0], #-884	; 0xfffffc8c
    1ce0:	69617465 	stmdbvs	r1!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1ce4:	6f20736c 	svcvs	0x0020736c
    1ce8:	68742066 	ldmdavs	r4!, {r1, r2, r5, r6, sp}^
    1cec:	75622065 	strbvc	r2, [r2, #-101]!	; 0xffffff9b
    1cf0:	00646c69 	rsbeq	r6, r4, r9, ror #24
    1cf4:	74736968 	ldrbtvc	r6, [r3], #-2408	; 0xfffff698
    1cf8:	0079726f 	rsbseq	r7, r9, pc, ror #4
    1cfc:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
    1d00:	6d6f6320 	stclvs	3, cr6, [pc, #-128]!	; 1c88 <rsbox+0x440>
    1d04:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
    1d08:	73696820 	cmnvc	r9, #32, 16	; 0x200000
    1d0c:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000164 	andeq	r0, r0, r4, ror #2
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000045 	andeq	r0, r0, r5, asr #32
      10:	0000000c 	andeq	r0, r0, ip
      14:	0000e600 	andeq	lr, r0, r0, lsl #12
      18:	0003c000 	andeq	ip, r3, r0
      1c:	00001000 	andeq	r1, r0, r0
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000039 	andeq	r0, r0, r9, lsr r0
      2c:	32050202 	andcc	r0, r5, #536870912	; 0x20000000
      30:	02000001 	andeq	r0, r0, #1
      34:	01220504 			; <UNDEFINED> instruction: 0x01220504
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	00011d05 	andeq	r1, r1, r5, lsl #26
      40:	08010200 	stmdaeq	r1, {r9}
      44:	00000037 	andeq	r0, r0, r7, lsr r0
      48:	ca070202 	bgt	1c0858 <__ROM_SIZE__+0x180858>
      4c:	02000000 	andeq	r0, r0, #0
      50:	01060704 	tsteq	r6, r4, lsl #14
      54:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      58:	00010107 	andeq	r0, r1, r7, lsl #2
      5c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
      60:	00746e69 	rsbseq	r6, r4, r9, ror #28
      64:	0b070402 	bleq	1c1074 <__ROM_SIZE__+0x181074>
      68:	02000001 	andeq	r0, r0, #1
      6c:	01470408 	cmpeq	r7, r8, lsl #8
      70:	63040000 	movwvs	r0, #16384	; 0x4000
      74:	0200646d 	andeq	r6, r0, #1828716544	; 0x6d000000
      78:	007e0f2a 	rsbseq	r0, lr, sl, lsr #30
      7c:	04050000 	streq	r0, [r5], #-0
      80:	00000084 	andeq	r0, r0, r4, lsl #1
      84:	00005d06 	andeq	r5, r0, r6, lsl #26
      88:	00009800 	andeq	r9, r0, r0, lsl #16
      8c:	005d0700 	subseq	r0, sp, r0, lsl #14
      90:	98070000 	stmdals	r7, {}	; <UNPREDICTABLE>
      94:	00000000 	andeq	r0, r0, r0
      98:	009e0405 	addseq	r0, lr, r5, lsl #8
      9c:	04050000 	streq	r0, [r5], #-0
      a0:	000000a4 	andeq	r0, r0, r4, lsr #1
      a4:	40080102 	andmi	r0, r8, r2, lsl #2
      a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      ac:	000000a4 	andeq	r0, r0, r4, lsr #1
      b0:	33020c09 	movwcc	r0, #11273	; 0x2c09
      b4:	0000e109 	andeq	lr, r0, r9, lsl #2
      b8:	01530a00 	cmpeq	r3, r0, lsl #20
      bc:	34020000 	strcc	r0, [r2], #-0
      c0:	0000e10f 	andeq	lr, r0, pc, lsl #2
      c4:	220a0000 	andcs	r0, sl, #0
      c8:	02000000 	andeq	r0, r0, #0
      cc:	00e10f35 	rsceq	r0, r1, r5, lsr pc
      d0:	0a040000 	beq	1000d8 <__ROM_SIZE__+0xc00d8>
      d4:	0000002f 	andeq	r0, r0, pc, lsr #32
      d8:	72073602 	andvc	r3, r7, #2097152	; 0x200000
      dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      e0:	ab040500 	blge	1014e8 <__ROM_SIZE__+0xc14e8>
      e4:	0b000000 	bleq	ec <vector_table+0xec>
      e8:	00000141 	andeq	r0, r0, r1, asr #2
      ec:	b0033702 	andlt	r3, r3, r2, lsl #14
      f0:	0c000000 	stceq	0, cr0, [r0], {-0}
      f4:	000000dd 	ldrdeq	r0, [r0], -sp
      f8:	e7010a01 	str	r0, [r1, -r1, lsl #20]
      fc:	05000000 	streq	r0, [r0, #-0]
     100:	00166003 	andseq	r6, r6, r3
     104:	00e10d00 	rsceq	r0, r1, r0, lsl #26
     108:	05010000 	streq	r0, [r1, #-0]
     10c:	00005d05 	andeq	r5, r0, r5, lsl #26
     110:	0003c000 	andeq	ip, r3, r0
     114:	00001000 	andeq	r1, r0, r0
     118:	5b9c0100 	blpl	fe700520 <_STACK_TOP_+0xde6f8524>
     11c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     120:	00000118 	andeq	r0, r0, r8, lsl r1
     124:	5d0e0501 	cfstr32pl	mvfx0, [lr, #-4]
     128:	04000000 	streq	r0, [r0], #-0
     12c:	00000000 	andeq	r0, r0, r0
     130:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     134:	0000013c 	andeq	r0, r0, ip, lsr r1
     138:	981b0501 	ldmdals	fp, {r0, r8, sl}
     13c:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
     140:	25000000 	strcs	r0, [r0, #-0]
     144:	0f000000 	svceq	0x00000000
     148:	000003c8 	andeq	r0, r0, r8, asr #7
     14c:	0000015b 	andeq	r0, r0, fp, asr r1
     150:	05500110 	ldrbeq	r0, [r0, #-272]	; 0xfffffef0
     154:	0016e403 	andseq	lr, r6, r3, lsl #8
     158:	11000000 	mrsne	r0, (UNDEF: 0)
     15c:	0000012b 	andeq	r0, r0, fp, lsr #2
     160:	0000012b 	andeq	r0, r0, fp, lsr #2
     164:	00052c03 	andeq	r2, r5, r3, lsl #24
     168:	00000090 	muleq	r0, r0, r0
     16c:	00f90004 	rscseq	r0, r9, r4
     170:	01040000 	mrseq	r0, (UNDEF: 4)
     174:	00000045 	andeq	r0, r0, r5, asr #32
     178:	0001600c 	andeq	r6, r1, ip
     17c:	0000e600 	andeq	lr, r0, r0, lsl #12
     180:	0003d000 	andeq	sp, r3, r0
     184:	00006400 	andeq	r6, r0, r0, lsl #8
     188:	0000b700 	andeq	fp, r0, r0, lsl #14
     18c:	01900200 	orrseq	r0, r0, r0, lsl #4
     190:	22010000 	andcs	r0, r1, #0
     194:	00041006 	andeq	r1, r4, r6
     198:	00002400 	andeq	r2, r0, r0, lsl #8
     19c:	039c0100 	orrseq	r0, ip, #0, 2
     1a0:	0000019a 	muleq	r0, sl, r1
     1a4:	4d051c01 	stcmi	12, cr1, [r5, #-4]
     1a8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     1ac:	1c000003 	stcne	0, cr0, [r0], {3}
     1b0:	01000000 	mrseq	r0, (UNDEF: 0)
     1b4:	0504049c 	streq	r0, [r4, #-1180]	; 0xfffffb64
     1b8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     1bc:	0001a005 	andeq	sl, r1, r5
     1c0:	06130100 	ldreq	r0, [r3], -r0, lsl #2
     1c4:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1c8:	00000024 	andeq	r0, r0, r4, lsr #32
     1cc:	008c9c01 	addeq	r9, ip, r1, lsl #24
     1d0:	63060000 	movwvs	r0, #24576	; 0x6000
     1d4:	11130100 	tstne	r3, r0, lsl #2
     1d8:	0000008c 	andeq	r0, r0, ip, lsl #1
     1dc:	00000052 	andeq	r0, r0, r2, asr r0
     1e0:	0000004a 	andeq	r0, r0, sl, asr #32
     1e4:	0003ec07 	andeq	lr, r3, r7, lsl #24
     1e8:	00005400 	andeq	r5, r0, r0, lsl #8
     1ec:	50010800 	andpl	r0, r1, r0, lsl #16
     1f0:	00003d01 	andeq	r3, r0, r1, lsl #26
     1f4:	40080109 	andmi	r0, r8, r9, lsl #2
     1f8:	00000000 	andeq	r0, r0, r0
     1fc:	00000090 	muleq	r0, r0, r0
     200:	01a00004 	moveq	r0, r4
     204:	01040000 	mrseq	r0, (UNDEF: 4)
     208:	00000045 	andeq	r0, r0, r5, asr #32
     20c:	0001a60c 	andeq	sl, r1, ip, lsl #12
     210:	0000e600 	andeq	lr, r0, r0, lsl #12
     214:	00043400 	andeq	r3, r4, r0, lsl #8
     218:	00006400 	andeq	r6, r0, r0, lsl #8
     21c:	0001b500 	andeq	fp, r1, r0, lsl #10
     220:	01d70200 	bicseq	r0, r7, r0, lsl #4
     224:	22010000 	andcs	r0, r1, #0
     228:	00047406 	andeq	r7, r4, r6, lsl #8
     22c:	00002400 	andeq	r2, r0, r0, lsl #8
     230:	039c0100 	orrseq	r0, ip, #0, 2
     234:	000001e9 	andeq	r0, r0, r9, ror #3
     238:	4d051c01 	stcmi	12, cr1, [r5, #-4]
     23c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     240:	1c000004 	stcne	0, cr0, [r0], {4}
     244:	01000000 	mrseq	r0, (UNDEF: 0)
     248:	0504049c 	streq	r0, [r4, #-1180]	; 0xfffffb64
     24c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     250:	0001e205 	andeq	lr, r1, r5, lsl #4
     254:	06130100 	ldreq	r0, [r3], -r0, lsl #2
     258:	00000434 	andeq	r0, r0, r4, lsr r4
     25c:	00000024 	andeq	r0, r0, r4, lsr #32
     260:	008c9c01 	addeq	r9, ip, r1, lsl #24
     264:	63060000 	movwvs	r0, #24576	; 0x6000
     268:	12130100 	andsne	r0, r3, #0, 2
     26c:	0000008c 	andeq	r0, r0, ip, lsl #1
     270:	00000094 	muleq	r0, r4, r0
     274:	0000008c 	andeq	r0, r0, ip, lsl #1
     278:	00045007 	andeq	r5, r4, r7
     27c:	00005400 	andeq	r5, r0, r0, lsl #8
     280:	50010800 	andpl	r0, r1, r0, lsl #16
     284:	00003d01 	andeq	r3, r0, r1, lsl #26
     288:	40080109 	andmi	r0, r8, r9, lsl #2
     28c:	00000000 	andeq	r0, r0, r0
     290:	00000126 	andeq	r0, r0, r6, lsr #2
     294:	02470004 	subeq	r0, r7, #4
     298:	01040000 	mrseq	r0, (UNDEF: 4)
     29c:	00000045 	andeq	r0, r0, r5, asr #32
     2a0:	0002360c 	andeq	r3, r2, ip, lsl #12
     2a4:	0000e600 	andeq	lr, r0, r0, lsl #12
     2a8:	00049800 	andeq	r9, r4, r0, lsl #16
     2ac:	00008c00 	andeq	r8, r0, r0, lsl #24
     2b0:	0002b400 	andeq	fp, r2, r0, lsl #8
     2b4:	06010200 	streq	r0, [r1], -r0, lsl #4
     2b8:	00000039 	andeq	r0, r0, r9, lsr r0
     2bc:	32050202 	andcc	r0, r5, #536870912	; 0x20000000
     2c0:	02000001 	andeq	r0, r0, #1
     2c4:	01220504 			; <UNDEFINED> instruction: 0x01220504
     2c8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     2cc:	00011d05 	andeq	r1, r1, r5, lsl #26
     2d0:	08010200 	stmdaeq	r1, {r9}
     2d4:	00000037 	andeq	r0, r0, r7, lsr r0
     2d8:	ca070202 	bgt	1c0ae8 <__ROM_SIZE__+0x180ae8>
     2dc:	02000000 	andeq	r0, r0, #0
     2e0:	01060704 	tsteq	r6, r4, lsl #14
     2e4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     2e8:	00010107 	andeq	r0, r1, r7, lsl #2
     2ec:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     2f0:	00746e69 	rsbseq	r6, r4, r9, ror #28
     2f4:	0b070402 	bleq	1c1304 <__ROM_SIZE__+0x181304>
     2f8:	02000001 	andeq	r0, r0, #1
     2fc:	01470408 	cmpeq	r7, r8, lsl #8
     300:	01020000 	mrseq	r0, (UNDEF: 2)
     304:	00004008 	andeq	r4, r0, r8
     308:	02650400 	rsbeq	r0, r5, #0, 8
     30c:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
     310:	0004ec06 	andeq	lr, r4, r6, lsl #24
     314:	00003800 	andeq	r3, r0, r0, lsl #16
     318:	cf9c0100 	svcgt	0x009c0100
     31c:	05000000 	streq	r0, [r0, #-0]
     320:	000004f2 	strdeq	r0, [r0], -r2
     324:	000000cf 	andeq	r0, r0, pc, asr #1
     328:	0004f605 	andeq	pc, r4, r5, lsl #12
     32c:	0000e100 	andeq	lr, r0, r0, lsl #2
     330:	04fa0500 	ldrbteq	r0, [sl], #1280	; 0x500
     334:	00ed0000 	rsceq	r0, sp, r0
     338:	00050000 	andeq	r0, r5, r0
     33c:	f9000005 			; <UNDEFINED> instruction: 0xf9000005
     340:	05000000 	streq	r0, [r0, #-0]
     344:	00000506 	andeq	r0, r0, r6, lsl #10
     348:	00000105 	andeq	r0, r0, r5, lsl #2
     34c:	00050c05 	andeq	r0, r5, r5, lsl #24
     350:	00011100 	andeq	r1, r1, r0, lsl #2
     354:	05120500 	ldreq	r0, [r2, #-1280]	; 0xfffffb00
     358:	011d0000 	tsteq	sp, r0
     35c:	06000000 	streq	r0, [r0], -r0
     360:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     364:	98062201 	stmdals	r6, {r0, r9, sp}
     368:	54000004 	strpl	r0, [r0], #-4
     36c:	01000000 	mrseq	r0, (UNDEF: 0)
     370:	0190079c 			; <UNDEFINED> instruction: 0x0190079c
     374:	01900000 	orrseq	r0, r0, r0
     378:	2f020000 	svccs	0x00020000
     37c:	01d70706 	bicseq	r0, r7, r6, lsl #14
     380:	01d70000 	bicseq	r0, r7, r0
     384:	2f030000 	svccs	0x00030000
     388:	02280706 	eoreq	r0, r8, #1572864	; 0x180000
     38c:	02280000 	eoreq	r0, r8, #0
     390:	65040000 	strvs	r0, [r4, #-0]
     394:	01fa0706 	mvnseq	r0, r6, lsl #14
     398:	01fa0000 	mvnseq	r0, r0
     39c:	66040000 	strvs	r0, [r4], -r0
     3a0:	02090706 	andeq	r0, r9, #1572864	; 0x180000
     3a4:	02090000 	andeq	r0, r9, #0
     3a8:	72040000 	andvc	r0, r4, #0
     3ac:	02180706 	andseq	r0, r8, #1572864	; 0x180000
     3b0:	02180000 	andseq	r0, r8, #0
     3b4:	73040000 	movwvc	r0, #16384	; 0x4000
     3b8:	00b40006 	adcseq	r0, r4, r6
     3bc:	00040000 	andeq	r0, r4, r0
int ping(int argc, char** argv) {
     3c0:	000002c3 	andeq	r0, r0, r3, asr #5
    printf("MESG Received a ping\n");
     3c4:	00450104 	subeq	r0, r5, r4, lsl #2
}
     3c8:	a50c0000 	strge	r0, [ip, #-0]
     3cc:	e6000002 	str	r0, [r0], -r2
void uputc(char c) {
     3d0:	24000000 	strcs	r0, [r0], #-0
  while ((UARTFR >> 5) & 1)
     3d4:	02000005 	andeq	r0, r0, #5
     3d8:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
  UART_DR = c;
     3dc:	02000003 	andeq	r0, r0, #3
  if (c == '\n')
     3e0:	00390601 	eorseq	r0, r9, r1, lsl #12
}
     3e4:	02020000 	andeq	r0, r2, #0
    uputc('\r');
     3e8:	00013205 	andeq	r3, r1, r5, lsl #4
}
     3ec:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     3f0:	00000122 	andeq	r0, r0, r2, lsr #2
  if (!((UARTFR >> 4) & 1)) return UART_DR;
     3f4:	1d050802 	stcne	8, cr0, [r5, #-8]
     3f8:	02000001 	andeq	r0, r0, #1
     3fc:	00370801 	eorseq	r0, r7, r1, lsl #16
     400:	02020000 	andeq	r0, r2, #0
  return -1;
     404:	0000ca07 	andeq	ip, r0, r7, lsl #20
}
     408:	028f0300 	addeq	r0, pc, #0, 6
     40c:	34020000 	strcc	r0, [r2], #-0
  UARTCTL = 0;
     410:	00005b19 	andeq	r5, r0, r9, lsl fp
     414:	07040200 	streq	r0, [r4, -r0, lsl #4]
  UARTIBRD = 8;
     418:	00000106 	andeq	r0, r0, r6, lsl #2
  UARTFBRD = 44;
     41c:	01070802 	tsteq	r7, r2, lsl #16
  UARTCC = 0;
     420:	04000001 	streq	r0, [r0], #-1
  UARTLCRH = 0x60;
     424:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  UARTCTL = 0x301;
     428:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
}
     42c:	00010b07 	andeq	r0, r1, r7, lsl #22
     430:	02830500 	addeq	r0, r3, #0, 10
void u2putc(char c) {
     434:	14010000 	strne	r0, [r1], #-0
  while ((UART2FR >> 5) & 1)
     438:	0000690c 	andeq	r6, r0, ip, lsl #18
     43c:	004f0600 	subeq	r0, pc, r0, lsl #12
  UART2_DR = c;
     440:	00930000 	addseq	r0, r3, r0
  if (c == '\n')
     444:	70070000 	andvc	r0, r7, r0
}
     448:	ef000000 	svc	0x00000000
    u2putc('\r');
     44c:	02980800 	addseq	r0, r8, #0, 16
}
     450:	1c010000 	stcne	0, cr0, [r1], {-0}
     454:	0000830a 	andeq	r8, r0, sl, lsl #6
  if (!((UART2FR >> 4) & 1)) return UART2_DR;
     458:	00030500 	andeq	r0, r3, r0, lsl #10
     45c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     460:	00000273 	andeq	r0, r0, r3, ror r2
     464:	24061701 	strcs	r1, [r6], #-1793	; 0xfffff8ff
  return -1;
     468:	02000005 	andeq	r0, r0, #5
}
     46c:	01000000 	mrseq	r0, (UNDEF: 0)
     470:	0215009c 	andseq	r0, r5, #156	; 0x9c
  UART2CTL = 0;
     474:	00040000 	andeq	r0, r4, r0
     478:	0000034e 	andeq	r0, r0, lr, asr #6
  UART2IBRD = 8;
     47c:	00450104 	subeq	r0, r5, r4, lsl #2
  UART2FBRD = 44;
     480:	490c0000 	stmdbmi	ip, {}	; <UNPREDICTABLE>
  UART2CC = 0;
     484:	e6000003 	str	r0, [r0], -r3
  UART2LCRH = 0x60;
     488:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
  UART2CTL = 0x301;
     48c:	ac000005 	stcge	0, cr0, [r0], {5}
}
     490:	7d000000 	stcvc	0, cr0, [r0, #-0]
     494:	02000004 	andeq	r0, r0, #4
  RCGCUART |= 3;
     498:	00390601 	eorseq	r0, r9, r1, lsl #12
     49c:	02020000 	andeq	r0, r2, #0
     4a0:	00013205 	andeq	r3, r1, r5, lsl #4
     4a4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
  RCGCGPIO |= 3;
     4a8:	00000122 	andeq	r0, r0, r2, lsr #2
     4ac:	1d050802 	stcne	8, cr0, [r5, #-8]
     4b0:	03000001 	movweq	r0, #1
  GPIODEN = 0x03;
     4b4:	00000335 	andeq	r0, r0, r5, lsr r3
     4b8:	52182e02 	andspl	r2, r8, #2, 28
  GPIOAFSEL = 0x03;
     4bc:	04000000 	streq	r0, [r0], #-0
  GPIOPCTL |= 0x00000011;
     4c0:	00000041 	andeq	r0, r0, r1, asr #32
     4c4:	37080102 	strcc	r0, [r8, -r2, lsl #2]
     4c8:	02000000 	andeq	r0, r0, #0
  GPIODEN2 = 0x03;
     4cc:	00ca0702 	sbceq	r0, sl, r2, lsl #14
     4d0:	8f030000 	svchi	0x00030000
  GPIOAFSEL2 = 0x03;
     4d4:	02000002 	andeq	r0, r0, #2
  GPIOPCTL2 |= 0x00000011;
     4d8:	006c1934 	rsbeq	r1, ip, r4, lsr r9
     4dc:	04020000 	streq	r0, [r2], #-0
     4e0:	00010607 	andeq	r0, r1, r7, lsl #12
}
     4e4:	07080200 	streq	r0, [r8, -r0, lsl #4]
     4e8:	00000101 	andeq	r0, r0, r1, lsl #2
void platform_init() {
     4ec:	69050405 	stmdbvs	r5, {r0, r2, sl}
    pin_setup();
     4f0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    uart_init();
     4f4:	010b0704 	tsteq	fp, r4, lsl #14
    uart2_init();
     4f8:	0d060000 	stceq	0, cr0, [r6, #-0]
    set_read_char(ugetc);
     4fc:	07000003 	streq	r0, [r0, -r3]
    set_read_char2(u2getc);
     500:	00005201 	andeq	r5, r0, r1, lsl #4
     504:	0e160300 	cdpeq	3, 1, cr0, cr6, cr0, {0}
    set_write_char(uputc);
     508:	000000b3 	strheq	r0, [r0], -r3
    set_write_char2(u2putc);
     50c:	0002e307 	andeq	lr, r2, r7, lsl #6
     510:	49080000 	stmdbmi	r8, {}	; <UNPREDICTABLE>
}
     514:	0100504e 	tsteq	r0, lr, asr #32
     518:	54554f08 	ldrbpl	r4, [r5], #-3848	; 0xfffff0f8
     51c:	81070200 	mrshi	r0, (UNDEF: 39)
     520:	03000003 	movweq	r0, #3
     524:	03890300 	orreq	r0, r9, #0, 6
  selected_mode = mode;
     528:	1b030000 	blne	c0530 <__ROM_SIZE__+0x80530>
  if (selected_mode == NONE) {
     52c:	00008803 	andeq	r8, r0, r3, lsl #16
  out_buf_rgn.addr = addr;
     530:	02e80900 	rsceq	r0, r8, #0, 18
  out_buf_rgn.size = size / 2;
     534:	030c0000 	movweq	r0, #49152	; 0xc000
  out_buf_rgn.curr_index = 0;
     538:	00f4101d 	rscseq	r1, r4, sp, lsl r0
  inp_buf_rgn.addr = addr + size / 2;
     53c:	dc0a0000 	stcle	0, cr0, [sl], {-0}
  inp_buf_rgn.curr_index = 0;
     540:	03000008 	movweq	r0, #8
  if (!(selected_mode & INP)) {
     544:	00f4151e 	rscseq	r1, r4, lr, lsl r5
    out_buf_rgn.size = size;
     548:	0a000000 	beq	550 <memlog_init+0x28>
  memset(addr, 0, size);
     54c:	00000949 	andeq	r0, r0, r9, asr #18
     550:	600c1f03 	andvs	r1, ip, r3, lsl #30
  } else if (!(selected_mode & OUT)) {
     554:	04000000 	streq	r0, [r0], #-0
     558:	00031e0a 	andeq	r1, r3, sl, lsl #28
    inp_buf_rgn.addr = addr;
     55c:	07210300 	streq	r0, [r1, -r0, lsl #6]!
    inp_buf_rgn.size = size;
     560:	0000007a 	andeq	r0, r0, sl, ror r0
     564:	040b0008 	streq	r0, [fp], #-8
  if (!(selected_mode & INP)) {
     568:	0000004d 	andeq	r0, r0, sp, asr #32
     56c:	0002d803 	andeq	sp, r2, r3, lsl #16
     570:	03220300 			; <UNDEFINED> instruction: 0x03220300
  if (inp_buf_rgn.addr[inp_buf_rgn.curr_index] == 0) {
     574:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
     578:	47040802 	strmi	r0, [r4, -r2, lsl #16]
  int val = inp_buf_rgn.addr[inp_buf_rgn.curr_index];
     57c:	0c000001 	stceq	0, cr0, [r0], {1}
  inp_buf_rgn.addr[inp_buf_rgn.curr_index] = 0;
     580:	00000329 	andeq	r0, r0, r9, lsr #6
  inp_buf_rgn.curr_index++;
     584:	fa131401 	blx	4c5590 <__ROM_SIZE__+0x485590>
     588:	05000000 	streq	r0, [r0, #-0]
  if (inp_buf_rgn.curr_index == inp_buf_rgn.size) {
     58c:	00001803 	andeq	r1, r0, r3, lsl #16
}
     590:	02f10c20 	rscseq	r0, r1, #32, 24	; 0x2000
    inp_buf_rgn.curr_index = 0;
     594:	14010000 	strne	r0, [r1], #-0
    return -1;
     598:	0000fa20 	andeq	pc, r0, r0, lsr #20
     59c:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    return -1;
     5a0:	0c200000 	stceq	0, cr0, [r0], #-0
     5a4:	00000304 	andeq	r0, r0, r4, lsl #6
  if (!(selected_mode & OUT) || c == 0) {
     5a8:	b30f1501 	movwlt	r1, #62721	; 0xf501
     5ac:	05000000 	streq	r0, [r0, #-0]
     5b0:	00000803 	andeq	r0, r0, r3, lsl #16
  out_buf_rgn.addr[out_buf_rgn.curr_index] = (uint8_t) c;
     5b4:	03120d20 	tsteq	r2, #32, 26	; 0x800
     5b8:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
  out_buf_rgn.curr_index++;
     5bc:	0005a806 	andeq	sl, r5, r6, lsl #16
  if (out_buf_rgn.curr_index == out_buf_rgn.size) {
     5c0:	00002c00 	andeq	r2, r0, r0, lsl #24
     5c4:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
    out_buf_rgn.curr_index = 0;
     5c8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     5cc:	48010063 	stmdami	r1, {r0, r1, r5, r6}
     5d0:	00016617 	andeq	r6, r1, r7, lsl r6
static void outstr(const char *str) {
     5d4:	00500100 	subseq	r0, r0, r0, lsl #2
  while (*str != '\0') {
     5d8:	40080102 	andmi	r0, r8, r2, lsl #2
    __write_char__(*str);
     5dc:	0f000000 	svceq	0x00000000
    str++;
     5e0:	00000375 	andeq	r0, r0, r5, ror r3
  while (*str != '\0') {
     5e4:	7a053401 	bvc	14d5f0 <__ROM_SIZE__+0x10d5f0>
}
     5e8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     5ec:	40000005 	andmi	r0, r0, r5
static bool printf_numbers(const char fmt, va_list *args, int l_count) {
     5f0:	01000000 	mrseq	r0, (UNDEF: 0)
     5f4:	00019c9c 	muleq	r1, ip, ip
  switch (fmt) {
     5f8:	61761000 	cmnvs	r6, r0
     5fc:	3d01006c 	stccc	0, cr0, [r1, #-432]	; 0xfffffe50
     600:	00007a07 	andeq	r7, r0, r7, lsl #20
      if (l_count == 0) {
     604:	0000d200 	andeq	sp, r0, r0, lsl #4
     608:	0000ce00 	andeq	ip, r0, r0, lsl #28
        value = va_arg(*args, unsigned int);
     60c:	3d0d0000 	stccc	0, cr0, [sp, #-0]
     610:	01000003 	tsteq	r0, r3
      if (fmt == 'u') {
     614:	05280617 	streq	r0, [r8, #-1559]!	; 0xfffff9e9
        if (value == 0) {
     618:	00400000 	subeq	r0, r0, r0
          __write_char__(hextable[0]);
     61c:	9c010000 	stcls	0, cr0, [r1], {-0}
     620:	00000206 	andeq	r0, r0, r6, lsl #4
  return true;
     624:	0008dc11 	andeq	sp, r8, r1, lsl ip
  switch (fmt) {
     628:	1b170100 	blne	5c0a30 <__ROM_SIZE__+0x580a30>
      outstr("\nprintf-error\n");
     62c:	00000206 	andeq	r0, r0, r6, lsl #4
      return false;
     630:	000000f6 	strdeq	r0, [r0], -r6
}
     634:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      if (l_count == 0) {
     638:	00094911 	andeq	r4, r9, r1, lsl r9
        value = va_arg(*args, int);
     63c:	2a170100 	bcs	5c0a44 <__ROM_SIZE__+0x580a44>
     640:	00000060 	andeq	r0, r0, r0, rrx
      if (value < 0) {
     644:	0000012a 	andeq	r0, r0, sl, lsr #2
        num[num_len++] = hextable[value % 10];
     648:	00000122 	andeq	r0, r0, r2, lsr #2
     64c:	00030d11 	andeq	r0, r3, r1, lsl sp
     650:	37170100 	ldrcc	r0, [r7, -r0, lsl #2]
     654:	000000b3 	strheq	r0, [r0], -r3
     658:	00000169 	andeq	r0, r0, r9, ror #2
     65c:	00000161 	andeq	r0, r0, r1, ror #2
     660:	00055212 	andeq	r5, r5, r2, lsl r2
     664:	00020c00 	andeq	r0, r2, r0, lsl #24
     668:	51011300 	mrspl	r1, SP_irq
        value = value / 10;
     66c:	13007502 	movwne	r7, #1282	; 0x502
      } while (value > 0);
     670:	f3035201 	vhsub.u8	d5, d3, d1
     674:	00005101 	andeq	r5, r0, r1, lsl #2
        __write_char__('-');
     678:	0041040b 	subeq	r0, r1, fp, lsl #8
     67c:	fd140000 	ldc2	0, cr0, [r4, #-0]
        value = -value;
     680:	fd000002 	stc2	0, cr0, [r0, #-8]
        __write_char__(num[--num_len]);
     684:	04000002 	streq	r0, [r0], #-2
     688:	79000741 	stmdbvc	r0, {r0, r6, r8, r9, sl}
     68c:	04000003 	streq	r0, [r0], #-3
     690:	00048e00 	andeq	r8, r4, r0, lsl #28
     694:	45010400 	strmi	r0, [r1, #-1024]	; 0xfffffc00
      while (num_len > 0) {
     698:	0c000000 	stceq	0, cr0, [r0], {-0}
  return true;
     69c:	00000408 	andeq	r0, r0, r8, lsl #8
          num[num_len++] = hextable[value % 10];
     6a0:	000000e6 	andeq	r0, r0, r6, ror #1
     6a4:	000005d4 	ldrdeq	r0, [r0], -r4
     6a8:	0000025c 	andeq	r0, r0, ip, asr r2
     6ac:	0000065e 	andeq	r0, r0, lr, asr r6
     6b0:	00044d02 	andeq	r4, r4, r2, lsl #26
     6b4:	1b280200 	blne	a00ebc <__ROM_SIZE__+0x9c0ebc>
     6b8:	00000031 	andeq	r0, r0, r1, lsr r0
     6bc:	0003eb03 	andeq	lr, r3, r3, lsl #22
          value = value / 10;
     6c0:	00030400 	andeq	r0, r3, r0, lsl #8
        } while (value > 0);
     6c4:	00000048 	andeq	r0, r0, r8, asr #32
        while (num_len > 0) {
     6c8:	00047f04 	andeq	r7, r4, r4, lsl #30
          __write_char__(num[--num_len]);
     6cc:	00004800 	andeq	r4, r0, r0, lsl #16
     6d0:	05000000 	streq	r0, [r0, #-0]
     6d4:	03ed0204 	mvneq	r0, #4, 4	; 0x40000000
     6d8:	63020000 	movwvs	r0, #8192	; 0x2000
     6dc:	00002518 	andeq	r2, r0, r8, lsl r5
     6e0:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
  return true;
     6e4:	00746e69 	rsbseq	r6, r4, r9, ror #28
              __write_char__(hextable[val]);
     6e8:	00006807 	andeq	r6, r0, r7, lsl #16
     6ec:	00680800 	rsbeq	r0, r8, r0, lsl #16
              leading_zero_ignored = true;
     6f0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
          while (start_bit >= 0) {
     6f4:	00400801 	subeq	r0, r0, r1, lsl #16
            int val = (value >> start_bit) & 0xF;
     6f8:	680a0000 	stmdavs	sl, {}	; <UNPREDICTABLE>
            if (val || leading_zero_ignored) {
     6fc:	0b000000 	bleq	704 <printf_numbers+0x114>
     700:	00000434 	andeq	r0, r0, r4, lsr r4
     704:	800f1801 	andhi	r1, pc, r1, lsl #16
          bool leading_zero_ignored = false;
     708:	0c000000 	stceq	0, cr0, [r0], {-0}
          int start_bit = LAST_NIBBLE_FIRST_BIT;
     70c:	00005d04 	andeq	r5, r0, r4, lsl #26
  return true;
     710:	03ac0b00 			; <UNDEFINED> instruction: 0x03ac0b00
        return false;
     714:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
        return false;
     718:	0000800f 	andeq	r8, r0, pc
     71c:	01070d00 	tsteq	r7, r0, lsl #26
     720:	000000ad 	andeq	r0, r0, sp, lsr #1
     724:	ad0e2301 	stcge	3, cr2, [lr, #-4]
     728:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     72c:	00000471 	andeq	r0, r0, r1, ror r4
int printf(const char *fmt, ...) {
     730:	03d50e00 	bicseq	r0, r5, #0, 28
     734:	00010000 	andeq	r0, r1, r0
     738:	37080109 	strcc	r0, [r8, -r9, lsl #2]
  va_start(args, fmt);
     73c:	02000000 	andeq	r0, r0, #0
  while (*fmt) {
     740:	000003f5 	strdeq	r0, [r0], -r5
        if (*fmt == '%') {
     744:	92032601 	andls	r2, r3, #1048576	; 0x100000
        __write_char__(*fmt);
     748:	0f000000 	svceq	0x00000000
        fmt++;
     74c:	00000068 	andeq	r0, r0, r8, rrx
  while (*fmt) {
     750:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    switch (state) {
     754:	0000d010 	andeq	sp, r0, r0, lsl r0
     758:	09000f00 	stmdbeq	r0, {r8, r9, sl, fp}
          fmt++;
     75c:	010b0704 	tsteq	fp, r4, lsl #14
          continue;
     760:	c4110000 	ldrgt	r0, [r1], #-0
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
     764:	01000003 	tsteq	r0, r3
     768:	00c00d28 	sbceq	r0, r0, r8, lsr #26
     76c:	03050000 	movweq	r0, #20480	; 0x5000
     770:	0000172c 	andeq	r1, r0, ip, lsr #14
     774:	0003bc12 	andeq	fp, r3, r2, lsl ip
        switch (*fmt) {
     778:	05fd0100 	ldrbeq	r0, [sp, #256]!	; 0x100
     77c:	00000056 	andeq	r0, r0, r6, asr r0
     780:	0000080c 	andeq	r0, r0, ip, lsl #16
     784:	00000024 	andeq	r0, r0, r4, lsr #32
            __write_char__(*fmt);
     788:	01199c01 	tsteq	r9, r1, lsl #24
     78c:	66130000 	ldrvs	r0, [r3], -r0
            state = CHECK_CH;
     790:	0100746d 	tsteq	r0, sp, ror #8
            break;
     794:	011919fd 			; <UNDEFINED> instruction: 0x011919fd
     798:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
            outstr(va_arg(args, const char *));
     79c:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
     7a0:	00140000 	andseq	r0, r4, r0
     7a4:	006f040c 	rsbeq	r0, pc, ip, lsl #8
            fmt++;
     7a8:	2b120000 	blcs	4807b0 <__ROM_SIZE__+0x4407b0>
            break;
     7ac:	01000001 	tsteq	r0, r1
            __write_char__(va_arg(args, int));
     7b0:	005605a9 	subseq	r0, r6, r9, lsr #11
     7b4:	07300000 	ldreq	r0, [r0, -r0]!
     7b8:	00dc0000 	sbcseq	r0, ip, r0
            fmt++;
     7bc:	9c010000 	stcls	0, cr0, [r1], {-0}
            break;
     7c0:	000001c0 	andeq	r0, r0, r0, asr #3
            if (*fmt == 'l') {
     7c4:	746d6613 	strbtvc	r6, [sp], #-1555	; 0xfffff9ed
     7c8:	18a90100 	stmiane	r9!, {r8}
            if (printf_numbers(*fmt, &args, l_count)) {
     7cc:	00000119 	andeq	r0, r0, r9, lsl r1
     7d0:	000001d7 	ldrdeq	r0, [r0], -r7
     7d4:	000001c7 	andeq	r0, r0, r7, asr #3
              state = CHECK_CH;
     7d8:	03fc1514 	mvnseq	r1, #20, 10	; 0x5000000
              fmt++;
     7dc:	aa010000 	bge	407e4 <__ROM_SIZE__+0x7e4>
              l_count++;
     7e0:	0000b410 	andeq	fp, r0, r0, lsl r4
            if (printf_numbers(*fmt, &args, 0)) {
     7e4:	00025400 	andeq	r5, r2, r0, lsl #8
     7e8:	00023800 	andeq	r3, r2, r0, lsl #16
              fmt++;
     7ec:	047a1100 	ldrbteq	r1, [sl], #-256	; 0xffffff00
              break;
     7f0:	ab010000 	blge	407f8 <__ROM_SIZE__+0x7f8>
            return -1;
     7f4:	00004a0b 	andeq	r4, r0, fp, lsl #20
}
     7f8:	5c910200 	lfmpl	f0, 4, [r1], {0}
     7fc:	00006016 	andeq	r6, r0, r6, lsl r0
            return -1;
     800:	0001a000 	andeq	sl, r1, r0
     804:	03e31500 	mvneq	r1, #0, 10
     808:	d4010000 	strle	r0, [r1], #-0
int printf2(const char *fmt, ...) {
     80c:	00005611 	andeq	r5, r0, r1, lsl r6
     810:	00030500 	andeq	r0, r3, r0, lsl #10
    __write_char2__(*fmt);
     814:	0002fd00 	andeq	pc, r2, r0, lsl #26
     818:	07d41700 	ldrbeq	r1, [r4, r0, lsl #14]
  while (*fmt != '\0') {
     81c:	01c00000 	biceq	r0, r0, r0
     820:	01180000 	tsteq	r8, r0
     824:	bc910351 	ldclt	3, cr0, [r1], {81}	; 0x51
     828:	1900007f 	stmdbne	r0, {r0, r1, r2, r3, r4, r5, r6}
     82c:	000007a8 	andeq	r0, r0, r8, lsr #15
{
     830:	00000355 	andeq	r0, r0, r5, asr r3
  for (i = 0; i < Nk; ++i)
     834:	0007ea17 	andeq	lr, r7, r7, lsl sl
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
     838:	0001c000 	andeq	ip, r1, r0
     83c:	51011800 	tstpl	r1, r0, lsl #16
     840:	7fbc9103 	svcvc	0x00bc9103
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
     844:	01520118 	cmpeq	r2, r8, lsl r1
     848:	1a000030 	bne	910 <KeyExpansion+0xe0>
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
     84c:	00000462 	andeq	r0, r0, r2, ror #8
     850:	380d3201 	stmdacc	sp, {r0, r9, ip, sp}
     854:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
     858:	40000005 	andmi	r0, r0, r5
  for (i = 0; i < Nk; ++i)
     85c:	01000001 	tsteq	r0, r1
     860:	0003389c 	muleq	r3, ip, r8
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     864:	6d661300 	stclvs	3, cr1, [r6, #-0]
    j = i * 4; k=(i - Nk) * 4;
     868:	32010074 	andcc	r0, r1, #116	; 0x74
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
     86c:	00006f27 	andeq	r6, r0, r7, lsr #30
     870:	00035800 	andeq	r5, r3, r0, lsl #16
     874:	00033c00 	andeq	r3, r3, r0, lsl #24
     878:	047a1b00 	ldrbteq	r1, [sl], #-2816	; 0xfffff500
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
     87c:	32010000 	andcc	r0, r1, #0
     880:	00033f35 	andeq	r3, r3, r5, lsr pc
     884:	00042500 	andeq	r2, r4, r0, lsl #10
     888:	00040f00 	andeq	r0, r4, r0, lsl #30
     88c:	03e31b00 	mvneq	r1, #0, 22
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
     890:	32010000 	andcc	r0, r1, #0
     894:	0000563f 	andeq	r5, r0, pc, lsr r6
     898:	0004cf00 	andeq	ip, r4, r0, lsl #30
     89c:	0004b500 	andeq	fp, r4, r0, lsl #10
     8a0:	756e1c00 	strbvc	r1, [lr, #-3072]!	; 0xfffff400
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
     8a4:	3301006d 	movwcc	r0, #4205	; 0x106d
     8a8:	00034508 	andeq	r4, r3, r8, lsl #10
     8ac:	64910200 	ldrvs	r0, [r1], #512	; 0x200
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     8b0:	0003cd15 	andeq	ip, r3, r5, lsl sp
      k = (i - 1) * 4;
     8b4:	07340100 	ldreq	r0, [r4, -r0, lsl #2]!
      tempa[0]=RoundKey[k + 0];
     8b8:	00000056 	andeq	r0, r0, r6, asr r0
     8bc:	00000584 	andeq	r0, r0, r4, lsl #11
      tempa[1]=RoundKey[k + 1];
     8c0:	00000572 	andeq	r0, r0, r2, ror r5
     8c4:	00004816 	andeq	r4, r0, r6, lsl r8
      tempa[2]=RoundKey[k + 2];
     8c8:	00027a00 	andeq	r7, r2, r0, lsl #20
     8cc:	045c1500 	ldrbeq	r1, [ip], #-1280	; 0xfffffb00
      tempa[3]=RoundKey[k + 3];
     8d0:	41010000 	mrsmi	r0, (UNDEF: 1)
     8d4:	0000560b 	andeq	r5, r0, fp, lsl #12
    if (i % Nk == 0)
     8d8:	00060100 	andeq	r0, r6, r0, lsl #2
     8dc:	0005f700 	andeq	pc, r5, r0, lsl #14
        tempa[0] = tempa[1];
     8e0:	067e1d00 	ldrbteq	r1, [lr], -r0, lsl #26
        tempa[1] = tempa[2];
     8e4:	02660000 	rsbeq	r0, r6, #0
        tempa[2] = tempa[3];
     8e8:	01180000 	tsteq	r8, r0
        tempa[3] = u8tmp;
     8ec:	2d080250 	sfmcs	f0, 4, [r8, #-320]	; 0xfffffec0
        tempa[0] = getSBoxValue(tempa[0]);
     8f0:	06961e00 	ldreq	r1, [r6], r0, lsl #28
     8f4:	01180000 	tsteq	r8, r0
        tempa[1] = getSBoxValue(tempa[1]);
     8f8:	00910950 	addseq	r0, r1, r0, asr r9
     8fc:	4c220074 	stcmi	0, cr0, [r2], #-464	; 0xfffffe30
        tempa[2] = getSBoxValue(tempa[2]);
     900:	0001941c 	andeq	r9, r1, ip, lsl r4
     904:	00001600 	andeq	r1, r0, r0, lsl #12
        tempa[3] = getSBoxValue(tempa[3]);
     908:	03240000 			; <UNDEFINED> instruction: 0x03240000
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
     90c:	5c150000 	ldcpl	0, cr0, [r5], {-0}
     910:	01000004 	tsteq	r0, r4
     914:	00d01471 	sbcseq	r1, r0, r1, ror r4
     918:	064c0000 	strbeq	r0, [ip], -r0
}
     91c:	06420000 	strbeq	r0, [r2], -r0
     920:	e61f0000 	ldr	r0, [pc], -r0
{
     924:	28000006 	stmdacs	r0, {r1, r2}
  for (i = 0; i < 4; ++i)
     928:	00000000 	andeq	r0, r0, r0
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
     92c:	15000003 	strne	r0, [r0, #-3]
     930:	00000443 	andeq	r0, r0, r3, asr #8
     934:	560f9301 	strpl	r9, [pc], -r1, lsl #6
     938:	91000000 	mrsls	r0, (UNDEF: 0)
     93c:	8d000006 	stchi	0, cr0, [r0, #-24]	; 0xffffffe8
     940:	15000006 	strne	r0, [r0, #-6]
     944:	00000397 	muleq	r0, r7, r3
    for (j = 0; j < 4; ++j)
     948:	38109401 	ldmdacc	r0, {r0, sl, ip, pc}
     94c:	b7000003 	strlt	r0, [r0, -r3]
  for (i = 0; i < 4; ++i)
     950:	af000006 	svcge	0x00000006
     954:	20000006 	andcs	r0, r0, r6
     958:	00000030 	andeq	r0, r0, r0, lsr r0
    for (j = 0; j < 4; ++j)
     95c:	6c617621 	stclvs	6, cr7, [r1], #-132	; 0xffffff7c
}
     960:	11970100 	orrsne	r0, r7, r0, lsl #2
  for (i = 0; i < 4; ++i)
     964:	00000056 	andeq	r0, r0, r6, asr r0
    for (j = 0; j < 4; ++j)
     968:	000006f4 	strdeq	r0, [r0], -r4
     96c:	000006ec 	andeq	r0, r0, ip, ror #13
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
     970:	0006f01e 	andeq	pc, r6, lr, lsl r0	; <UNPREDICTABLE>
     974:	50011800 	andpl	r1, r1, r0, lsl #16
     978:	7400750f 	strvc	r7, [r0], #-1295	; 0xfffffaf1
     97c:	1a3f2500 	bne	fc9d84 <__ROM_SIZE__+0xf89d84>
     980:	00172c03 	andseq	r2, r7, r3, lsl #24
    for (j = 0; j < 4; ++j)
     984:	01942200 	orrseq	r2, r4, r0, lsl #4
     988:	1d000000 	stcne	0, cr0, [r0, #-0]
  for (i = 0; i < 4; ++i)
     98c:	00000622 	andeq	r0, r0, r2, lsr #12
     990:	00000310 	andeq	r0, r0, r0, lsl r3
    for (j = 0; j < 4; ++j)
     994:	02500118 	subseq	r0, r0, #24, 2
}
     998:	1e003008 	cdpne	0, 0, cr3, cr0, cr8, {0}
  for (i = 0; i < 4; ++i)
     99c:	000006e0 	andeq	r0, r0, r0, ror #13
     9a0:	09500118 	ldmdbeq	r0, {r3, r4, r8}^
     9a4:	00740091 			; <UNDEFINED> instruction: 0x00740091
  temp           = (*state)[0][1];
     9a8:	941c4c22 	ldrls	r4, [ip], #-3106	; 0xfffff3de
  (*state)[0][1] = (*state)[1][1];
     9ac:	17000001 	strne	r0, [r0, -r1]
  (*state)[1][1] = (*state)[2][1];
     9b0:	00000630 	andeq	r0, r0, r0, lsr r6
  (*state)[2][1] = (*state)[3][1];
     9b4:	00000355 	andeq	r0, r0, r5, asr r3
  temp           = (*state)[0][2];
     9b8:	05500118 	ldrbeq	r0, [r0, #-280]	; 0xfffffee8
  (*state)[0][2] = (*state)[2][2];
     9bc:	00171c03 	andseq	r1, r7, r3, lsl #24
  temp           = (*state)[1][2];
     9c0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  (*state)[1][2] = (*state)[3][2];
     9c4:	04020201 	streq	r0, [r2], #-513	; 0xfffffdff
  temp           = (*state)[0][3];
     9c8:	040c0000 	streq	r0, [ip], #-0
  (*state)[0][3] = (*state)[3][3];
     9cc:	0000004a 	andeq	r0, r0, sl, asr #32
  (*state)[3][3] = (*state)[2][3];
     9d0:	0000680f 	andeq	r6, r0, pc, lsl #16
  (*state)[2][3] = (*state)[1][3];
     9d4:	00035500 	andeq	r5, r3, r0, lsl #10
}
     9d8:	00d01000 	sbcseq	r1, r0, r0
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
     9dc:	00090000 	andeq	r0, r9, r0
     9e0:	00039022 	andeq	r9, r3, r2, lsr #32
     9e4:	0d2b0100 	stfeqs	f0, [fp, #-0]
}
     9e8:	000005d4 	ldrdeq	r0, [r0], -r4
{
     9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     9f0:	73139c01 	tstvc	r3, #256	; 0x100
  for (i = 0; i < 4; ++i)
     9f4:	01007274 	tsteq	r0, r4, ror r2
    t   = (*state)[i][0];
     9f8:	0119202b 	tsteq	r9, fp, lsr #32
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
     9fc:	07370000 	ldreq	r0, [r7, -r0]!
     a00:	07330000 	ldreq	r0, [r3, -r0]!
     a04:	00000000 	andeq	r0, r0, r0
     a08:	00000c93 	muleq	r0, r3, ip
     a0c:	06650004 	strbteq	r0, [r5], -r4
     a10:	01040000 	mrseq	r0, (UNDEF: 4)
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
     a14:	00000045 	andeq	r0, r0, r5, asr #32
     a18:	0005740c 	andeq	r7, r5, ip, lsl #8
     a1c:	0000e600 	andeq	lr, r0, r0, lsl #12
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
     a20:	00083000 	andeq	r3, r8, r0
     a24:	0005e000 	andeq	lr, r5, r0
     a28:	000a1400 	andeq	r1, sl, r0, lsl #8
     a2c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     a30:	00746e69 	rsbseq	r6, r4, r9, ror #28
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
     a34:	0004ad03 	andeq	sl, r4, r3, lsl #26
     a38:	17d10200 	ldrbne	r0, [r1, r0, lsl #4]
     a3c:	00000038 	andeq	r0, r0, r8, lsr r0
     a40:	0b070404 	bleq	1c1a58 <__ROM_SIZE__+0x181a58>
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
     a44:	04000001 	streq	r0, [r0], #-1
     a48:	011d0508 	tsteq	sp, r8, lsl #10
     a4c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     a50:	00014704 	andeq	r4, r1, r4, lsl #14
  for (i = 0; i < 4; ++i)
     a54:	06010400 	streq	r0, [r1], -r0, lsl #8
     a58:	00000039 	andeq	r0, r0, r9, lsr r0
}
     a5c:	32050204 	andcc	r0, r5, #4, 4	; 0x40000000
{
     a60:	04000001 	streq	r0, [r0], #-1
     a64:	01220504 			; <UNDEFINED> instruction: 0x01220504
  for (i = 0; i < 4; ++i)
     a68:	35030000 	strcc	r0, [r3, #-0]
    a = (*state)[i][0];
     a6c:	03000003 	movweq	r0, #3
     a70:	0073182e 	rsbseq	r1, r3, lr, lsr #16
    b = (*state)[i][1];
     a74:	62050000 	andvs	r0, r5, #0
     a78:	04000000 	streq	r0, [r0], #-0
    c = (*state)[i][2];
     a7c:	00370801 	eorseq	r0, r7, r1, lsl #16
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
     a80:	02040000 	andeq	r0, r4, #0
     a84:	0000ca07 	andeq	ip, r0, r7, lsl #20
     a88:	07040400 	streq	r0, [r4, -r0, lsl #8]
     a8c:	00000106 	andeq	r0, r0, r6, lsl #2
     a90:	01070804 	tsteq	r7, r4, lsl #16
     a94:	06000001 	streq	r0, [r0], -r1
     a98:	00000494 	muleq	r0, r4, r4
     a9c:	082c04c0 	stmdaeq	ip!, {r6, r7, sl}
     aa0:	000000b6 	strheq	r0, [r0], -r6
     aa4:	00053b07 	andeq	r3, r5, r7, lsl #22
     aa8:	0b2e0400 	bleq	b81ab0 <__ROM_SIZE__+0xb41ab0>
     aac:	000000bb 	strheq	r0, [r0], -fp
     ab0:	76490800 	strbvc	r0, [r9], -r0, lsl #16
     ab4:	0b300400 	bleq	c01abc <__ROM_SIZE__+0xbc1abc>
     ab8:	000000cb 	andeq	r0, r0, fp, asr #1
     abc:	8f0500b0 	svchi	0x000500b0
     ac0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     ac4:	00000062 	andeq	r0, r0, r2, rrx
     ac8:	000000cb 	andeq	r0, r0, fp, asr #1
     acc:	0000380a 	andeq	r3, r0, sl, lsl #16
     ad0:	0900af00 	stmdbeq	r0, {r8, r9, sl, fp, sp, pc}
     ad4:	00000062 	andeq	r0, r0, r2, rrx
     ad8:	000000db 	ldrdeq	r0, [r0], -fp
     adc:	0000380a 	andeq	r3, r0, sl, lsl #16
     ae0:	03000f00 	movweq	r0, #3840	; 0xf00
     ae4:	0000050b 	andeq	r0, r0, fp, lsl #10
     ae8:	e7114801 	ldr	r4, [r1, -r1, lsl #16]
     aec:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     af0:	00000062 	andeq	r0, r0, r2, rrx
     af4:	000000fd 	strdeq	r0, [r0], -sp
     af8:	0000380a 	andeq	r3, r0, sl, lsl #16
     afc:	380a0300 	stmdacc	sl, {r8, r9}
     b00:	03000000 	movweq	r0, #0
     b04:	006e0900 	rsbeq	r0, lr, r0, lsl #18
     b08:	010d0000 	mrseq	r0, (UNDEF: 13)
     b0c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
     b10:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     b14:	00fd0500 	rscseq	r0, sp, r0, lsl #10
     b18:	c10b0000 	mrsgt	r0, (UNDEF: 11)
     b1c:	01000004 	tsteq	r0, r4
     b20:	010d164f 	tsteq	sp, pc, asr #12
     b24:	03050000 	movweq	r0, #20480	; 0x5000
     b28:	0000173c 	andeq	r1, r0, ip, lsr r7
     b2c:	0004c00b 	andeq	ip, r4, fp
     b30:	16630100 	strbtne	r0, [r3], -r0, lsl #2
     b34:	0000010d 	andeq	r0, r0, sp, lsl #2
     b38:	18480305 	stmdane	r8, {r0, r2, r8, r9}^
     b3c:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
     b40:	46000000 	strmi	r0, [r0], -r0
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
     b44:	0a000001 	beq	b50 <InvMixColumns+0xf2>
     b48:	00000038 	andeq	r0, r0, r8, lsr r0
     b4c:	3605000a 	strcc	r0, [r5], -sl
     b50:	0b000001 	bleq	b5c <InvMixColumns+0xfe>
     b54:	00000560 	andeq	r0, r0, r0, ror #10
     b58:	46167801 	ldrmi	r7, [r6], -r1, lsl #16
     b5c:	05000001 	streq	r0, [r0, #-1]
     b60:	00183c03 	andseq	r3, r8, r3, lsl #24
     b64:	05440c00 	strbeq	r0, [r4, #-3072]	; 0xfffff400
     b68:	1a010000 	bne	40b70 <__ROM_SIZE__+0xb70>
     b6c:	0d9c0602 	ldceq	6, cr0, [ip, #8]
     b70:	00740000 	rsbseq	r0, r4, r0
     b74:	9c010000 	stcls	0, cr0, [r1], {-0}
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
     b78:	00000221 	andeq	r0, r0, r1, lsr #4
     b7c:	7874630d 	ldmdavc	r4!, {r0, r2, r3, r8, r9, sp, lr}^
     b80:	021a0100 	andseq	r0, sl, #0, 2
     b84:	0002212c 	andeq	r2, r2, ip, lsr #2
     b88:	00075900 	andeq	r5, r7, r0, lsl #18
     b8c:	00075500 	andeq	r5, r7, r0, lsl #10
     b90:	75620d00 	strbvc	r0, [r2, #-3328]!	; 0xfffff300
     b94:	1a010066 	bne	40d34 <__ROM_SIZE__+0xd34>
     b98:	02273a02 	eoreq	r3, r7, #8192	; 0x2000
     b9c:	077b0000 	ldrbeq	r0, [fp, -r0]!
     ba0:	07770000 	ldrbeq	r0, [r7, -r0]!
     ba4:	040e0000 	streq	r0, [lr], #-0
     ba8:	01000005 	tsteq	r0, r5
     bac:	2c46021a 	sfmcs	f0, 2, [r6], {26}
     bb0:	9d000000 	stcls	0, cr0, [r0, #-0]
  for (i = 0; i < 4; ++i)
     bb4:	99000007 	stmdbls	r0, {r0, r1, r2}
     bb8:	0f000007 	svceq	0x00000007
     bbc:	00000523 	andeq	r0, r0, r3, lsr #10
}
     bc0:	0b021c01 	bleq	87bcc <__ROM_SIZE__+0x47bcc>
  for (i = 0; i < 4; ++i)
     bc4:	000000cb 	andeq	r0, r0, fp, asr #1
     bc8:	10589102 	subsne	r9, r8, r2, lsl #2
    for (j = 0; j < 4; ++j)
     bcc:	1e010069 	cdpne	0, 0, cr0, cr1, cr9, {3}
{
     bd0:	002c0a02 	eoreq	r0, ip, r2, lsl #20
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
     bd4:	07bf0000 	ldreq	r0, [pc, r0]!
     bd8:	07bb0000 	ldreq	r0, [fp, r0]!
     bdc:	62100000 	andsvs	r0, r0, #0
     be0:	1f010069 	svcne	0x00010069
     be4:	00250702 	eoreq	r0, r5, r2, lsl #14
    for (j = 0; j < 4; ++j)
     be8:	07e80000 	strbeq	r0, [r8, r0]!
     bec:	07de0000 	ldrbeq	r0, [lr, r0]
  for (i = 0; i < 4; ++i)
     bf0:	e8110000 	ldmda	r1, {}	; <UNPREDICTABLE>
     bf4:	8a00000d 	bhi	c30 <InvShiftRows+0x24>
    for (j = 0; j < 4; ++j)
     bf8:	0a00000c 	beq	c30 <InvShiftRows+0x24>
}
     bfc:	12000002 	andne	r0, r0, #2
  for (i = 0; i < 4; ++i)
     c00:	7d025001 	stcvc	0, cr5, [r2, #-4]
     c04:	51011200 	mrspl	r1, R9_usr
     c08:	01b07703 	lslseq	r7, r3, #14
  temp = (*state)[3][1];
     c0c:	01520112 	cmpeq	r2, r2, lsl r1
  (*state)[3][1] = (*state)[2][1];
     c10:	f0130040 			; <UNDEFINED> instruction: 0xf0130040
  (*state)[2][1] = (*state)[1][1];
     c14:	b200000d 	andlt	r0, r0, #13
  (*state)[1][1] = (*state)[0][1];
     c18:	12000005 	andne	r0, r0, #5
  temp = (*state)[0][2];
     c1c:	7d025001 	stcvc	0, cr5, [r2, #-4]
  (*state)[0][2] = (*state)[2][2];
     c20:	51011200 	mrspl	r1, R9_usr
  temp = (*state)[1][2];
     c24:	00007702 	andeq	r7, r0, r2, lsl #14
  (*state)[1][2] = (*state)[3][2];
     c28:	8f041400 	svchi	0x00041400
  temp = (*state)[0][3];
     c2c:	14000000 	strne	r0, [r0], #-0
  (*state)[0][3] = (*state)[1][3];
     c30:	00006204 	andeq	r6, r0, r4, lsl #4
  (*state)[1][3] = (*state)[2][3];
     c34:	05130c00 	ldreq	r0, [r3, #-3072]	; 0xfffff400
  (*state)[2][3] = (*state)[3][3];
     c38:	04010000 	streq	r0, [r1], #-0
}
     c3c:	0d560602 	ldcleq	6, cr0, [r6, #-8]
{
     c40:	00460000 	subeq	r0, r6, r0
  AddRoundKey(0, state, RoundKey);
     c44:	9c010000 	stcls	0, cr0, [r1], {-0}
     c48:	00000315 	andeq	r0, r0, r5, lsl r3
     c4c:	7874630d 	ldmdavc	r4!, {r0, r2, r3, r8, r9, sp, lr}^
  for (round = 1; ; ++round)
     c50:	02040100 	andeq	r0, r4, #0, 2
    MixColumns(state);
     c54:	0002212d 	andeq	r2, r2, sp, lsr #2
    AddRoundKey(round, state, RoundKey);
     c58:	00082d00 	andeq	r2, r8, r0, lsl #26
     c5c:	00082900 	andeq	r2, r8, r0, lsl #18
     c60:	75620d00 	strbvc	r0, [r2, #-3328]!	; 0xfffff300
  for (round = 1; ; ++round)
     c64:	04010066 	streq	r0, [r1], #-102	; 0xffffff9a
    SubBytes(state);
     c68:	02273b02 	eoreq	r3, r7, #2048	; 0x800
    ShiftRows(state);
     c6c:	084f0000 	stmdaeq	pc, {}^	; <UNPREDICTABLE>
     c70:	084b0000 	stmdaeq	fp, {}^	; <UNPREDICTABLE>
    if (round == Nr) {
     c74:	040e0000 	streq	r0, [lr], #-0
  AddRoundKey(Nr, state, RoundKey);
     c78:	01000005 	tsteq	r0, r5
     c7c:	2c470204 	sfmcs	f0, 2, [r7], {4}
}
     c80:	71000000 	mrsvc	r0, (UNDEF: 0)
{
     c84:	6d000008 	stcvs	0, cr0, [r0, #-32]	; 0xffffffe0
  AddRoundKey(Nr, state, RoundKey);
     c88:	10000008 	andne	r0, r0, r8
     c8c:	06010069 	streq	r0, [r1], -r9, rrx
     c90:	002c0a02 	eoreq	r0, ip, r2, lsl #20
  for (round = (Nr - 1); ; --round)
     c94:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    InvMixColumns(state);
     c98:	088f0000 	stmeq	pc, {}	; <UNPREDICTABLE>
  for (round = (Nr - 1); ; --round)
     c9c:	b40f0000 	strlt	r0, [pc], #-0	; ca4 <InvCipher+0x22>
    InvShiftRows(state);
     ca0:	01000004 	tsteq	r0, r4
     ca4:	cb0b0207 	blgt	2c14c8 <__ROM_SIZE__+0x2814c8>
    InvSubBytes(state);
     ca8:	02000000 	andeq	r0, r0, #0
    AddRoundKey(round, state, RoundKey);
     cac:	70115891 	mulsvc	r1, r1, r8
     cb0:	8a00000d 	bhi	cec <AES_init_ctx_iv+0xe>
     cb4:	c500000c 	strgt	r0, [r0, #-12]
    if (round == 0) {
     cb8:	12000002 	andne	r0, r0, #2
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
     cbc:	7d025001 	stcvc	0, cr5, [r2, #-4]
    buf[i] ^= Iv[i];
     cc0:	51011200 	mrspl	r1, R9_usr
     cc4:	12007402 	andne	r7, r0, #33554432	; 0x2000000
     cc8:	40015201 	andmi	r5, r1, r1, lsl #4
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
     ccc:	0d781100 	ldfeqe	f1, [r8, #-0]
     cd0:	04de0000 	ldrbeq	r0, [lr], #0
}
     cd4:	02df0000 	sbcseq	r0, pc, #0
  KeyExpansion(ctx->RoundKey, key);
     cd8:	01120000 	tsteq	r2, r0
}
     cdc:	00740250 	rsbseq	r0, r4, r0, asr r2
{
     ce0:	02510112 	subseq	r0, r1, #-2147483644	; 0x80000004
  KeyExpansion(ctx->RoundKey, key);
     ce4:	11000077 	tstne	r0, r7, ror r0
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     ce8:	00000d84 	andeq	r0, r0, r4, lsl #27
     cec:	000003d6 	ldrdeq	r0, [r0], -r6
     cf0:	000002f9 	strdeq	r0, [r0], -r9
}
     cf4:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     cf8:	01120074 	tsteq	r2, r4, ror r0
     cfc:	00760251 	rsbseq	r0, r6, r1, asr r2
}
     d00:	0d8e1300 	stceq	3, cr1, [lr]
{
     d04:	0c8a0000 	stceq	0, cr0, [sl], {0}
  Cipher((state_t*)buf, ctx->RoundKey);
     d08:	01120000 	tsteq	r2, r0
     d0c:	00760250 	rsbseq	r0, r6, r0, asr r2
{
     d10:	02510112 	subseq	r0, r1, #-2147483644	; 0x80000004
  InvCipher((state_t*)buf, ctx->RoundKey);
     d14:	0112007d 	tsteq	r2, sp, ror r0
     d18:	00400152 	subeq	r0, r0, r2, asr r1
}
     d1c:	04c60c00 	strbeq	r0, [r6], #3072	; 0xc00
{
     d20:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
     d24:	0d1e0601 	ldceq	6, cr0, [lr, #-4]
  uint8_t *Iv = ctx->Iv;
     d28:	00380000 	eorseq	r0, r8, r0
     d2c:	9c010000 	stcls	0, cr0, [r1], {-0}
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d30:	000003d6 	ldrdeq	r0, [r0], -r6
    XorWithIv(buf, Iv);
     d34:	7874630d 	ldmdavc	r4!, {r0, r2, r3, r8, r9, sp, lr}^
    Cipher((state_t*)buf, ctx->RoundKey);
     d38:	01f50100 	mvnseq	r0, r0, lsl #2
     d3c:	0002212d 	andeq	r2, r2, sp, lsr #2
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d40:	0008b600 	andeq	fp, r8, r0, lsl #12
    buf += AES_BLOCKLEN;
     d44:	0008b200 	andeq	fp, r8, r0, lsl #4
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d48:	75620d00 	strbvc	r0, [r2, #-3328]!	; 0xfffff300
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
     d4c:	f5010066 			; <UNDEFINED> instruction: 0xf5010066
     d50:	02273b01 	eoreq	r3, r7, #1024	; 0x400
}
     d54:	08dc0000 	ldmeq	ip, {}^	; <UNPREDICTABLE>
{
     d58:	08d40000 	ldmeq	r4, {}^	; <UNPREDICTABLE>
     d5c:	040e0000 	streq	r0, [lr], #-0
     d60:	01000005 	tsteq	r0, r5
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d64:	2c4701f5 	stfcse	f0, [r7], {245}	; 0xf5
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
     d68:	16000000 	strne	r0, [r0], -r0
     d6c:	12000009 	andne	r0, r0, #9
    InvCipher((state_t*)buf, ctx->RoundKey);
     d70:	10000009 	andne	r0, r0, r9
     d74:	f7010069 			; <UNDEFINED> instruction: 0xf7010069
    XorWithIv(buf, ctx->Iv);
     d78:	002c0a01 	eoreq	r0, ip, r1, lsl #20
     d7c:	09380000 	ldmdbeq	r8!, {}	; <UNPREDICTABLE>
     d80:	09340000 	ldmdbeq	r4!, {}	; <UNPREDICTABLE>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
     d84:	49100000 	ldmdbmi	r0, {}	; <UNPREDICTABLE>
     d88:	f8010076 			; <UNDEFINED> instruction: 0xf8010076
     d8c:	02270c01 	eoreq	r0, r7, #256	; 0x100
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d90:	095f0000 	ldmdbeq	pc, {}^	; <UNPREDICTABLE>
     d94:	09570000 	ldmdbeq	r7, {}^	; <UNPREDICTABLE>
}
     d98:	38110000 	ldmdacc	r1, {}	; <UNPREDICTABLE>
{
     d9c:	d600000d 	strle	r0, [r0], -sp
     da0:	a6000003 	strge	r0, [r0], -r3
     da4:	12000003 	andne	r0, r0, #3
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     da8:	74025001 	strvc	r5, [r2], #-1
          ctx->Iv[bi] = 0;
     dac:	40110000 	andsmi	r0, r1, r0
     db0:	b200000d 	andlt	r0, r0, #13
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     db4:	c0000005 	andgt	r0, r0, r5
      bi = 0;
     db8:	12000003 	andne	r0, r0, #3
    buf[i] = (buf[i] ^ buffer[bi]);
     dbc:	74025001 	strvc	r5, [r2], #-1
     dc0:	51011200 	mrspl	r1, R9_usr
     dc4:	00007602 	andeq	r7, r0, r2, lsl #12
     dc8:	000d5213 	andeq	r5, sp, r3, lsl r2
     dcc:	000c8a00 	andeq	r8, ip, r0, lsl #20
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     dd0:	50011200 	andpl	r1, r1, r0, lsl #4
     dd4:	12007802 	andne	r7, r0, #131072	; 0x20000
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
     dd8:	40015201 	andmi	r5, r1, r1, lsl #4
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
     ddc:	e2150000 	ands	r0, r5, #0
     de0:	01000005 	tsteq	r0, r5
     de4:	bc0d01ec 	stflts	f0, [sp], {236}	; 0xec
      Cipher((state_t*)buffer,ctx->RoundKey);
     de8:	1a00000c 	bne	e20 <atoi+0x10>
     dec:	01000000 	mrseq	r0, (UNDEF: 0)
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     df0:	00041e9c 	muleq	r4, ip, lr
     df4:	75621600 	strbvc	r1, [r2, #-1536]!	; 0xfffffa00
        if (ctx->Iv[bi] == 255)
     df8:	ec010066 	stc	0, cr0, [r1], {102}	; 0x66
     dfc:	02272001 	eoreq	r2, r7, #1
        ctx->Iv[bi] += 1;
     e00:	50010000 	andpl	r0, r1, r0
     e04:	00764916 	rsbseq	r4, r6, r6, lsl r9
      bi = 0;
     e08:	3401ec01 	strcc	lr, [r1], #-3073	; 0xfffff3ff
}
     e0c:	0000041e 	andeq	r0, r0, lr, lsl r4
int atoi(const char* str) {
     e10:	69105101 	ldmdbvs	r0, {r0, r8, ip, lr}
  int res = 0;
     e14:	01ee0100 	mvneq	r0, r0, lsl #2
    res = res * 10 + str[i] - '0';
     e18:	0000620b 	andeq	r6, r0, fp, lsl #4
     e1c:	00099900 	andeq	r9, r9, r0, lsl #18
     e20:	00099300 	andeq	r9, r9, r0, lsl #6
  for (int i = 0; str[i] != '\0'; ++i) {
     e24:	04140000 	ldreq	r0, [r4], #-0
     e28:	0000006e 	andeq	r0, r0, lr, rrx
uint32_t atoh(const char* str) {
     e2c:	0004dd0c 	andeq	sp, r4, ip, lsl #26
  uint32_t hex = 0;
     e30:	01dc0100 	bicseq	r0, ip, r0, lsl #2
    } else if (str[i] >= 'a' && str[i] <= 'f') {
     e34:	000d1006 	andeq	r1, sp, r6
     e38:	00000e00 	andeq	r0, r0, r0, lsl #28
     e3c:	7e9c0100 	fmlvce	f0, f4, f0
    hex |= value;
     e40:	0d000004 	stceq	0, cr0, [r0, #-16]
  for (uint32_t i = 0; str[i] != '\0'; i++) {
     e44:	00787463 	rsbseq	r7, r8, r3, ror #8
     e48:	2c01dc01 	stccs	12, cr13, [r1], {1}
    if (str[i] >= '0' && str[i] <= '9') {
     e4c:	0000047e 	andeq	r0, r0, lr, ror r4
     e50:	000009c9 	andeq	r0, r0, r9, asr #19
     e54:	000009c3 	andeq	r0, r0, r3, asr #19
      value = str[i] - '0';
     e58:	6675620d 	ldrbtvs	r6, [r5], -sp, lsl #4
    } else if (str[i] >= 'A' && str[i] <= 'F') {
     e5c:	01dc0100 	bicseq	r0, ip, r0, lsl #2
     e60:	0002273a 	andeq	r2, r2, sl, lsr r7
      value = str[i] - 'A' + 10;
     e64:	0009fb00 	andeq	pc, r9, r0, lsl #22
}
     e68:	0009f500 	andeq	pc, r9, r0, lsl #10
int r32(int argc, char *argv[]) {
     e6c:	0d1c1300 	ldceq	3, cr1, [ip, #-0]
  if (argc < 2) {
     e70:	04de0000 	ldrbeq	r0, [lr], #0
  uint32_t addr = atoh(argv[1]);
     e74:	01120000 	tsteq	r2, r0
     e78:	01f30350 	mvnseq	r0, r0, asr r3
  printf("0x%x: 0x%x\n", addr, data);
     e7c:	51011251 	tstpl	r1, r1, asr r2
     e80:	5001f303 	andpl	pc, r1, r3, lsl #6
}
     e84:	04140000 	ldreq	r0, [r4], #-0
    printf("Usage: %s <address> (in hex)\n", argv[0]);
     e88:	000000b6 	strheq	r0, [r0], -r6
     e8c:	00059f0c 	andeq	r9, r5, ip, lsl #30
    return -1;
     e90:	01d60100 	bicseq	r0, r6, r0, lsl #2
     e94:	000d0206 	andeq	r0, sp, r6, lsl #4
     e98:	00000e00 	andeq	r0, r0, r0, lsl #28
int w32(int argc, char *argv[]) {
     e9c:	de9c0100 	fmllee	f0, f4, f0
  if (argc < 3) {
     ea0:	0d000004 	stceq	0, cr0, [r0, #-16]
  uint32_t addr = atoh(argv[1]);
     ea4:	00787463 	rsbseq	r7, r8, r3, ror #8
     ea8:	2c01d601 	stccs	6, cr13, [r1], {1}
  uint32_t data = atoh(argv[2]);
     eac:	0000047e 	andeq	r0, r0, lr, ror r4
     eb0:	00000a2d 	andeq	r0, r0, sp, lsr #20
  return 0;
     eb4:	00000a27 	andeq	r0, r0, r7, lsr #20
    printf("Usage: %s <address> (in hex) <value> (in hex)\n", argv[0]);
     eb8:	6675620d 	ldrbtvs	r6, [r5], -sp, lsl #4
     ebc:	01d60100 	bicseq	r0, r6, r0, lsl #2
    return -1;
     ec0:	0002273a 	andeq	r2, r2, sl, lsr r7
     ec4:	000a5f00 	andeq	r5, sl, r0, lsl #30
     ec8:	000a5900 	andeq	r5, sl, r0, lsl #18
int read_mem(int argc, char *argv[]) {
     ecc:	0d0e1300 	stceq	3, cr1, [lr, #-0]
  if (argc < 3) {
     ed0:	05b20000 	ldreq	r0, [r2, #0]!
  uint32_t addr = atoh(argv[1]);
     ed4:	01120000 	tsteq	r2, r0
     ed8:	01f30350 	mvnseq	r0, r0, asr r3
  uint32_t length = atoi(argv[2]);
     edc:	51011251 	tstpl	r1, r1, asr r2
     ee0:	5001f303 	andpl	pc, r1, r3, lsl #6
  for (uint32_t i = 0, data = 0; i < length; i++) {
     ee4:	f4150000 			; <UNDEFINED> instruction: 0xf4150000
    printf("Usage: %s <address> (in hex) <num_words> (in decimal)\n", argv[0]);
     ee8:	01000004 	tsteq	r0, r4
     eec:	820d01b7 	andhi	r0, sp, #-1073741779	; 0xc000002d
    return -1;
     ef0:	3a00000c 	bcc	f28 <w32_bit+0x14>
     ef4:	01000000 	mrseq	r0, (UNDEF: 0)
    printf("0x%x: 0x%x\n", addr, data);
     ef8:	0005ac9c 	muleq	r5, ip, ip
     efc:	03fc0e00 	mvnseq	r0, #0, 28
    addr += 4;
     f00:	b7010000 	strlt	r0, [r1, -r0]
  for (uint32_t i = 0, data = 0; i < length; i++) {
     f04:	05ac2001 	streq	r2, [ip, #1]!
  return 0;
     f08:	0a910000 	beq	fe440f10 <_STACK_TOP_+0xde438f14>
}
     f0c:	0a8b0000 	beq	fe2c0f14 <_STACK_TOP_+0xde2b8f18>
     f10:	3b0e0000 	blcc	380f18 <__ROM_SIZE__+0x340f18>
{
     f14:	01000005 	tsteq	r0, r5
  if (argc < 4) {
     f18:	1e3601b7 	mrcne	1, 1, r0, cr6, cr7, {5}
  uint32_t addr = atoh(argv[1]);
     f1c:	c0000004 	andgt	r0, r0, r4
     f20:	ba00000a 	blt	f50 <w32_bit+0x3c>
  uint32_t bit_loc = atoi(argv[2]);
     f24:	1700000a 	strne	r0, [r0, -sl]
     f28:	0000055a 	andeq	r0, r0, sl, asr r5
  uint32_t bit_val = atoi(argv[3]);
     f2c:	0b01b901 	bleq	6f338 <__ROM_SIZE__+0x2f338>
     f30:	00000062 	andeq	r0, r0, r2, rrx
  if (bit_loc > 31) {
     f34:	00000af1 	strdeq	r0, [r0], -r1
  if (bit_val != 0 && bit_val != 1) {
     f38:	00000ae9 	andeq	r0, r0, r9, ror #21
  uint32_t data = reg32(addr);
     f3c:	000c9211 	andeq	r9, ip, r1, lsl r2
  data = data | (bit_val << bit_loc);
     f40:	000a3b00 	andeq	r3, sl, r0, lsl #22
  data = data & ~(!bit_val << bit_loc);
     f44:	00055300 	andeq	r5, r5, r0, lsl #6
     f48:	50011200 	andpl	r1, r1, r0, lsl #4
     f4c:	01123a01 	tsteq	r2, r1, lsl #20
  return 0;
     f50:	00750251 	rsbseq	r0, r5, r1, asr r2
    printf("Error: Invalid bit location argument\n");
     f54:	02520112 	subseq	r0, r2, #-2147483644	; 0x80000004
     f58:	11000076 	tstne	r0, r6, ror r0
    printf("Error: Invalid bit value argument\n");
     f5c:	00000c9c 	muleq	r0, ip, ip
     f60:	00000728 	andeq	r0, r0, r8, lsr #14
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)> <bit_value(0 or 1)>\n", argv[0]);
     f64:	00000567 	andeq	r0, r0, r7, ror #10
     f68:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
  return -1;
     f6c:	11000075 	tstne	r0, r5, ror r0
     f70:	00000ca6 	andeq	r0, r0, r6, lsr #25
     f74:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     f78:	0000057b 	andeq	r0, r0, fp, ror r5
{
     f7c:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
  if (argc < 3) {
     f80:	11000075 	tstne	r0, r5, ror r0
  uint32_t addr = atoh(argv[1]);
     f84:	00000cac 	andeq	r0, r0, ip, lsr #25
     f88:	000006db 	ldrdeq	r0, [r0], -fp
  uint32_t bit_loc = atoi(argv[2]);
     f8c:	0000058f 	andeq	r0, r0, pc, lsl #11
     f90:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
  if (bit_loc > 31) {
     f94:	13000075 	movwne	r0, #117	; 0x75
  uint32_t data = reg32(addr);
     f98:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
  printf("Bit %u @ 0x%08x: %u\n", bit_loc, addr, bit_val);
     f9c:	00000a3b 	andeq	r0, r0, fp, lsr sl
     fa0:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
     fa4:	01120074 	tsteq	r2, r4, ror r0
  return 0;
     fa8:	00750251 	rsbseq	r0, r5, r1, asr r2
    printf("Error: Invalid bit location argument\n");
     fac:	02520112 	subseq	r0, r2, #-2147483644	; 0x80000004
     fb0:	00000076 	andeq	r0, r0, r6, ror r0
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)\n", argv[0]);
     fb4:	00db0414 	sbcseq	r0, fp, r4, lsl r4
     fb8:	f7150000 			; <UNDEFINED> instruction: 0xf7150000
  return -1;
     fbc:	01000004 	tsteq	r0, r4
     fc0:	3e0d019d 	mcrcc	1, 0, r0, cr13, cr13, {4}
     fc4:	4400000c 	strmi	r0, [r0], #-12
     fc8:	01000000 	mrseq	r0, (UNDEF: 0)
size_t strlen(const char *str) {
     fcc:	00069f9c 	muleq	r6, ip, pc	; <UNPREDICTABLE>
  while (str[len]) {
     fd0:	03fc0e00 	mvnseq	r0, #0, 28
     fd4:	9d010000 	stcls	0, cr0, [r1, #-0]
     fd8:	05ac1d01 	streq	r1, [ip, #3329]!	; 0xd01
  while (*str1 && (*str1 == *str2)) {
     fdc:	0b2d0000 	bleq	b40fe4 <__ROM_SIZE__+0xb00fe4>
    str2++;
     fe0:	0b270000 	bleq	9c0fe8 <__ROM_SIZE__+0x980fe8>
  while (*str1 && (*str1 == *str2)) {
     fe4:	3b0e0000 	blcc	380fec <__ROM_SIZE__+0x340fec>
     fe8:	01000005 	tsteq	r0, r5
  return *str1 - *str2;
     fec:	1e33019d 	mrcne	1, 1, r0, cr3, cr13, {4}
}
     ff0:	5c000004 	stcpl	0, cr0, [r0], {4}
    *(str1++) = *(str2++);
     ff4:	5600000b 	strpl	r0, [r0], -fp
     ff8:	1700000b 	strne	r0, [r0, -fp]
  while (*str2) {
     ffc:	0000055a 	andeq	r0, r0, sl, asr r5
  *str1 = '\0';
    1000:	0b019f01 	bleq	68c0c <__ROM_SIZE__+0x28c0c>
}
    1004:	00000062 	andeq	r0, r0, r2, rrx
  for (i = 0; i < size; i++) {
    1008:	00000b8d 	andeq	r0, r0, sp, lsl #23
    dest_char[i] = src_char[i];
    100c:	00000b85 	andeq	r0, r0, r5, lsl #23
    1010:	000c4e11 	andeq	r4, ip, r1, lsl lr
  for (i = 0; i < size; i++) {
    1014:	000a3b00 	andeq	r3, sl, r0, lsl #22
}
    1018:	00062700 	andeq	r2, r6, r0, lsl #14
  for (i = 0; i < size; i++) {
    101c:	50011200 	andpl	r1, r1, r0, lsl #4
    dest_char[i] = val;
    1020:	01123001 	tsteq	r2, r1
  for (i = 0; i < size; i++) {
    1024:	00750251 	rsbseq	r0, r5, r1, asr r2
}
    1028:	02520112 	subseq	r0, r2, #-2147483644	; 0x80000004
void __attribute__((optimize("O0"), weak)) initial_setup(void) {
    102c:	11000076 	tstne	r0, r6, ror r0
    1030:	00000c58 	andeq	r0, r0, r8, asr ip
  char *src = &_etext, *dst = &_data;
    1034:	000008b3 			; <UNDEFINED> instruction: 0x000008b3
    1038:	0000063b 	andeq	r0, r0, fp, lsr r6
  if (dst != src)
    103c:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
    1040:	11000075 	tstne	r0, r5, ror r0
    while (dst < &_edata) *(dst++) = *(src++);
    1044:	00000c62 	andeq	r0, r0, r2, ror #24
    1048:	00000a3b 	andeq	r0, r0, fp, lsr sl
    104c:	0000065b 	andeq	r0, r0, fp, asr r6
    1050:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
    1054:	01120074 	tsteq	r2, r4, ror r0
    1058:	00750251 	rsbseq	r0, r5, r1, asr r2
  for (dst = &_bss; dst < &_ebss; dst++) *dst = 0;
    105c:	02520112 	subseq	r0, r2, #-2147483644	; 0x80000004
    1060:	11000076 	tstne	r0, r6, ror r0
    1064:	00000c6c 	andeq	r0, r0, ip, ror #24
    1068:	000009f2 	strdeq	r0, [r0], -r2
    106c:	0000066f 	andeq	r0, r0, pc, ror #12
    1070:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
    1074:	11000075 	tstne	r0, r5, ror r0
  platform_init();
    1078:	00000c72 	andeq	r0, r0, r2, ror ip
}
    107c:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
    1080:	00000683 	andeq	r0, r0, r3, lsl #13
    1084:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
    1088:	13000075 	movwne	r0, #117	; 0x75
    108c:	00000c80 	andeq	r0, r0, r0, lsl #25
    1090:	00000a3b 	andeq	r0, r0, fp, lsr sl
    1094:	01500112 	cmpeq	r0, r2, lsl r1
static void delete(void) {
    1098:	5101123a 	tstpl	r1, sl, lsr r2
  __write_char__(BACK_SPACE);
    109c:	12007502 	andne	r7, r0, #8388608	; 0x800000
    10a0:	76025201 	strvc	r5, [r2], -r1, lsl #4
  __write_char__(SPACE);
    10a4:	15000000 	strne	r0, [r0, #-0]
  __write_char__(BACK_SPACE);
    10a8:	000005af 	andeq	r0, r0, pc, lsr #11
    10ac:	0d017f01 	stceq	15, cr7, [r1, #-4]
}
    10b0:	00000c0c 	andeq	r0, r0, ip, lsl #24
static void clear_prompt(int char_count) {
    10b4:	00000032 	andeq	r0, r0, r2, lsr r0
  while (char_count) {
    10b8:	06db9c01 	ldrbeq	r9, [fp], r1, lsl #24
    delete ();
    10bc:	fc180000 	ldc2	0, cr0, [r8], {-0}
  while (char_count) {
    10c0:	01000003 	tsteq	r0, r3
}
    10c4:	ac23017f 	stfges	f0, [r3], #-508	; 0xfffffe04
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    10c8:	01000005 	tsteq	r0, r5
    auto_load[i].command(0, NULL);
    10cc:	04a81750 	strteq	r1, [r8], #1872	; 0x750
    10d0:	81010000 	mrshi	r0, (UNDEF: 1)
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    10d4:	00620b01 	rsbeq	r0, r2, r1, lsl #22
    10d8:	0bc50000 	bleq	ff1410e0 <_STACK_TOP_+0xdf1390e4>
    10dc:	0bc30000 	bleq	ff0c10e4 <_STACK_TOP_+0xdf0b90e8>
    10e0:	15000000 	strne	r0, [r0, #-0]
    10e4:	000005c9 	andeq	r0, r0, r9, asr #11
}
    10e8:	0d017301 	stceq	3, cr7, [r1, #-4]
static int show_history(int argc, char **argv) {
    10ec:	00000bc4 	andeq	r0, r0, r4, asr #23
  uint32_t end_index = total_num_commands-1;
    10f0:	00000048 	andeq	r0, r0, r8, asr #32
  if (total_num_commands > NUM_HISTORY_ENTRIES) {
    10f4:	07289c01 	streq	r9, [r8, -r1, lsl #24]!
    10f8:	fc180000 	ldc2	0, cr0, [r8], {-0}
    beg_index = total_num_commands - NUM_HISTORY_ENTRIES;
    10fc:	01000003 	tsteq	r0, r3
    1100:	ac220173 	stfges	f0, [r2], #-460	; 0xfffffe34
  uint32_t beg_index = 0;
    1104:	01000005 	tsteq	r0, r5
    printf("%s\n", cmd_history[index % NUM_HISTORY_ENTRIES]);
    1108:	00691050 	rsbeq	r1, r9, r0, asr r0
    110c:	0b017501 	bleq	5e518 <__ROM_SIZE__+0x1e518>
    1110:	00000062 	andeq	r0, r0, r2, rrx
    1114:	00000be0 	andeq	r0, r0, r0, ror #23
  for (uint32_t index = beg_index; index <= end_index; ++index) {
    1118:	00000bd8 	ldrdeq	r0, [r0], -r8
}
    111c:	01006a10 	tsteq	r0, r0, lsl sl
    1120:	620e0175 	andvs	r0, lr, #1073741853	; 0x4000001d
    1124:	1b000000 	blne	112c <cmd_exec_status>
    1128:	1500000c 	strne	r0, [r0, #-12]
int cmd_exec_status(int argc, char **argv) {
    112c:	0000000c 	andeq	r0, r0, ip
  printf("%d\n", __cmd_exec_status);
    1130:	00052a15 	andeq	r2, r5, r5, lsl sl
    1134:	015e0100 	cmpeq	lr, r0, lsl #2
}
    1138:	000a5e0d 	andeq	r5, sl, sp, lsl #28
    113c:	00016600 	andeq	r6, r1, r0, lsl #12
    1140:	b39c0100 	orrslt	r0, ip, #0, 2
static int build_info(int argc, char **argv) {
    1144:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
  printf("Build: [" SHELL_VERSION ":" USER_REPO_VERSION "] - [" BUILD_USER
    1148:	000003fc 	strdeq	r0, [r0], -ip
}
    114c:	24015e01 	strcs	r5, [r1], #-3585	; 0xfffff1ff
    1150:	000005ac 	andeq	r0, r0, ip, lsr #11
static void execute(int argc, char **argv) {
    1154:	00000c4a 	andeq	r0, r0, sl, asr #24
    1158:	00000c44 	andeq	r0, r0, r4, asr #24
  for (int i = 0; table[i].command_name != NULL; i++) {
    115c:	01006910 	tsteq	r0, r0, lsl r9
    1160:	25070160 	strcs	r0, [r7, #-352]	; 0xfffffea0
    1164:	7a000000 	bvc	116c <execute+0x18>
    1168:	7600000c 	strvc	r0, [r0], -ip
    116c:	1000000c 	andne	r0, r0, ip
    if (strcmp(argv[0], table[i].command_name) == 0) {
    1170:	61010061 	tstvs	r1, r1, rrx
    1174:	00620b01 	rsbeq	r0, r2, r1, lsl #22
      __cmd_exec_status = table[i].command(argc, &argv[0]);
    1178:	0c9b0000 	ldceq	0, cr0, [fp], {0}
    117c:	0c990000 	ldceq	0, cr0, [r9], {0}
    1180:	62100000 	andsvs	r0, r0, #0
    1184:	01610100 	cmneq	r1, r0, lsl #2
  if (match_found == FALSE) {
    1188:	0000620e 	andeq	r6, r0, lr, lsl #4
    printf("\"%s\": command not found. Use \"help\" to list all command.\n",
    118c:	000cb000 	andeq	fp, ip, r0
    1190:	000cae00 	andeq	sl, ip, r0, lsl #28
    __cmd_exec_status = -1;
    1194:	00631000 	rsbeq	r1, r3, r0
    1198:	11016101 	tstne	r1, r1, lsl #2
}
    119c:	00000062 	andeq	r0, r0, r2, rrx
    11a0:	00000cc5 	andeq	r0, r0, r5, asr #25
    11a4:	00000cc3 	andeq	r0, r0, r3, asr #25
    11a8:	01006410 	tsteq	r0, r0, lsl r4
int help(int argc, char **argv) {
    11ac:	62140161 	andsvs	r0, r4, #1073741848	; 0x40000018
  if (argc > 1 && (strcmp(argv[1], "-l")==0)) {
    11b0:	da000000 	ble	11b8 <help+0xc>
    11b4:	d800000c 	stmdale	r0, {r2, r3}
    11b8:	1100000c 	tstne	r0, ip
    11bc:	00000a86 	andeq	r0, r0, r6, lsl #21
    printf("use: help -l for list only.\n\n");
    11c0:	00000987 	andeq	r0, r0, r7, lsl #19
  bool verbose = true;
    11c4:	000007c7 	andeq	r0, r0, r7, asr #15
    verbose = false;
    11c8:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
    printf("\n");
    11cc:	1100007b 	tstne	r0, fp, ror r0
    i++;
    11d0:	00000a8c 	andeq	r0, r0, ip, lsl #21
  while (table[i].command_name != NULL) {
    11d4:	00000987 	andeq	r0, r0, r7, lsl #19
    11d8:	000007dd 	ldrdeq	r0, [r0], -sp
    11dc:	04500112 	ldrbeq	r0, [r0], #-274	; 0xfffffeee
    printf(table[i].command_name);
    11e0:	01944891 			; <UNDEFINED> instruction: 0x01944891
    if (verbose) {
    11e4:	0a921100 	beq	fe4855ec <_STACK_TOP_+0xde47d5f0>
      printf("\n\t");
    11e8:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
      printf(table[i].command_help);
    11ec:	07f40000 	ldrbeq	r0, [r4, r0]!
    11f0:	01120000 	tsteq	r2, r0
    11f4:	b4910550 	ldrlt	r0, [r1], #1360	; 0x550
    verbose = false;
    11f8:	0001947f 	andeq	r9, r1, pc, ror r4
}
    11fc:	000a9a11 	andeq	r9, sl, r1, lsl sl
    1200:	00098700 	andeq	r8, r9, r0, lsl #14
    1204:	00080800 	andeq	r0, r8, r0, lsl #16
    1208:	50011200 	andpl	r1, r1, r0, lsl #4
    120c:	00007a02 	andeq	r7, r0, r2, lsl #20
    1210:	000aa011 	andeq	sl, sl, r1, lsl r0
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    1214:	00098700 	andeq	r8, r9, r0, lsl #14
static void add_command_to_history(const char *cmd_str) {
    1218:	00081f00 	andeq	r1, r8, r0, lsl #30
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    121c:	50011200 	andpl	r1, r1, r0, lsl #4
    1220:	7fb89105 	svcvc	0x00b89105
  int index = total_num_commands % NUM_HISTORY_ENTRIES;
    1224:	11000194 			; <UNDEFINED> instruction: 0x11000194
    1228:	00000aa6 	andeq	r0, r0, r6, lsr #21
    122c:	00000987 	andeq	r0, r0, r7, lsl #19
    1230:	00000836 	andeq	r0, r0, r6, lsr r8
  memcpy(&cmd_history[index], cmd_str, LINE_BUFF_SIZE);
    1234:	05500112 	ldrbeq	r0, [r0, #-274]	; 0xfffffeee
    1238:	947fbc91 	ldrbtls	fp, [pc], #-3217	; 1240 <add_command_to_history+0x2c>
    123c:	ae110001 	cdpge	0, 1, cr0, cr1, cr1, {0}
    1240:	8700000a 	strhi	r0, [r0, -sl]
  total_num_commands++;
    1244:	4a000009 	bmi	1270 <parse_line+0x18>
  curr_command_ptr = total_num_commands;
    1248:	12000008 	andne	r0, r0, #8
    124c:	78025001 	stmdavc	r2, {r0, ip, lr}
    1250:	b4110000 	ldrlt	r0, [r1], #-0
    1254:	8700000a 	strhi	r0, [r0, -sl]
static int parse_line(char **argv, char *line_buff, int argument_size) {
    1258:	60000009 	andvs	r0, r0, r9
    125c:	12000008 	andne	r0, r0, #8
  int length = strlen(line_buff);
    1260:	91045001 	tstls	r4, r1
    1264:	00019450 	andeq	r9, r1, r0, asr r4
  int argc = 0;
    1268:	000aba11 	andeq	fp, sl, r1, lsl sl
         pos++)
    126c:	00098700 	andeq	r8, r9, r0, lsl #14
    for (; line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    1270:	00087600 	andeq	r7, r8, r0, lsl #12
    1274:	50011200 	andpl	r1, r1, r0, lsl #4
    1278:	94409104 	strbls	r9, [r0], #-260	; 0xfffffefc
    127c:	c2110001 	andsgt	r0, r1, #1
    if (line_buff[pos] == '\t' || line_buff[pos] == SPACE)
    1280:	8700000a 	strhi	r0, [r0, -sl]
    1284:	8a000009 	bhi	12b0 <prefix_match+0x6>
      line_buff[pos] = END_OF_LINE;
    1288:	12000008 	andne	r0, r0, #8
  while (pos <= length) {
    128c:	74025001 	strvc	r5, [r2], #-1
    if (line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    1290:	c8110000 	ldmdagt	r1, {}	; <UNPREDICTABLE>
    1294:	8700000a 	strhi	r0, [r0, -sl]
    1298:	a0000009 	andge	r0, r0, r9
    129c:	12000008 	andne	r0, r0, #8
      argv[argc++] = &line_buff[pos];
    12a0:	91045001 	tstls	r4, r1
    12a4:	00019454 	andeq	r9, r1, r4, asr r4
}
    12a8:	000ace13 	andeq	ip, sl, r3, lsl lr
static int prefix_match(char *sub, int len, const char *str) {
    12ac:	00098700 	andeq	r8, r9, r0, lsl #14
    12b0:	50011200 	andpl	r1, r1, r0, lsl #4
  if (sub == NULL || str == NULL || len <= 0 || len > strlen(str)) {
    12b4:	94449104 	strbls	r9, [r4], #-260	; 0xfffffefc
    12b8:	15000001 	strne	r0, [r0, #-1]
    12bc:	0000052d 	andeq	r0, r0, sp, lsr #10
    12c0:	0d012c01 	stceq	12, cr2, [r1, #-4]
  for (int i = 0; i<len; ++i) {
    12c4:	000009ec 	andeq	r0, r0, ip, ror #19
    12c8:	00000072 	andeq	r0, r0, r2, ror r0
    if (sub[i] != str[i]) {
    12cc:	09879c01 	stmibeq	r7, {r0, sl, fp, ip, pc}
    12d0:	fc0e0000 	stc2	0, cr0, [lr], {-0}
  for (int i = 0; i<len; ++i) {
    12d4:	01000003 	tsteq	r0, r3
}
    12d8:	ac21012c 	stfges	f0, [r1], #-176	; 0xffffff50
  return TRUE;
    12dc:	f1000005 	cps	#5
      return FALSE;
    12e0:	ed00000c 	stc	0, cr0, [r0, #-48]	; 0xffffffd0
}
    12e4:	1000000c 	andne	r0, r0, ip
static void handle_up_arrow(char *cmd_buff, int *char_count) {
    12e8:	2e010069 	cdpcs	0, 0, cr0, cr1, cr9, {3}
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    12ec:	00620b01 	rsbeq	r0, r2, r1, lsl #22
    12f0:	0d150000 	ldceq	0, cr0, [r5, #-0]
    12f4:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 12fc <handle_up_arrow+0x16>
      curr_command_ptr == 0) {
    12f8:	54100000 	ldrpl	r0, [r0], #-0
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    12fc:	0100706d 	tsteq	r0, sp, rrx
    printf("%s", cmd_buff);
    1300:	620b012f 	andvs	r0, fp, #-1073741813	; 0xc000000b
    1304:	41000000 	mrsmi	r0, (UNDEF: 0)
  memset(cmd_buff, 0, LINE_BUFF_SIZE);
    1308:	3f00000d 	svccc	0x0000000d
    130c:	1000000d 	andne	r0, r0, sp
  curr_command_ptr--;
    1310:	01006d54 	tsteq	r0, r4, asr sp
    1314:	6210012f 	andsvs	r0, r0, #-1073741813	; 0xc000000b
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    1318:	72000000 	andvc	r0, r0, #0
    131c:	5400000d 	strpl	r0, [r0], #-13
    1320:	1000000d 	andne	r0, r0, sp
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    1324:	2f010074 	svccs	0x00010074
    1328:	00621401 	rsbeq	r1, r2, r1, lsl #8
    132c:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
    1330:	0e420000 	cdpeq	0, 4, cr0, cr2, cr0, {0}
  *char_count = strlen(cmd_buff);
    1334:	16110000 	ldrne	r0, [r1], -r0
    1338:	8700000a 	strhi	r0, [r0, -sl]
  printf("%s", cmd_buff);
    133c:	45000009 	strmi	r0, [r0, #-9]
    1340:	12000009 	andne	r0, r0, #9
    1344:	7b055001 	blvc	155350 <__ROM_SIZE__+0x115350>
    1348:	27007a00 	strcs	r7, [r0, -r0, lsl #20]
static void handle_down_arrow(char *cmd_buff, int *char_count) {
    134c:	0a281100 	beq	a05754 <__ROM_SIZE__+0x9c5754>
    1350:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
  memset(cmd_buff, 0, LINE_BUFF_SIZE);
    1354:	095c0000 	ldmdbeq	ip, {}^	; <UNPREDICTABLE>
    1358:	01120000 	tsteq	r2, r0
  *char_count = 0;
    135c:	007b0550 	rsbseq	r0, fp, r0, asr r5
  if (curr_command_ptr == total_num_commands) return;
    1360:	00270078 	eoreq	r0, r7, r8, ror r0
    1364:	000a3a11 	andeq	r3, sl, r1, lsl sl
  curr_command_ptr++;
    1368:	00098700 	andeq	r8, r9, r0, lsl #14
    136c:	00097300 	andeq	r7, r9, r0, lsl #6
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    1370:	50011200 	andpl	r1, r1, r0, lsl #4
    1374:	77007805 	strvc	r7, [r0, -r5, lsl #16]
    1378:	13002700 	movwne	r2, #1792	; 0x700
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    137c:	00000a4c 	andeq	r0, r0, ip, asr #20
    1380:	00000987 	andeq	r0, r0, r7, lsl #19
    1384:	05500112 	ldrbeq	r0, [r0, #-274]	; 0xfffffeee
    1388:	007a0077 	rsbseq	r0, sl, r7, ror r0
  *char_count = strlen(cmd_buff);
    138c:	19000027 	stmdbne	r0, {r0, r1, r2, r5}
    1390:	0000049c 	muleq	r0, ip, r4
  printf("%s", cmd_buff);
    1394:	10012601 	andne	r2, r1, r1, lsl #12
    1398:	00000062 	andeq	r0, r0, r2, rrx
}
    139c:	000009da 	ldrdeq	r0, [r0], -sl
    13a0:	00000012 	andeq	r0, r0, r2, lsl r0
void set_read_char(int (*func)(void)) { __read_char__ = func; }
    13a4:	09b69c01 	ldmibeq	r6!, {r0, sl, fp, ip, pc}
    13a8:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
    13ac:	01260100 			; <UNDEFINED> instruction: 0x01260100
void set_read_char2(int (*func)(void)) { __read_char2__ = func; }
    13b0:	0000621e 	andeq	r6, r0, lr, lsl r2
    13b4:	000e5b00 	andeq	r5, lr, r0, lsl #22
    13b8:	000e5700 	andeq	r5, lr, r0, lsl #14
void set_write_char(void (*func)(char)) { __write_char__ = func; }
    13bc:	b2150000 	andslt	r0, r5, #0
    13c0:	01000005 	tsteq	r0, r5
    13c4:	a80d010a 	stmdage	sp, {r1, r3, r8}
void set_write_char2(void (*func)(char)) { __write_char2__ = func; }
    13c8:	32000009 	andcc	r0, r0, #9
    13cc:	01000000 	mrseq	r0, (UNDEF: 0)
    13d0:	0009f29c 	muleq	r9, ip, r2
}
    13d4:	03fc1800 	mvnseq	r1, #0, 16
}
    13d8:	0a010000 	beq	413e0 <__ROM_SIZE__+0x13e0>
  if (cmd_buff == NULL || char_count <= 0) {
    13dc:	05ac2001 	streq	r2, [ip, #1]!
static void handle_tab(char *cmd_buff, int *char_count) {
    13e0:	50010000 	andpl	r0, r1, r0
    13e4:	0004a817 	andeq	sl, r4, r7, lsl r8
  int last_match = -1;
    13e8:	010c0100 	mrseq	r0, (UNDEF: 28)
  int match_count = 0;
    13ec:	0000620b 	andeq	r6, r0, fp, lsl #4
  int i = 0;
    13f0:	000e7e00 	andeq	r7, lr, r0, lsl #28
    i++;
    13f4:	000e7c00 	andeq	r7, lr, r0, lsl #24
  while (table[i].command_name != NULL) { //loop over all commands
    13f8:	cc1a0000 	ldcgt	0, cr0, [sl], {-0}
    13fc:	01000005 	tsteq	r0, r5
    1400:	09620dfb 	stmdbeq	r2!, {r0, r1, r3, r4, r5, r6, r7, r8, sl, fp}^
    if (prefix_match(cmd_buff, *char_count, table[i].command_name)) {
    1404:	00460000 	subeq	r0, r6, r0
    1408:	9c010000 	stcls	0, cr0, [r1], {-0}
    140c:	00000a3b 	andeq	r0, r0, fp, lsr sl
      match_count++;
    1410:	0003fc1b 	andeq	pc, r3, fp, lsl ip	; <UNPREDICTABLE>
      printf("\n%s", table[i].command_name);
    1414:	1ffb0100 	svcne	0x00fb0100
    1418:	000005ac 	andeq	r0, r0, ip, lsr #11
      last_match = i;
    141c:	691c5001 	ldmdbvs	ip, {r0, ip, lr}
  if (match_count == 1) {
    1420:	0bfd0100 	bleq	fff41828 <_STACK_TOP_+0xdff3982c>
    1424:	00000062 	andeq	r0, r0, r2, rrx
  if (match_count) {
    1428:	00000e99 	muleq	r0, r9, lr
}
    142c:	00000e91 	muleq	r0, r1, lr
    memcpy(cmd_buff, table[last_match].command_name, LINE_BUFF_SIZE);
    1430:	01006a1c 	tsteq	r0, ip, lsl sl
    1434:	00620efd 	strdeq	r0, [r2], #-237	; 0xffffff13	; <UNPREDICTABLE>
    1438:	0ed40000 	cdpeq	0, 13, cr0, cr4, cr0, {0}
    143c:	0ece0000 	cdpeq	0, 12, cr0, cr14, cr0, {0}
    *char_count = strlen(cmd_buff);
    1440:	1a000000 	bne	1448 <handle_tab+0x6e>
    1444:	00000538 	andeq	r0, r0, r8, lsr r5
    1448:	240ded01 	strcs	lr, [sp], #-3329	; 0xfffff2ff
    printf("\n");
    144c:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
    1450:	01000000 	mrseq	r0, (UNDEF: 0)
    prepend_prompt();
    1454:	000aa09c 	muleq	sl, ip, r0
    printf(PROMPT);
    1458:	055a1b00 	ldrbeq	r1, [sl, #-2816]	; 0xfffff500
    145c:	ed010000 	stc	0, cr0, [r1, #-0]
    printf("%s", cmd_buff);
    1460:	00006221 	andeq	r6, r0, r1, lsr #4
    1464:	1b500100 	blne	140186c <__ROM_SIZE__+0x13c186c>
    1468:	000003fc 	strdeq	r0, [r0], -ip
    146c:	ac31ed01 	ldcge	13, cr14, [r1], #-4
    1470:	01000005 	tsteq	r0, r5
    1474:	053b1b51 	ldreq	r1, [fp, #-2897]!	; 0xfffff4af
    1478:	ed010000 	stc	0, cr0, [r1, #-0]
__attribute__((weak)) int active_prompt() { return TRUE; }
    147c:	00041e47 	andeq	r1, r4, r7, asr #28
static void shell(void) {
    1480:	1c520100 	ldfnee	f0, [r2], {-0}
  int count = 0;
    1484:	ef010069 	svc	0x00010069
  for (int i = 0; i < LINE_BUFF_SIZE; i++) line_buff[i] = 0;
    1488:	0000620b 	andeq	r6, r0, fp, lsl #4
    148c:	000f0300 	andeq	r0, pc, r0, lsl #6
    1490:	000efd00 	andeq	pc, lr, r0, lsl #26
    1494:	006a1c00 	rsbeq	r1, sl, r0, lsl #24
    1498:	620def01 	andvs	lr, sp, #1, 30
  for (int i = 0; i < MAX_ARG_COUNT; i++) argv[i] = NULL;
    149c:	31000000 	mrscc	r0, (UNDEF: 0)
    14a0:	2d00000f 	stccs	0, cr0, [r0, #-60]	; 0xffffffc4
    14a4:	0000000f 	andeq	r0, r0, pc
    14a8:	0005651d 	andeq	r6, r5, sp, lsl r5
    14ac:	06e50100 	strbteq	r0, [r5], r0, lsl #2
    14b0:	00000cf6 	strdeq	r0, [r0], -r6
  prepend_prompt();
    14b4:	0000000c 	andeq	r0, r0, ip
  printf(PROMPT);
    14b8:	0afe9c01 	beq	fffa84c4 <_STACK_TOP_+0xdffa04c8>
  int special_key = 0;
    14bc:	631e0000 	tstvs	lr, #0
        special_key = 1;
    14c0:	01007874 	tsteq	r0, r4, ror r8
        line_buff[count] = END_OF_LINE;
    14c4:	022125e5 	eoreq	r2, r1, #960495616	; 0x39400000
    14c8:	0f550000 	svceq	0x00550000
    14cc:	0f4f0000 	svceq	0x004f0000
        __write_char__(NEW_LINE);
    14d0:	691e0000 	ldmdbvs	lr, {}	; <UNPREDICTABLE>
    14d4:	e5010076 	str	r0, [r1, #-118]	; 0xffffff8a
  add_command_to_history(line_buff);
    14d8:	00041e39 	andeq	r1, r4, r9, lsr lr
    14dc:	000f8800 	andeq	r8, pc, r0, lsl #16
  argc = parse_line(argv, line_buff, MAX_ARG_COUNT);
    14e0:	000f8400 	andeq	r8, pc, r0, lsl #8
    14e4:	0d001300 	stceq	3, cr1, [r0, #-0]
  if (argc > 0) execute(argc, argv);
    14e8:	0c8a0000 	stceq	0, cr0, [sl], {0}
}
    14ec:	01120000 	tsteq	r2, r0
        if (!__echo) {
    14f0:	01f30650 	mvnseq	r0, r0, asr r6
    14f4:	01b02350 	asrseq	r2, r0, r3
        if (count == 0) continue;
    14f8:	03510112 	cmpeq	r1, #-2147483644	; 0x80000004
        count--;
    14fc:	125101f3 	subsne	r0, r1, #-1073741764	; 0xc000003c
        line_buff[count] = END_OF_LINE;
    1500:	40015201 	andmi	r5, r1, r1, lsl #4
    1504:	841d0000 	ldrhi	r0, [sp], #-0
    1508:	01000004 	tsteq	r0, r4
        delete ();
    150c:	0cde06e0 	ldcleq	6, cr0, [lr], {224}	; 0xe0
      if (__echo) {
    1510:	00180000 	andseq	r0, r8, r0
    1514:	9c010000 	stcls	0, cr0, [r1], {-0}
        __write_char__(c);
    1518:	00000b87 	andeq	r0, r0, r7, lsl #23
    151c:	7874631e 	ldmdavc	r4!, {r1, r2, r3, r4, r8, r9, sp, lr}^
          delete ();
    1520:	26e00100 	strbtcs	r0, [r0], r0, lsl #2
          delete ();
    1524:	00000221 	andeq	r0, r0, r1, lsr #4
    1528:	00000fad 	andeq	r0, r0, sp, lsr #31
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    152c:	00000fa9 	andeq	r0, r0, r9, lsr #31
        special_key = 2;
    1530:	79656b1e 	stmdbvc	r5!, {r1, r2, r3, r4, r8, r9, fp, sp, lr}^
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    1534:	3ae00100 	bcc	ff80193c <_STACK_TOP_+0xdf7f9940>
        special_key = 0;
    1538:	0000041e 	andeq	r0, r0, lr, lsl r4
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    153c:	00000fcf 	andeq	r0, r0, pc, asr #31
        if (!__echo) {
    1540:	00000fcb 	andeq	r0, r0, fp, asr #31
          clear_prompt(count + 4);
    1544:	0076691e 	rsbseq	r6, r6, lr, lsl r9
    1548:	1e4ee001 	cdpne	0, 4, cr14, cr14, cr1, {0}
        if (c == 'A') {
    154c:	f4000004 	vst4.8	{d0-d3}, [r0], r4
          handle_down_arrow(line_buff, &count);
    1550:	f000000f 			; <UNDEFINED> instruction: 0xf000000f
    1554:	1100000f 	tstne	r0, pc
        special_key = 0;
    1558:	00000ce8 	andeq	r0, r0, r8, ror #25
          clear_prompt(count);
    155c:	00000bde 	ldrdeq	r0, [r0], -lr
    1560:	00000b6a 	andeq	r0, r0, sl, ror #22
          handle_up_arrow(line_buff, &count);
    1564:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
    1568:	01120074 	tsteq	r2, r4, ror r0
    156c:	01f30351 	mvnseq	r0, r1, asr r3
        handle_tab(line_buff, &count);
    1570:	f4130051 			; <UNDEFINED> instruction: 0xf4130051
    1574:	8a00000c 	bhi	15ac <shell+0x12c>
      loop();
    1578:	1200000c 	andne	r0, r0, #12
    if (!active_prompt()) {
    157c:	74035001 	strvc	r5, [r3], #-1
    1580:	011201b0 			; <UNDEFINED> instruction: 0x011201b0
    s = __read_char__();
    1584:	00750251 	rsbseq	r0, r5, r1, asr r2
    1588:	01520112 	cmpeq	r2, r2, lsl r1
    if (s != -1) {
    158c:	1d000040 	stcne	0, cr0, [r0, #-256]	; 0xffffff00
      c = (char)s;
    1590:	000005d5 	ldrdeq	r0, [r0], -r5
      if (c == CARRIAGE_RETURN || c == NEW_LINE) {
    1594:	d606db01 	strle	sp, [r6], -r1, lsl #22
    1598:	0800000c 	stmdaeq	r0, {r2, r3}
      if (c == DELETE || c == BACK_SPACE) {
    159c:	01000000 	mrseq	r0, (UNDEF: 0)
    15a0:	000bde9c 	muleq	fp, ip, lr
      } else if (c == ESCAPE) {
    15a4:	74631e00 	strbtvc	r1, [r3], #-3584	; 0xfffff200
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    15a8:	db010078 	blle	41790 <__ROM_SIZE__+0x1790>
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    15ac:	00022123 	andeq	r2, r2, r3, lsr #2
    15b0:	00101600 	andseq	r1, r0, r0, lsl #12
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    15b4:	00101200 	andseq	r1, r0, r0, lsl #4
    15b8:	656b1e00 	strbvs	r1, [fp, #-3584]!	; 0xfffff200
    15bc:	db010079 	blle	417a8 <__ROM_SIZE__+0x17a8>
      else if (c == TAB) {
    15c0:	00041e37 	andeq	r1, r4, r7, lsr lr
        line_buff[count] = c;
    15c4:	00103b00 	andseq	r3, r0, r0, lsl #22
    15c8:	00103700 	andseq	r3, r0, r0, lsl #14
    15cc:	0cdc1300 	ldcleq	3, cr1, [ip], {0}
        count++;
    15d0:	0bde0000 	bleq	ff7815d8 <_STACK_TOP_+0xdf7795dc>
  if (argc > 0) execute(argc, argv);
    15d4:	01120000 	tsteq	r2, r0
    15d8:	01f30350 	mvnseq	r0, r0, asr r3
}
    15dc:	51011250 	tstpl	r1, r0, asr r2
    15e0:	5101f303 	tstpl	r1, r3, lsl #6	; <UNPREDICTABLE>
    15e4:	bc1a0000 	ldclt	0, cr0, [sl], {-0}
void prompt() {
    15e8:	01000005 	tsteq	r0, r5
  initial_setup();
    15ec:	08300d92 	ldmdaeq	r0!, {r1, r4, r7, r8, sl, fp}
  exec_auto_cmds();
    15f0:	00f40000 	rscseq	r0, r4, r0
  setup();
    15f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    shell();
    15f8:	00000c7a 	andeq	r0, r0, sl, ror ip
int exec(char *cmd_str) {
    15fc:	00053b1b 	andeq	r3, r5, fp, lsl fp
    1600:	23920100 	orrscs	r0, r2, #0, 2
  argc = parse_line(argv, cmd_str, MAX_ARG_COUNT);
    1604:	00000227 	andeq	r0, r0, r7, lsr #4
    1608:	4b1e5001 	blmi	795614 <__ROM_SIZE__+0x755614>
  if (argc > 0) execute(argc, argv);
    160c:	01007965 	tsteq	r0, r5, ror #18
  return __cmd_exec_status;
    1610:	041e3c92 	ldreq	r3, [lr], #-3218	; 0xfffff36e
}
    1614:	10600000 	rsbne	r0, r0, r0
  if (argc > 0) execute(argc, argv);
    1618:	105c0000 	subsne	r0, ip, r0
    161c:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
    1620:	0c940100 	ldfeqs	f0, [r4], {0}
cmd get_function_addr(char *cmd_str) {
    1624:	00000038 	andeq	r0, r0, r8, lsr r0
  for (int i = 0; table[i].command_name != NULL; i++) {
    1628:	00001087 	andeq	r1, r0, r7, lsl #1
    162c:	00001081 	andeq	r1, r0, r1, lsl #1
    1630:	01006a1c 	tsteq	r0, ip, lsl sl
    1634:	00380f94 	mlaseq	r8, r4, pc, r0	; <UNPREDICTABLE>
    1638:	10b50000 	adcsne	r0, r5, r0
    if (strcmp(cmd_str, table[i].command_name) == 0) {
    163c:	10b10000 	adcsne	r0, r1, r0
    1640:	6b1c0000 	blvs	701648 <__ROM_SIZE__+0x6c1648>
      return table[i].command;
    1644:	12940100 	addsne	r0, r4, #0, 2
    1648:	00000038 	andeq	r0, r0, r8, lsr r0
  return NULL;
    164c:	000010df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
}
    1650:	000010d5 	ldrdeq	r1, [r0], -r5
    1654:	0004a20b 	andeq	sl, r4, fp, lsl #4
    1658:	0b950100 	bleq	fe541a60 <_STACK_TOP_+0xde539a64>
    165c:	00000c7a 	andeq	r0, r0, sl, ror ip
    1660:	1f749102 	svcne	0x00749102
    1664:	000008de 	ldrdeq	r0, [r0], -lr
    1668:	00000010 	andeq	r0, r0, r0, lsl r0
    166c:	0004fe20 	andeq	pc, r4, r0, lsr #28
    1670:	17b30100 	ldrne	r0, [r3, r0, lsl #2]!
    1674:	0000006e 	andeq	r0, r0, lr, rrx
    1678:	00001138 	andeq	r1, r0, r8, lsr r1
    167c:	00001132 	andeq	r1, r0, r2, lsr r1
    1680:	62090000 	andvs	r0, r9, #0
    1684:	8a000000 	bhi	168c <_varr32+0x8>
    1688:	0a00000c 	beq	16c0 <_varshow_history>
    168c:	00000038 	andeq	r0, r0, r8, lsr r0
    1690:	ed210003 	stc	0, cr0, [r1, #-12]!
    1694:	ed000004 	stc	0, cr0, [r0, #-16]
    1698:	05000004 	streq	r0, [r0, #-4]
    169c:	4c000738 	stcmi	7, cr0, [r0], {56}	; 0x38
    16a0:	04000001 	streq	r0, [r0], #-1
    16a4:	00089c00 	andeq	r9, r8, r0, lsl #24
    16a8:	45010400 	strmi	r0, [r1, #-1024]	; 0xfffffc00
    16ac:	0c000000 	stceq	0, cr0, [r0], {-0}
    16b0:	000005ec 	andeq	r0, r0, ip, ror #11
    16b4:	000000e6 	andeq	r0, r0, r6, ror #1
    16b8:	00000e10 	andeq	r0, r0, r0, lsl lr
    16bc:	0000005a 	andeq	r0, r0, sl, asr r0
    16c0:	00001537 	andeq	r1, r0, r7, lsr r5
    16c4:	39060102 	stmdbcc	r6, {r1, r8}
    16c8:	02000000 	andeq	r0, r0, #0
    16cc:	01320502 	teqeq	r2, r2, lsl #10
    16d0:	04020000 	streq	r0, [r2], #-0
    16d4:	00012205 	andeq	r2, r1, r5, lsl #4
    16d8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    16dc:	0000011d 	andeq	r0, r0, sp, lsl r1
    16e0:	37080102 	strcc	r0, [r8, -r2, lsl #2]
    16e4:	02000000 	andeq	r0, r0, #0
    16e8:	00ca0702 	sbceq	r0, sl, r2, lsl #14
    16ec:	8f030000 	svchi	0x00030000
    16f0:	02000002 	andeq	r0, r0, #2
    16f4:	005b1934 	subseq	r1, fp, r4, lsr r9
    16f8:	04020000 	streq	r0, [r2], #-0
    16fc:	00010607 	andeq	r0, r1, r7, lsl #12
    1700:	07080200 	streq	r0, [r8, -r0, lsl #4]
    1704:	00000101 	andeq	r0, r0, r1, lsl #2
    1708:	69050404 	stmdbvs	r5, {r2, sl}
    170c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1710:	010b0704 	tsteq	fp, r4, lsl #14
    1714:	12050000 	andne	r0, r5, #0
    1718:	01000006 	tsteq	r0, r6
    171c:	004f0a1b 	subeq	r0, pc, fp, lsl sl	; <UNPREDICTABLE>
    1720:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
    1724:	003e0000 	eorseq	r0, lr, r0
    1728:	9c010000 	stcls	0, cr0, [r1], {-0}
    172c:	000000e6 	andeq	r0, r0, r6, ror #1
    1730:	72747306 	rsbsvc	r7, r4, #402653184	; 0x18000000
    1734:	1b1b0100 	blne	6c1b3c <__ROM_SIZE__+0x681b3c>
    1738:	000000e6 	andeq	r0, r0, r6, ror #1
    173c:	0000116c 	andeq	r1, r0, ip, ror #2
    1740:	00001168 	andeq	r1, r0, r8, ror #2
    1744:	78656807 	stmdavc	r5!, {r0, r1, r2, fp, sp, lr}^
    1748:	0c1c0100 	ldfeqs	f0, [ip], {-0}
    174c:	0000004f 	andeq	r0, r0, pc, asr #32
    1750:	00001192 	muleq	r0, r2, r1
    1754:	0000118a 	andeq	r1, r0, sl, lsl #3
    1758:	00045c08 	andeq	r5, r4, r8, lsl #24
    175c:	0c1d0100 	ldfeqs	f0, [sp], {-0}
    1760:	0000004f 	andeq	r0, r0, pc, asr #32
    1764:	000011d3 	ldrdeq	r1, [r0], -r3
    1768:	000011cb 	andeq	r1, r0, fp, asr #3
    176c:	00009009 	andeq	r9, r0, r9
    1770:	00690700 	rsbeq	r0, r9, r0, lsl #14
    1774:	4f111f01 	svcmi	0x00111f01
    1778:	0c000000 	stceq	0, cr0, [r0], {-0}
    177c:	08000012 	stmdaeq	r0, {r1, r4}
    1780:	00000012 	andeq	r0, r0, r2, lsl r0
    1784:	f3040a00 	vpmax.u8	d0, d4, d0
    1788:	02000000 	andeq	r0, r0, #0
    178c:	00400801 	subeq	r0, r0, r1, lsl #16
    1790:	ec0b0000 	stc	0, cr0, [fp], {-0}
    1794:	0c000000 	stceq	0, cr0, [r0], {-0}
    1798:	00000617 	andeq	r0, r0, r7, lsl r6
    179c:	69051301 	stmdbvs	r5, {r0, r8, r9, ip}
    17a0:	10000000 	andne	r0, r0, r0
    17a4:	1c00000e 	stcne	0, cr0, [r0], {14}
    17a8:	01000000 	mrseq	r0, (UNDEF: 0)
    17ac:	7473069c 	ldrbtvc	r0, [r3], #-1692	; 0xfffff964
    17b0:	13010072 	movwne	r0, #4210	; 0x1072
    17b4:	0000e616 	andeq	lr, r0, r6, lsl r6
    17b8:	00122f00 	andseq	r2, r2, r0, lsl #30
    17bc:	00122b00 	andseq	r2, r2, r0, lsl #22
    17c0:	65720700 	ldrbvs	r0, [r2, #-1792]!	; 0xfffff900
    17c4:	14010073 	strne	r0, [r1], #-115	; 0xffffff8d
    17c8:	00006907 	andeq	r6, r0, r7, lsl #18
    17cc:	00125300 	andseq	r5, r2, r0, lsl #6
    17d0:	00124d00 	andseq	r4, r2, r0, lsl #26
    17d4:	00780900 	rsbseq	r0, r8, r0, lsl #18
    17d8:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
    17dc:	0c150100 	ldfeqs	f0, [r5], {-0}
    17e0:	00000069 	andeq	r0, r0, r9, rrx
    17e4:	00001281 	andeq	r1, r0, r1, lsl #5
    17e8:	0000127d 	andeq	r1, r0, sp, ror r2
    17ec:	80000000 	andhi	r0, r0, r0
    17f0:	04000005 	streq	r0, [r0], #-5
    17f4:	00096200 	andeq	r6, r9, r0, lsl #4
    17f8:	45010400 	strmi	r0, [r1, #-1024]	; 0xfffffc00
    17fc:	0c000000 	stceq	0, cr0, [r0], {-0}
    1800:	00000657 	andeq	r0, r0, r7, asr r6
    1804:	000000e6 	andeq	r0, r0, r6, ror #1
    1808:	00000e6c 	andeq	r0, r0, ip, ror #28
    180c:	00000160 	andeq	r0, r0, r0, ror #2
    1810:	000016ab 	andeq	r1, r0, fp, lsr #13
    1814:	39060102 	stmdbcc	r6, {r1, r8}
    1818:	02000000 	andeq	r0, r0, #0
    181c:	01320502 	teqeq	r2, r2, lsl #10
    1820:	04020000 	streq	r0, [r2], #-0
    1824:	00012205 	andeq	r2, r1, r5, lsl #4
    1828:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    182c:	0000011d 	andeq	r0, r0, sp, lsl r1
    1830:	37080102 	strcc	r0, [r8, -r2, lsl #2]
    1834:	02000000 	andeq	r0, r0, #0
    1838:	00ca0702 	sbceq	r0, sl, r2, lsl #14
    183c:	8f030000 	svchi	0x00030000
    1840:	02000002 	andeq	r0, r0, #2
    1844:	005b1934 	subseq	r1, fp, r4, lsr r9
    1848:	04020000 	streq	r0, [r2], #-0
    184c:	00010607 	andeq	r0, r1, r7, lsl #12
    1850:	07080200 	streq	r0, [r8, -r0, lsl #4]
    1854:	00000101 	andeq	r0, r0, r1, lsl #2
    1858:	69050404 	stmdbvs	r5, {r2, sl}
    185c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1860:	010b0704 	tsteq	fp, r4, lsl #14
    1864:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    1868:	02000006 	andeq	r0, r0, #6
    186c:	00701a56 	rsbseq	r1, r0, r6, asr sl
    1870:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1874:	00014704 	andeq	r4, r1, r4, lsl #14
    1878:	6d630500 	cfstr64vs	mvdx0, [r3, #-0]
    187c:	2a030064 	bcs	c1a14 <__ROM_SIZE__+0x81a14>
    1880:	0000960f 	andeq	r9, r0, pc, lsl #12
    1884:	9c040600 	stcls	6, cr0, [r4], {-0}
    1888:	07000000 	streq	r0, [r0, -r0]
    188c:	00000069 	andeq	r0, r0, r9, rrx
    1890:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1894:	00006908 	andeq	r6, r0, r8, lsl #18
    1898:	00b00800 	adcseq	r0, r0, r0, lsl #16
    189c:	06000000 	streq	r0, [r0], -r0
    18a0:	0000b604 	andeq	fp, r0, r4, lsl #12
    18a4:	bc040600 	stclt	6, cr0, [r4], {-0}
    18a8:	02000000 	andeq	r0, r0, #0
    18ac:	00400801 	subeq	r0, r0, r1, lsl #16
    18b0:	bc090000 	stclt	0, cr0, [r9], {-0}
    18b4:	0a000000 	beq	18bc <rsbox+0x74>
    18b8:	0933030c 	ldmdbeq	r3!, {r2, r3, r8, r9}
    18bc:	000000f9 	strdeq	r0, [r0], -r9
    18c0:	0001530b 	andeq	r5, r1, fp, lsl #6
    18c4:	0f340300 	svceq	0x00340300
    18c8:	000000f9 	strdeq	r0, [r0], -r9
    18cc:	00220b00 	eoreq	r0, r2, r0, lsl #22
    18d0:	35030000 	strcc	r0, [r3, #-0]
    18d4:	0000f90f 	andeq	pc, r0, pc, lsl #18
    18d8:	2f0b0400 	svccs	0x000b0400
    18dc:	03000000 	movweq	r0, #0
    18e0:	008a0736 	addeq	r0, sl, r6, lsr r7
    18e4:	00080000 	andeq	r0, r8, r0
    18e8:	00c30406 	sbceq	r0, r3, r6, lsl #8
    18ec:	41030000 	mrsmi	r0, (UNDEF: 3)
    18f0:	03000001 	movweq	r0, #1
    18f4:	00c80337 	sbceq	r0, r8, r7, lsr r3
    18f8:	1c0c0000 	stcne	0, cr0, [ip], {-0}
    18fc:	01000006 	tsteq	r0, r6
    1900:	00ff017f 	rscseq	r0, pc, pc, ror r1	; <UNPREDICTABLE>
    1904:	03050000 	movweq	r0, #20480	; 0x5000
    1908:	0000169c 	muleq	r0, ip, r6
    190c:	00068f0c 	andeq	r8, r6, ip, lsl #30
    1910:	01800100 	orreq	r0, r0, r0, lsl #2
    1914:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1918:	16900305 	ldrne	r0, [r0], r5, lsl #6
    191c:	870c0000 	strhi	r0, [ip, -r0]
    1920:	01000006 	tsteq	r0, r6
    1924:	00ff0183 	rscseq	r0, pc, r3, lsl #3
    1928:	03050000 	movweq	r0, #20480	; 0x5000
    192c:	00001684 	andeq	r1, r0, r4, lsl #13
    1930:	00063f0c 	andeq	r3, r6, ip, lsl #30
    1934:	01840100 	orreq	r0, r4, r0, lsl #2
    1938:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    193c:	16780305 	ldrbtne	r0, [r8], -r5, lsl #6
    1940:	320c0000 	andcc	r0, ip, #0
    1944:	01000006 	tsteq	r0, r6
    1948:	00ff0185 	rscseq	r0, pc, r5, lsl #3
    194c:	03050000 	movweq	r0, #20480	; 0x5000
    1950:	0000166c 	andeq	r1, r0, ip, ror #12
    1954:	0006930d 	andeq	r9, r6, sp, lsl #6
    1958:	05670100 	strbeq	r0, [r7, #-256]!	; 0xffffff00
    195c:	00000069 	andeq	r0, r0, r9, rrx
    1960:	00000f7c 	andeq	r0, r0, ip, ror pc
    1964:	00000050 	andeq	r0, r0, r0, asr r0
    1968:	025d9c01 	subseq	r9, sp, #256	; 0x100
    196c:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
    1970:	01000001 	tsteq	r0, r1
    1974:	00691167 	rsbeq	r1, r9, r7, ror #2
    1978:	12a40000 	adcne	r0, r4, #0
    197c:	12a00000 	adcne	r0, r0, #0
    1980:	3c0e0000 	stccc	0, cr0, [lr], {-0}
    1984:	01000001 	tsteq	r0, r1
    1988:	00b01d67 	adcseq	r1, r0, r7, ror #26
    198c:	12c90000 	sbcne	r0, r9, #0
    1990:	12c50000 	sbcne	r0, r5, #0
    1994:	810f0000 	mrshi	r0, CPSR
    1998:	01000006 	tsteq	r0, r6
    199c:	0fb2017a 	svceq	0x00b2017a
    19a0:	dc100000 	ldcle	0, cr0, [r0], {-0}
    19a4:	01000008 	tsteq	r0, r8
    19a8:	004f0c6d 	subeq	r0, pc, sp, ror #24
    19ac:	12ed0000 	rscne	r0, sp, #0
    19b0:	12e70000 	rscne	r0, r7, #0
    19b4:	47100000 	ldrmi	r0, [r0, -r0]
    19b8:	01000006 	tsteq	r0, r6
    19bc:	004f0c6e 	subeq	r0, pc, lr, ror #24
    19c0:	131e0000 	tstne	lr, #0
    19c4:	13160000 	tstne	r6, #0
    19c8:	2b100000 	blcs	4019d0 <__ROM_SIZE__+0x3c19d0>
    19cc:	01000008 	tsteq	r0, r8
    19d0:	004f0c75 	subeq	r0, pc, r5, ror ip	; <UNPREDICTABLE>
    19d4:	13540000 	cmpne	r4, #0
    19d8:	13520000 	cmpne	r2, #0
    19dc:	4f100000 	svcmi	0x00100000
    19e0:	01000006 	tsteq	r0, r6
    19e4:	004f0c76 	subeq	r0, pc, r6, ror ip	; <UNPREDICTABLE>
    19e8:	136b0000 	cmnne	fp, #0
    19ec:	13670000 	cmnne	r7, #0
    19f0:	8a110000 	bhi	4419f8 <__ROM_SIZE__+0x4019f8>
    19f4:	5f00000f 	svcpl	0x0000000f
    19f8:	11000005 	tstne	r0, r5
    19fc:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    1a00:	0000056b 	andeq	r0, r0, fp, ror #10
    1a04:	000fa812 	andeq	sl, pc, r2, lsl r8	; <UNPREDICTABLE>
    1a08:	00057700 	andeq	r7, r5, r0, lsl #14
    1a0c:	00023200 	andeq	r3, r2, r0, lsl #4
    1a10:	50011300 	andpl	r1, r1, r0, lsl #6
    1a14:	1a840305 	bne	fe102630 <_STACK_TOP_+0xde0fa634>
    1a18:	01130000 	tsteq	r3, r0
    1a1c:	00750252 	rsbseq	r0, r5, r2, asr r2
    1a20:	0fb21200 	svceq	0x00b21200
    1a24:	05770000 	ldrbeq	r0, [r7, #-0]!
    1a28:	02490000 	subeq	r0, r9, #0
    1a2c:	01130000 	tsteq	r3, r0
    1a30:	dc030550 	cfstr32le	mvfx0, [r3], {80}	; 0x50
    1a34:	00000019 	andeq	r0, r0, r9, lsl r0
    1a38:	000fba14 	andeq	fp, pc, r4, lsl sl	; <UNPREDICTABLE>
    1a3c:	00057700 	andeq	r7, r5, r0, lsl #14
    1a40:	50011300 	andpl	r1, r1, r0, lsl #6
    1a44:	1a9c0305 	bne	fe702660 <_STACK_TOP_+0xde6fa664>
    1a48:	00000000 	andeq	r0, r0, r0
    1a4c:	0006200d 	andeq	r2, r6, sp
    1a50:	05480100 	strbeq	r0, [r8, #-256]	; 0xffffff00
    1a54:	00000069 	andeq	r0, r0, r9, rrx
    1a58:	00000f14 	andeq	r0, r0, r4, lsl pc
    1a5c:	00000068 	andeq	r0, r0, r8, rrx
    1a60:	03589c01 	cmpeq	r8, #256	; 0x100
    1a64:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
    1a68:	01000001 	tsteq	r0, r1
    1a6c:	00691148 	rsbeq	r1, r9, r8, asr #2
    1a70:	13910000 	orrsne	r0, r1, #0
    1a74:	138d0000 	orrne	r0, sp, #0
    1a78:	3c0e0000 	stccc	0, cr0, [lr], {-0}
    1a7c:	01000001 	tsteq	r0, r1
    1a80:	00b01d48 	adcseq	r1, r0, r8, asr #26
    1a84:	13b60000 			; <UNDEFINED> instruction: 0x13b60000
    1a88:	13b20000 			; <UNDEFINED> instruction: 0x13b20000
    1a8c:	810f0000 	mrshi	r0, CPSR
    1a90:	01000006 	tsteq	r0, r6
    1a94:	0f620162 	svceq	0x00620162
    1a98:	dc100000 	ldcle	0, cr0, [r0], {-0}
    1a9c:	01000008 	tsteq	r0, r8
    1aa0:	004f0c4e 	subeq	r0, pc, lr, asr #24
    1aa4:	13da0000 	bicsne	r0, sl, #0
    1aa8:	13d40000 	bicsne	r0, r4, #0
    1aac:	47100000 	ldrmi	r0, [r0, -r0]
    1ab0:	01000006 	tsteq	r0, r6
    1ab4:	004f0c4f 	subeq	r0, pc, pc, asr #24
    1ab8:	14090000 	strne	r0, [r9], #-0
    1abc:	14030000 	strne	r0, [r3], #-0
    1ac0:	4f100000 	svcmi	0x00100000
    1ac4:	01000006 	tsteq	r0, r6
    1ac8:	004f0c50 	subeq	r0, pc, r0, asr ip	; <UNPREDICTABLE>
    1acc:	143e0000 	ldrtne	r0, [lr], #-0
    1ad0:	14320000 	ldrtne	r0, [r2], #-0
    1ad4:	2b100000 	blcs	401adc <__ROM_SIZE__+0x3c1adc>
    1ad8:	01000008 	tsteq	r0, r8
    1adc:	004f0c5c 	subeq	r0, pc, ip, asr ip	; <UNPREDICTABLE>
    1ae0:	148e0000 	strne	r0, [lr], #0
    1ae4:	14880000 	strne	r0, [r8], #0
    1ae8:	22110000 	andscs	r0, r1, #0
    1aec:	5f00000f 	svcpl	0x0000000f
    1af0:	11000005 	tstne	r0, r5
    1af4:	00000f2a 	andeq	r0, r0, sl, lsr #30
    1af8:	0000056b 	andeq	r0, r0, fp, ror #10
    1afc:	000f3211 	andeq	r3, pc, r1, lsl r2	; <UNPREDICTABLE>
    1b00:	00056b00 	andeq	r6, r5, r0, lsl #22
    1b04:	0f5a1200 	svceq	0x005a1200
    1b08:	05770000 	ldrbeq	r0, [r7, #-0]!
    1b0c:	032d0000 			; <UNDEFINED> instruction: 0x032d0000
    1b10:	01130000 	tsteq	r3, r0
    1b14:	dc030550 	cfstr32le	mvfx0, [r3], {80}	; 0x50
    1b18:	00000019 	andeq	r0, r0, r9, lsl r0
    1b1c:	000f6212 	andeq	r6, pc, r2, lsl r2	; <UNPREDICTABLE>
    1b20:	00057700 	andeq	r7, r5, r0, lsl #14
    1b24:	00034400 	andeq	r4, r3, r0, lsl #8
    1b28:	50011300 	andpl	r1, r1, r0, lsl #6
    1b2c:	1a040305 	bne	102748 <__ROM_SIZE__+0xc2748>
    1b30:	14000000 	strne	r0, [r0], #-0
    1b34:	00000f6a 	andeq	r0, r0, sl, ror #30
    1b38:	00000577 	andeq	r0, r0, r7, ror r5
    1b3c:	05500113 	ldrbeq	r0, [r0, #-275]	; 0xfffffeed
    1b40:	001a2803 	andseq	r2, sl, r3, lsl #16
    1b44:	0d000000 	stceq	0, cr0, [r0, #-0]
    1b48:	00000636 	andeq	r0, r0, r6, lsr r6
    1b4c:	69053401 	stmdbvs	r5, {r0, sl, ip, sp}
    1b50:	cc000000 	stcgt	0, cr0, [r0], {-0}
    1b54:	4800000e 	stmdami	r0, {r1, r2, r3}
    1b58:	01000000 	mrseq	r0, (UNDEF: 0)
    1b5c:	0004319c 	muleq	r4, ip, r1
    1b60:	01180e00 	tsteq	r8, r0, lsl #28
    1b64:	34010000 	strcc	r0, [r1], #-0
    1b68:	00006912 	andeq	r6, r0, r2, lsl r9
    1b6c:	0014bf00 	andseq	fp, r4, r0, lsl #30
    1b70:	0014b700 	andseq	fp, r4, r0, lsl #14
    1b74:	013c0e00 	teqeq	ip, r0, lsl #28
    1b78:	34010000 	strcc	r0, [r1], #-0
    1b7c:	0000b01e 	andeq	fp, r0, lr, lsl r0
    1b80:	00150500 	andseq	r0, r5, r0, lsl #10
    1b84:	0014f900 	andseq	pc, r4, r0, lsl #18
    1b88:	08dc1000 	ldmeq	ip, {ip}^
    1b8c:	3a010000 	bcc	41b94 <__ROM_SIZE__+0x1b94>
    1b90:	00004f0c 	andeq	r4, r0, ip, lsl #30
    1b94:	00155b00 	andseq	r5, r5, r0, lsl #22
    1b98:	00155500 	andseq	r5, r5, r0, lsl #10
    1b9c:	05041000 	streq	r1, [r4, #-0]
    1ba0:	3b010000 	blcc	41ba8 <__ROM_SIZE__+0x1ba8>
    1ba4:	00004f0c 	andeq	r4, r0, ip, lsl #30
    1ba8:	00158800 	andseq	r8, r5, r0, lsl #16
    1bac:	00158400 	andseq	r8, r5, r0, lsl #8
    1bb0:	00a81500 	adceq	r1, r8, r0, lsl #10
    1bb4:	040b0000 	streq	r0, [fp], #-0
    1bb8:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
    1bbc:	113d0100 	teqne	sp, r0, lsl #2
    1bc0:	0000004f 	andeq	r0, r0, pc, asr #32
    1bc4:	000015aa 	andeq	r1, r0, sl, lsr #11
    1bc8:	000015a6 	andeq	r1, r0, r6, lsr #11
    1bcc:	00082b10 	andeq	r2, r8, r0, lsl fp
    1bd0:	183d0100 	ldmdane	sp!, {r8}
    1bd4:	0000004f 	andeq	r0, r0, pc, asr #32
    1bd8:	000015cd 	andeq	r1, r0, sp, asr #11
    1bdc:	000015c9 	andeq	r1, r0, r9, asr #11
    1be0:	000f0014 	andeq	r0, pc, r4, lsl r0	; <UNPREDICTABLE>
    1be4:	00057700 	andeq	r7, r5, r0, lsl #14
    1be8:	50011300 	andpl	r1, r1, r0, lsl #6
    1bec:	19680305 	stmdbne	r8!, {r0, r2, r8, r9}^
    1bf0:	01130000 	tsteq	r3, r0
    1bf4:	00740251 	rsbseq	r0, r4, r1, asr r2
    1bf8:	da110000 	ble	441c00 <__ROM_SIZE__+0x401c00>
    1bfc:	5f00000e 	svcpl	0x0000000e
    1c00:	11000005 	tstne	r0, r5
    1c04:	00000ee2 	andeq	r0, r0, r2, ror #29
    1c08:	0000056b 	andeq	r0, r0, fp, ror #10
    1c0c:	000ef014 	andeq	pc, lr, r4, lsl r0	; <UNPREDICTABLE>
    1c10:	00057700 	andeq	r7, r5, r0, lsl #14
    1c14:	50011300 	andpl	r1, r1, r0, lsl #6
    1c18:	19a40305 	stmibne	r4!, {r0, r2, r8, r9}
    1c1c:	00000000 	andeq	r0, r0, r0
    1c20:	32337717 	eorscc	r7, r3, #6029312	; 0x5c0000
    1c24:	05280100 	streq	r0, [r8, #-256]!	; 0xffffff00
    1c28:	00000069 	andeq	r0, r0, r9, rrx
    1c2c:	00000e9c 	muleq	r0, ip, lr
    1c30:	00000030 	andeq	r0, r0, r0, lsr r0
    1c34:	04c19c01 	strbeq	r9, [r1], #3073	; 0xc01
    1c38:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
    1c3c:	01000001 	tsteq	r0, r1
    1c40:	00690d28 	rsbeq	r0, r9, r8, lsr #26
    1c44:	15f40000 	ldrbne	r0, [r4, #0]!
    1c48:	15ec0000 	strbne	r0, [ip, #0]!
    1c4c:	3c0e0000 	stccc	0, cr0, [lr], {-0}
    1c50:	01000001 	tsteq	r0, r1
    1c54:	00b01928 	adcseq	r1, r0, r8, lsr #18
    1c58:	16360000 	ldrtne	r0, [r6], -r0
    1c5c:	162e0000 	strtne	r0, [lr], -r0
    1c60:	dc100000 	ldcle	0, cr0, [r0], {-0}
    1c64:	01000008 	tsteq	r0, r8
    1c68:	004f0c2d 	subeq	r0, pc, sp, lsr #24
    1c6c:	166e0000 	strbtne	r0, [lr], -r0
    1c70:	166a0000 	strbtne	r0, [sl], -r0
    1c74:	2b100000 	blcs	401c7c <__ROM_SIZE__+0x3c1c7c>
    1c78:	01000008 	tsteq	r0, r8
    1c7c:	004f0c2e 	subeq	r0, pc, lr, lsr #24
    1c80:	168e0000 	strne	r0, [lr], r0
    1c84:	168c0000 	strne	r0, [ip], r0
    1c88:	aa110000 	bge	441c90 <__ROM_SIZE__+0x401c90>
    1c8c:	5f00000e 	svcpl	0x0000000e
    1c90:	11000005 	tstne	r0, r5
    1c94:	00000eb2 			; <UNDEFINED> instruction: 0x00000eb2
    1c98:	0000055f 	andeq	r0, r0, pc, asr r5
    1c9c:	000ec014 	andeq	ip, lr, r4, lsl r0
    1ca0:	00057700 	andeq	r7, r5, r0, lsl #14
    1ca4:	50011300 	andpl	r1, r1, r0, lsl #6
    1ca8:	19740305 	ldmdbne	r4!, {r0, r2, r8, r9}^
    1cac:	00000000 	andeq	r0, r0, r0
    1cb0:	32337217 	eorscc	r7, r3, #1879048193	; 0x70000001
    1cb4:	05190100 	ldreq	r0, [r9, #-256]	; 0xffffff00
    1cb8:	00000069 	andeq	r0, r0, r9, rrx
    1cbc:	00000e6c 	andeq	r0, r0, ip, ror #28
    1cc0:	00000030 	andeq	r0, r0, r0, lsr r0
    1cc4:	055f9c01 	ldrbeq	r9, [pc, #-3073]	; 10cb <exec_auto_cmds+0x5>
    1cc8:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
    1ccc:	01000001 	tsteq	r0, r1
    1cd0:	00690d19 	rsbeq	r0, r9, r9, lsl sp
    1cd4:	16a90000 	strtne	r0, [r9], r0
    1cd8:	16a10000 	strtne	r0, [r1], r0
    1cdc:	3c0e0000 	stccc	0, cr0, [lr], {-0}
    1ce0:	01000001 	tsteq	r0, r1
    1ce4:	00b01919 	adcseq	r1, r0, r9, lsl r9
    1ce8:	16eb0000 	strbtne	r0, [fp], r0
    1cec:	16e30000 	strbtne	r0, [r3], r0
    1cf0:	dc100000 	ldcle	0, cr0, [r0], {-0}
    1cf4:	01000008 	tsteq	r0, r8
    1cf8:	004f0c1f 	subeq	r0, pc, pc, lsl ip	; <UNPREDICTABLE>
    1cfc:	17290000 	strne	r0, [r9, -r0]!
    1d00:	17250000 	strne	r0, [r5, -r0]!
    1d04:	2b100000 	blcs	401d0c <__ROM_SIZE__+0x3c1d0c>
    1d08:	01000008 	tsteq	r0, r8
    1d0c:	004f0c20 	subeq	r0, pc, r0, lsr #24
    1d10:	17490000 	strbne	r0, [r9, -r0]
    1d14:	17470000 	strbne	r0, [r7, -r0]
    1d18:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
    1d1c:	5f00000e 	svcpl	0x0000000e
    1d20:	12000005 	andne	r0, r0, #5
    1d24:	00000e82 	andeq	r0, r0, r2, lsl #29
    1d28:	00000577 	andeq	r0, r0, r7, ror r5
    1d2c:	0000054b 	andeq	r0, r0, fp, asr #10
    1d30:	05500113 	ldrbeq	r0, [r0, #-275]	; 0xfffffeed
    1d34:	00196803 	andseq	r6, r9, r3, lsl #16
    1d38:	8e140000 	cdphi	0, 1, cr0, cr4, cr0, {0}
    1d3c:	7700000e 	strvc	r0, [r0, -lr]
    1d40:	13000005 	movwne	r0, #5
    1d44:	03055001 	movweq	r5, #20481	; 0x5001
    1d48:	00001948 	andeq	r1, r0, r8, asr #18
    1d4c:	12180000 	andsne	r0, r8, #0
    1d50:	12000006 	andne	r0, r0, #6
    1d54:	04000006 	streq	r0, [r0], #-6
    1d58:	17180a26 	ldrne	r0, [r8, -r6, lsr #20]
    1d5c:	17000006 	strne	r0, [r0, -r6]
    1d60:	04000006 	streq	r0, [r0], #-6
    1d64:	2b18051f 	blcs	6031e8 <__ROM_SIZE__+0x5c31e8>
    1d68:	2b000001 	blcs	1d74 <rsbox+0x52c>
    1d6c:	05000001 	streq	r0, [r0, #-1]
    1d70:	2600052c 	strcs	r0, [r0], -ip, lsr #10
    1d74:	04000002 	streq	r0, [r0], #-2
    1d78:	000ad100 	andeq	sp, sl, r0, lsl #2
    1d7c:	45010400 	strmi	r0, [r1, #-1024]	; 0xfffffc00
    1d80:	0c000000 	stceq	0, cr0, [r0], {-0}
    1d84:	000006cd 	andeq	r0, r0, sp, asr #13
    1d88:	000000e6 	andeq	r0, r0, r6, ror #1
    1d8c:	00000fcc 	andeq	r0, r0, ip, asr #31
    1d90:	00000060 	andeq	r0, r0, r0, rrx
    1d94:	000019b1 			; <UNDEFINED> instruction: 0x000019b1
    1d98:	69050402 	stmdbvs	r5, {r1, sl}
    1d9c:	0300746e 	movweq	r7, #1134	; 0x46e
    1da0:	000004ad 	andeq	r0, r0, sp, lsr #9
    1da4:	3817d102 	ldmdacc	r7, {r1, r8, ip, lr, pc}
    1da8:	04000000 	streq	r0, [r0], #-0
    1dac:	010b0704 	tsteq	fp, r4, lsl #14
    1db0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    1db4:	00011d05 	andeq	r1, r1, r5, lsl #26
    1db8:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    1dbc:	00000147 	andeq	r0, r0, r7, asr #2
    1dc0:	0002fd05 	andeq	pc, r2, r5, lsl #26
    1dc4:	07350100 	ldreq	r0, [r5, -r0, lsl #2]!
    1dc8:	000000be 	strheq	r0, [r0], -lr
    1dcc:	0000101c 	andeq	r1, r0, ip, lsl r0
    1dd0:	00000010 	andeq	r0, r0, r0, lsl r0
    1dd4:	00be9c01 	adcseq	r9, lr, r1, lsl #24
    1dd8:	9b060000 	blls	181de0 <__ROM_SIZE__+0x141de0>
    1ddc:	01000006 	tsteq	r0, r6
    1de0:	00be1435 	adcseq	r1, lr, r5, lsr r4
    1de4:	17600000 	strbne	r0, [r0, -r0]!
    1de8:	175c0000 	ldrbne	r0, [ip, -r0]
    1dec:	76070000 	strvc	r0, [r7], -r0
    1df0:	01006c61 	tsteq	r0, r1, ror #24
    1df4:	00251e35 	eoreq	r1, r5, r5, lsr lr
    1df8:	51010000 	mrspl	r0, (UNDEF: 1)
    1dfc:	00094908 	andeq	r4, r9, r8, lsl #18
    1e00:	2a350100 	bcs	d42208 <__ROM_SIZE__+0xd02208>
    1e04:	0000002c 	andeq	r0, r0, ip, lsr #32
    1e08:	69095201 	stmdbvs	r9, {r0, r9, ip, lr}
    1e0c:	0a360100 	beq	d82214 <__ROM_SIZE__+0xd42214>
    1e10:	0000002c 	andeq	r0, r0, ip, lsr #32
    1e14:	00001785 	andeq	r1, r0, r5, lsl #15
    1e18:	00001781 	andeq	r1, r0, r1, lsl #15
    1e1c:	0006b30a 	andeq	fp, r6, sl, lsl #6
    1e20:	09370100 	ldmdbeq	r7!, {r8}
    1e24:	000000c0 	andeq	r0, r0, r0, asr #1
    1e28:	000017a8 	andeq	r1, r0, r8, lsr #15
    1e2c:	000017a4 	andeq	r1, r0, r4, lsr #15
    1e30:	0c040b00 			; <UNDEFINED> instruction: 0x0c040b00
    1e34:	0000c604 	andeq	ip, r0, r4, lsl #12
    1e38:	08010400 	stmdaeq	r1, {sl}
    1e3c:	00000040 	andeq	r0, r0, r0, asr #32
    1e40:	0000c60d 	andeq	ip, r0, sp, lsl #12
    1e44:	04ed0500 	strbteq	r0, [sp], #1280	; 0x500
    1e48:	2b010000 	blcs	41e50 <__ROM_SIZE__+0x1e50>
    1e4c:	0000be07 	andeq	fp, r0, r7, lsl #28
    1e50:	00100600 	andseq	r0, r0, r0, lsl #12
    1e54:	00001600 	andeq	r1, r0, r0, lsl #12
    1e58:	579c0100 	ldrpl	r0, [ip, r0, lsl #2]
    1e5c:	06000001 	streq	r0, [r0], -r1
    1e60:	0000069b 	muleq	r0, fp, r6
    1e64:	be142b01 	vnmlslt.f64	d2, d4, d1
    1e68:	cd000000 	stcgt	0, cr0, [r0, #-0]
    1e6c:	c9000017 	stmdbgt	r0, {r0, r1, r2, r4}
    1e70:	07000017 	smladeq	r0, r7, r0, r0
    1e74:	00637273 	rsbeq	r7, r3, r3, ror r2
    1e78:	57262b01 	strpl	r2, [r6, -r1, lsl #22]!
    1e7c:	01000001 	tsteq	r0, r1
    1e80:	09490851 	stmdbeq	r9, {r0, r4, r6, fp}^
    1e84:	2b010000 	blcs	41e8c <__ROM_SIZE__+0x1e8c>
    1e88:	00002c32 	andeq	r2, r0, r2, lsr ip
    1e8c:	09520100 	ldmdbeq	r2, {r8}^
    1e90:	2c010069 	stccs	0, cr0, [r1], {105}	; 0x69
    1e94:	00002c0a 	andeq	r2, r0, sl, lsl #24
    1e98:	0017f200 	andseq	pc, r7, r0, lsl #4
    1e9c:	0017ee00 	andseq	lr, r7, r0, lsl #28
    1ea0:	06bd0a00 	ldrteq	r0, [sp], r0, lsl #20
    1ea4:	2d010000 	stccs	0, cr0, [r1, #-0]
    1ea8:	0000c009 	andeq	ip, r0, r9
    1eac:	00181300 	andseq	r1, r8, r0, lsl #6
    1eb0:	00181100 	andseq	r1, r8, r0, lsl #2
    1eb4:	06b30a00 	ldrteq	r0, [r3], r0, lsl #20
    1eb8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1ebc:	0000c009 	andeq	ip, r0, r9
    1ec0:	00182a00 	andseq	r2, r8, r0, lsl #20
    1ec4:	00182600 	andseq	r2, r8, r0, lsl #12
    1ec8:	040c0000 	streq	r0, [ip], #-0
    1ecc:	0000015d 	andeq	r0, r0, sp, asr r1
    1ed0:	06a7050e 	strteq	r0, [r7], lr, lsl #10
    1ed4:	23010000 	movwcs	r0, #4096	; 0x1000
    1ed8:	0000c007 	andeq	ip, r0, r7
    1edc:	000ff200 	andeq	pc, pc, r0, lsl #4
    1ee0:	00001400 	andeq	r1, r0, r0, lsl #8
    1ee4:	a19c0100 	orrsge	r0, ip, r0, lsl #2
    1ee8:	06000001 	streq	r0, [r0], -r1
    1eec:	000006ae 	andeq	r0, r0, lr, lsr #13
    1ef0:	c0142301 	andsgt	r2, r4, r1, lsl #6
    1ef4:	51000000 	mrspl	r0, (UNDEF: 0)
    1ef8:	4b000018 	blmi	1f60 <rsbox+0x718>
    1efc:	06000018 			; <UNDEFINED> instruction: 0x06000018
    1f00:	000006f9 	strdeq	r0, [r0], -r9
    1f04:	a1262301 			; <UNDEFINED> instruction: 0xa1262301
    1f08:	80000001 	andhi	r0, r0, r1
    1f0c:	7c000018 	stcvc	0, cr0, [r0], {24}
    1f10:	00000018 	andeq	r0, r0, r8, lsl r0
    1f14:	00cd040c 	sbceq	r0, sp, ip, lsl #8
    1f18:	a0050000 	andge	r0, r5, r0
    1f1c:	01000006 	tsteq	r0, r6
    1f20:	0025051b 	eoreq	r0, r5, fp, lsl r5
    1f24:	0fdc0000 	svceq	0x00dc0000
    1f28:	00160000 	andseq	r0, r6, r0
    1f2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f30:	000001ea 	andeq	r0, r0, sl, ror #3
    1f34:	0006ae06 	andeq	sl, r6, r6, lsl #28
    1f38:	181b0100 	ldmdane	fp, {r8}
    1f3c:	000001a1 	andeq	r0, r0, r1, lsr #3
    1f40:	000018a2 	andeq	r1, r0, r2, lsr #17
    1f44:	0000189e 	muleq	r0, lr, r8
    1f48:	0006f906 	andeq	pc, r6, r6, lsl #18
    1f4c:	2a1b0100 	bcs	6c2354 <__ROM_SIZE__+0x682354>
    1f50:	000001a1 	andeq	r0, r0, r1, lsr #3
    1f54:	000018c4 	andeq	r1, r0, r4, asr #17
    1f58:	000018c0 	andeq	r1, r0, r0, asr #17
    1f5c:	06c60f00 	strbeq	r0, [r6], r0, lsl #30
    1f60:	13010000 	movwne	r0, #4096	; 0x1000
    1f64:	00002c08 	andeq	r2, r0, r8, lsl #24
    1f68:	000fcc00 	andeq	ip, pc, r0, lsl #24
    1f6c:	00001000 	andeq	r1, r0, r0
    1f70:	109c0100 	addsne	r0, ip, r0, lsl #2
    1f74:	00727473 	rsbseq	r7, r2, r3, ror r4
    1f78:	a11b1301 	tstge	fp, r1, lsl #6
    1f7c:	e6000001 	str	r0, [r0], -r1
    1f80:	e2000018 	and	r0, r0, #24
    1f84:	09000018 	stmdbeq	r0, {r3, r4}
    1f88:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1f8c:	2c0a1401 	cfstrscs	mvf1, [sl], {1}
    1f90:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1f94:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    1f98:	00000019 	andeq	r0, r0, r9, lsl r0
    1f9c:	000f2f00 	andeq	r2, pc, r0, lsl #30
    1fa0:	d2000400 	andle	r0, r0, #0, 8
    1fa4:	0400000b 	streq	r0, [r0], #-11
    1fa8:	00004501 	andeq	r4, r0, r1, lsl #10
    1fac:	07670c00 	strbeq	r0, [r7, -r0, lsl #24]!
    1fb0:	00e60000 	rsceq	r0, r6, r0
    1fb4:	102c0000 	eorne	r0, ip, r0
    1fb8:	06280000 	strteq	r0, [r8], -r0
    1fbc:	1b720000 	blne	1c81fc4 <__ROM_SIZE__+0x1c41fc4>
    1fc0:	01020000 	mrseq	r0, (UNDEF: 2)
    1fc4:	00003906 	andeq	r3, r0, r6, lsl #18
    1fc8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    1fcc:	00000132 	andeq	r0, r0, r2, lsr r1
    1fd0:	22050402 	andcs	r0, r5, #33554432	; 0x2000000
    1fd4:	02000001 	andeq	r0, r0, #1
    1fd8:	011d0508 	tsteq	sp, r8, lsl #10
    1fdc:	01020000 	mrseq	r0, (UNDEF: 2)
    1fe0:	00003708 	andeq	r3, r0, r8, lsl #14
    1fe4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1fe8:	000000ca 	andeq	r0, r0, sl, asr #1
    1fec:	00028f03 	andeq	r8, r2, r3, lsl #30
    1ff0:	19340300 	ldmdbne	r4!, {r8, r9}
    1ff4:	0000005b 	andeq	r0, r0, fp, asr r0
    1ff8:	06070402 	streq	r0, [r7], -r2, lsl #8
    1ffc:	02000001 	andeq	r0, r0, #1
    2000:	01010708 	tsteq	r1, r8, lsl #14
    2004:	04040000 	streq	r0, [r4], #-0
    2008:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    200c:	00690500 	rsbeq	r0, r9, r0, lsl #10
    2010:	04020000 	streq	r0, [r2], #-0
    2014:	00010b07 	andeq	r0, r1, r7, lsl #22
    2018:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
    201c:	00000147 	andeq	r0, r0, r7, asr #2
    2020:	646d6306 	strbtvs	r6, [sp], #-774	; 0xfffffcfa
    2024:	0f2a0200 	svceq	0x002a0200
    2028:	0000008f 	andeq	r0, r0, pc, lsl #1
    202c:	00950407 	addseq	r0, r5, r7, lsl #8
    2030:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
    2034:	a9000000 	stmdbge	r0, {}	; <UNPREDICTABLE>
    2038:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    203c:	00000069 	andeq	r0, r0, r9, rrx
    2040:	0000a909 	andeq	sl, r0, r9, lsl #18
    2044:	04070000 	streq	r0, [r7], #-0
    2048:	000000af 	andeq	r0, r0, pc, lsr #1
    204c:	00b50407 	adcseq	r0, r5, r7, lsl #8
    2050:	01020000 	mrseq	r0, (UNDEF: 2)
    2054:	00004008 	andeq	r4, r0, r8
    2058:	00b50a00 	adcseq	r0, r5, r0, lsl #20
    205c:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    2060:	f2093302 	vcgt.s8	d3, d9, d2
    2064:	0c000000 	stceq	0, cr0, [r0], {-0}
    2068:	00000153 	andeq	r0, r0, r3, asr r1
    206c:	f20f3402 	vshl.s8	d3, d2, d15
    2070:	00000000 	andeq	r0, r0, r0
    2074:	0000220c 	andeq	r2, r0, ip, lsl #4
    2078:	0f350200 	svceq	0x00350200
    207c:	000000f2 	strdeq	r0, [r0], -r2
    2080:	002f0c04 	eoreq	r0, pc, r4, lsl #24
    2084:	36020000 	strcc	r0, [r2], -r0
    2088:	00008307 	andeq	r8, r0, r7, lsl #6
    208c:	07000800 	streq	r0, [r0, -r0, lsl #16]
    2090:	0000bc04 	andeq	fp, r0, r4, lsl #24
    2094:	01410300 	mrseq	r0, (UNDEF: 113)
    2098:	37020000 	strcc	r0, [r2, -r0]
    209c:	0000c103 	andeq	ip, r0, r3, lsl #2
    20a0:	00f80a00 	rscseq	r0, r8, r0, lsl #20
    20a4:	f8050000 			; <UNDEFINED> instruction: 0xf8050000
    20a8:	0d000000 	stceq	0, cr0, [r0, #-0]
    20ac:	00000069 	andeq	r0, r0, r9, rrx
    20b0:	0007a10e 	andeq	sl, r7, lr, lsl #2
    20b4:	07180100 	ldreq	r0, [r8, -r0, lsl #2]
    20b8:	00000125 	andeq	r0, r0, r5, lsr #2
    20bc:	00740305 	rsbseq	r0, r4, r5, lsl #6
    20c0:	04072000 	streq	r2, [r7], #-0
    20c4:	0000010e 	andeq	r0, r0, lr, lsl #2
    20c8:	00095f0e 	andeq	r5, r9, lr, lsl #30
    20cc:	07190100 	ldreq	r0, [r9, -r0, lsl #2]
    20d0:	00000125 	andeq	r0, r0, r5, lsr #2
    20d4:	00780305 	rsbseq	r0, r8, r5, lsl #6
    20d8:	480f2000 	stmdami	pc, {sp}	; <UNPREDICTABLE>
    20dc:	09000001 	stmdbeq	r0, {r0}
    20e0:	000000b5 	strheq	r0, [r0], -r5
    20e4:	04340e00 	ldrteq	r0, [r4], #-3584	; 0xfffff200
    20e8:	1a010000 	bne	420f0 <__ROM_SIZE__+0x20f0>
    20ec:	00015a08 	andeq	r5, r1, r8, lsl #20
    20f0:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
    20f4:	07200000 	streq	r0, [r0, -r0]!
    20f8:	00013d04 	andeq	r3, r1, r4, lsl #26
    20fc:	03ac0e00 			; <UNDEFINED> instruction: 0x03ac0e00
    2100:	1b010000 	blne	42108 <__ROM_SIZE__+0x2108>
    2104:	00015a08 	andeq	r5, r1, r8, lsl #20
    2108:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    210c:	10200000 	eorne	r0, r0, r0
    2110:	0000080c 	andeq	r0, r0, ip, lsl #16
    2114:	5b1a1d01 	blpl	689520 <__ROM_SIZE__+0x649520>
    2118:	10000000 	andne	r0, r0, r0
    211c:	00000856 	andeq	r0, r0, r6, asr r8
    2120:	5b1a1e01 	blpl	68992c <__ROM_SIZE__+0x64992c>
    2124:	11000000 	mrsne	r0, (UNDEF: 0)
    2128:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    212c:	96152001 	ldrls	r2, [r5], -r1
    2130:	07000001 	streq	r0, [r0, -r1]
    2134:	00010404 	andeq	r0, r1, r4, lsl #8
    2138:	07d11100 	ldrbeq	r1, [r1, r0, lsl #2]
    213c:	21010000 	mrscs	r0, (UNDEF: 1)
    2140:	00019615 	andeq	r9, r1, r5, lsl r6
    2144:	07461200 	strbeq	r1, [r6, -r0, lsl #4]
    2148:	22010000 	andcs	r0, r1, #0
    214c:	00007015 	andeq	r7, r0, r5, lsl r0
    2150:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
    2154:	12200000 	eorne	r0, r0, #0
    2158:	00000733 	andeq	r0, r0, r3, lsr r7
    215c:	70152a01 	andsvc	r2, r5, r1, lsl #20
    2160:	05000000 	streq	r0, [r0, #-0]
    2164:	00002803 	andeq	r2, r0, r3, lsl #16
    2168:	09081220 	stmdbeq	r8, {r5, r9, ip}
    216c:	2b010000 	blcs	42174 <__ROM_SIZE__+0x2174>
    2170:	00007015 	andeq	r7, r0, r5, lsl r0
    2174:	70030500 	andvc	r0, r3, r0, lsl #10
    2178:	13200000 	nopne	{0}	; <UNPREDICTABLE>
    217c:	000000b5 	strheq	r0, [r0], -r5
    2180:	000001f4 	strdeq	r0, [r0], -r4
    2184:	00007514 	andeq	r7, r0, r4, lsl r5
    2188:	75140100 	ldrvc	r0, [r4, #-256]	; 0xffffff00
    218c:	1f000000 	svcne	0x00000000
    2190:	07e81200 	strbeq	r1, [r8, r0, lsl #4]!
    2194:	2c010000 	stccs	0, cr0, [r1], {-0}
    2198:	0001de0d 	andeq	sp, r1, sp, lsl #28
    219c:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    21a0:	12200000 	eorne	r0, r0, #0
    21a4:	0000094e 	andeq	r0, r0, lr, asr #18
    21a8:	1f162f01 	svcne	0x00162f01
    21ac:	05000002 	streq	r0, [r0, #-2]
    21b0:	00000003 	andeq	r0, r0, r3
    21b4:	02010220 	andeq	r0, r1, #32, 4
    21b8:	00000402 	andeq	r0, r0, r2, lsl #8
    21bc:	00021805 	andeq	r1, r2, r5, lsl #16
    21c0:	07140e00 	ldreq	r0, [r4, -r0, lsl #28]
    21c4:	92010000 	andls	r0, r1, #0
    21c8:	0000f801 	andeq	pc, r0, r1, lsl #16
    21cc:	c0030500 	andgt	r0, r3, r0, lsl #10
    21d0:	15000016 	strne	r0, [r0, #-22]	; 0xffffffea
    21d4:	00000880 	andeq	r0, r0, r0, lsl #17
    21d8:	0101df01 	tsteq	r1, r1, lsl #30
    21dc:	000000f8 	strdeq	r0, [r0], -r8
    21e0:	16cc0305 	strbne	r0, [ip], r5, lsl #6
    21e4:	bd150000 	ldclt	0, cr0, [r5, #-0]
    21e8:	01000007 	tsteq	r0, r7
    21ec:	f80101e0 			; <UNDEFINED> instruction: 0xf80101e0
    21f0:	05000000 	streq	r0, [r0, #-0]
    21f4:	0016b403 	andseq	fp, r6, r3, lsl #8
    21f8:	078d1500 	streq	r1, [sp, r0, lsl #10]
    21fc:	e1010000 	mrs	r0, (UNDEF: 1)
    2200:	00f80101 	rscseq	r0, r8, r1, lsl #2
    2204:	03050000 	movweq	r0, #20480	; 0x5000
    2208:	000016a8 	andeq	r1, r0, r8, lsr #13
    220c:	00084d16 	andeq	r4, r8, r6, lsl sp
    2210:	01e50100 	mvneq	r0, r0, lsl #2
    2214:	0001093c 	andeq	r0, r1, ip, lsr r9
    2218:	d8030500 	stmdale	r3, {r8, sl}
    221c:	17000016 	smladne	r0, r6, r0, r0
    2220:	00000748 	andeq	r0, r0, r8, asr #14
    2224:	0501d901 	streq	sp, [r1, #-2305]	; 0xfffff6ff
    2228:	00000069 	andeq	r0, r0, r9, rrx
    222c:	0000112c 	andeq	r1, r0, ip, lsr #2
    2230:	00000018 	andeq	r0, r0, r8, lsl r0
    2234:	02db9c01 	sbcseq	r9, fp, #256	; 0x100
    2238:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
    223c:	01000001 	tsteq	r0, r1
    2240:	691901d9 	ldmdbvs	r9, {r0, r3, r4, r6, r7, r8}
    2244:	2b000000 	blcs	224c <rsbox+0xa04>
    2248:	27000019 	smladcs	r0, r9, r0, r0
    224c:	18000019 	stmdane	r0, {r0, r3, r4}
    2250:	0000013c 	andeq	r0, r0, ip, lsr r1
    2254:	2601d901 	strcs	sp, [r1], -r1, lsl #18
    2258:	000000a9 	andeq	r0, r0, r9, lsr #1
    225c:	00001950 	andeq	r1, r0, r0, asr r9
    2260:	0000194c 	andeq	r1, r0, ip, asr #18
    2264:	00113819 	andseq	r3, r1, r9, lsl r8
    2268:	000eea00 	andeq	lr, lr, r0, lsl #20
    226c:	50011a00 	andpl	r1, r1, r0, lsl #20
    2270:	1bb00305 	blne	fec02e8c <_STACK_TOP_+0xdebfae90>
    2274:	00000000 	andeq	r0, r0, r0
    2278:	00002a17 	andeq	r2, r0, r7, lsl sl
    227c:	01bf0100 			; <UNDEFINED> instruction: 0x01bf0100
    2280:	00006905 	andeq	r6, r0, r5, lsl #18
    2284:	0011ac00 	andseq	sl, r1, r0, lsl #24
    2288:	00006800 	andeq	r6, r0, r0, lsl #16
    228c:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    2290:	18000003 	stmdane	r0, {r0, r1}
    2294:	00000118 	andeq	r0, r0, r8, lsl r1
    2298:	0e01bf01 	cdpeq	15, 0, cr11, cr1, cr1, {0}
    229c:	00000069 	andeq	r0, r0, r9, rrx
    22a0:	00001975 	andeq	r1, r0, r5, ror r9
    22a4:	00001971 	andeq	r1, r0, r1, ror r9
    22a8:	00013c18 	andeq	r3, r1, r8, lsl ip
    22ac:	01bf0100 			; <UNDEFINED> instruction: 0x01bf0100
    22b0:	0000a91b 	andeq	sl, r0, fp, lsl r9
    22b4:	00199c00 	andseq	r9, r9, r0, lsl #24
    22b8:	00199600 	andseq	r9, r9, r0, lsl #12
    22bc:	00691b00 	rsbeq	r1, r9, r0, lsl #22
    22c0:	0701c001 	streq	ip, [r1, -r1]
    22c4:	00000069 	andeq	r0, r0, r9, rrx
    22c8:	000019d0 	ldrdeq	r1, [r0], -r0
    22cc:	000019c8 	andeq	r1, r0, r8, asr #19
    22d0:	0007581c 	andeq	r5, r7, ip, lsl r8
    22d4:	01c20100 	biceq	r0, r2, r0, lsl #2
    22d8:	00021808 	andeq	r1, r2, r8, lsl #16
    22dc:	001a0e00 	andseq	r0, sl, r0, lsl #28
    22e0:	001a0600 	andseq	r0, sl, r0, lsl #12
    22e4:	11bc1d00 			; <UNDEFINED> instruction: 0x11bc1d00
    22e8:	0ef60000 	cdpeq	0, 15, cr0, cr6, cr0, {0}
    22ec:	035f0000 	cmpeq	pc, #0
    22f0:	011a0000 	tsteq	sl, r0
    22f4:	34030551 	strcc	r0, [r3], #-1361	; 0xfffffaaf
    22f8:	0000001c 	andeq	r0, r0, ip, lsl r0
    22fc:	0011c41d 	andseq	ip, r1, sp, lsl r4
    2300:	000eea00 	andeq	lr, lr, r0, lsl #20
    2304:	00037600 	andeq	r7, r3, r0, lsl #12
    2308:	50011a00 	andpl	r1, r1, r0, lsl #20
    230c:	1c380305 	ldcne	3, cr0, [r8], #-20	; 0xffffffec
    2310:	1d000000 	stcne	0, cr0, [r0, #-0]
    2314:	000011d0 	ldrdeq	r1, [r0], -r0
    2318:	00000eea 	andeq	r0, r0, sl, ror #29
    231c:	0000038d 	andeq	r0, r0, sp, lsl #7
    2320:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0xfffffee6
    2324:	001c5c03 	andseq	r5, ip, r3, lsl #24
    2328:	e21e0000 	ands	r0, lr, #0
    232c:	ea000011 	b	2378 <rsbox+0xb30>
    2330:	1d00000e 	stcne	0, cr0, [r0, #-56]	; 0xffffffc8
    2334:	000011ec 	andeq	r1, r0, ip, ror #3
    2338:	00000eea 	andeq	r0, r0, sl, ror #29
    233c:	000003ad 	andeq	r0, r0, sp, lsr #7
    2340:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0xfffffee6
    2344:	001c5803 	andseq	r5, ip, r3, lsl #16
    2348:	f61e0000 			; <UNDEFINED> instruction: 0xf61e0000
    234c:	ea000011 	b	2398 <rsbox+0xb50>
    2350:	0000000e 	andeq	r0, r0, lr
    2354:	0008cf17 	andeq	ip, r8, r7, lsl pc
    2358:	01b60100 			; <UNDEFINED> instruction: 0x01b60100
    235c:	00008305 	andeq	r8, r0, r5, lsl #6
    2360:	00162400 	andseq	r2, r6, r0, lsl #8
    2364:	00003000 	andeq	r3, r0, r0
    2368:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    236c:	18000004 	stmdane	r0, {r2}
    2370:	000007f4 	strdeq	r0, [r0], -r4
    2374:	1d01b601 	stcne	6, cr11, [r1, #-4]
    2378:	000000af 	andeq	r0, r0, pc, lsr #1
    237c:	00001a4a 	andeq	r1, r0, sl, asr #20
    2380:	00001a44 	andeq	r1, r0, r4, asr #20
    2384:	0016281f 	andseq	r2, r6, pc, lsl r8
    2388:	00002400 	andeq	r2, r0, r0, lsl #8
    238c:	00691b00 	rsbeq	r1, r9, r0, lsl #22
    2390:	0c01b701 	stceq	7, cr11, [r1], {1}
    2394:	00000069 	andeq	r0, r0, r9, rrx
    2398:	00001a7a 	andeq	r1, r0, sl, ror sl
    239c:	00001a76 	andeq	r1, r0, r6, ror sl
    23a0:	00164019 	andseq	r4, r6, r9, lsl r0
    23a4:	000ef600 	andeq	pc, lr, r0, lsl #12
    23a8:	50011a00 	andpl	r1, r1, r0, lsl #20
    23ac:	00007602 	andeq	r7, r0, r2, lsl #12
    23b0:	fc170000 	ldc2	0, cr0, [r7], {-0}
    23b4:	01000007 	tsteq	r0, r7
    23b8:	690501a7 	stmdbvs	r5, {r0, r1, r2, r5, r7, r8}
    23bc:	fc000000 	stc2	0, cr0, [r0], {-0}
    23c0:	28000015 	stmdacs	r0, {r0, r2, r4}
    23c4:	01000000 	mrseq	r0, (UNDEF: 0)
    23c8:	00049c9c 	muleq	r4, ip, ip
    23cc:	07f41800 	ldrbeq	r1, [r4, r0, lsl #16]!
    23d0:	a7010000 	strge	r0, [r1, -r0]
    23d4:	00af1001 	adceq	r1, pc, r1
    23d8:	1a9f0000 	bne	fe7c23e0 <_STACK_TOP_+0xde7ba3e4>
    23dc:	1a990000 	bne	fe6423e4 <_STACK_TOP_+0xde63a3e8>
    23e0:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    23e4:	01000001 	tsteq	r0, r1
    23e8:	690701a8 	stmdbvs	r7, {r3, r5, r7, r8}
    23ec:	cf000000 	svcgt	0x00000000
    23f0:	cb00001a 	blgt	2460 <rsbox+0xc18>
    23f4:	1600001a 			; <UNDEFINED> instruction: 0x1600001a
    23f8:	0000013c 	andeq	r0, r0, ip, lsr r1
    23fc:	0901ab01 	stmdbeq	r1, {r0, r8, r9, fp, sp, pc}
    2400:	0000049c 	muleq	r0, ip, r4
    2404:	7fb89103 	svcvc	0x00b89103
    2408:	00160a1d 	andseq	r0, r6, sp, lsl sl
    240c:	0008a600 	andeq	sl, r8, r0, lsl #12
    2410:	00048b00 	andeq	r8, r4, r0, lsl #22
    2414:	50011a00 	andpl	r1, r1, r0, lsl #20
    2418:	1a007d02 	bne	21828 <__RAM_SIZE__+0x19828>
    241c:	f3035101 	vrhadd.u8	d5, d3, d1
    2420:	011a5001 	tsteq	sl, r1
    2424:	00400152 	subeq	r0, r0, r2, asr r1
    2428:	00161e19 	andseq	r1, r6, r9, lsl lr
    242c:	00080500 	andeq	r0, r8, r0, lsl #10
    2430:	51011a00 	tstpl	r1, r0, lsl #20
    2434:	00007d02 	andeq	r7, r0, r2, lsl #26
    2438:	00af1300 	adceq	r1, pc, r0, lsl #6
    243c:	04ac0000 	strteq	r0, [ip], #0
    2440:	75140000 	ldrvc	r0, [r4, #-0]
    2444:	0f000000 	svceq	0x00000000
    2448:	08af2000 	stmiaeq	pc!, {sp}	; <UNPREDICTABLE>
    244c:	9d010000 	stcls	0, cr0, [r1, #-0]
    2450:	15e80601 	strbne	r0, [r8, #1537]!	; 0x601
    2454:	00140000 	andseq	r0, r4, r0
    2458:	9c010000 	stcls	0, cr0, [r1], {-0}
    245c:	000004e8 	andeq	r0, r0, r8, ror #9
    2460:	0015ee1e 	andseq	lr, r5, lr, lsl lr
    2464:	0004e800 	andeq	lr, r4, r0, lsl #16
    2468:	15f21e00 	ldrbne	r1, [r2, #3584]!	; 0xe00
    246c:	05cd0000 	strbeq	r0, [sp]
    2470:	f61e0000 			; <UNDEFINED> instruction: 0xf61e0000
    2474:	44000015 	strmi	r0, [r0], #-21	; 0xffffffeb
    2478:	1e00000e 	cdpne	0, 0, cr0, cr0, cr14, {0}
    247c:	000015fa 	strdeq	r1, [r0], -sl
    2480:	00000612 	andeq	r0, r0, r2, lsl r6
    2484:	07af2100 	streq	r2, [pc, r0, lsl #2]!
    2488:	6f010000 	svcvs	0x00010000
    248c:	102c2c01 	eorne	r2, ip, r1, lsl #24
    2490:	006c0000 	rsbeq	r0, ip, r0
    2494:	9c010000 	stcls	0, cr0, [r1], {-0}
    2498:	00000574 	andeq	r0, r0, r4, ror r5
    249c:	00096e22 	andeq	r6, r9, r2, lsr #28
    24a0:	017a0100 	cmneq	sl, r0, lsl #2
    24a4:	0000b50f 	andeq	fp, r0, pc, lsl #10
    24a8:	082a2200 	stmdaeq	sl!, {r9, sp}
    24ac:	7a010000 	bvc	424b4 <__ROM_SIZE__+0x24b4>
    24b0:	00b51701 	adcseq	r1, r5, r1, lsl #14
    24b4:	60220000 	eorvs	r0, r2, r0
    24b8:	01000007 	tsteq	r0, r7
    24bc:	b51e017a 	ldrlt	r0, [lr, #-378]	; 0xfffffe86
    24c0:	22000000 	andcs	r0, r0, #0
    24c4:	00000975 	andeq	r0, r0, r5, ror r9
    24c8:	26017a01 	strcs	r7, [r1], -r1, lsl #20
    24cc:	000000b5 	strheq	r0, [r0], -r5
    24d0:	00080622 	andeq	r0, r8, r2, lsr #12
    24d4:	017a0100 	cmneq	sl, r0, lsl #2
    24d8:	0000b52c 	andeq	fp, r0, ip, lsr #10
    24dc:	72731b00 	rsbsvc	r1, r3, #0, 22
    24e0:	7b010063 	blvc	42674 <__ROM_SIZE__+0x2674>
    24e4:	00af0901 	adceq	r0, pc, r1, lsl #18
    24e8:	1af50000 	bne	ffd424f0 <_STACK_TOP_+0xdfd3a4f4>
    24ec:	1aed0000 	bne	ffb424f4 <_STACK_TOP_+0xdfb3a4f8>
    24f0:	641b0000 	ldrvs	r0, [fp], #-0
    24f4:	01007473 	tsteq	r0, r3, ror r4
    24f8:	af19017b 	svcge	0x0019017b
    24fc:	3f000000 	svccc	0x00000000
    2500:	2b00001b 	blcs	2574 <rsbox+0xd2c>
    2504:	1e00001b 	mcrne	0, 0, r0, cr0, cr11, {0}
    2508:	0000107a 	andeq	r1, r0, sl, ror r0
    250c:	00000f02 	andeq	r0, r0, r2, lsl #30
    2510:	08842300 	stmeq	r4, {r8, r9, sp}
    2514:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    2518:	00690c01 	rsbeq	r0, r9, r1, lsl #24
    251c:	11440000 	mrsne	r0, (UNDEF: 68)
    2520:	00100000 	andseq	r0, r0, r0
    2524:	9c010000 	stcls	0, cr0, [r1], {-0}
    2528:	000005cd 	andeq	r0, r0, sp, asr #11
    252c:	00011818 	andeq	r1, r1, r8, lsl r8
    2530:	01680100 	cmneq	r8, r0, lsl #2
    2534:	0000691b 	andeq	r6, r0, fp, lsl r9
    2538:	001bbe00 	andseq	fp, fp, r0, lsl #28
    253c:	001bba00 	andseq	fp, fp, r0, lsl #20
    2540:	013c1800 	teqeq	ip, r0, lsl #16
    2544:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    2548:	00a92801 	adceq	r2, r9, r1, lsl #16
    254c:	1be30000 	blne	ff8c2554 <_STACK_TOP_+0xdf8ba558>
    2550:	1bdf0000 	blne	ff7c2558 <_STACK_TOP_+0xdf7ba55c>
    2554:	4c190000 	ldcmi	0, cr0, [r9], {-0}
    2558:	ea000011 	b	25a4 <rsbox+0xd5c>
    255c:	1a00000e 	bne	259c <rsbox+0xd54>
    2560:	03055001 	movweq	r5, #20481	; 0x5001
    2564:	00001bb4 			; <UNDEFINED> instruction: 0x00001bb4
    2568:	f9240000 			; <UNDEFINED> instruction: 0xf9240000
    256c:	01000008 	tsteq	r0, r8
    2570:	c60d0162 	strgt	r0, [sp], -r2, ror #2
    2574:	26000010 			; <UNDEFINED> instruction: 0x26000010
    2578:	01000000 	mrseq	r0, (UNDEF: 0)
    257c:	0006129c 	muleq	r6, ip, r2
    2580:	10c81f00 	sbcne	r1, r8, r0, lsl #30
    2584:	001e0000 	andseq	r0, lr, r0
    2588:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    258c:	01630100 	cmneq	r3, r0, lsl #2
    2590:	0000690c 	andeq	r6, r0, ip, lsl #18
    2594:	001c0800 	andseq	r0, ip, r0, lsl #16
    2598:	001c0400 	andseq	r0, ip, r0, lsl #8
    259c:	10d42500 	sbcsne	r2, r4, r0, lsl #10
    25a0:	011a0000 	tsteq	sl, r0
    25a4:	1a300150 	bne	c02aec <__ROM_SIZE__+0xbc2aec>
    25a8:	30015101 	andcc	r5, r1, r1, lsl #2
    25ac:	26000000 	strcs	r0, [r0], -r0
    25b0:	00000830 	andeq	r0, r0, r0, lsr r8
    25b4:	800df501 	andhi	pc, sp, r1, lsl #10
    25b8:	68000014 	stmdavs	r0, {r2, r4}
    25bc:	01000001 	tsteq	r0, r1
    25c0:	0007f59c 	muleq	r7, ip, r5
    25c4:	00732700 	rsbseq	r2, r3, r0, lsl #14
    25c8:	6907f601 	stmdbvs	r7, {r0, r9, sl, ip, sp, lr, pc}
    25cc:	37000000 	strcc	r0, [r0, -r0]
    25d0:	2700001c 	smladcs	r0, ip, r0, r0
    25d4:	2800001c 	stmdacs	r0, {r2, r3, r4}
    25d8:	00000118 	andeq	r0, r0, r8, lsl r1
    25dc:	690af601 	stmdbvs	sl, {r0, r9, sl, ip, sp, lr, pc}
    25e0:	9b000000 	blls	25e8 <rsbox+0xda0>
    25e4:	9700001c 	smladls	r0, ip, r0, r0
    25e8:	1200001c 	andne	r0, r0, #28
    25ec:	000008f3 	strdeq	r0, [r0], -r3
    25f0:	6907f701 	stmdbvs	r7, {r0, r8, r9, sl, ip, sp, lr, pc}
    25f4:	02000000 	andeq	r0, r0, #0
    25f8:	6b286c91 	blvs	a1d844 <__ROM_SIZE__+0x9dd844>
    25fc:	01000008 	tsteq	r0, r8
    2600:	006907f8 	strdeq	r0, [r9], #-120	; 0xffffff88	; <UNPREDICTABLE>
    2604:	1cc70000 	stclne	0, cr0, [r7], {0}
    2608:	1cb90000 	ldcne	0, cr0, [r9]
    260c:	63270000 			; <UNDEFINED> instruction: 0x63270000
    2610:	08f90100 	ldmeq	r9!, {r8}^
    2614:	000000b5 	strheq	r0, [r0], -r5
    2618:	00001d22 	andeq	r1, r0, r2, lsr #26
    261c:	00001d1e 	andeq	r1, r0, lr, lsl sp
    2620:	00082012 	andeq	r2, r8, r2, lsl r0
    2624:	08fb0100 	ldmeq	fp!, {r8}^
    2628:	000007f5 	strdeq	r0, [r0], -r5
    262c:	124c9102 	subne	r9, ip, #-2147483648	; 0x80000000
    2630:	0000013c 	andeq	r0, r0, ip, lsr r1
    2634:	9c09fc01 	stcls	12, cr15, [r9], {1}
    2638:	03000004 	movweq	r0, #4
    263c:	297f8c91 	ldmdbcs	pc!, {r0, r4, r7, sl, fp, pc}^	; <UNPREDICTABLE>
    2640:	00001488 	andeq	r1, r0, r8, lsl #9
    2644:	00000014 	andeq	r0, r0, r4, lsl r0
    2648:	000006c2 	andeq	r0, r0, r2, asr #13
    264c:	01006927 	tsteq	r0, r7, lsr #18
    2650:	00690cfe 	strdeq	r0, [r9], #-206	; 0xffffff32	; <UNPREDICTABLE>
    2654:	1d440000 	stclne	0, cr0, [r4, #-0]
    2658:	1d400000 	stclne	0, cr0, [r0, #-0]
    265c:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    2660:	0000149c 	muleq	r0, ip, r4
    2664:	00000016 	andeq	r0, r0, r6, lsl r0
    2668:	000006e3 	andeq	r0, r0, r3, ror #13
    266c:	0100691b 	tsteq	r0, fp, lsl r9
    2670:	690c0100 	stmdbvs	ip, {r8}
    2674:	65000000 	strvs	r0, [r0, #-0]
    2678:	6300001d 	movwvs	r0, #29
    267c:	0000001d 	andeq	r0, r0, sp, lsl r0
    2680:	0014b61e 	andseq	fp, r4, lr, lsl r6
    2684:	000e2000 	andeq	r2, lr, r0
    2688:	14bc1d00 	ldrtne	r1, [ip], #3328	; 0xd00
    268c:	0eea0000 	cdpeq	0, 14, cr0, cr10, cr0, {0}
    2690:	07030000 	streq	r0, [r3, -r0]
    2694:	011a0000 	tsteq	sl, r0
    2698:	6c030550 	cfstr32vs	mvfx0, [r3], {80}	; 0x50
    269c:	0000001c 	andeq	r0, r0, ip, lsl r0
    26a0:	0014d82a 	andseq	sp, r4, sl, lsr #16
    26a4:	00071200 	andeq	r1, r7, r0, lsl #4
    26a8:	50011a00 	andpl	r1, r1, r0, lsl #20
    26ac:	1d003a01 	vstrne	s6, [r0, #-4]
    26b0:	000014de 	ldrdeq	r1, [r0], -lr
    26b4:	00000b9a 	muleq	r0, sl, fp
    26b8:	00000726 	andeq	r0, r0, r6, lsr #14
    26bc:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    26c0:	1d004c91 	stcne	12, cr4, [r0, #-580]	; 0xfffffdbc
    26c4:	000014e8 	andeq	r1, r0, r8, ror #9
    26c8:	000008a6 	andeq	r0, r0, r6, lsr #17
    26cc:	00000746 	andeq	r0, r0, r6, asr #14
    26d0:	0350011a 	cmpeq	r0, #-2147483642	; 0x80000006
    26d4:	1a7f8c91 	bne	1fe5920 <__ROM_SIZE__+0x1fa5920>
    26d8:	91025101 	tstls	r2, r1, lsl #2
    26dc:	52011a4c 	andpl	r1, r1, #76, 20	; 0x4c000
    26e0:	1e004001 	cdpne	0, 0, cr4, cr0, cr1, {0}
    26e4:	0000150e 	andeq	r1, r0, lr, lsl #10
    26e8:	00000dc9 	andeq	r0, r0, r9, asr #27
    26ec:	00151e2a 	andseq	r1, r5, sl, lsr #28
    26f0:	00075f00 	andeq	r5, r7, r0, lsl #30
    26f4:	50011a00 	andpl	r1, r1, r0, lsl #20
    26f8:	00007402 	andeq	r7, r0, r2, lsl #8
    26fc:	0015241e 	andseq	r2, r5, lr, lsl r4
    2700:	000dc900 	andeq	ip, sp, r0, lsl #18
    2704:	15281e00 	strne	r1, [r8, #-3584]!	; 0xfffff200
    2708:	0dc90000 	stcleq	0, cr0, [r9]
    270c:	4c1e0000 	ldcmi	0, cr0, [lr], {-0}
    2710:	95000015 	strls	r0, [r0, #-21]	; 0xffffffeb
    2714:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    2718:	00001558 	andeq	r1, r0, r8, asr r5
    271c:	00000c0c 	andeq	r0, r0, ip, lsl #24
    2720:	00000794 	muleq	r0, r4, r7
    2724:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    2728:	011a4c91 			; <UNDEFINED> instruction: 0x011a4c91
    272c:	6c910251 	lfmvs	f0, 4, [r1], {81}	; 0x51
    2730:	15621e00 	strbne	r1, [r2, #-3584]!	; 0xfffff200
    2734:	0d950000 	ldceq	0, cr0, [r5]
    2738:	6c1d0000 	ldcvs	0, cr0, [sp], {-0}
    273c:	c5000015 	strgt	r0, [r0, #-21]	; 0xffffffeb
    2740:	b700000c 	strlt	r0, [r0, -ip]
    2744:	1a000007 	bne	2768 <rsbox+0xf20>
    2748:	91025001 	tstls	r2, r1
    274c:	51011a4c 	tstpl	r1, ip, asr #20
    2750:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    2754:	0015761d 	andseq	r7, r5, sp, lsl r6
    2758:	00094900 	andeq	r4, r9, r0, lsl #18
    275c:	0007d100 	andeq	sp, r7, r0, lsl #2
    2760:	50011a00 	andpl	r1, r1, r0, lsl #20
    2764:	1a4c9102 	bne	1326b74 <__ROM_SIZE__+0x12e6b74>
    2768:	91025101 	tstls	r2, r1, lsl #2
    276c:	7c1e006c 	ldcvc	0, cr0, [lr], {108}	; 0x6c
    2770:	32000015 	andcc	r0, r0, #21
    2774:	1e00000e 	cdpne	0, 0, cr0, cr0, cr14, {0}
    2778:	00001580 	andeq	r1, r0, r0, lsl #11
    277c:	00000e0a 	andeq	r0, r0, sl, lsl #28
    2780:	0015da19 	andseq	sp, r5, r9, lsl sl
    2784:	00080500 	andeq	r0, r8, r0, lsl #10
    2788:	51011a00 	tstpl	r1, r0, lsl #20
    278c:	7f8c9103 	svcvc	0x008c9103
    2790:	b5130000 	ldrlt	r0, [r3, #-0]
    2794:	05000000 	streq	r0, [r0, #-0]
    2798:	14000008 	strne	r0, [r0], #-8
    279c:	00000075 	andeq	r0, r0, r5, ror r0
    27a0:	382b001f 	stmdacc	fp!, {r0, r1, r2, r3, r4}
    27a4:	01000009 	tsteq	r0, r9
    27a8:	11540de3 	cmpne	r4, r3, ror #27
    27ac:	00580000 	subseq	r0, r8, r0
    27b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    27b4:	000008a6 	andeq	r0, r0, r6, lsr #17
    27b8:	0001182c 	andeq	r1, r1, ip, lsr #16
    27bc:	19e30100 	stmibne	r3!, {r8}^
    27c0:	00000069 	andeq	r0, r0, r9, rrx
    27c4:	00001d7e 	andeq	r1, r0, lr, ror sp
    27c8:	00001d78 	andeq	r1, r0, r8, ror sp
    27cc:	00013c2c 	andeq	r3, r1, ip, lsr #24
    27d0:	26e30100 	strbtcs	r0, [r3], r0, lsl #2
    27d4:	000000a9 	andeq	r0, r0, r9, lsr #1
    27d8:	00001db0 			; <UNDEFINED> instruction: 0x00001db0
    27dc:	00001daa 	andeq	r1, r0, sl, lsr #27
    27e0:	0008e128 	andeq	lr, r8, r8, lsr #2
    27e4:	07e40100 	strbeq	r0, [r4, r0, lsl #2]!
    27e8:	00000069 	andeq	r0, r0, r9, rrx
    27ec:	00001de2 	andeq	r1, r0, r2, ror #27
    27f0:	00001ddc 	ldrdeq	r1, [r0], -ip
    27f4:	00115c29 	andseq	r5, r1, r9, lsr #24
    27f8:	00002c00 	andeq	r2, r0, r0, lsl #24
    27fc:	00089200 	andeq	r9, r8, r0, lsl #4
    2800:	00692700 	rsbeq	r2, r9, r0, lsl #14
    2804:	690ce601 	stmdbvs	ip, {r0, r9, sl, sp, lr, pc}
    2808:	12000000 	andne	r0, r0, #0
    280c:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    2810:	1e00001e 	mcrne	0, 0, r0, cr0, cr14, {0}
    2814:	00001174 	andeq	r1, r0, r4, ror r1
    2818:	00000ef6 	strdeq	r0, [r0], -r6
    281c:	00118425 	andseq	r8, r1, r5, lsr #8
    2820:	50011a00 	andpl	r1, r1, r0, lsl #20
    2824:	1a007802 	bne	20834 <__RAM_SIZE__+0x18834>
    2828:	76025101 	strvc	r5, [r2], -r1, lsl #2
    282c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2830:	00001192 	muleq	r0, r2, r1
    2834:	00000eea 	andeq	r0, r0, sl, ror #29
    2838:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0xfffffee6
    283c:	001bf803 	andseq	pc, fp, r3, lsl #16
    2840:	2d000000 	stccs	0, cr0, [r0, #-0]
    2844:	000006fe 	strdeq	r0, [r0], -lr
    2848:	690ccb01 	stmdbvs	ip, {r0, r8, r9, fp, lr, pc}
    284c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    2850:	52000012 	andpl	r0, r0, #18
    2854:	01000000 	mrseq	r0, (UNDEF: 0)
    2858:	0009499c 	muleq	r9, ip, r9
    285c:	013c2c00 	teqeq	ip, r0, lsl #24
    2860:	cb010000 	blgt	42868 <__ROM_SIZE__+0x2868>
    2864:	0000a91e 	andeq	sl, r0, lr, lsl r9
    2868:	001e3500 	andseq	r3, lr, r0, lsl #10
    286c:	001e3100 	andseq	r3, lr, r0, lsl #2
    2870:	08202c00 	stmdaeq	r0!, {sl, fp, sp}
    2874:	cb010000 	blgt	4287c <__ROM_SIZE__+0x287c>
    2878:	0000af2a 	andeq	sl, r0, sl, lsr #30
    287c:	001e5700 	andseq	r5, lr, r0, lsl #14
    2880:	001e5300 	andseq	r5, lr, r0, lsl #6
    2884:	09402c00 	stmdbeq	r0, {sl, fp, sp}^
    2888:	cb010000 	blgt	42890 <__ROM_SIZE__+0x2890>
    288c:	00006939 	andeq	r6, r0, r9, lsr r9
    2890:	001e7900 	andseq	r7, lr, r0, lsl #18
    2894:	001e7500 	andseq	r7, lr, r0, lsl #10
    2898:	01182800 	tsteq	r8, r0, lsl #16
    289c:	cc010000 	stcgt	0, cr0, [r1], {-0}
    28a0:	00006907 	andeq	r6, r0, r7, lsl #18
    28a4:	001ea200 	andseq	sl, lr, r0, lsl #4
    28a8:	001e9a00 	andseq	r9, lr, r0, lsl #20
    28ac:	6f702700 	svcvs	0x00702700
    28b0:	cd010073 	stcgt	0, cr0, [r1, #-460]	; 0xfffffe34
    28b4:	00006907 	andeq	r6, r0, r7, lsl #18
    28b8:	001edd00 	andseq	sp, lr, r0, lsl #26
    28bc:	001ed900 	andseq	sp, lr, r0, lsl #18
    28c0:	05042800 	streq	r2, [r4, #-2048]	; 0xfffff800
    28c4:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    28c8:	00006907 	andeq	r6, r0, r7, lsl #18
    28cc:	001f0000 	andseq	r0, pc, r0
    28d0:	001efc00 	andseq	pc, lr, r0, lsl #24
    28d4:	12641900 	rsbne	r1, r4, #0, 18
    28d8:	0f0e0000 	svceq	0x000e0000
    28dc:	011a0000 	tsteq	sl, r0
    28e0:	00740250 	rsbseq	r0, r4, r0, asr r2
    28e4:	c62b0000 	strtgt	r0, [fp], -r0
    28e8:	01000007 	tsteq	r0, r7
    28ec:	13da0da6 	bicsne	r0, sl, #10624	; 0x2980
    28f0:	00a20000 	adceq	r0, r2, r0
    28f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    28f8:	00000a65 	andeq	r0, r0, r5, ror #20
    28fc:	0008772c 	andeq	r7, r8, ip, lsr #14
    2900:	1ea60100 	fdvnes	f0, f6, f0
    2904:	000000af 	andeq	r0, r0, pc, lsr #1
    2908:	00001f24 	andeq	r1, r0, r4, lsr #30
    290c:	00001f1e 	andeq	r1, r0, lr, lsl pc
    2910:	0007092c 	andeq	r0, r7, ip, lsr #18
    2914:	2da60100 	stfcss	f0, [r6]
    2918:	00000a65 	andeq	r0, r0, r5, ror #20
    291c:	00001f53 	andeq	r1, r0, r3, asr pc
    2920:	00001f4d 	andeq	r1, r0, sp, asr #30
    2924:	01006927 	tsteq	r0, r7, lsr #18
    2928:	006907ab 	rsbeq	r0, r9, fp, lsr #15
    292c:	1f800000 	svcne	0x00800000
    2930:	1f7c0000 	svcne	0x007c0000
    2934:	ed280000 	stc	0, cr0, [r8, #-0]
    2938:	01000008 	tsteq	r0, r8
    293c:	006907ac 	rsbeq	r0, r9, ip, lsr #15
    2940:	1fa20000 	svcne	0x00a20000
    2944:	1f9e0000 	svcne	0x009e0000
    2948:	9c280000 	stcls	0, cr0, [r8], #-0
    294c:	01000008 	tsteq	r0, r8
    2950:	006907ad 	rsbeq	r0, r9, sp, lsr #15
    2954:	1fc80000 	svcne	0x00c80000
    2958:	1fc00000 	svcne	0x00c00000
    295c:	0a1d0000 	beq	742964 <__ROM_SIZE__+0x702964>
    2960:	6b000014 	blvs	29b8 <rsbox+0x1170>
    2964:	d500000a 	strle	r0, [r0, #-10]
    2968:	1a000009 	bne	2994 <rsbox+0x114c>
    296c:	78025001 	stmdavc	r2, {r0, ip, lr}
    2970:	1c1d0000 	ldcne	0, cr0, [sp], {-0}
    2974:	ea000014 	b	29cc <rsbox+0x1184>
    2978:	ec00000e 	stc	0, cr0, [r0], {14}
    297c:	1a000009 	bne	29a8 <rsbox+0x1160>
    2980:	03055001 	movweq	r5, #20481	; 0x5001
    2984:	00001c68 	andeq	r1, r0, r8, ror #24
    2988:	14401d00 	strbne	r1, [r0], #-3328	; 0xfffff300
    298c:	0f1a0000 	svceq	0x001a0000
    2990:	0a060000 	beq	182998 <__ROM_SIZE__+0x142998>
    2994:	011a0000 	tsteq	sl, r0
    2998:	00780250 	rsbseq	r0, r8, r0, asr r2
    299c:	0252011a 	subseq	r0, r2, #-2147483642	; 0x80000006
    29a0:	1d002008 	stcne	0, cr2, [r0, #-32]	; 0xffffffe0
    29a4:	00001446 	andeq	r1, r0, r6, asr #8
    29a8:	00000f0e 	andeq	r0, r0, lr, lsl #30
    29ac:	00000a1a 	andeq	r0, r0, sl, lsl sl
    29b0:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    29b4:	1d000078 	stcne	0, cr0, [r0, #-480]	; 0xfffffe20
    29b8:	00001454 	andeq	r1, r0, r4, asr r4
    29bc:	00000eea 	andeq	r0, r0, sl, ror #29
    29c0:	00000a2f 	andeq	r0, r0, pc, lsr #20
    29c4:	0350011a 	cmpeq	r0, #-2147483642	; 0x80000006
    29c8:	0001b074 	andeq	fp, r1, r4, ror r0
    29cc:	0014581e 	andseq	r5, r4, lr, lsl r8
    29d0:	000e2000 	andeq	r2, lr, r0
    29d4:	14601d00 	strbtne	r1, [r0], #-3328	; 0xfffff300
    29d8:	0eea0000 	cdpeq	0, 14, cr0, cr10, cr0, {0}
    29dc:	0a4d0000 	beq	13429e4 <__ROM_SIZE__+0x13029e4>
    29e0:	011a0000 	tsteq	sl, r0
    29e4:	c0740350 	rsbsgt	r0, r4, r0, asr r3
    29e8:	6a190001 	bvs	6429f4 <__ROM_SIZE__+0x6029f4>
    29ec:	ea000014 	b	2a44 <rsbox+0x11fc>
    29f0:	1a00000e 	bne	2a30 <rsbox+0x11e8>
    29f4:	74035001 	strvc	r5, [r3], #-1
    29f8:	011a01b8 			; <UNDEFINED> instruction: 0x011a01b8
    29fc:	00780251 	rsbseq	r0, r8, r1, asr r2
    2a00:	04070000 	streq	r0, [r7], #-0
    2a04:	00000069 	andeq	r0, r0, r9, rrx
    2a08:	00088f2d 	andeq	r8, r8, sp, lsr #30
    2a0c:	0c990100 	ldfeqs	f0, [r9], {0}
    2a10:	00000069 	andeq	r0, r0, r9, rrx
    2a14:	000012aa 	andeq	r1, r0, sl, lsr #5
    2a18:	0000003c 	andeq	r0, r0, ip, lsr r0
    2a1c:	0aee9c01 	beq	ffba9a28 <_STACK_TOP_+0xdfba1a2c>
    2a20:	732e0000 			; <UNDEFINED> instruction: 0x732e0000
    2a24:	01006275 	tsteq	r0, r5, ror r2
    2a28:	00af1f99 	umlaleq	r1, pc, r9, pc	; <UNPREDICTABLE>
    2a2c:	20040000 	andcs	r0, r4, r0
    2a30:	1ffc0000 	svcne	0x00fc0000
    2a34:	6c2e0000 	stcvs	0, cr0, [lr], #-0
    2a38:	01006e65 	tsteq	r0, r5, ror #28
    2a3c:	00692899 	mlseq	r9, r9, r8, r2
    2a40:	20410000 	subcs	r0, r1, r0
    2a44:	203b0000 	eorscs	r0, fp, r0
    2a48:	732e0000 			; <UNDEFINED> instruction: 0x732e0000
    2a4c:	01007274 	tsteq	r0, r4, ror r2
    2a50:	00f23999 	smlalseq	r3, r2, r9, r9
    2a54:	20700000 	rsbscs	r0, r0, r0
    2a58:	206a0000 	rsbcs	r0, sl, r0
    2a5c:	c02f0000 	eorgt	r0, pc, r0
    2a60:	dd000000 	stcle	0, cr0, [r0, #-0]
    2a64:	2700000a 	strcs	r0, [r0, -sl]
    2a68:	9e010069 	cdpls	0, 0, cr0, cr1, cr9, {3}
    2a6c:	0000690c 	andeq	r6, r0, ip, lsl #18
    2a70:	00209d00 	eoreq	r9, r0, r0, lsl #26
    2a74:	00209900 	eoreq	r9, r0, r0, lsl #18
    2a78:	c0190000 	andsgt	r0, r9, r0
    2a7c:	0e000012 	mcreq	0, 0, r0, cr0, cr2, {0}
    2a80:	1a00000f 	bne	2ac4 <rsbox+0x127c>
    2a84:	74025001 	strvc	r5, [r2], #-1
    2a88:	2d000000 	stccs	0, cr0, [r0, #-0]
    2a8c:	00000718 	andeq	r0, r0, r8, lsl r7
    2a90:	690c8501 	stmdbvs	ip, {r0, r8, sl, pc}
    2a94:	ec000000 	stc	0, cr0, [r0], {-0}
    2a98:	40000010 	andmi	r0, r0, r0, lsl r0
    2a9c:	01000000 	mrseq	r0, (UNDEF: 0)
    2aa0:	000b9a9c 	muleq	fp, ip, sl
    2aa4:	01182c00 	tsteq	r8, r0, lsl #24
    2aa8:	85010000 	strhi	r0, [r1, #-0]
    2aac:	0000691d 	andeq	r6, r0, sp, lsl r9
    2ab0:	0020bf00 	eoreq	fp, r0, r0, lsl #30
    2ab4:	0020bb00 	eoreq	fp, r0, r0, lsl #22
    2ab8:	013c2c00 	teqeq	ip, r0, lsl #24
    2abc:	85010000 	strhi	r0, [r1, #-0]
    2ac0:	0000a92a 	andeq	sl, r0, sl, lsr #18
    2ac4:	0020e400 	eoreq	lr, r0, r0, lsl #8
    2ac8:	0020e000 	eoreq	lr, r0, r0
    2acc:	09192800 	ldmdbeq	r9, {fp, sp}
    2ad0:	86010000 	strhi	r0, [r1], -r0
    2ad4:	00004f0c 	andeq	r4, r0, ip, lsl #30
    2ad8:	00210700 	eoreq	r0, r1, r0, lsl #14
    2adc:	00210500 	eoreq	r0, r1, r0, lsl #10
    2ae0:	09552800 	ldmdbeq	r5, {fp, sp}^
    2ae4:	87010000 	strhi	r0, [r1, -r0]
    2ae8:	00004f0c 	andeq	r4, r0, ip, lsl #30
    2aec:	00212000 	eoreq	r2, r1, r0
    2af0:	00211a00 	eoreq	r1, r1, r0, lsl #20
    2af4:	11061f00 	tstne	r6, r0, lsl #30
    2af8:	00160000 	andseq	r0, r6, r0
    2afc:	1d280000 	stcne	0, cr0, [r8, #-0]
    2b00:	01000009 	tsteq	r0, r9
    2b04:	004f118b 	subeq	r1, pc, fp, lsl #3
    2b08:	214d0000 	mrscs	r0, (UNDEF: 77)
    2b0c:	214b0000 	mrscs	r0, (UNDEF: 75)
    2b10:	16190000 	ldrne	r0, [r9], -r0
    2b14:	ea000011 	b	2b60 <rsbox+0x1318>
    2b18:	1a00000e 	bne	2b58 <rsbox+0x1310>
    2b1c:	03055001 	movweq	r5, #20481	; 0x5001
    2b20:	00001bac 	andeq	r1, r0, ip, lsr #23
    2b24:	0c51011a 	ldfeqe	f0, [r1], {26}
    2b28:	1a310074 	bne	c42d00 <__ROM_SIZE__+0xc02d00>
    2b2c:	2c032435 	cfstrscs	mvf2, [r3], {53}	; 0x35
    2b30:	22200000 	eorcs	r0, r0, #0
    2b34:	2b000000 	blcs	2b3c <rsbox+0x12f4>
    2b38:	00000836 	andeq	r0, r0, r6, lsr r8
    2b3c:	140d7901 	strne	r7, [sp], #-2305	; 0xfffff6ff
    2b40:	44000012 	strmi	r0, [r0], #-18	; 0xffffffee
    2b44:	01000000 	mrseq	r0, (UNDEF: 0)
    2b48:	000c0c9c 	muleq	ip, ip, ip
    2b4c:	07f42c00 	ldrbeq	r2, [r4, r0, lsl #24]!
    2b50:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    2b54:	0000f230 	andeq	pc, r0, r0, lsr r2	; <UNPREDICTABLE>
    2b58:	00216600 	eoreq	r6, r1, r0, lsl #12
    2b5c:	00216000 	eoreq	r6, r1, r0
    2b60:	091d2800 	ldmdbeq	sp, {fp, sp}
    2b64:	7f010000 	svcvc	0x00010000
    2b68:	00006907 	andeq	r6, r0, r7, lsl #18
    2b6c:	00219100 	eoreq	r9, r1, r0, lsl #2
    2b70:	00218f00 	eoreq	r8, r1, r0, lsl #30
    2b74:	12201d00 	eorne	r1, r0, #0, 26
    2b78:	0ef60000 	cdpeq	0, 15, cr0, cr6, cr0, {0}
    2b7c:	0bf50000 	bleq	ffd42b84 <_STACK_TOP_+0xdfd3ab88>
    2b80:	011a0000 	tsteq	sl, r0
    2b84:	00750250 	rsbseq	r0, r5, r0, asr r2
    2b88:	0551011a 	ldrbeq	r0, [r1, #-282]	; 0xfffffee6
    2b8c:	001c6003 	andseq	r6, ip, r3
    2b90:	42190000 	andsmi	r0, r9, #0
    2b94:	1a000012 	bne	2be4 <rsbox+0x139c>
    2b98:	1a00000f 	bne	2bdc <rsbox+0x1394>
    2b9c:	75025101 	strvc	r5, [r2, #-257]	; 0xfffffeff
    2ba0:	52011a00 	andpl	r1, r1, #0, 20
    2ba4:	00200802 	eoreq	r0, r0, r2, lsl #16
    2ba8:	08bd2b00 	popeq	{r8, r9, fp, sp}
    2bac:	6c010000 	stcvs	0, cr0, [r1], {-0}
    2bb0:	00134c0d 	andseq	r4, r3, sp, lsl #24
    2bb4:	00005800 	andeq	r5, r0, r0, lsl #16
    2bb8:	c59c0100 	ldrgt	r0, [ip, #256]	; 0x100
    2bbc:	2c00000c 	stccs	0, cr0, [r0], {12}
    2bc0:	00000877 	andeq	r0, r0, r7, ror r8
    2bc4:	af256c01 	svcge	0x00256c01
    2bc8:	aa000000 	bge	2bd0 <rsbox+0x1388>
    2bcc:	a4000021 	strge	r0, [r0], #-33	; 0xffffffdf
    2bd0:	2c000021 	stccs	0, cr0, [r0], {33}	; 0x21
    2bd4:	00000709 	andeq	r0, r0, r9, lsl #14
    2bd8:	65346c01 	ldrvs	r6, [r4, #-3073]!	; 0xfffff3ff
    2bdc:	dc00000a 	stcle	0, cr0, [r0], {10}
    2be0:	d6000021 	strle	r0, [r0], -r1, lsr #32
    2be4:	28000021 	stmdacs	r0, {r0, r5}
    2be8:	0000091d 	andeq	r0, r0, sp, lsl r9
    2bec:	69077201 	stmdbvs	r7, {r0, r9, ip, sp, lr}
    2bf0:	0a000000 	beq	2bf8 <rsbox+0x13b0>
    2bf4:	08000022 	stmdaeq	r0, {r1, r5}
    2bf8:	1d000022 	stcne	0, cr0, [r0, #-136]	; 0xffffff78
    2bfc:	0000135a 	andeq	r1, r0, sl, asr r3
    2c00:	00000f26 	andeq	r0, r0, r6, lsr #30
    2c04:	00000c7d 	andeq	r0, r0, sp, ror ip
    2c08:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    2c0c:	011a0074 	tsteq	sl, r4, ror r0
    2c10:	1a300151 	bne	c0315c <__ROM_SIZE__+0xbc315c>
    2c14:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    2c18:	8a1d0020 	bhi	742ca0 <__ROM_SIZE__+0x702ca0>
    2c1c:	1a000013 	bne	2c70 <rsbox+0x1428>
    2c20:	9700000f 	strls	r0, [r0, -pc]
    2c24:	1a00000c 	bne	2c5c <rsbox+0x1414>
    2c28:	74025001 	strvc	r5, [r2], #-1
    2c2c:	52011a00 	andpl	r1, r1, #0, 20
    2c30:	00200802 	eoreq	r0, r0, r2, lsl #16
    2c34:	0013901d 	andseq	r9, r3, sp, lsl r0
    2c38:	000f0e00 	andeq	r0, pc, r0, lsl #28
    2c3c:	000cab00 	andeq	sl, ip, r0, lsl #22
    2c40:	50011a00 	andpl	r1, r1, r0, lsl #20
    2c44:	00007402 	andeq	r7, r0, r2, lsl #8
    2c48:	00139a19 	andseq	r9, r3, r9, lsl sl
    2c4c:	000eea00 	andeq	lr, lr, r0, lsl #20
    2c50:	50011a00 	andpl	r1, r1, r0, lsl #20
    2c54:	1c640305 	stclne	3, cr0, [r4], #-20	; 0xffffffec
    2c58:	011a0000 	tsteq	sl, r0
    2c5c:	00740251 	rsbseq	r0, r4, r1, asr r2
    2c60:	232b0000 			; <UNDEFINED> instruction: 0x232b0000
    2c64:	01000009 	tsteq	r0, r9
    2c68:	12e60d5b 	rscne	r0, r6, #5824	; 0x16c0
    2c6c:	00660000 	rsbeq	r0, r6, r0
    2c70:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c74:	00000d95 	muleq	r0, r5, sp
    2c78:	0008772c 	andeq	r7, r8, ip, lsr #14
    2c7c:	235b0100 	cmpcs	fp, #0, 2
    2c80:	000000af 	andeq	r0, r0, pc, lsr #1
    2c84:	00002225 	andeq	r2, r0, r5, lsr #4
    2c88:	0000221d 	andeq	r2, r0, sp, lsl r2
    2c8c:	0007092c 	andeq	r0, r7, ip, lsr #18
    2c90:	325b0100 	subscc	r0, fp, #0, 2
    2c94:	00000a65 	andeq	r0, r0, r5, ror #20
    2c98:	00002261 	andeq	r2, r0, r1, ror #4
    2c9c:	00002259 	andeq	r2, r0, r9, asr r2
    2ca0:	00091d28 	andeq	r1, r9, r8, lsr #26
    2ca4:	07650100 	strbeq	r0, [r5, -r0, lsl #2]!
    2ca8:	00000069 	andeq	r0, r0, r9, rrx
    2cac:	0000229a 	muleq	r0, sl, r2
    2cb0:	00002298 	muleq	r0, r8, r2
    2cb4:	0013061d 	andseq	r0, r3, sp, lsl r6
    2cb8:	000eea00 	andeq	lr, lr, r0, lsl #20
    2cbc:	000d3400 	andeq	r3, sp, r0, lsl #8
    2cc0:	50011a00 	andpl	r1, r1, r0, lsl #20
    2cc4:	1c640305 	stclne	3, cr0, [r4], #-20	; 0xffffffec
    2cc8:	011a0000 	tsteq	sl, r0
    2ccc:	00740251 	rsbseq	r0, r4, r1, asr r2
    2cd0:	13101d00 	tstne	r0, #0, 26
    2cd4:	0f260000 	svceq	0x00260000
    2cd8:	0d4d0000 	stcleq	0, cr0, [sp, #-0]
    2cdc:	011a0000 	tsteq	sl, r0
    2ce0:	1a300151 	bne	c0322c <__ROM_SIZE__+0xbc322c>
    2ce4:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    2ce8:	321d0020 	andscc	r0, sp, #32
    2cec:	1a000013 	bne	2d40 <rsbox+0x14f8>
    2cf0:	6700000f 	strvs	r0, [r0, -pc]
    2cf4:	1a00000d 	bne	2d30 <rsbox+0x14e8>
    2cf8:	74025001 	strvc	r5, [r2], #-1
    2cfc:	52011a00 	andpl	r1, r1, #0, 20
    2d00:	00200802 	eoreq	r0, r0, r2, lsl #16
    2d04:	0013381d 	andseq	r3, r3, sp, lsl r8
    2d08:	000f0e00 	andeq	r0, pc, r0, lsl #28
    2d0c:	000d7b00 	andeq	r7, sp, r0, lsl #22
    2d10:	50011a00 	andpl	r1, r1, r0, lsl #20
    2d14:	00007402 	andeq	r7, r0, r2, lsl #8
    2d18:	00134219 	andseq	r4, r3, r9, lsl r2
    2d1c:	000eea00 	andeq	lr, lr, r0, lsl #20
    2d20:	50011a00 	andpl	r1, r1, r0, lsl #20
    2d24:	1c640305 	stclne	3, cr0, [r4], #-20	; 0xffffffec
    2d28:	011a0000 	tsteq	sl, r0
    2d2c:	00740251 	rsbseq	r0, r4, r1, asr r2
    2d30:	db2b0000 	blle	ac2d38 <__ROM_SIZE__+0xa82d38>
    2d34:	01000007 	tsteq	r0, r7
    2d38:	10b40d4e 	adcsne	r0, r4, lr, asr #26
    2d3c:	00120000 	andseq	r0, r2, r0
    2d40:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d44:	00000dc9 	andeq	r0, r0, r9, asr #27
    2d48:	0007092c 	andeq	r0, r7, ip, lsr #18
    2d4c:	1e4e0100 	dvfnee	f0, f6, f0
    2d50:	00000069 	andeq	r0, r0, r9, rrx
    2d54:	000022b1 			; <UNDEFINED> instruction: 0x000022b1
    2d58:	000022ad 	andeq	r2, r0, sp, lsr #5
    2d5c:	0010be1e 	andseq	fp, r0, lr, lsl lr
    2d60:	000dc900 	andeq	ip, sp, r0, lsl #18
    2d64:	b62b0000 	strtlt	r0, [fp], -r0
    2d68:	01000008 	tsteq	r0, r8
    2d6c:	10980d48 	addsne	r0, r8, r8, asr #26
    2d70:	001c0000 	andseq	r0, ip, r0
    2d74:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d78:	00000e0a 	andeq	r0, r0, sl, lsl #28
    2d7c:	0010a22a 	andseq	sl, r0, sl, lsr #4
    2d80:	000dee00 	andeq	lr, sp, r0, lsl #28
    2d84:	50011a00 	andpl	r1, r1, r0, lsl #20
    2d88:	2a003801 	bcs	10d94 <__RAM_SIZE__+0x8d94>
    2d8c:	000010a8 	andeq	r1, r0, r8, lsr #1
    2d90:	00000dfe 	strdeq	r0, [r0], -lr
    2d94:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    2d98:	25002008 	strcs	r2, [r0, #-8]
    2d9c:	000010ae 	andeq	r1, r0, lr, lsr #1
    2da0:	0150011a 	cmpeq	r0, sl, lsl r1
    2da4:	30000038 	andcc	r0, r0, r8, lsr r0
    2da8:	00000725 	andeq	r0, r0, r5, lsr #14
    2dac:	691b4601 	ldmdbvs	fp, {r0, r9, sl, lr}
    2db0:	7c000000 	stcvc	0, cr0, [r0], {-0}
    2db4:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    2db8:	01000000 	mrseq	r0, (UNDEF: 0)
    2dbc:	08a7319c 	stmiaeq	r7!, {r2, r3, r4, r7, r8, ip, sp}
    2dc0:	40010000 	andmi	r0, r1, r0
    2dc4:	0013d81c 	andseq	sp, r3, ip, lsl r8
    2dc8:	00000200 	andeq	r0, r0, r0, lsl #4
    2dcc:	329c0100 	addscc	r0, ip, #0, 2
    2dd0:	00000933 	andeq	r0, r0, r3, lsr r9
    2dd4:	d61c3b01 	ldrle	r3, [ip], -r1, lsl #22
    2dd8:	02000013 	andeq	r0, r0, #19
    2ddc:	01000000 	mrseq	r0, (UNDEF: 0)
    2de0:	07b7329c 			; <UNDEFINED> instruction: 0x07b7329c
    2de4:	37010000 	strcc	r0, [r1, -r0]
    2de8:	0013d41c 	andseq	sp, r3, ip, lsl r4
    2dec:	00000200 	andeq	r0, r0, r0, lsl #4
    2df0:	339c0100 	orrscc	r0, ip, #0, 2
    2df4:	00000218 	andeq	r0, r0, r8, lsl r2
    2df8:	c8063501 	stmdagt	r6, {r0, r8, sl, ip, sp}
    2dfc:	0c000013 	stceq	0, cr0, [r0], {19}
    2e00:	01000000 	mrseq	r0, (UNDEF: 0)
    2e04:	000e7b9c 	muleq	lr, ip, fp
    2e08:	08013400 	stmdaeq	r1, {sl, ip, sp}
    2e0c:	35010000 	strcc	r0, [r1, #-0]
    2e10:	00015a1d 	andeq	r5, r1, sp, lsl sl
    2e14:	00500100 	subseq	r0, r0, r0, lsl #2
    2e18:	00020933 	andeq	r0, r2, r3, lsr r9
    2e1c:	06340100 	ldrteq	r0, [r4], -r0, lsl #2
    2e20:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
    2e24:	0000000c 	andeq	r0, r0, ip
    2e28:	0ea09c01 	cdpeq	12, 10, cr9, cr0, cr1, {0}
    2e2c:	01340000 	teqeq	r4, r0
    2e30:	01000008 	tsteq	r0, r8
    2e34:	015a1c34 	cmpeq	sl, r4, lsr ip
    2e38:	50010000 	andpl	r0, r1, r0
    2e3c:	01fa3300 	mvnseq	r3, r0, lsl #6
    2e40:	32010000 	andcc	r0, r1, #0
    2e44:	0013b006 	andseq	fp, r3, r6
    2e48:	00000c00 	andeq	r0, r0, r0, lsl #24
    2e4c:	c59c0100 	ldrgt	r0, [ip, #256]	; 0x100
    2e50:	3400000e 	strcc	r0, [r0], #-14
    2e54:	00000801 	andeq	r0, r0, r1, lsl #16
    2e58:	251b3201 	ldrcs	r3, [fp, #-513]	; 0xfffffdff
    2e5c:	01000001 	tsteq	r0, r1
    2e60:	28330050 	ldmdacs	r3!, {r4, r6}
    2e64:	01000002 	tsteq	r0, r2
    2e68:	13a40631 			; <UNDEFINED> instruction: 0x13a40631
    2e6c:	000c0000 	andeq	r0, ip, r0
    2e70:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e74:	00000eea 	andeq	r0, r0, sl, ror #29
    2e78:	00080134 	andeq	r0, r8, r4, lsr r1
    2e7c:	1a310100 	bne	c43284 <__ROM_SIZE__+0xc03284>
    2e80:	00000125 	andeq	r0, r0, r5, lsr #2
    2e84:	35005001 	strcc	r5, [r0, #-1]
    2e88:	0000012b 	andeq	r0, r0, fp, lsr #2
    2e8c:	0000012b 	andeq	r0, r0, fp, lsr #2
    2e90:	35052c04 	strcc	r2, [r5, #-3076]	; 0xfffff3fc
    2e94:	000006a0 	andeq	r0, r0, r0, lsr #13
    2e98:	000006a0 	andeq	r0, r0, r0, lsr #13
    2e9c:	35052705 	strcc	r2, [r5, #-1797]	; 0xfffff8fb
    2ea0:	00000265 	andeq	r0, r0, r5, ror #4
    2ea4:	00000265 	andeq	r0, r0, r5, ror #4
    2ea8:	35068502 	strcc	r8, [r6, #-1282]	; 0xfffffafe
    2eac:	000006c6 	andeq	r0, r0, r6, asr #13
    2eb0:	000006c6 	andeq	r0, r0, r6, asr #13
    2eb4:	35081f05 	strcc	r1, [r8, #-3845]	; 0xfffff0fb
    2eb8:	000004ed 	andeq	r0, r0, sp, ror #9
    2ebc:	000004ed 	andeq	r0, r0, sp, ror #9
    2ec0:	35073805 	strcc	r3, [r7, #-2053]	; 0xfffff7fb
    2ec4:	000002fd 	strdeq	r0, [r0], -sp
    2ec8:	000002fd 	strdeq	r0, [r0], -sp
    2ecc:	00074105 	andeq	r4, r7, r5, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <__ROM_SIZE__+0x2800ac>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	0008030b 	andeq	r0, r8, fp, lsl #6
  28:	00160400 	andseq	r0, r6, r0, lsl #8
  2c:	0b3a0803 	bleq	e82040 <__ROM_SIZE__+0xe42040>
  30:	0b390b3b 	bleq	e42d24 <__ROM_SIZE__+0xe02d24>
  34:	00001349 	andeq	r1, r0, r9, asr #6
  38:	0b000f05 	bleq	3c54 <rsbox+0x240c>
  3c:	0013490b 	andseq	r4, r3, fp, lsl #18
  40:	01150600 	tsteq	r5, r0, lsl #12
  44:	13491927 	movtne	r1, #39207	; 0x9927
  48:	00001301 	andeq	r1, r0, r1, lsl #6
  4c:	49000507 	stmdbmi	r0, {r0, r1, r2, r8, sl}
  50:	08000013 	stmdaeq	r0, {r0, r1, r4}
  54:	13490026 	movtne	r0, #36902	; 0x9026
  58:	13090000 	movwne	r0, #36864	; 0x9000
  5c:	3a0b0b01 	bcc	2c2c68 <__ROM_SIZE__+0x282c68>
  60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  64:	0013010b 	andseq	r0, r3, fp, lsl #2
  68:	000d0a00 	andeq	r0, sp, r0, lsl #20
  6c:	0b3a0e03 	bleq	e83880 <__ROM_SIZE__+0xe43880>
  70:	0b390b3b 	bleq	e42d64 <__ROM_SIZE__+0xe02d64>
  74:	0b381349 	bleq	e04da0 <__ROM_SIZE__+0xdc4da0>
  78:	160b0000 	strne	r0, [fp], -r0
  7c:	3a0e0300 	bcc	380c84 <__ROM_SIZE__+0x340c84>
  80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  84:	0013490b 	andseq	r4, r3, fp, lsl #18
  88:	00340c00 	eorseq	r0, r4, r0, lsl #24
  8c:	0b3a0e03 	bleq	e838a0 <__ROM_SIZE__+0xe438a0>
  90:	0b390b3b 	bleq	e42d84 <__ROM_SIZE__+0xe02d84>
  94:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  98:	00001802 	andeq	r1, r0, r2, lsl #16
  9c:	3f012e0d 	svccc	0x00012e0d
  a0:	3a0e0319 	bcc	380d0c <__ROM_SIZE__+0x340d0c>
  a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  a8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
  ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  b0:	97184006 	ldrls	r4, [r8, -r6]
  b4:	13011942 	movwne	r1, #6466	; 0x1942
  b8:	050e0000 	streq	r0, [lr, #-0]
  bc:	3a0e0300 	bcc	380cc4 <__ROM_SIZE__+0x340cc4>
  c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  c8:	1742b717 	smlaldne	fp, r2, r7, r7
  cc:	890f0000 	stmdbhi	pc, {}	; <UNPREDICTABLE>
  d0:	11010182 	smlabbne	r1, r2, r1, r0
  d4:	00133101 	andseq	r3, r3, r1, lsl #2
  d8:	828a1000 	addhi	r1, sl, #0
  dc:	18020001 	stmdane	r2, {r0}
  e0:	00184291 	mulseq	r8, r1, r2
  e4:	002e1100 	eoreq	r1, lr, r0, lsl #2
  e8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  ec:	0e030e6e 	cdpeq	14, 0, cr0, cr3, cr14, {3}
  f0:	0b3b0b3a 	bleq	ec2de0 <__ROM_SIZE__+0xe82de0>
  f4:	00000b39 	andeq	r0, r0, r9, lsr fp
  f8:	01110100 	tsteq	r1, r0, lsl #2
  fc:	0b130e25 	bleq	4c3998 <__ROM_SIZE__+0x483998>
 100:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 104:	06120111 			; <UNDEFINED> instruction: 0x06120111
 108:	00001710 	andeq	r1, r0, r0, lsl r7
 10c:	3f002e02 	svccc	0x00002e02
 110:	3a0e0319 	bcc	380d7c <__ROM_SIZE__+0x340d7c>
 114:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 118:	1119270b 	tstne	r9, fp, lsl #14
 11c:	40061201 	andmi	r1, r6, r1, lsl #4
 120:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 124:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
 128:	03193f00 	tsteq	r9, #0, 30
 12c:	3b0b3a0e 	blcc	2ce96c <__ROM_SIZE__+0x28e96c>
 130:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 134:	11134919 	tstne	r3, r9, lsl r9
 138:	40061201 	andmi	r1, r6, r1, lsl #4
 13c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 140:	24040000 	strcs	r0, [r4], #-0
 144:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 148:	0008030b 	andeq	r0, r8, fp, lsl #6
 14c:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
 150:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 154:	0b3b0b3a 	bleq	ec2e44 <__ROM_SIZE__+0xe82e44>
 158:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 15c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 160:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 164:	00130119 	andseq	r0, r3, r9, lsl r1
 168:	00050600 	andeq	r0, r5, r0, lsl #12
 16c:	0b3a0803 	bleq	e82180 <__ROM_SIZE__+0xe42180>
 170:	0b390b3b 	bleq	e42e64 <__ROM_SIZE__+0xe02e64>
 174:	17021349 	strne	r1, [r2, -r9, asr #6]
 178:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
 17c:	82890700 	addhi	r0, r9, #0, 14
 180:	01110101 	tsteq	r1, r1, lsl #2
 184:	00001331 	andeq	r1, r0, r1, lsr r3
 188:	01828a08 	orreq	r8, r2, r8, lsl #20
 18c:	91180200 	tstls	r8, r0, lsl #4
 190:	00001842 	andeq	r1, r0, r2, asr #16
 194:	0b002409 	bleq	91c0 <__RAM_SIZE__+0x11c0>
 198:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 19c:	0000000e 	andeq	r0, r0, lr
 1a0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1a4:	030b130e 	movweq	r1, #45838	; 0xb30e
 1a8:	110e1b0e 	tstne	lr, lr, lsl #22
 1ac:	10061201 	andne	r1, r6, r1, lsl #4
 1b0:	02000017 	andeq	r0, r0, #23
 1b4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 1b8:	0b3a0e03 	bleq	e839cc <__ROM_SIZE__+0xe439cc>
 1bc:	0b390b3b 	bleq	e42eb0 <__ROM_SIZE__+0xe02eb0>
 1c0:	01111927 	tsteq	r1, r7, lsr #18
 1c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1c8:	00194297 	mulseq	r9, r7, r2
 1cc:	002e0300 	eoreq	r0, lr, r0, lsl #6
 1d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1d4:	0b3b0b3a 	bleq	ec2ec4 <__ROM_SIZE__+0xe82ec4>
 1d8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1dc:	01111349 	tsteq	r1, r9, asr #6
 1e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1e4:	00194297 	mulseq	r9, r7, r2
 1e8:	00240400 	eoreq	r0, r4, r0, lsl #8
 1ec:	0b3e0b0b 	bleq	f82e20 <__ROM_SIZE__+0xf42e20>
 1f0:	00000803 	andeq	r0, r0, r3, lsl #16
 1f4:	3f012e05 	svccc	0x00012e05
 1f8:	3a0e0319 	bcc	380e64 <__ROM_SIZE__+0x340e64>
 1fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 200:	1119270b 	tstne	r9, fp, lsl #14
 204:	40061201 	andmi	r1, r6, r1, lsl #4
 208:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 20c:	00001301 	andeq	r1, r0, r1, lsl #6
 210:	03000506 	movweq	r0, #1286	; 0x506
 214:	3b0b3a08 	blcc	2cea3c <__ROM_SIZE__+0x28ea3c>
 218:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 21c:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
 220:	00001742 	andeq	r1, r0, r2, asr #14
 224:	01828907 	orreq	r8, r2, r7, lsl #18
 228:	31011101 	tstcc	r1, r1, lsl #2
 22c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 230:	0001828a 	andeq	r8, r1, sl, lsl #5
 234:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 238:	09000018 	stmdbeq	r0, {r3, r4}
 23c:	0b0b0024 	bleq	2c02d4 <__ROM_SIZE__+0x2802d4>
 240:	0e030b3e 	vmoveq.16	d3[0], r0
 244:	01000000 	mrseq	r0, (UNDEF: 0)
 248:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 24c:	0e030b13 	vmoveq.32	d3[0], r0
 250:	01110e1b 	tsteq	r1, fp, lsl lr
 254:	17100612 			; <UNDEFINED> instruction: 0x17100612
 258:	24020000 	strcs	r0, [r2], #-0
 25c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 260:	000e030b 	andeq	r0, lr, fp, lsl #6
 264:	00240300 	eoreq	r0, r4, r0, lsl #6
 268:	0b3e0b0b 	bleq	f82e9c <__ROM_SIZE__+0xf42e9c>
 26c:	00000803 	andeq	r0, r0, r3, lsl #16
 270:	3f012e04 	svccc	0x00012e04
 274:	3a0e0319 	bcc	380ee0 <__ROM_SIZE__+0x340ee0>
 278:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 27c:	1119270b 	tstne	r9, fp, lsl #14
 280:	40061201 	andmi	r1, r6, r1, lsl #4
 284:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 288:	00001301 	andeq	r1, r0, r1, lsl #6
 28c:	01828905 	orreq	r8, r2, r5, lsl #18
 290:	31011100 	mrscc	r1, (UNDEF: 17)
 294:	06000013 			; <UNDEFINED> instruction: 0x06000013
 298:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 29c:	0b3a0e03 	bleq	e83ab0 <__ROM_SIZE__+0xe43ab0>
 2a0:	0b390b3b 	bleq	e42f94 <__ROM_SIZE__+0xe02f94>
 2a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2a8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2ac:	07000019 	smladeq	r0, r9, r0, r0
 2b0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2b4:	0e6e193c 			; <UNDEFINED> instruction: 0x0e6e193c
 2b8:	0b3a0e03 	bleq	e83acc <__ROM_SIZE__+0xe43acc>
 2bc:	0b390b3b 	bleq	e42fb0 <__ROM_SIZE__+0xe02fb0>
 2c0:	01000000 	mrseq	r0, (UNDEF: 0)
 2c4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 2c8:	0e030b13 	vmoveq.32	d3[0], r0
 2cc:	01110e1b 	tsteq	r1, fp, lsl lr
 2d0:	17100612 			; <UNDEFINED> instruction: 0x17100612
 2d4:	24020000 	strcs	r0, [r2], #-0
 2d8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2dc:	000e030b 	andeq	r0, lr, fp, lsl #6
 2e0:	00160300 	andseq	r0, r6, r0, lsl #6
 2e4:	0b3a0e03 	bleq	e83af8 <__ROM_SIZE__+0xe43af8>
 2e8:	0b390b3b 	bleq	e42fdc <__ROM_SIZE__+0xe02fdc>
 2ec:	00001349 	andeq	r1, r0, r9, asr #6
 2f0:	0b002404 	bleq	9308 <__RAM_SIZE__+0x1308>
 2f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2f8:	05000008 	streq	r0, [r0, #-8]
 2fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 300:	0b3b0b3a 	bleq	ec2ff0 <__ROM_SIZE__+0xe82ff0>
 304:	13490b39 	movtne	r0, #39737	; 0x9b39
 308:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 30c:	01060000 	mrseq	r0, (UNDEF: 6)
 310:	01134901 	tsteq	r3, r1, lsl #18
 314:	07000013 	smladeq	r0, r3, r0, r0
 318:	13490021 	movtne	r0, #36897	; 0x9021
 31c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 320:	03003408 	movweq	r3, #1032	; 0x408
 324:	3b0b3a0e 	blcc	2ceb64 <__ROM_SIZE__+0x28eb64>
 328:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 32c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 330:	09000018 	stmdbeq	r0, {r3, r4}
 334:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 338:	0b3a0e03 	bleq	e83b4c <__ROM_SIZE__+0xe43b4c>
 33c:	0b390b3b 	bleq	e43030 <__ROM_SIZE__+0xe03030>
 340:	01111927 	tsteq	r1, r7, lsr #18
 344:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 348:	00194297 	mulseq	r9, r7, r2
 34c:	11010000 	mrsne	r0, (UNDEF: 1)
 350:	130e2501 	movwne	r2, #58625	; 0xe501
 354:	1b0e030b 	blne	380f88 <__ROM_SIZE__+0x340f88>
 358:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 35c:	00171006 	andseq	r1, r7, r6
 360:	00240200 	eoreq	r0, r4, r0, lsl #4
 364:	0b3e0b0b 	bleq	f82f98 <__ROM_SIZE__+0xf42f98>
 368:	00000e03 	andeq	r0, r0, r3, lsl #28
 36c:	03001603 	movweq	r1, #1539	; 0x603
 370:	3b0b3a0e 	blcc	2cebb0 <__ROM_SIZE__+0x28ebb0>
 374:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 378:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 37c:	13490035 	movtne	r0, #36917	; 0x9035
 380:	24050000 	strcs	r0, [r5], #-0
 384:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 388:	0008030b 	andeq	r0, r8, fp, lsl #6
 38c:	01040600 	tsteq	r4, r0, lsl #12
 390:	0b3e0e03 	bleq	f83ba4 <__ROM_SIZE__+0xf43ba4>
 394:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 398:	0b3b0b3a 	bleq	ec3088 <__ROM_SIZE__+0xe83088>
 39c:	13010b39 	movwne	r0, #6969	; 0x1b39
 3a0:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
 3a4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 3a8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 3ac:	08030028 	stmdaeq	r3, {r3, r5}
 3b0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 3b4:	03011309 	movweq	r1, #4873	; 0x1309
 3b8:	3a0b0b0e 	bcc	2c2ff8 <__ROM_SIZE__+0x282ff8>
 3bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
int ping(int argc, char** argv) {
 3c0:	0013010b 	andseq	r0, r3, fp, lsl #2
    printf("MESG Received a ping\n");
 3c4:	000d0a00 	andeq	r0, sp, r0, lsl #20
}
 3c8:	0b3a0e03 	bleq	e83bdc <__ROM_SIZE__+0xe43bdc>
 3cc:	0b390b3b 	bleq	e430c0 <__ROM_SIZE__+0xe030c0>
void uputc(char c) {
 3d0:	0b381349 	bleq	e050fc <__ROM_SIZE__+0xdc50fc>
  while ((UARTFR >> 5) & 1)
 3d4:	0f0b0000 	svceq	0x000b0000
 3d8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  UART_DR = c;
 3dc:	0c000013 	stceq	0, cr0, [r0], {19}
  if (c == '\n')
 3e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
}
 3e4:	0b3b0b3a 	bleq	ec30d4 <__ROM_SIZE__+0xe830d4>
    uputc('\r');
 3e8:	13490b39 	movtne	r0, #39737	; 0x9b39
}
 3ec:	00001802 	andeq	r1, r0, r2, lsl #16
 3f0:	3f012e0d 	svccc	0x00012e0d
  if (!((UARTFR >> 4) & 1)) return UART_DR;
 3f4:	3a0e0319 	bcc	381060 <__ROM_SIZE__+0x341060>
 3f8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3fc:	1119270b 	tstne	r9, fp, lsl #14
 400:	40061201 	andmi	r1, r6, r1, lsl #4
  return -1;
 404:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
}
 408:	00001301 	andeq	r1, r0, r1, lsl #6
 40c:	0300050e 	movweq	r0, #1294	; 0x50e
  UARTCTL = 0;
 410:	3b0b3a08 	blcc	2cec38 <__ROM_SIZE__+0x28ec38>
 414:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  UARTIBRD = 8;
 418:	00180213 	andseq	r0, r8, r3, lsl r2
  UARTFBRD = 44;
 41c:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
  UARTCC = 0;
 420:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  UARTLCRH = 0x60;
 424:	0b3b0b3a 	bleq	ec3114 <__ROM_SIZE__+0xe83114>
  UARTCTL = 0x301;
 428:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
}
 42c:	01111349 	tsteq	r1, r9, asr #6
 430:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
void u2putc(char c) {
 434:	01194297 			; <UNDEFINED> instruction: 0x01194297
  while ((UART2FR >> 5) & 1)
 438:	10000013 	andne	r0, r0, r3, lsl r0
 43c:	08030034 	stmdaeq	r3, {r2, r4, r5}
  UART2_DR = c;
 440:	0b3b0b3a 	bleq	ec3130 <__ROM_SIZE__+0xe83130>
  if (c == '\n')
 444:	13490b39 	movtne	r0, #39737	; 0x9b39
}
 448:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    u2putc('\r');
 44c:	11000017 	tstne	r0, r7, lsl r0
}
 450:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 454:	0b3b0b3a 	bleq	ec3144 <__ROM_SIZE__+0xe83144>
  if (!((UART2FR >> 4) & 1)) return UART2_DR;
 458:	13490b39 	movtne	r0, #39737	; 0x9b39
 45c:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
 460:	12000017 	andne	r0, r0, #23
 464:	01018289 	smlabbeq	r1, r9, r2, r8
  return -1;
 468:	13310111 	teqne	r1, #1073741828	; 0x40000004
}
 46c:	8a130000 	bhi	4c0474 <__ROM_SIZE__+0x480474>
 470:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
  UART2CTL = 0;
 474:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 478:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
  UART2IBRD = 8;
 47c:	3c193f00 	ldccc	15, cr3, [r9], {-0}
  UART2FBRD = 44;
 480:	030e6e19 	movweq	r6, #60953	; 0xee19
  UART2CC = 0;
 484:	3b0b3a0e 	blcc	2cecc4 <__ROM_SIZE__+0x28ecc4>
  UART2LCRH = 0x60;
 488:	000b390b 	andeq	r3, fp, fp, lsl #18
  UART2CTL = 0x301;
 48c:	11010000 	mrsne	r0, (UNDEF: 1)
}
 490:	130e2501 	movwne	r2, #58625	; 0xe501
 494:	1b0e030b 	blne	3810c8 <__ROM_SIZE__+0x3410c8>
  RCGCUART |= 3;
 498:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 49c:	00171006 	andseq	r1, r7, r6
 4a0:	00160200 	andseq	r0, r6, r0, lsl #4
 4a4:	0b3a0e03 	bleq	e83cb8 <__ROM_SIZE__+0xe43cb8>
  RCGCGPIO |= 3;
 4a8:	0b390b3b 	bleq	e4319c <__ROM_SIZE__+0xe0319c>
 4ac:	00001349 	andeq	r1, r0, r9, asr #6
 4b0:	03011303 	movweq	r1, #4867	; 0x1303
  GPIODEN = 0x03;
 4b4:	3a0b0b0e 	bcc	2c30f4 <__ROM_SIZE__+0x2830f4>
 4b8:	010b3b0b 	tsteq	fp, fp, lsl #22
  GPIOAFSEL = 0x03;
 4bc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  GPIOPCTL |= 0x00000011;
 4c0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 4c4:	0b381349 	bleq	e051f0 <__ROM_SIZE__+0xdc51f0>
 4c8:	00001934 	andeq	r1, r0, r4, lsr r9
  GPIODEN2 = 0x03;
 4cc:	0b000f05 	bleq	40e8 <rsbox+0x28a0>
 4d0:	0600000b 	streq	r0, [r0], -fp
  GPIOAFSEL2 = 0x03;
 4d4:	0b0b0024 	bleq	2c056c <__ROM_SIZE__+0x28056c>
  GPIOPCTL2 |= 0x00000011;
 4d8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 4dc:	15070000 	strne	r0, [r7, #-0]
 4e0:	01192701 	tsteq	r9, r1, lsl #14
}
 4e4:	08000013 	stmdaeq	r0, {r0, r1, r4}
 4e8:	13490005 	movtne	r0, #36869	; 0x9005
void platform_init() {
 4ec:	24090000 	strcs	r0, [r9], #-0
    pin_setup();
 4f0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    uart_init();
 4f4:	000e030b 	andeq	r0, lr, fp, lsl #6
    uart2_init();
 4f8:	00260a00 	eoreq	r0, r6, r0, lsl #20
    set_read_char(ugetc);
 4fc:	00001349 	andeq	r1, r0, r9, asr #6
    set_read_char2(u2getc);
 500:	0300340b 	movweq	r3, #1035	; 0x40b
 504:	3b0b3a0e 	blcc	2ced44 <__ROM_SIZE__+0x28ed44>
    set_write_char(uputc);
 508:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    set_write_char2(u2putc);
 50c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 510:	0c000019 	stceq	0, cr0, [r0], {25}
}
 514:	0b0b000f 	bleq	2c0558 <__ROM_SIZE__+0x280558>
 518:	00001349 	andeq	r1, r0, r9, asr #6
 51c:	3e01040d 	cdpcc	4, 0, cr0, cr1, cr13, {0}
 520:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 524:	3b0b3a13 	blcc	2ced78 <__ROM_SIZE__+0x28ed78>
  selected_mode = mode;
 528:	010b390b 	tsteq	fp, fp, lsl #18
  if (selected_mode == NONE) {
 52c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  out_buf_rgn.addr = addr;
 530:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  out_buf_rgn.size = size / 2;
 534:	00000b1c 	andeq	r0, r0, ip, lsl fp
  out_buf_rgn.curr_index = 0;
 538:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  inp_buf_rgn.addr = addr + size / 2;
 53c:	00130113 	andseq	r0, r3, r3, lsl r1
  inp_buf_rgn.curr_index = 0;
 540:	00211000 	eoreq	r1, r1, r0
  if (!(selected_mode & INP)) {
 544:	0b2f1349 	bleq	bc5270 <__ROM_SIZE__+0xb85270>
    out_buf_rgn.size = size;
 548:	34110000 	ldrcc	r0, [r1], #-0
  memset(addr, 0, size);
 54c:	3a0e0300 	bcc	381154 <__ROM_SIZE__+0x341154>
 550:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  } else if (!(selected_mode & OUT)) {
 554:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 558:	12000018 	andne	r0, r0, #24
    inp_buf_rgn.addr = addr;
 55c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    inp_buf_rgn.size = size;
 560:	0b3a0e03 	bleq	e83d74 <__ROM_SIZE__+0xe43d74>
 564:	0b390b3b 	bleq	e43258 <__ROM_SIZE__+0xe03258>
  if (!(selected_mode & INP)) {
 568:	13491927 	movtne	r1, #39207	; 0x9927
 56c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 570:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  if (inp_buf_rgn.addr[inp_buf_rgn.curr_index] == 0) {
 574:	00130119 	andseq	r0, r3, r9, lsl r1
 578:	00051300 	andeq	r1, r5, r0, lsl #6
  int val = inp_buf_rgn.addr[inp_buf_rgn.curr_index];
 57c:	0b3a0803 	bleq	e82590 <__ROM_SIZE__+0xe42590>
  inp_buf_rgn.addr[inp_buf_rgn.curr_index] = 0;
 580:	0b390b3b 	bleq	e43274 <__ROM_SIZE__+0xe03274>
  inp_buf_rgn.curr_index++;
 584:	17021349 	strne	r1, [r2, -r9, asr #6]
 588:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
  if (inp_buf_rgn.curr_index == inp_buf_rgn.size) {
 58c:	00181400 	andseq	r1, r8, r0, lsl #8
}
 590:	34150000 	ldrcc	r0, [r5], #-0
    inp_buf_rgn.curr_index = 0;
 594:	3a0e0300 	bcc	38119c <__ROM_SIZE__+0x34119c>
    return -1;
 598:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 59c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    return -1;
 5a0:	1742b717 	smlaldne	fp, r2, r7, r7
 5a4:	0b160000 	bleq	5805ac <__ROM_SIZE__+0x5405ac>
  if (!(selected_mode & OUT) || c == 0) {
 5a8:	01175501 	tsteq	r7, r1, lsl #10
 5ac:	17000013 	smladne	r0, r3, r0, r0
 5b0:	01018289 	smlabbeq	r1, r9, r2, r8
  out_buf_rgn.addr[out_buf_rgn.curr_index] = (uint8_t) c;
 5b4:	13310111 	teqne	r1, #1073741828	; 0x40000004
 5b8:	8a180000 	bhi	6005c0 <__ROM_SIZE__+0x5c05c0>
  out_buf_rgn.curr_index++;
 5bc:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
  if (out_buf_rgn.curr_index == out_buf_rgn.size) {
 5c0:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 5c4:	89190000 	ldmdbhi	r9, {}	; <UNPREDICTABLE>
    out_buf_rgn.curr_index = 0;
 5c8:	11000182 	smlabbne	r0, r2, r1, r0
 5cc:	00133101 	andseq	r3, r3, r1, lsl #2
 5d0:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
static void outstr(const char *str) {
 5d4:	0b3a0e03 	bleq	e83de8 <__ROM_SIZE__+0xe43de8>
  while (*str != '\0') {
 5d8:	0b390b3b 	bleq	e432cc <__ROM_SIZE__+0xe032cc>
    __write_char__(*str);
 5dc:	13491927 	movtne	r1, #39207	; 0x9927
    str++;
 5e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
  while (*str != '\0') {
 5e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
}
 5e8:	00130119 	andseq	r0, r3, r9, lsl r1
 5ec:	00051b00 	andeq	r1, r5, r0, lsl #22
static bool printf_numbers(const char fmt, va_list *args, int l_count) {
 5f0:	0b3a0e03 	bleq	e83e04 <__ROM_SIZE__+0xe43e04>
 5f4:	0b390b3b 	bleq	e432e8 <__ROM_SIZE__+0xe032e8>
  switch (fmt) {
 5f8:	17021349 	strne	r1, [r2, -r9, asr #6]
 5fc:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
 600:	00341c00 	eorseq	r1, r4, r0, lsl #24
      if (l_count == 0) {
 604:	0b3a0803 	bleq	e82618 <__ROM_SIZE__+0xe42618>
 608:	0b390b3b 	bleq	e432fc <__ROM_SIZE__+0xe032fc>
        value = va_arg(*args, unsigned int);
 60c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 610:	891d0000 	ldmdbhi	sp, {}	; <UNPREDICTABLE>
      if (fmt == 'u') {
 614:	11010182 	smlabbne	r1, r2, r1, r0
        if (value == 0) {
 618:	00130101 	andseq	r0, r3, r1, lsl #2
          __write_char__(hextable[0]);
 61c:	82891e00 	addhi	r1, r9, #0, 28
 620:	01110101 	tsteq	r1, r1, lsl #2
  return true;
 624:	0b1f0000 	bleq	7c062c <__ROM_SIZE__+0x78062c>
  switch (fmt) {
 628:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
      outstr("\nprintf-error\n");
 62c:	00130106 	andseq	r0, r3, r6, lsl #2
      return false;
 630:	010b2000 	mrseq	r2, (UNDEF: 11)
}
 634:	00001755 	andeq	r1, r0, r5, asr r7
      if (l_count == 0) {
 638:	03003421 	movweq	r3, #1057	; 0x421
        value = va_arg(*args, int);
 63c:	3b0b3a08 	blcc	2cee64 <__ROM_SIZE__+0x28ee64>
 640:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
      if (value < 0) {
 644:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
        num[num_len++] = hextable[value % 10];
 648:	00001742 	andeq	r1, r0, r2, asr #14
 64c:	03012e22 	movweq	r2, #7714	; 0x1e22
 650:	3b0b3a0e 	blcc	2cee90 <__ROM_SIZE__+0x28ee90>
 654:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 658:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 65c:	96184006 	ldrls	r4, [r8], -r6
 660:	00001942 	andeq	r1, r0, r2, asr #18
 664:	01110100 	tsteq	r1, r0, lsl #2
 668:	0b130e25 	bleq	4c3f04 <__ROM_SIZE__+0x483f04>
        value = value / 10;
 66c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
      } while (value > 0);
 670:	06120111 			; <UNDEFINED> instruction: 0x06120111
 674:	00001710 	andeq	r1, r0, r0, lsl r7
        __write_char__('-');
 678:	0b002402 	bleq	9688 <__RAM_SIZE__+0x1688>
 67c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
        value = -value;
 680:	03000008 	movweq	r0, #8
        __write_char__(num[--num_len]);
 684:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 688:	0b3b0b3a 	bleq	ec3378 <__ROM_SIZE__+0xe83378>
 68c:	13490b39 	movtne	r0, #39737	; 0x9b39
 690:	24040000 	strcs	r0, [r4], #-0
 694:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      while (num_len > 0) {
 698:	000e030b 	andeq	r0, lr, fp, lsl #6
  return true;
 69c:	00260500 	eoreq	r0, r6, r0, lsl #10
          num[num_len++] = hextable[value % 10];
 6a0:	00001349 	andeq	r1, r0, r9, asr #6
 6a4:	03011306 	movweq	r1, #4870	; 0x1306
 6a8:	3a0b0b0e 	bcc	2c32e8 <__ROM_SIZE__+0x2832e8>
 6ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6b0:	0013010b 	andseq	r0, r3, fp, lsl #2
 6b4:	000d0700 	andeq	r0, sp, r0, lsl #14
 6b8:	0b3a0e03 	bleq	e83ecc <__ROM_SIZE__+0xe43ecc>
 6bc:	0b390b3b 	bleq	e433b0 <__ROM_SIZE__+0xe033b0>
          value = value / 10;
 6c0:	0b381349 	bleq	e053ec <__ROM_SIZE__+0xdc53ec>
        } while (value > 0);
 6c4:	0d080000 	stceq	0, cr0, [r8, #-0]
        while (num_len > 0) {
 6c8:	3a080300 	bcc	2012d0 <__ROM_SIZE__+0x1c12d0>
          __write_char__(num[--num_len]);
 6cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6d0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 6d4:	0900000b 	stmdbeq	r0, {r0, r1, r3}
 6d8:	13490101 	movtne	r0, #37121	; 0x9101
 6dc:	00001301 	andeq	r1, r0, r1, lsl #6
 6e0:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
  return true;
 6e4:	000b2f13 	andeq	r2, fp, r3, lsl pc
              __write_char__(hextable[val]);
 6e8:	00340b00 	eorseq	r0, r4, r0, lsl #22
 6ec:	0b3a0e03 	bleq	e83f00 <__ROM_SIZE__+0xe43f00>
              leading_zero_ignored = true;
 6f0:	0b390b3b 	bleq	e433e4 <__ROM_SIZE__+0xe033e4>
          while (start_bit >= 0) {
 6f4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
            int val = (value >> start_bit) & 0xF;
 6f8:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
            if (val || leading_zero_ignored) {
 6fc:	03193f01 	tsteq	r9, #1, 30
 700:	3b0b3a0e 	blcc	2cef40 <__ROM_SIZE__+0x28ef40>
 704:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
          bool leading_zero_ignored = false;
 708:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
          int start_bit = LAST_NIBBLE_FIRST_BIT;
 70c:	97184006 	ldrls	r4, [r8, -r6]
  return true;
 710:	13011942 	movwne	r1, #6466	; 0x1942
        return false;
 714:	050d0000 	streq	r0, [sp, #-0]
        return false;
 718:	3a080300 	bcc	201320 <__ROM_SIZE__+0x1c1320>
 71c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 720:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 724:	1742b717 	smlaldne	fp, r2, r7, r7
 728:	050e0000 	streq	r0, [lr, #-0]
 72c:	3a0e0300 	bcc	381334 <__ROM_SIZE__+0x341334>
int printf(const char *fmt, ...) {
 730:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 734:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 738:	1742b717 	smlaldne	fp, r2, r7, r7
  va_start(args, fmt);
 73c:	340f0000 	strcc	r0, [pc], #-0	; 744 <printf+0x14>
  while (*fmt) {
 740:	3a0e0300 	bcc	381348 <__ROM_SIZE__+0x341348>
        if (*fmt == '%') {
 744:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
        __write_char__(*fmt);
 748:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
        fmt++;
 74c:	10000018 	andne	r0, r0, r8, lsl r0
  while (*fmt) {
 750:	08030034 	stmdaeq	r3, {r2, r4, r5}
    switch (state) {
 754:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 758:	13490b39 	movtne	r0, #39737	; 0x9b39
          fmt++;
 75c:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
          continue;
 760:	11000017 	tstne	r0, r7, lsl r0
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
 764:	01018289 	smlabbeq	r1, r9, r2, r8
 768:	13310111 	teqne	r1, #1073741828	; 0x40000004
 76c:	00001301 	andeq	r1, r0, r1, lsl #6
 770:	01828a12 	orreq	r8, r2, r2, lsl sl
 774:	91180200 	tstls	r8, r0, lsl #4
        switch (*fmt) {
 778:	00001842 	andeq	r1, r0, r2, asr #16
 77c:	01828913 	orreq	r8, r2, r3, lsl r9
 780:	31011101 	tstcc	r1, r1, lsl #2
 784:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
            __write_char__(*fmt);
 788:	0b0b000f 	bleq	2c07cc <__ROM_SIZE__+0x2807cc>
 78c:	00001349 	andeq	r1, r0, r9, asr #6
            state = CHECK_CH;
 790:	03012e15 	movweq	r2, #7701	; 0x1e15
            break;
 794:	3b0b3a0e 	blcc	2cefd4 <__ROM_SIZE__+0x28efd4>
 798:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
            outstr(va_arg(args, const char *));
 79c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 7a0:	97184006 	ldrls	r4, [r8, -r6]
 7a4:	13011942 	movwne	r1, #6466	; 0x1942
            fmt++;
 7a8:	05160000 	ldreq	r0, [r6, #-0]
            break;
 7ac:	3a080300 	bcc	2013b4 <__ROM_SIZE__+0x1c13b4>
            __write_char__(va_arg(args, int));
 7b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 7b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 7b8:	17000018 	smladne	r0, r8, r0, r0
            fmt++;
 7bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
            break;
 7c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
            if (*fmt == 'l') {
 7c4:	13490b39 	movtne	r0, #39737	; 0x9b39
 7c8:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
            if (printf_numbers(*fmt, &args, l_count)) {
 7cc:	18000017 	stmdane	r0, {r0, r1, r2, r4}
 7d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 7d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
              state = CHECK_CH;
 7d8:	13490b39 	movtne	r0, #39737	; 0x9b39
              fmt++;
 7dc:	00001802 	andeq	r1, r0, r2, lsl #16
              l_count++;
 7e0:	03012e19 	movweq	r2, #7705	; 0x1e19
            if (printf_numbers(*fmt, &args, 0)) {
 7e4:	3b0b3a0e 	blcc	2cf024 <__ROM_SIZE__+0x28f024>
 7e8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
              fmt++;
 7ec:	11134919 	tstne	r3, r9, lsl r9
              break;
 7f0:	40061201 	andmi	r1, r6, r1, lsl #4
            return -1;
 7f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
}
 7f8:	00001301 	andeq	r1, r0, r1, lsl #6
 7fc:	03012e1a 	movweq	r2, #7706	; 0x1e1a
            return -1;
 800:	3b0b3a0e 	blcc	2cf040 <__ROM_SIZE__+0x28f040>
 804:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 808:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
int printf2(const char *fmt, ...) {
 80c:	97184006 	ldrls	r4, [r8, -r6]
 810:	13011942 	movwne	r1, #6466	; 0x1942
    __write_char2__(*fmt);
 814:	051b0000 	ldreq	r0, [fp, #-0]
 818:	3a0e0300 	bcc	381420 <__ROM_SIZE__+0x341420>
  while (*fmt != '\0') {
 81c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 820:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 824:	1c000018 	stcne	0, cr0, [r0], {24}
 828:	08030034 	stmdaeq	r3, {r2, r4, r5}
 82c:	0b3b0b3a 	bleq	ec351c <__ROM_SIZE__+0xe8351c>
{
 830:	13490b39 	movtne	r0, #39737	; 0x9b39
  for (i = 0; i < Nk; ++i)
 834:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 838:	1d000017 	stcne	0, cr0, [r0, #-92]	; 0xffffffa4
 83c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 840:	0b3a0e03 	bleq	e84054 <__ROM_SIZE__+0xe44054>
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 844:	0b390b3b 	bleq	e43538 <__ROM_SIZE__+0xe03538>
 848:	01111927 	tsteq	r1, r7, lsr #18
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 84c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 850:	01194297 			; <UNDEFINED> instruction: 0x01194297
 854:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 858:	08030005 	stmdaeq	r3, {r0, r2}
  for (i = 0; i < Nk; ++i)
 85c:	0b3b0b3a 	bleq	ec354c <__ROM_SIZE__+0xe8354c>
 860:	13490b39 	movtne	r0, #39737	; 0x9b39
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 864:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    j = i * 4; k=(i - Nk) * 4;
 868:	1f000017 	svcne	0x00000017
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 86c:	0111010b 	tsteq	r1, fp, lsl #2
 870:	00000612 	andeq	r0, r0, r2, lsl r6
 874:	03003420 	movweq	r3, #1056	; 0x420
 878:	3b0b3a0e 	blcc	2cf0b8 <__ROM_SIZE__+0x28f0b8>
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 87c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 880:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
 884:	00001742 	andeq	r1, r0, r2, asr #14
 888:	3f002e21 	svccc	0x00002e21
 88c:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 890:	3a0e030e 	bcc	3814d0 <__ROM_SIZE__+0x3414d0>
 894:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 898:	0000000b 	andeq	r0, r0, fp
 89c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 8a0:	030b130e 	movweq	r1, #45838	; 0xb30e
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8a4:	110e1b0e 	tstne	lr, lr, lsl #22
 8a8:	10061201 	andne	r1, r6, r1, lsl #4
 8ac:	02000017 	andeq	r0, r0, #23
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8b0:	0b0b0024 	bleq	2c0948 <__ROM_SIZE__+0x280948>
      k = (i - 1) * 4;
 8b4:	0e030b3e 	vmoveq.16	d3[0], r0
      tempa[0]=RoundKey[k + 0];
 8b8:	16030000 	strne	r0, [r3], -r0
 8bc:	3a0e0300 	bcc	3814c4 <__ROM_SIZE__+0x3414c4>
      tempa[1]=RoundKey[k + 1];
 8c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8c4:	0013490b 	andseq	r4, r3, fp, lsl #18
      tempa[2]=RoundKey[k + 2];
 8c8:	00240400 	eoreq	r0, r4, r0, lsl #8
 8cc:	0b3e0b0b 	bleq	f83500 <__ROM_SIZE__+0xf43500>
      tempa[3]=RoundKey[k + 3];
 8d0:	00000803 	andeq	r0, r0, r3, lsl #16
 8d4:	3f012e05 	svccc	0x00012e05
    if (i % Nk == 0)
 8d8:	3a0e0319 	bcc	381544 <__ROM_SIZE__+0x341544>
 8dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
        tempa[0] = tempa[1];
 8e0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
        tempa[1] = tempa[2];
 8e4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
        tempa[2] = tempa[3];
 8e8:	97184006 	ldrls	r4, [r8, -r6]
        tempa[3] = u8tmp;
 8ec:	13011942 	movwne	r1, #6466	; 0x1942
        tempa[0] = getSBoxValue(tempa[0]);
 8f0:	05060000 	streq	r0, [r6, #-0]
 8f4:	3a080300 	bcc	2014fc <__ROM_SIZE__+0x1c14fc>
        tempa[1] = getSBoxValue(tempa[1]);
 8f8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8fc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
        tempa[2] = getSBoxValue(tempa[2]);
 900:	1742b717 	smlaldne	fp, r2, r7, r7
 904:	34070000 	strcc	r0, [r7], #-0
        tempa[3] = getSBoxValue(tempa[3]);
 908:	3a080300 	bcc	201510 <__ROM_SIZE__+0x1c1510>
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 90c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 910:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 914:	1742b717 	smlaldne	fp, r2, r7, r7
 918:	34080000 	strcc	r0, [r8], #-0
}
 91c:	3a0e0300 	bcc	381524 <__ROM_SIZE__+0x341524>
 920:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
{
 924:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  for (i = 0; i < 4; ++i)
 928:	1742b717 	smlaldne	fp, r2, r7, r7
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 92c:	0b090000 	bleq	240934 <__ROM_SIZE__+0x200934>
 930:	00175501 	andseq	r5, r7, r1, lsl #10
 934:	000f0a00 	andeq	r0, pc, r0, lsl #20
 938:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 93c:	260b0000 	strcs	r0, [fp], -r0
 940:	00134900 	andseq	r4, r3, r0, lsl #18
 944:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
    for (j = 0; j < 4; ++j)
 948:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 94c:	0b3b0b3a 	bleq	ec363c <__ROM_SIZE__+0xe8363c>
  for (i = 0; i < 4; ++i)
 950:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 954:	01111349 	tsteq	r1, r9, asr #6
 958:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    for (j = 0; j < 4; ++j)
 95c:	00194297 	mulseq	r9, r7, r2
}
 960:	11010000 	mrsne	r0, (UNDEF: 1)
  for (i = 0; i < 4; ++i)
 964:	130e2501 	movwne	r2, #58625	; 0xe501
    for (j = 0; j < 4; ++j)
 968:	1b0e030b 	blne	38159c <__ROM_SIZE__+0x34159c>
 96c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 970:	00171006 	andseq	r1, r7, r6
 974:	00240200 	eoreq	r0, r4, r0, lsl #4
 978:	0b3e0b0b 	bleq	f835ac <__ROM_SIZE__+0xf435ac>
 97c:	00000e03 	andeq	r0, r0, r3, lsl #28
 980:	03001603 	movweq	r1, #1539	; 0x603
    for (j = 0; j < 4; ++j)
 984:	3b0b3a0e 	blcc	2cf1c4 <__ROM_SIZE__+0x28f1c4>
 988:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  for (i = 0; i < 4; ++i)
 98c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 990:	0b0b0024 	bleq	2c0a28 <__ROM_SIZE__+0x280a28>
    for (j = 0; j < 4; ++j)
 994:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
}
 998:	16050000 	strne	r0, [r5], -r0
  for (i = 0; i < 4; ++i)
 99c:	3a080300 	bcc	2015a4 <__ROM_SIZE__+0x1c15a4>
 9a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 9a4:	0013490b 	andseq	r4, r3, fp, lsl #18
  temp           = (*state)[0][1];
 9a8:	000f0600 	andeq	r0, pc, r0, lsl #12
  (*state)[0][1] = (*state)[1][1];
 9ac:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  (*state)[1][1] = (*state)[2][1];
 9b0:	15070000 	strne	r0, [r7, #-0]
  (*state)[2][1] = (*state)[3][1];
 9b4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
  temp           = (*state)[0][2];
 9b8:	00130113 	andseq	r0, r3, r3, lsl r1
  (*state)[0][2] = (*state)[2][2];
 9bc:	00050800 	andeq	r0, r5, r0, lsl #16
  temp           = (*state)[1][2];
 9c0:	00001349 	andeq	r1, r0, r9, asr #6
  (*state)[1][2] = (*state)[3][2];
 9c4:	49002609 	stmdbmi	r0, {r0, r3, r9, sl, sp}
  temp           = (*state)[0][3];
 9c8:	0a000013 	beq	a1c <MixColumns+0x30>
  (*state)[0][3] = (*state)[3][3];
 9cc:	0b0b0113 	bleq	2c0e20 <__ROM_SIZE__+0x280e20>
  (*state)[3][3] = (*state)[2][3];
 9d0:	0b3b0b3a 	bleq	ec36c0 <__ROM_SIZE__+0xe836c0>
  (*state)[2][3] = (*state)[1][3];
 9d4:	13010b39 	movwne	r0, #6969	; 0x1b39
}
 9d8:	0d0b0000 	stceq	0, cr0, [fp, #-0]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 9dc:	3a0e0300 	bcc	3815e4 <__ROM_SIZE__+0x3415e4>
 9e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 9e4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
}
 9e8:	0c00000b 	stceq	0, cr0, [r0], {11}
{
 9ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 9f0:	0b3b0b3a 	bleq	ec36e0 <__ROM_SIZE__+0xe836e0>
  for (i = 0; i < 4; ++i)
 9f4:	13490b39 	movtne	r0, #39737	; 0x9b39
    t   = (*state)[i][0];
 9f8:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 9fc:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 a00:	03193f01 	tsteq	r9, #1, 30
 a04:	3b0b3a0e 	blcc	2cf244 <__ROM_SIZE__+0x28f244>
 a08:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 a0c:	11134919 	tstne	r3, r9, lsl r9
 a10:	40061201 	andmi	r1, r6, r1, lsl #4
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 a14:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 a18:	00001301 	andeq	r1, r0, r1, lsl #6
 a1c:	0300050e 	movweq	r0, #1294	; 0x50e
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 a20:	3b0b3a0e 	blcc	2cf260 <__ROM_SIZE__+0x28f260>
 a24:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 a28:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
 a2c:	00001742 	andeq	r1, r0, r2, asr #14
 a30:	03000a0f 	movweq	r0, #2575	; 0xa0f
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 a34:	3b0b3a0e 	blcc	2cf274 <__ROM_SIZE__+0x28f274>
 a38:	110b390b 	tstne	fp, fp, lsl #18
 a3c:	10000001 	andne	r0, r0, r1
 a40:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 a44:	0b3b0b3a 	bleq	ec3734 <__ROM_SIZE__+0xe83734>
 a48:	13490b39 	movtne	r0, #39737	; 0x9b39
 a4c:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
 a50:	11000017 	tstne	r0, r7, lsl r0
  for (i = 0; i < 4; ++i)
 a54:	00018289 	andeq	r8, r1, r9, lsl #5
 a58:	13310111 	teqne	r1, #1073741828	; 0x40000004
}
 a5c:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
{
 a60:	11010182 	smlabbne	r1, r2, r1, r0
 a64:	01133101 	tsteq	r3, r1, lsl #2
  for (i = 0; i < 4; ++i)
 a68:	13000013 	movwne	r0, #19
    a = (*state)[i][0];
 a6c:	0001828a 	andeq	r8, r1, sl, lsl #5
 a70:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    b = (*state)[i][1];
 a74:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 a78:	01018289 	smlabbeq	r1, r9, r2, r8
    c = (*state)[i][2];
 a7c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 a80:	0b150000 	bleq	540a88 <__ROM_SIZE__+0x500a88>
 a84:	01175501 	tsteq	r7, r1, lsl #10
 a88:	16000013 			; <UNDEFINED> instruction: 0x16000013
 a8c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 a90:	0b3b0b3a 	bleq	ec3780 <__ROM_SIZE__+0xe83780>
 a94:	13490b39 	movtne	r0, #39737	; 0x9b39
 a98:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
 a9c:	17000017 	smladne	r0, r7, r0, r0
 aa0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 aa4:	0b3a0803 	bleq	e82ab8 <__ROM_SIZE__+0xe42ab8>
 aa8:	0b390b3b 	bleq	e4379c <__ROM_SIZE__+0xe0379c>
 aac:	13491927 	movtne	r1, #39207	; 0x9927
 ab0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 ab4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 ab8:	00130119 	andseq	r0, r3, r9, lsl r1
 abc:	002e1800 	eoreq	r1, lr, r0, lsl #16
 ac0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 ac4:	0e030e6e 	cdpeq	14, 0, cr0, cr3, cr14, {3}
 ac8:	0b3b0b3a 	bleq	ec37b8 <__ROM_SIZE__+0xe837b8>
 acc:	00000b39 	andeq	r0, r0, r9, lsr fp
 ad0:	01110100 	tsteq	r1, r0, lsl #2
 ad4:	0b130e25 	bleq	4c4370 <__ROM_SIZE__+0x484370>
 ad8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 adc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 ae0:	00001710 	andeq	r1, r0, r0, lsl r7
 ae4:	0b002402 	bleq	9af4 <__RAM_SIZE__+0x1af4>
 ae8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 aec:	03000008 	movweq	r0, #8
 af0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 af4:	0b3b0b3a 	bleq	ec37e4 <__ROM_SIZE__+0xe837e4>
 af8:	13490b39 	movtne	r0, #39737	; 0x9b39
 afc:	24040000 	strcs	r0, [r4], #-0
 b00:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 b04:	000e030b 	andeq	r0, lr, fp, lsl #6
 b08:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
 b0c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 b10:	0b3b0b3a 	bleq	ec3800 <__ROM_SIZE__+0xe83800>
 b14:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 b18:	01111349 	tsteq	r1, r9, asr #6
 b1c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 b20:	01194297 			; <UNDEFINED> instruction: 0x01194297
 b24:	06000013 			; <UNDEFINED> instruction: 0x06000013
 b28:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 b2c:	0b3b0b3a 	bleq	ec381c <__ROM_SIZE__+0xe8381c>
 b30:	13490b39 	movtne	r0, #39737	; 0x9b39
 b34:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
 b38:	07000017 	smladeq	r0, r7, r0, r0
 b3c:	08030005 	stmdaeq	r3, {r0, r2}
 b40:	0b3b0b3a 	bleq	ec3830 <__ROM_SIZE__+0xe83830>
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 b44:	13490b39 	movtne	r0, #39737	; 0x9b39
 b48:	00001802 	andeq	r1, r0, r2, lsl #16
 b4c:	03000508 	movweq	r0, #1288	; 0x508
 b50:	3b0b3a0e 	blcc	2cf390 <__ROM_SIZE__+0x28f390>
 b54:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 b58:	00180213 	andseq	r0, r8, r3, lsl r2
 b5c:	00340900 	eorseq	r0, r4, r0, lsl #18
 b60:	0b3a0803 	bleq	e82b74 <__ROM_SIZE__+0xe42b74>
 b64:	0b390b3b 	bleq	e43858 <__ROM_SIZE__+0xe03858>
 b68:	17021349 	strne	r1, [r2, -r9, asr #6]
 b6c:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
 b70:	00340a00 	eorseq	r0, r4, r0, lsl #20
 b74:	0b3a0e03 	bleq	e84388 <__ROM_SIZE__+0xe44388>
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 b78:	0b390b3b 	bleq	e4386c <__ROM_SIZE__+0xe0386c>
 b7c:	17021349 	strne	r1, [r2, -r9, asr #6]
 b80:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
 b84:	000f0b00 	andeq	r0, pc, r0, lsl #22
 b88:	00000b0b 	andeq	r0, r0, fp, lsl #22
 b8c:	0b000f0c 	bleq	47c4 <rsbox+0x2f7c>
 b90:	0013490b 	andseq	r4, r3, fp, lsl #18
 b94:	00260d00 	eoreq	r0, r6, r0, lsl #26
 b98:	00001349 	andeq	r1, r0, r9, asr #6
 b9c:	0000260e 	andeq	r2, r0, lr, lsl #12
 ba0:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 ba4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 ba8:	0b3b0b3a 	bleq	ec3898 <__ROM_SIZE__+0xe83898>
 bac:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 bb0:	01111349 	tsteq	r1, r9, asr #6
  for (i = 0; i < 4; ++i)
 bb4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 bb8:	00194297 	mulseq	r9, r7, r2
 bbc:	00051000 	andeq	r1, r5, r0
}
 bc0:	0b3a0803 	bleq	e82bd4 <__ROM_SIZE__+0xe42bd4>
  for (i = 0; i < 4; ++i)
 bc4:	0b390b3b 	bleq	e438b8 <__ROM_SIZE__+0xe038b8>
 bc8:	17021349 	strne	r1, [r2, -r9, asr #6]
    for (j = 0; j < 4; ++j)
 bcc:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
{
 bd0:	11010000 	mrsne	r0, (UNDEF: 1)
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 bd4:	130e2501 	movwne	r2, #58625	; 0xe501
 bd8:	1b0e030b 	blne	38180c <__ROM_SIZE__+0x34180c>
 bdc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 be0:	00171006 	andseq	r1, r7, r6
 be4:	00240200 	eoreq	r0, r4, r0, lsl #4
    for (j = 0; j < 4; ++j)
 be8:	0b3e0b0b 	bleq	f8381c <__ROM_SIZE__+0xf4381c>
 bec:	00000e03 	andeq	r0, r0, r3, lsl #28
  for (i = 0; i < 4; ++i)
 bf0:	03001603 	movweq	r1, #1539	; 0x603
 bf4:	3b0b3a0e 	blcc	2cf434 <__ROM_SIZE__+0x28f434>
    for (j = 0; j < 4; ++j)
 bf8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
 bfc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  for (i = 0; i < 4; ++i)
 c00:	0b0b0024 	bleq	2c0c98 <__ROM_SIZE__+0x280c98>
 c04:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 c08:	35050000 	strcc	r0, [r5, #-0]
  temp = (*state)[3][1];
 c0c:	00134900 	andseq	r4, r3, r0, lsl #18
  (*state)[3][1] = (*state)[2][1];
 c10:	00160600 	andseq	r0, r6, r0, lsl #12
  (*state)[2][1] = (*state)[1][1];
 c14:	0b3a0803 	bleq	e82c28 <__ROM_SIZE__+0xe42c28>
  (*state)[1][1] = (*state)[0][1];
 c18:	0b390b3b 	bleq	e4390c <__ROM_SIZE__+0xe0390c>
  temp = (*state)[0][2];
 c1c:	00001349 	andeq	r1, r0, r9, asr #6
  (*state)[0][2] = (*state)[2][2];
 c20:	0b000f07 	bleq	4844 <rsbox+0x2ffc>
  temp = (*state)[1][2];
 c24:	0013490b 	andseq	r4, r3, fp, lsl #18
  (*state)[1][2] = (*state)[3][2];
 c28:	01150800 	tsteq	r5, r0, lsl #16
  temp = (*state)[0][3];
 c2c:	13491927 	movtne	r1, #39207	; 0x9927
  (*state)[0][3] = (*state)[1][3];
 c30:	00001301 	andeq	r1, r0, r1, lsl #6
  (*state)[1][3] = (*state)[2][3];
 c34:	49000509 	stmdbmi	r0, {r0, r3, r8, sl}
  (*state)[2][3] = (*state)[3][3];
 c38:	0a000013 	beq	c8c <InvCipher+0xa>
}
 c3c:	13490026 	movtne	r0, #36902	; 0x9026
{
 c40:	130b0000 	movwne	r0, #45056	; 0xb000
  AddRoundKey(0, state, RoundKey);
 c44:	3a0b0b01 	bcc	2c3850 <__ROM_SIZE__+0x283850>
 c48:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c4c:	0013010b 	andseq	r0, r3, fp, lsl #2
  for (round = 1; ; ++round)
 c50:	000d0c00 	andeq	r0, sp, r0, lsl #24
    MixColumns(state);
 c54:	0b3a0e03 	bleq	e84468 <__ROM_SIZE__+0xe44468>
    AddRoundKey(round, state, RoundKey);
 c58:	0b390b3b 	bleq	e4394c <__ROM_SIZE__+0xe0394c>
 c5c:	0b381349 	bleq	e05988 <__ROM_SIZE__+0xdc5988>
 c60:	150d0000 	strne	r0, [sp, #-0]
  for (round = 1; ; ++round)
 c64:	49192700 	ldmdbmi	r9, {r8, r9, sl, sp}
    SubBytes(state);
 c68:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    ShiftRows(state);
 c6c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 c70:	0b3b0b3a 	bleq	ec3960 <__ROM_SIZE__+0xe83960>
    if (round == Nr) {
 c74:	13490b39 	movtne	r0, #39737	; 0x9b39
  AddRoundKey(Nr, state, RoundKey);
 c78:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 c7c:	150f0000 	strne	r0, [pc, #-0]	; c84 <InvCipher+0x2>
}
 c80:	01192701 	tsteq	r9, r1, lsl #14
{
 c84:	10000013 	andne	r0, r0, r3, lsl r0
  AddRoundKey(Nr, state, RoundKey);
 c88:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 c8c:	0b3b0b3a 	bleq	ec397c <__ROM_SIZE__+0xe8397c>
 c90:	13490b39 	movtne	r0, #39737	; 0x9b39
  for (round = (Nr - 1); ; --round)
 c94:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    InvMixColumns(state);
 c98:	34110000 	ldrcc	r0, [r1], #-0
  for (round = (Nr - 1); ; --round)
 c9c:	3a0e0300 	bcc	3818a4 <__ROM_SIZE__+0x3418a4>
    InvShiftRows(state);
 ca0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ca4:	0013490b 	andseq	r4, r3, fp, lsl #18
    InvSubBytes(state);
 ca8:	00341200 	eorseq	r1, r4, r0, lsl #4
    AddRoundKey(round, state, RoundKey);
 cac:	0b3a0e03 	bleq	e844c0 <__ROM_SIZE__+0xe444c0>
 cb0:	0b390b3b 	bleq	e439a4 <__ROM_SIZE__+0xe039a4>
 cb4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    if (round == 0) {
 cb8:	01130000 	tsteq	r3, r0
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 cbc:	01134901 	tsteq	r3, r1, lsl #18
    buf[i] ^= Iv[i];
 cc0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 cc4:	13490021 	movtne	r0, #36897	; 0x9021
 cc8:	00000b2f 	andeq	r0, r0, pc, lsr #22
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 ccc:	03003415 	movweq	r3, #1045	; 0x415
 cd0:	3b0b3a0e 	blcc	2cf510 <__ROM_SIZE__+0x28f510>
}
 cd4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  KeyExpansion(ctx->RoundKey, key);
 cd8:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
}
 cdc:	16000018 			; <UNDEFINED> instruction: 0x16000018
{
 ce0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  KeyExpansion(ctx->RoundKey, key);
 ce4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 ce8:	13490b39 	movtne	r0, #39737	; 0x9b39
 cec:	00001802 	andeq	r1, r0, r2, lsl #16
 cf0:	3f012e17 	svccc	0x00012e17
}
 cf4:	3a0e0319 	bcc	381960 <__ROM_SIZE__+0x341960>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 cf8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 cfc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
}
 d00:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
{
 d04:	97184006 	ldrls	r4, [r8, -r6]
  Cipher((state_t*)buf, ctx->RoundKey);
 d08:	13011942 	movwne	r1, #6466	; 0x1942
 d0c:	05180000 	ldreq	r0, [r8, #-0]
{
 d10:	3a0e0300 	bcc	381918 <__ROM_SIZE__+0x341918>
  InvCipher((state_t*)buf, ctx->RoundKey);
 d14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 d18:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
 d1c:	1742b717 	smlaldne	fp, r2, r7, r7
{
 d20:	89190000 	ldmdbhi	r9, {}	; <UNPREDICTABLE>
 d24:	11010182 	smlabbne	r1, r2, r1, r0
  uint8_t *Iv = ctx->Iv;
 d28:	00133101 	andseq	r3, r3, r1, lsl #2
 d2c:	828a1a00 	addhi	r1, sl, #0, 20
  for (i = 0; i < length; i += AES_BLOCKLEN)
 d30:	18020001 	stmdane	r2, {r0}
    XorWithIv(buf, Iv);
 d34:	00184291 	mulseq	r8, r1, r2
    Cipher((state_t*)buf, ctx->RoundKey);
 d38:	00341b00 	eorseq	r1, r4, r0, lsl #22
 d3c:	0b3a0803 	bleq	e82d50 <__ROM_SIZE__+0xe42d50>
  for (i = 0; i < length; i += AES_BLOCKLEN)
 d40:	0b39053b 	bleq	e42234 <__ROM_SIZE__+0xe02234>
    buf += AES_BLOCKLEN;
 d44:	17021349 	strne	r1, [r2, -r9, asr #6]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 d48:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 d4c:	00341c00 	eorseq	r1, r4, r0, lsl #24
 d50:	0b3a0e03 	bleq	e84564 <__ROM_SIZE__+0xe44564>
}
 d54:	0b39053b 	bleq	e42248 <__ROM_SIZE__+0xe02248>
{
 d58:	17021349 	strne	r1, [r2, -r9, asr #6]
 d5c:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
 d60:	82891d00 	addhi	r1, r9, #0, 26
  for (i = 0; i < length; i += AES_BLOCKLEN)
 d64:	01110101 	tsteq	r1, r1, lsl #2
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 d68:	13011331 	movwne	r1, #4913	; 0x1331
 d6c:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
    InvCipher((state_t*)buf, ctx->RoundKey);
 d70:	11000182 	smlabbne	r0, r2, r1, r0
 d74:	00133101 	andseq	r3, r3, r1, lsl #2
    XorWithIv(buf, ctx->Iv);
 d78:	010b1f00 	tsteq	fp, r0, lsl #30
 d7c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 d80:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 d84:	03193f01 	tsteq	r9, #1, 30
 d88:	3b0b3a0e 	blcc	2cf5c8 <__ROM_SIZE__+0x28f5c8>
 d8c:	110b3905 	tstne	fp, r5, lsl #18
  for (i = 0; i < length; i += AES_BLOCKLEN)
 d90:	40061201 	andmi	r1, r6, r1, lsl #4
 d94:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
}
 d98:	00001301 	andeq	r1, r0, r1, lsl #6
{
 d9c:	3f012e21 	svccc	0x00012e21
 da0:	3a0e0319 	bcc	381a0c <__ROM_SIZE__+0x341a0c>
 da4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 da8:	1119270b 	tstne	r9, fp, lsl #14
          ctx->Iv[bi] = 0;
 dac:	40061201 	andmi	r1, r6, r1, lsl #4
 db0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 db4:	00001301 	andeq	r1, r0, r1, lsl #6
      bi = 0;
 db8:	03003422 	movweq	r3, #1058	; 0x422
    buf[i] = (buf[i] ^ buffer[bi]);
 dbc:	3b0b3a0e 	blcc	2cf5fc <__ROM_SIZE__+0x28f5fc>
 dc0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 dc4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 dc8:	23000019 	movwcs	r0, #25
 dcc:	0e03012e 	adfeqsp	f0, f3, #0.5
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 dd0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 dd4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 dd8:	01111349 	tsteq	r1, r9, asr #6
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 ddc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 de0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 de4:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
      Cipher((state_t*)buffer,ctx->RoundKey);
 de8:	0e03012e 	adfeqsp	f0, f3, #0.5
 dec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 df0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 df4:	06120111 			; <UNDEFINED> instruction: 0x06120111
        if (ctx->Iv[bi] == 255)
 df8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 dfc:	00130119 	andseq	r0, r3, r9, lsl r1
        ctx->Iv[bi] += 1;
 e00:	82892500 	addhi	r2, r9, #0, 10
 e04:	01110101 	tsteq	r1, r1, lsl #2
      bi = 0;
 e08:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
}
 e0c:	3a0e0301 	bcc	381a18 <__ROM_SIZE__+0x341a18>
int atoi(const char* str) {
 e10:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  int res = 0;
 e14:	1119270b 	tstne	r9, fp, lsl #14
    res = res * 10 + str[i] - '0';
 e18:	40061201 	andmi	r1, r6, r1, lsl #4
 e1c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 e20:	00001301 	andeq	r1, r0, r1, lsl #6
  for (int i = 0; str[i] != '\0'; ++i) {
 e24:	03003427 	movweq	r3, #1063	; 0x427
 e28:	3b0b3a08 	blcc	2cf650 <__ROM_SIZE__+0x28f650>
uint32_t atoh(const char* str) {
 e2c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  uint32_t hex = 0;
 e30:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    } else if (str[i] >= 'a' && str[i] <= 'f') {
 e34:	00001742 	andeq	r1, r0, r2, asr #14
 e38:	03003428 	movweq	r3, #1064	; 0x428
 e3c:	3b0b3a0e 	blcc	2cf67c <__ROM_SIZE__+0x28f67c>
    hex |= value;
 e40:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  for (uint32_t i = 0; str[i] != '\0'; i++) {
 e44:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
 e48:	00001742 	andeq	r1, r0, r2, asr #14
    if (str[i] >= '0' && str[i] <= '9') {
 e4c:	11010b29 	tstne	r1, r9, lsr #22
 e50:	01061201 	tsteq	r6, r1, lsl #4
 e54:	2a000013 	bcs	ea8 <w32+0xc>
      value = str[i] - '0';
 e58:	01018289 	smlabbeq	r1, r9, r2, r8
    } else if (str[i] >= 'A' && str[i] <= 'F') {
 e5c:	13010111 	movwne	r0, #4369	; 0x1111
 e60:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
      value = str[i] - 'A' + 10;
 e64:	3a0e0301 	bcc	381a70 <__ROM_SIZE__+0x341a70>
}
 e68:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
int r32(int argc, char *argv[]) {
 e6c:	1119270b 	tstne	r9, fp, lsl #14
  if (argc < 2) {
 e70:	40061201 	andmi	r1, r6, r1, lsl #4
  uint32_t addr = atoh(argv[1]);
 e74:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 e78:	00001301 	andeq	r1, r0, r1, lsl #6
  printf("0x%x: 0x%x\n", addr, data);
 e7c:	0300052c 	movweq	r0, #1324	; 0x52c
 e80:	3b0b3a0e 	blcc	2cf6c0 <__ROM_SIZE__+0x28f6c0>
}
 e84:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    printf("Usage: %s <address> (in hex)\n", argv[0]);
 e88:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
 e8c:	00001742 	andeq	r1, r0, r2, asr #14
    return -1;
 e90:	03012e2d 	movweq	r2, #7725	; 0x1e2d
 e94:	3b0b3a0e 	blcc	2cf6d4 <__ROM_SIZE__+0x28f6d4>
 e98:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
int w32(int argc, char *argv[]) {
 e9c:	11134919 	tstne	r3, r9, lsl r9
  if (argc < 3) {
 ea0:	40061201 	andmi	r1, r6, r1, lsl #4
  uint32_t addr = atoh(argv[1]);
 ea4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 ea8:	00001301 	andeq	r1, r0, r1, lsl #6
  uint32_t data = atoh(argv[2]);
 eac:	0300052e 	movweq	r0, #1326	; 0x52e
 eb0:	3b0b3a08 	blcc	2cf6d8 <__ROM_SIZE__+0x28f6d8>
  return 0;
 eb4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    printf("Usage: %s <address> (in hex) <value> (in hex)\n", argv[0]);
 eb8:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
 ebc:	00001742 	andeq	r1, r0, r2, asr #14
    return -1;
 ec0:	55010b2f 	strpl	r0, [r1, #-2863]	; 0xfffff4d1
 ec4:	00130117 	andseq	r0, r3, r7, lsl r1
 ec8:	002e3000 	eoreq	r3, lr, r0
int read_mem(int argc, char *argv[]) {
 ecc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  if (argc < 3) {
 ed0:	0b3b0b3a 	bleq	ec3bc0 <__ROM_SIZE__+0xe83bc0>
  uint32_t addr = atoh(argv[1]);
 ed4:	13490b39 	movtne	r0, #39737	; 0x9b39
 ed8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  uint32_t length = atoi(argv[2]);
 edc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 ee0:	31000019 	tstcc	r0, r9, lsl r0
  for (uint32_t i = 0, data = 0; i < length; i++) {
 ee4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    printf("Usage: %s <address> (in hex) <num_words> (in decimal)\n", argv[0]);
 ee8:	0b3a0e03 	bleq	e846fc <__ROM_SIZE__+0xe446fc>
 eec:	0b390b3b 	bleq	e43be0 <__ROM_SIZE__+0xe03be0>
    return -1;
 ef0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 ef4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    printf("0x%x: 0x%x\n", addr, data);
 ef8:	32000019 	andcc	r0, r0, #25
 efc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    addr += 4;
 f00:	0b3a0e03 	bleq	e84714 <__ROM_SIZE__+0xe44714>
  for (uint32_t i = 0, data = 0; i < length; i++) {
 f04:	0b390b3b 	bleq	e43bf8 <__ROM_SIZE__+0xe03bf8>
  return 0;
 f08:	01111927 	tsteq	r1, r7, lsr #18
}
 f0c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 f10:	00194297 	mulseq	r9, r7, r2
{
 f14:	012e3300 			; <UNDEFINED> instruction: 0x012e3300
  if (argc < 4) {
 f18:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  uint32_t addr = atoh(argv[1]);
 f1c:	0b3b0b3a 	bleq	ec3c0c <__ROM_SIZE__+0xe83c0c>
 f20:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  uint32_t bit_loc = atoi(argv[2]);
 f24:	06120111 			; <UNDEFINED> instruction: 0x06120111
 f28:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  uint32_t bit_val = atoi(argv[3]);
 f2c:	00130119 	andseq	r0, r3, r9, lsl r1
 f30:	00053400 	andeq	r3, r5, r0, lsl #8
  if (bit_loc > 31) {
 f34:	0b3a0e03 	bleq	e84748 <__ROM_SIZE__+0xe44748>
  if (bit_val != 0 && bit_val != 1) {
 f38:	0b390b3b 	bleq	e43c2c <__ROM_SIZE__+0xe03c2c>
  uint32_t data = reg32(addr);
 f3c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  data = data | (bit_val << bit_loc);
 f40:	2e350000 	cdpcs	0, 3, cr0, cr5, cr0, {0}
  data = data & ~(!bit_val << bit_loc);
 f44:	3c193f00 	ldccc	15, cr3, [r9], {-0}
 f48:	030e6e19 	movweq	r6, #60953	; 0xee19
 f4c:	3b0b3a0e 	blcc	2cf78c <__ROM_SIZE__+0x28f78c>
  return 0;
 f50:	000b390b 	andeq	r3, fp, fp, lsl #18
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
	...
       8:	00000004 	andeq	r0, r0, r4
       c:	04500001 	ldrbeq	r0, [r0], #-1
      10:	10000000 	andne	r0, r0, r0
      14:	04000000 	streq	r0, [r0], #-0
      18:	5001f300 	andpl	pc, r1, r0, lsl #6
      1c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
      2c:	00000700 	andeq	r0, r0, r0, lsl #14
      30:	51000100 	mrspl	r0, (UNDEF: 16)
      34:	00000007 	andeq	r0, r0, r7
      38:	00000010 	andeq	r0, r0, r0, lsl r0
      3c:	01f30004 	mvnseq	r0, r4
      40:	00009f51 	andeq	r9, r0, r1, asr pc
      44:	00000000 	andeq	r0, r0, r0
      48:	00010000 	andeq	r0, r1, r0
	...
      54:	00140000 	andseq	r0, r4, r0
      58:	00010000 	andeq	r0, r1, r0
      5c:	00001450 	andeq	r1, r0, r0, asr r4
      60:	00001600 	andeq	r1, r0, r0, lsl #12
      64:	f3000400 	vshl.u8	d0, d0, d0
      68:	169f5001 	ldrne	r5, [pc], r1
      6c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
      70:	01000000 	mrseq	r0, (UNDEF: 0)
      74:	00185000 	andseq	r5, r8, r0
      78:	00240000 	eoreq	r0, r4, r0
      7c:	00040000 	andeq	r0, r4, r0
      80:	9f5001f3 	svcls	0x005001f3
	...
      8c:	00000001 	andeq	r0, r0, r1
	...
      98:	00000014 	andeq	r0, r0, r4, lsl r0
      9c:	14500001 	ldrbne	r0, [r0], #-1
      a0:	16000000 	strne	r0, [r0], -r0
      a4:	04000000 	streq	r0, [r0], #-0
      a8:	5001f300 	andpl	pc, r1, r0, lsl #6
      ac:	0000169f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
      b0:	00001800 	andeq	r1, r0, r0, lsl #16
      b4:	50000100 	andpl	r0, r0, r0, lsl #2
      b8:	00000018 	andeq	r0, r0, r8, lsl r0
      bc:	00000024 	andeq	r0, r0, r4, lsr #32
      c0:	01f30004 	mvnseq	r0, r4
      c4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
      d0:	00580000 	subseq	r0, r8, r0
      d4:	00680000 	rsbeq	r0, r8, r0
      d8:	00010000 	andeq	r0, r1, r0
      dc:	00006a50 	andeq	r6, r0, r0, asr sl
      e0:	00007000 	andeq	r7, r0, r0
      e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      f8:	00290000 	eoreq	r0, r9, r0
      fc:	00010000 	andeq	r0, r1, r0
     100:	00002950 	andeq	r2, r0, r0, asr r9
     104:	00002c00 	andeq	r2, r0, r0, lsl #24
     108:	f3000400 	vshl.u8	d0, d0, d0
     10c:	2c9f5001 	ldccs	0, cr5, [pc], {1}
     110:	40000000 	andmi	r0, r0, r0
     114:	01000000 	mrseq	r0, (UNDEF: 0)
     118:	00005000 	andeq	r5, r0, r0
	...
     12c:	00260000 	eoreq	r0, r6, r0
     130:	00010000 	andeq	r0, r1, r0
     134:	00002651 	andeq	r2, r0, r1, asr r6
     138:	00002900 	andeq	r2, r0, r0, lsl #18
     13c:	52000100 	andpl	r0, r0, #0, 2
     140:	00000029 	andeq	r0, r0, r9, lsr #32
     144:	0000002c 	andeq	r0, r0, ip, lsr #32
     148:	01f30004 	mvnseq	r0, r4
     14c:	002c9f51 	eoreq	r9, ip, r1, asr pc
     150:	00400000 	subeq	r0, r0, r0
     154:	00010000 	andeq	r0, r1, r0
     158:	00000051 	andeq	r0, r0, r1, asr r0
	...
     16c:	00002400 	andeq	r2, r0, r0, lsl #8
     170:	52000100 	andpl	r0, r0, #0, 2
     174:	00000024 	andeq	r0, r0, r4, lsr #32
     178:	00000029 	andeq	r0, r0, r9, lsr #32
     17c:	08030005 	stmdaeq	r3, {r0, r2}
     180:	29200000 	stmdbcs	r0!, {}	; <UNPREDICTABLE>
     184:	2c000000 	stccs	0, cr0, [r0], {-0}
     188:	04000000 	streq	r0, [r0], #-0
     18c:	5201f300 	andpl	pc, r1, #0, 6
     190:	00002c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     194:	00004000 	andeq	r4, r0, r0
     198:	52000100 	andpl	r0, r0, #0, 2
	...
     1a8:	00000238 	andeq	r0, r0, r8, lsr r2
     1ac:	00000240 	andeq	r0, r0, r0, asr #4
     1b0:	70910002 	addsvc	r0, r1, r2
     1b4:	00000240 	andeq	r0, r0, r0, asr #4
     1b8:	00000252 	andeq	r0, r0, r2, asr r2
     1bc:	00540001 	subseq	r0, r4, r1
	...
     1d4:	5c000000 	stcpl	0, cr0, [r0], {-0}
     1d8:	6e000001 	cdpvs	0, 0, cr0, cr0, cr1, {0}
     1dc:	02000001 	andeq	r0, r0, #1
     1e0:	6e709100 	expvss	f1, f0
     1e4:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
     1e8:	01000001 	tsteq	r0, r1
     1ec:	01f05400 	mvnseq	r5, r0, lsl #8
     1f0:	02040000 	andeq	r0, r4, #0
     1f4:	00010000 	andeq	r0, r1, r0
     1f8:	00020455 	andeq	r0, r2, r5, asr r4
     1fc:	00020800 	andeq	r0, r2, r0, lsl #16
     200:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     204:	00000208 	andeq	r0, r0, r8, lsl #4
     208:	0000020e 	andeq	r0, r0, lr, lsl #4
     20c:	0e550001 	cdpeq	0, 5, cr0, cr5, cr1, {0}
     210:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
     214:	01000002 	tsteq	r0, r2
     218:	021e5400 	andseq	r5, lr, #0, 8
     21c:	02220000 	eoreq	r0, r2, #0
     220:	00010000 	andeq	r0, r1, r0
     224:	00022c55 	andeq	r2, r2, r5, asr ip
     228:	00023800 	andeq	r3, r2, r0, lsl #16
     22c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     238:	01000001 	tsteq	r0, r1
     23c:	01000001 	tsteq	r0, r1
     240:	01000001 	tsteq	r0, r1
     244:	01000001 	tsteq	r0, r1
     248:	00000001 	andeq	r0, r0, r1
     24c:	01000001 	tsteq	r0, r1
     250:	00000001 	andeq	r0, r0, r1
     254:	00000168 	andeq	r0, r0, r8, ror #2
     258:	0000016e 	andeq	r0, r0, lr, ror #2
     25c:	9f300002 	svcls	0x00300002
     260:	0000016e 	andeq	r0, r0, lr, ror #2
     264:	00000188 	andeq	r0, r0, r8, lsl #3
     268:	88550001 	ldmdahi	r5, {r0}^
     26c:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
     270:	02000001 	andeq	r0, r0, #1
     274:	8e9f3100 	fmlhie	f3, f7, f0
     278:	bc000001 	stclt	0, cr0, [r0], {1}
     27c:	01000001 	tsteq	r0, r1
     280:	01bc5500 			; <UNDEFINED> instruction: 0x01bc5500
     284:	01c00000 	biceq	r0, r0, r0
     288:	00020000 	andeq	r0, r2, r0
     28c:	01c09f30 	biceq	r9, r0, r0, lsr pc
     290:	01d60000 	bicseq	r0, r6, r0
     294:	00010000 	andeq	r0, r1, r0
     298:	0001d655 	andeq	sp, r1, r5, asr r6
     29c:	0001da00 	andeq	sp, r1, r0, lsl #20
     2a0:	30000200 	andcc	r0, r0, r0, lsl #4
     2a4:	0001da9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
     2a8:	0001ea00 	andeq	lr, r1, r0, lsl #20
     2ac:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     2b0:	000001ea 	andeq	r0, r0, sl, ror #3
     2b4:	000001ee 	andeq	r0, r0, lr, ror #3
     2b8:	9f300002 	svcls	0x00300002
     2bc:	000001ee 	andeq	r0, r0, lr, ror #3
     2c0:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     2c4:	02550001 	subseq	r0, r5, #1
     2c8:	08000002 	stmdaeq	r0, {r1}
     2cc:	02000002 	andeq	r0, r0, #2
     2d0:	0e9f3000 	cdpeq	0, 9, cr3, cr15, cr0, {0}
     2d4:	18000002 	stmdane	r0, {r1}
     2d8:	01000002 	tsteq	r0, r2
     2dc:	02185500 	andseq	r5, r8, #0, 10
     2e0:	021e0000 	andseq	r0, lr, #0
     2e4:	00020000 	andeq	r0, r2, r0
     2e8:	022c9f30 	eoreq	r9, ip, #48, 30	; 0xc0
     2ec:	02380000 	eorseq	r0, r8, #0
     2f0:	00010000 	andeq	r0, r1, r0
     2f4:	00000055 	andeq	r0, r0, r5, asr r0
     2f8:	00000000 	andeq	r0, r0, r0
     2fc:	00000100 	andeq	r0, r0, r0, lsl #2
     300:	01010000 	mrseq	r0, (UNDEF: 1)
     304:	0001ee00 	andeq	lr, r1, r0, lsl #28
     308:	0001f800 	andeq	pc, r1, r0, lsl #16
     30c:	31000200 	mrscc	r0, R8_usr
     310:	0001f89f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
     314:	0001ff00 	andeq	pc, r1, r0, lsl #30
     318:	52000100 	andpl	r0, r0, #0, 2
     31c:	00000208 	andeq	r0, r0, r8, lsl #4
     320:	00000208 	andeq	r0, r0, r8, lsl #4
     324:	9f310002 	svcls	0x00310002
     328:	00000208 	andeq	r0, r0, r8, lsl #4
     32c:	0000020e 	andeq	r0, r0, lr, lsl #4
     330:	9f320002 	svcls	0x00320002
	...
     358:	0000001c 	andeq	r0, r0, ip, lsl r0
     35c:	0000004c 	andeq	r0, r0, ip, asr #32
     360:	4c500001 	mrrcmi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     364:	52000000 	andpl	r0, r0, #0
     368:	04000000 	streq	r0, [r0], #-0
     36c:	5001f300 	andpl	pc, r1, r0, lsl #6
     370:	0000529f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     374:	00005800 	andeq	r5, r0, r0, lsl #16
     378:	50000100 	andpl	r0, r0, r0, lsl #2
     37c:	00000058 	andeq	r0, r0, r8, asr r0
     380:	00000062 	andeq	r0, r0, r2, rrx
     384:	01f30004 	mvnseq	r0, r4
     388:	00629f50 	rsbeq	r9, r2, r0, asr pc
     38c:	00720000 	rsbseq	r0, r2, r0
     390:	00010000 	andeq	r0, r1, r0
     394:	00007250 	andeq	r7, r0, r0, asr r2
     398:	0000a200 	andeq	sl, r0, r0, lsl #4
     39c:	f3000400 	vshl.u8	d0, d0, d0
     3a0:	a29f5001 	addsge	r5, pc, #1
     3a4:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     3a8:	01000000 	mrseq	r0, (UNDEF: 0)
     3ac:	00a85000 	adceq	r5, r8, r0
     3b0:	01340000 	teqeq	r4, r0
     3b4:	00040000 	andeq	r0, r4, r0
     3b8:	9f5001f3 	svcls	0x005001f3
     3bc:	00000134 	andeq	r0, r0, r4, lsr r1
int ping(int argc, char** argv) {
     3c0:	0000013a 	andeq	r0, r0, sl, lsr r1
    printf("MESG Received a ping\n");
     3c4:	3a500001 	bcc	14003d0 <__ROM_SIZE__+0x13c03d0>
}
     3c8:	3e000001 	cdpcc	0, 0, cr0, cr0, cr1, {0}
     3cc:	04000001 	streq	r0, [r0], #-1
void uputc(char c) {
     3d0:	5001f300 	andpl	pc, r1, r0, lsl #6
  while ((UARTFR >> 5) & 1)
     3d4:	00013e9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
     3d8:	00014000 	andeq	r4, r1, r0
  UART_DR = c;
     3dc:	50000100 	andpl	r0, r0, r0, lsl #2
  if (c == '\n')
     3e0:	00000140 	andeq	r0, r0, r0, asr #2
}
     3e4:	00000142 	andeq	r0, r0, r2, asr #2
    uputc('\r');
     3e8:	01f30004 	mvnseq	r0, r4
}
     3ec:	01429f50 	cmpeq	r2, r0, asr pc
     3f0:	01440000 	mrseq	r0, (UNDEF: 68)
  if (!((UARTFR >> 4) & 1)) return UART_DR;
     3f4:	00010000 	andeq	r0, r1, r0
     3f8:	00014450 	andeq	r4, r1, r0, asr r4
     3fc:	00015c00 	andeq	r5, r1, r0, lsl #24
     400:	f3000400 	vshl.u8	d0, d0, d0
  return -1;
     404:	009f5001 	addseq	r5, pc, r1
	...
  UARTLCRH = 0x60;
     424:	00001c00 	andeq	r1, r0, r0, lsl #24
  UARTCTL = 0x301;
     428:	00004d00 	andeq	r4, r0, r0, lsl #26
}
     42c:	51000100 	mrspl	r0, (UNDEF: 16)
     430:	0000004d 	andeq	r0, r0, sp, asr #32
void u2putc(char c) {
     434:	00000052 	andeq	r0, r0, r2, asr r0
  while ((UART2FR >> 5) & 1)
     438:	01f30004 	mvnseq	r0, r4
     43c:	00529f51 	subseq	r9, r2, r1, asr pc
  UART2_DR = c;
     440:	005b0000 	subseq	r0, fp, r0
  if (c == '\n')
     444:	00010000 	andeq	r0, r1, r0
}
     448:	00005b51 	andeq	r5, r0, r1, asr fp
    u2putc('\r');
     44c:	00006200 	andeq	r6, r0, r0, lsl #4
}
     450:	f3000400 	vshl.u8	d0, d0, d0
     454:	629f5101 	addsvs	r5, pc, #1073741824	; 0x40000000
  if (!((UART2FR >> 4) & 1)) return UART2_DR;
     458:	72000000 	andvc	r0, r0, #0
     45c:	01000000 	mrseq	r0, (UNDEF: 0)
     460:	00725100 	rsbseq	r5, r2, r0, lsl #2
     464:	00a20000 	adceq	r0, r2, r0
  return -1;
     468:	00040000 	andeq	r0, r4, r0
}
     46c:	9f5101f3 	svcls	0x005101f3
     470:	000000a2 	andeq	r0, r0, r2, lsr #1
  UART2CTL = 0;
     474:	000000a9 	andeq	r0, r0, r9, lsr #1
     478:	a9510001 	ldmdbge	r1, {r0}^
  UART2IBRD = 8;
     47c:	34000000 	strcc	r0, [r0], #-0
  UART2FBRD = 44;
     480:	04000001 	streq	r0, [r0], #-1
  UART2CC = 0;
     484:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
  UART2LCRH = 0x60;
     488:	0001349f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
  UART2CTL = 0x301;
     48c:	00013a00 	andeq	r3, r1, r0, lsl #20
}
     490:	51000100 	mrspl	r0, (UNDEF: 16)
     494:	0000013a 	andeq	r0, r0, sl, lsr r1
  RCGCUART |= 3;
     498:	0000013e 	andeq	r0, r0, lr, lsr r1
     49c:	01f30004 	mvnseq	r0, r4
     4a0:	013e9f51 	teqeq	lr, r1, asr pc
     4a4:	015c0000 	cmpeq	ip, r0
  RCGCGPIO |= 3;
     4a8:	00010000 	andeq	r0, r1, r0
     4ac:	00000051 	andeq	r0, r0, r1, asr r0
	...
  GPIODEN2 = 0x03;
     4cc:	1c000000 	stcne	0, cr0, [r0], {-0}
     4d0:	3a000000 	bcc	4d8 <pin_setup+0x40>
  GPIOAFSEL2 = 0x03;
     4d4:	01000000 	mrseq	r0, (UNDEF: 0)
  GPIOPCTL2 |= 0x00000011;
     4d8:	003a5200 	eorseq	r5, sl, r0, lsl #4
     4dc:	00520000 	subseq	r0, r2, r0
     4e0:	00010000 	andeq	r0, r1, r0
}
     4e4:	00005254 	andeq	r5, r0, r4, asr r2
     4e8:	00005b00 	andeq	r5, r0, r0, lsl #22
void platform_init() {
     4ec:	52000100 	andpl	r0, r0, #0, 2
    pin_setup();
     4f0:	0000005b 	andeq	r0, r0, fp, asr r0
    uart_init();
     4f4:	0000005e 	andeq	r0, r0, lr, asr r0
    uart2_init();
     4f8:	5e540001 	cdppl	0, 5, cr0, cr4, cr1, {0}
    set_read_char(ugetc);
     4fc:	62000000 	andvs	r0, r0, #0
    set_read_char2(u2getc);
     500:	04000000 	streq	r0, [r0], #-0
     504:	5201f300 	andpl	pc, r1, #0, 6
    set_write_char(uputc);
     508:	0000629f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    set_write_char2(u2putc);
     50c:	00006a00 	andeq	r6, r0, r0, lsl #20
     510:	52000100 	andpl	r0, r0, #0, 2
}
     514:	0000006a 	andeq	r0, r0, sl, rrx
     518:	00000072 	andeq	r0, r0, r2, ror r0
     51c:	72540001 	subsvc	r0, r4, #1
     520:	a2000000 	andge	r0, r0, #0
     524:	04000000 	streq	r0, [r0], #-0
  selected_mode = mode;
     528:	5201f300 	andpl	pc, r1, #0, 6
  if (selected_mode == NONE) {
     52c:	0000a29f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
  out_buf_rgn.addr = addr;
     530:	0000ae00 	andeq	sl, r0, r0, lsl #28
  out_buf_rgn.size = size / 2;
     534:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
  out_buf_rgn.curr_index = 0;
     538:	000000ae 	andeq	r0, r0, lr, lsr #1
  inp_buf_rgn.addr = addr + size / 2;
     53c:	00000134 	andeq	r0, r0, r4, lsr r1
  inp_buf_rgn.curr_index = 0;
     540:	01f30004 	mvnseq	r0, r4
  if (!(selected_mode & INP)) {
     544:	01349f52 	teqeq	r4, r2, asr pc
    out_buf_rgn.size = size;
     548:	01380000 	teqeq	r8, r0
  memset(addr, 0, size);
     54c:	00010000 	andeq	r0, r1, r0
     550:	00013854 	andeq	r3, r1, r4, asr r8
  } else if (!(selected_mode & OUT)) {
     554:	00013e00 	andeq	r3, r1, r0, lsl #28
     558:	f3000400 	vshl.u8	d0, d0, d0
    inp_buf_rgn.addr = addr;
     55c:	3e9f5201 	cdpcc	2, 9, cr5, cr15, cr1, {0}
    inp_buf_rgn.size = size;
     560:	5c000001 	stcpl	0, cr0, [r0], {1}
     564:	01000001 	tsteq	r0, r1
  if (!(selected_mode & INP)) {
     568:	00005200 	andeq	r5, r0, r0, lsl #4
     56c:	00000000 	andeq	r0, r0, r0
     570:	00020000 	andeq	r0, r2, r0
	...
  inp_buf_rgn.curr_index++;
     584:	00000022 	andeq	r0, r0, r2, lsr #32
     588:	0000005e 	andeq	r0, r0, lr, asr r0
  if (inp_buf_rgn.curr_index == inp_buf_rgn.size) {
     58c:	9f300002 	svcls	0x00300002
}
     590:	00000062 	andeq	r0, r0, r2, rrx
    inp_buf_rgn.curr_index = 0;
     594:	00000072 	andeq	r0, r0, r2, ror r0
    return -1;
     598:	9f300002 	svcls	0x00300002
     59c:	00000072 	andeq	r0, r0, r2, ror r0
    return -1;
     5a0:	00000094 	muleq	r0, r4, r0
     5a4:	94540001 	ldrbls	r0, [r4], #-1
  if (!(selected_mode & OUT) || c == 0) {
     5a8:	a2000000 	andge	r0, r0, #0
     5ac:	03000000 	movweq	r0, #0
     5b0:	9f7f7400 	svcls	0x007f7400
  out_buf_rgn.addr[out_buf_rgn.curr_index] = (uint8_t) c;
     5b4:	000000a2 	andeq	r0, r0, r2, lsr #1
     5b8:	000000ae 	andeq	r0, r0, lr, lsr #1
  out_buf_rgn.curr_index++;
     5bc:	9f300002 	svcls	0x00300002
  if (out_buf_rgn.curr_index == out_buf_rgn.size) {
     5c0:	000000ae 	andeq	r0, r0, lr, lsr #1
     5c4:	000000e8 	andeq	r0, r0, r8, ror #1
    out_buf_rgn.curr_index = 0;
     5c8:	e8540001 	ldmda	r4, {r0}^
     5cc:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     5d0:	03000000 	movweq	r0, #0
static void outstr(const char *str) {
     5d4:	9f7f7400 	svcls	0x007f7400
  while (*str != '\0') {
     5d8:	000000f4 	strdeq	r0, [r0], -r4
    __write_char__(*str);
     5dc:	00000112 	andeq	r0, r0, r2, lsl r1
    str++;
     5e0:	12540001 	subsne	r0, r4, #1
  while (*str != '\0') {
     5e4:	5c000001 	stcpl	0, cr0, [r0], {1}
}
     5e8:	02000001 	andeq	r0, r0, #1
     5ec:	009f3000 	addseq	r3, pc, r0
static bool printf_numbers(const char fmt, va_list *args, int l_count) {
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	01000000 	mrseq	r0, (UNDEF: 0)
	...
  switch (fmt) {
     600:	00006200 	andeq	r6, r0, r0, lsl #4
      if (l_count == 0) {
     604:	00006e00 	andeq	r6, r0, r0, lsl #28
     608:	30000200 	andcc	r0, r0, r0, lsl #4
        value = va_arg(*args, unsigned int);
     60c:	0000729f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     610:	00009c00 	andeq	r9, r0, r0, lsl #24
      if (fmt == 'u') {
     614:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
        if (value == 0) {
     618:	0000009c 	muleq	r0, ip, r0
          __write_char__(hextable[0]);
     61c:	000000a2 	andeq	r0, r0, r2, lsr #1
     620:	ac510001 	mrrcge	0, 0, r0, r1, cr1
  return true;
     624:	ca000000 	bgt	62c <printf_numbers+0x3c>
  switch (fmt) {
     628:	01000000 	mrseq	r0, (UNDEF: 0)
      outstr("\nprintf-error\n");
     62c:	013e5500 	teqeq	lr, r0, lsl #10
      return false;
     630:	01420000 	mrseq	r0, (UNDEF: 66)
}
     634:	00020000 	andeq	r0, r2, r0
      if (l_count == 0) {
     638:	00009f30 	andeq	r9, r0, r0, lsr pc
        value = va_arg(*args, int);
     63c:	00000000 	andeq	r0, r0, r0
     640:	00010000 	andeq	r0, r1, r0
	...
        num[num_len++] = hextable[value % 10];
     64c:	00000030 	andeq	r0, r0, r0, lsr r0
     650:	0000003e 	andeq	r0, r0, lr, lsr r0
     654:	9f300002 	svcls	0x00300002
     658:	000000ca 	andeq	r0, r0, sl, asr #1
     65c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     660:	f0550001 			; <UNDEFINED> instruction: 0xf0550001
     664:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     668:	01000000 	mrseq	r0, (UNDEF: 0)
        value = value / 10;
     66c:	00f45100 	rscseq	r5, r4, r0, lsl #2
      } while (value > 0);
     670:	01120000 	tsteq	r2, r0
     674:	00010000 	andeq	r0, r1, r0
        __write_char__('-');
     678:	00014255 	andeq	r4, r1, r5, asr r2
     67c:	00015c00 	andeq	r5, r1, r0, lsl #24
        value = -value;
     680:	30000200 	andcc	r0, r0, r0, lsl #4
        __write_char__(num[--num_len]);
     684:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     690:	00011200 	andeq	r1, r1, r0, lsl #4
     694:	00013400 	andeq	r3, r1, r0, lsl #8
      while (num_len > 0) {
     698:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
  return true;
     69c:	0000013a 	andeq	r0, r0, sl, lsr r1
          num[num_len++] = hextable[value % 10];
     6a0:	0000013e 	andeq	r0, r0, lr, lsr r1
     6a4:	00540001 	subseq	r0, r4, r1
	...
     6b0:	00000101 	andeq	r0, r0, r1, lsl #2
     6b4:	12000000 	andne	r0, r0, #0
     6b8:	12000001 	andne	r0, r0, #1
     6bc:	01000001 	tsteq	r0, r1
          value = value / 10;
     6c0:	01125200 	tsteq	r2, r0, lsl #4
        } while (value > 0);
     6c4:	011e0000 	tsteq	lr, r0
        while (num_len > 0) {
     6c8:	00020000 	andeq	r0, r2, r0
          __write_char__(num[--num_len]);
     6cc:	011e9f31 	tsteq	lr, r1, lsr pc
     6d0:	01340000 	teqeq	r4, r0
     6d4:	00010000 	andeq	r0, r1, r0
     6d8:	00013a52 	andeq	r3, r1, r2, asr sl
     6dc:	00013e00 	andeq	r3, r1, r0, lsl #28
     6e0:	52000100 	andpl	r0, r0, #0, 2
	...
          while (start_bit >= 0) {
     6f4:	00000112 	andeq	r0, r0, r2, lsl r1
            int val = (value >> start_bit) & 0xF;
     6f8:	0000011b 	andeq	r0, r0, fp, lsl r1
            if (val || leading_zero_ignored) {
     6fc:	1b530001 	blne	14c0708 <__ROM_SIZE__+0x1480708>
     700:	20000001 	andcs	r0, r0, r1
     704:	08000001 	stmdaeq	r0, {r0}
          bool leading_zero_ignored = false;
     708:	74007500 	strvc	r7, [r0], #-1280	; 0xfffffb00
          int start_bit = LAST_NIBBLE_FIRST_BIT;
     70c:	1a3f2500 	bne	fc9b14 <__ROM_SIZE__+0xf89b14>
  return true;
     710:	0001289f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
        return false;
     714:	00012c00 	andeq	r2, r1, r0, lsl #24
        return false;
     718:	73000500 	movwvc	r0, #1280	; 0x500
     71c:	9f1a3f00 	svcls	0x001a3f00
     720:	0000012c 	andeq	r0, r0, ip, lsr #2
     724:	00000134 	andeq	r0, r0, r4, lsr r1
     728:	00530001 	subseq	r0, r3, r1
	...
int printf(const char *fmt, ...) {
     738:	06000000 	streq	r0, [r0], -r0
  va_start(args, fmt);
     73c:	01000000 	mrseq	r0, (UNDEF: 0)
  while (*fmt) {
     740:	00065000 	andeq	r5, r6, r0
        if (*fmt == '%') {
     744:	00160000 	andseq	r0, r6, r0
        __write_char__(*fmt);
     748:	00010000 	andeq	r0, r1, r0
        fmt++;
     74c:	00000054 	andeq	r0, r0, r4, asr r0
	...
    switch (state) {
     758:	00056c00 	andeq	r6, r5, r0, lsl #24
          fmt++;
     75c:	00057c00 	andeq	r7, r5, r0, lsl #24
          continue;
     760:	50000100 	andpl	r0, r0, r0, lsl #2
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
     764:	0000057c 	andeq	r0, r0, ip, ror r5
     768:	000005e0 	andeq	r0, r0, r0, ror #11
     76c:	00570001 	subseq	r0, r7, r1
	...
        switch (*fmt) {
     778:	6c000000 	stcvs	0, cr0, [r0], {-0}
     77c:	7c000005 	stcvc	0, cr0, [r0], {5}
     780:	01000005 	tsteq	r0, r5
     784:	057c5100 	ldrbeq	r5, [ip, #-256]!	; 0xffffff00
            __write_char__(*fmt);
     788:	05e00000 	strbeq	r0, [r0, #0]!
     78c:	00010000 	andeq	r0, r1, r0
            state = CHECK_CH;
     790:	00000055 	andeq	r0, r0, r5, asr r0
	...
            outstr(va_arg(args, const char *));
     79c:	00056c00 	andeq	r6, r5, r0, lsl #24
     7a0:	00057c00 	andeq	r7, r5, r0, lsl #24
     7a4:	52000100 	andpl	r0, r0, #0, 2
            fmt++;
     7a8:	0000057c 	andeq	r0, r0, ip, ror r5
            break;
     7ac:	000005e0 	andeq	r0, r0, r0, ror #11
            __write_char__(va_arg(args, int));
     7b0:	00560001 	subseq	r0, r6, r1
     7b4:	00000000 	andeq	r0, r0, r0
     7b8:	04000000 	streq	r0, [r0], #-0
            fmt++;
     7bc:	76000000 	strvc	r0, [r0], -r0
            break;
     7c0:	7c000005 	stcvc	0, cr0, [r0], {5}
            if (*fmt == 'l') {
     7c4:	02000005 	andeq	r0, r0, #5
     7c8:	7c9f3000 	ldcvc	0, cr3, [pc], {0}
            if (printf_numbers(*fmt, &args, l_count)) {
     7cc:	e0000005 	and	r0, r0, r5
     7d0:	01000005 	tsteq	r0, r5
     7d4:	00005400 	andeq	r5, r0, r0, lsl #8
              state = CHECK_CH;
     7d8:	00000000 	andeq	r0, r0, r0
              fmt++;
     7dc:	00040000 	andeq	r0, r4, r0
              l_count++;
     7e0:	00010000 	andeq	r0, r1, r0
            if (printf_numbers(*fmt, &args, 0)) {
     7e4:	00000000 	andeq	r0, r0, r0
     7e8:	00000576 	andeq	r0, r0, r6, ror r5
              fmt++;
     7ec:	0000057c 	andeq	r0, r0, ip, ror r5
              break;
     7f0:	9f400002 	svcls	0x00400002
            return -1;
     7f4:	0000057c 	andeq	r0, r0, ip, ror r5
}
     7f8:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     7fc:	c0530001 	subsgt	r0, r3, r1
            return -1;
     800:	c2000005 	andgt	r0, r0, #5
     804:	02000005 	andeq	r0, r0, #5
     808:	c29f3f00 	addsgt	r3, pc, #0, 30
int printf2(const char *fmt, ...) {
     80c:	d2000005 	andle	r0, r0, #5
     810:	01000005 	tsteq	r0, r5
    __write_char2__(*fmt);
     814:	05dc5300 	ldrbeq	r5, [ip, #768]	; 0x300
     818:	05e00000 	strbeq	r0, [r0, #0]!
  while (*fmt != '\0') {
     81c:	00010000 	andeq	r0, r1, r0
     820:	00000053 	andeq	r0, r0, r3, asr r0
	...
     82c:	00052600 	andeq	r2, r5, r0, lsl #12
{
     830:	00053600 	andeq	r3, r5, r0, lsl #12
  for (i = 0; i < Nk; ++i)
     834:	50000100 	andpl	r0, r0, r0, lsl #2
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
     838:	00000536 	andeq	r0, r0, r6, lsr r5
     83c:	0000056c 	andeq	r0, r0, ip, ror #10
     840:	00570001 	subseq	r0, r7, r1
	...
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
     84c:	26000000 	strcs	r0, [r0], -r0
     850:	36000005 	strcc	r0, [r0], -r5
     854:	01000005 	tsteq	r0, r5
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
     858:	05365100 	ldreq	r5, [r6, #-256]!	; 0xffffff00
  for (i = 0; i < Nk; ++i)
     85c:	056c0000 	strbeq	r0, [ip, #-0]!
     860:	00010000 	andeq	r0, r1, r0
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     864:	00000054 	andeq	r0, r0, r4, asr r0
	...
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
     870:	00052600 	andeq	r2, r5, r0, lsl #12
     874:	00053600 	andeq	r3, r5, r0, lsl #12
     878:	52000100 	andpl	r0, r0, #0, 2
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
     87c:	00000536 	andeq	r0, r0, r6, lsr r5
     880:	0000056c 	andeq	r0, r0, ip, ror #10
     884:	00580001 	subseq	r0, r8, r1
     888:	00000000 	andeq	r0, r0, r0
     88c:	03000000 	movweq	r0, #0
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
     890:	32000000 	andcc	r0, r0, #0
     894:	36000005 	strcc	r0, [r0], -r5
     898:	02000005 	andeq	r0, r0, #5
     89c:	369f3000 	ldrcc	r3, [pc], r0
     8a0:	6c000005 	stcvs	0, cr0, [r0], {5}
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
     8a4:	01000005 	tsteq	r0, r5
     8a8:	00005500 	andeq	r5, r0, r0, lsl #10
	...
      k = (i - 1) * 4;
     8b4:	04ee0000 	strbteq	r0, [lr], #0
      tempa[0]=RoundKey[k + 0];
     8b8:	05020000 	streq	r0, [r2, #-0]
     8bc:	00010000 	andeq	r0, r1, r0
      tempa[1]=RoundKey[k + 1];
     8c0:	00050250 	andeq	r0, r5, r0, asr r2
     8c4:	00052600 	andeq	r2, r5, r0, lsl #12
      tempa[2]=RoundKey[k + 2];
     8c8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
      tempa[3]=RoundKey[k + 3];
     8d4:	02000000 	andeq	r0, r0, #0
    if (i % Nk == 0)
     8d8:	00000002 	andeq	r0, r0, r2
     8dc:	000004ee 	andeq	r0, r0, lr, ror #9
        tempa[0] = tempa[1];
     8e0:	000004fe 	strdeq	r0, [r0], -lr
        tempa[1] = tempa[2];
     8e4:	fe510001 	cdp2	0, 5, cr0, cr1, cr1, {0}
        tempa[2] = tempa[3];
     8e8:	10000004 	andne	r0, r0, r4
        tempa[3] = u8tmp;
     8ec:	01000005 	tsteq	r0, r5
        tempa[0] = getSBoxValue(tempa[0]);
     8f0:	05105400 	ldreq	r5, [r0, #-1024]	; 0xfffffc00
     8f4:	05160000 	ldreq	r0, [r6, #-0]
        tempa[1] = getSBoxValue(tempa[1]);
     8f8:	00030000 	andeq	r0, r3, r0
     8fc:	169f1074 			; <UNDEFINED> instruction: 0x169f1074
        tempa[2] = getSBoxValue(tempa[2]);
     900:	26000005 	strcs	r0, [r0], -r5
     904:	01000005 	tsteq	r0, r5
        tempa[3] = getSBoxValue(tempa[3]);
     908:	00005400 	andeq	r5, r0, r0, lsl #8
	...
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
     914:	04ee0000 	strbteq	r0, [lr], #0
     918:	05020000 	streq	r0, [r2, #-0]
}
     91c:	00010000 	andeq	r0, r1, r0
     920:	00050252 	andeq	r0, r5, r2, asr r2
{
     924:	00052600 	andeq	r2, r5, r0, lsl #12
  for (i = 0; i < 4; ++i)
     928:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
     934:	00000001 	andeq	r0, r0, r1
     938:	000004fc 	strdeq	r0, [r0], -ip
     93c:	00000502 	andeq	r0, r0, r2, lsl #10
     940:	9f300002 	svcls	0x00300002
     944:	00000502 	andeq	r0, r0, r2, lsl #10
    for (j = 0; j < 4; ++j)
     948:	00000526 	andeq	r0, r0, r6, lsr #10
     94c:	00550001 	subseq	r0, r5, r1
	...
  for (i = 0; i < 4; ++i)
     958:	01000000 	mrseq	r0, (UNDEF: 0)
    for (j = 0; j < 4; ++j)
     95c:	fc000000 	stc2	0, cr0, [r0], {-0}
}
     960:	02000004 	andeq	r0, r0, #4
  for (i = 0; i < 4; ++i)
     964:	01000005 	tsteq	r0, r5
    for (j = 0; j < 4; ++j)
     968:	05025800 	streq	r5, [r2, #-2048]	; 0xfffff800
     96c:	05070000 	streq	r0, [r7, #-0]
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
     970:	00010000 	andeq	r0, r1, r0
     974:	00051051 	andeq	r1, r5, r1, asr r0
     978:	00051600 	andeq	r1, r5, r0, lsl #12
     97c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     980:	00000516 	andeq	r0, r0, r6, lsl r5
    for (j = 0; j < 4; ++j)
     984:	00000521 	andeq	r0, r0, r1, lsr #10
     988:	00510001 	subseq	r0, r1, r1
  for (i = 0; i < 4; ++i)
     98c:	00000000 	andeq	r0, r0, r0
     990:	03000000 	movweq	r0, #0
    for (j = 0; j < 4; ++j)
     994:	00000000 	andeq	r0, r0, r0
}
     998:	00048c00 	andeq	r8, r4, r0, lsl #24
  for (i = 0; i < 4; ++i)
     99c:	00049000 	andeq	r9, r4, r0
     9a0:	30000200 	andcc	r0, r0, r0, lsl #4
     9a4:	0004909f 	muleq	r4, pc, r0	; <UNPREDICTABLE>
  temp           = (*state)[0][1];
     9a8:	00049e00 	andeq	r9, r4, r0, lsl #28
  (*state)[0][1] = (*state)[1][1];
     9ac:	53000100 	movwpl	r0, #256	; 0x100
  (*state)[1][1] = (*state)[2][1];
     9b0:	000004a0 	andeq	r0, r0, r0, lsr #9
  (*state)[2][1] = (*state)[3][1];
     9b4:	000004a6 	andeq	r0, r0, r6, lsr #9
  temp           = (*state)[0][2];
     9b8:	00530001 	subseq	r0, r3, r1
	...
  temp           = (*state)[0][3];
     9c8:	0004e000 	andeq	lr, r4, r0
  (*state)[0][3] = (*state)[3][3];
     9cc:	0004e800 	andeq	lr, r4, r0, lsl #16
  (*state)[3][3] = (*state)[2][3];
     9d0:	50000100 	andpl	r0, r0, r0, lsl #2
  (*state)[2][3] = (*state)[1][3];
     9d4:	000004e8 	andeq	r0, r0, r8, ror #9
}
     9d8:	000004eb 	andeq	r0, r0, fp, ror #9
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
     9dc:	eb510001 	bl	14409e8 <__ROM_SIZE__+0x14009e8>
     9e0:	ee000004 	cdp	0, 0, cr0, cr0, cr4, {0}
     9e4:	04000004 	streq	r0, [r0], #-4
}
     9e8:	5001f300 	andpl	pc, r1, r0, lsl #6
{
     9ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    t   = (*state)[i][0];
     9f8:	e0000000 	and	r0, r0, r0
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
     9fc:	e6000004 	str	r0, [r0], -r4
     a00:	01000004 	tsteq	r0, r4
     a04:	04e65100 	strbteq	r5, [r6], #256	; 0x100
     a08:	04eb0000 	strbteq	r0, [fp], #0
     a0c:	00010000 	andeq	r0, r1, r0
     a10:	0004eb53 	andeq	lr, r4, r3, asr fp
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
     a14:	0004ee00 	andeq	lr, r4, r0, lsl #28
     a18:	f3000400 	vshl.u8	d0, d0, d0
     a1c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
     a2c:	0004d200 	andeq	sp, r4, r0, lsl #4
     a30:	0004da00 	andeq	sp, r4, r0, lsl #20
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
     a34:	50000100 	andpl	r0, r0, r0, lsl #2
     a38:	000004da 	ldrdeq	r0, [r0], -sl
     a3c:	000004dd 	ldrdeq	r0, [r0], -sp
     a40:	dd510001 	ldclle	0, cr0, [r1, #-4]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
     a44:	e0000004 	and	r0, r0, r4
     a48:	04000004 	streq	r0, [r0], #-4
     a4c:	5001f300 	andpl	pc, r1, r0, lsl #6
     a50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
}
     a5c:	d2000000 	andle	r0, r0, #0
{
     a60:	d8000004 	stmdale	r0, {r2}
     a64:	01000004 	tsteq	r0, r4
  for (i = 0; i < 4; ++i)
     a68:	04d85100 	ldrbeq	r5, [r8], #256	; 0x100
    a = (*state)[i][0];
     a6c:	04dd0000 	ldrbeq	r0, [sp], #0
     a70:	00010000 	andeq	r0, r1, r0
    b = (*state)[i][1];
     a74:	0004dd53 	andeq	sp, r4, r3, asr sp
     a78:	0004e000 	andeq	lr, r4, r0
    c = (*state)[i][2];
     a7c:	f3000400 	vshl.u8	d0, d0, d0
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
     a80:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     a90:	00045200 	andeq	r5, r4, r0, lsl #4
     a94:	00045e00 	andeq	r5, r4, r0, lsl #28
     a98:	50000100 	andpl	r0, r0, r0, lsl #2
     a9c:	0000045e 	andeq	r0, r0, lr, asr r4
     aa0:	00000461 	andeq	r0, r0, r1, ror #8
     aa4:	61510001 	cmpvs	r1, r1
     aa8:	8c000004 	stchi	0, cr0, [r0], {4}
     aac:	01000004 	tsteq	r0, r4
     ab0:	00005500 	andeq	r5, r0, r0, lsl #10
	...
     ac0:	00000452 	andeq	r0, r0, r2, asr r4
     ac4:	0000045c 	andeq	r0, r0, ip, asr r4
     ac8:	5c510001 	mrrcpl	0, 0, r0, r1, cr1
     acc:	61000004 	tstvs	r0, r4
     ad0:	01000004 	tsteq	r0, r4
     ad4:	04615200 	strbteq	r5, [r1], #-512	; 0xfffffe00
     ad8:	048c0000 	streq	r0, [ip], #0
     adc:	00010000 	andeq	r0, r1, r0
     ae0:	00000056 	andeq	r0, r0, r6, asr r0
     ae4:	00000000 	andeq	r0, r0, r0
     ae8:	01010100 	mrseq	r0, (UNDEF: 17)
     aec:	00000000 	andeq	r0, r0, r0
     af0:	00045800 	andeq	r5, r4, r0, lsl #16
     af4:	00046200 	andeq	r6, r4, r0, lsl #4
     af8:	30000200 	andcc	r0, r0, r0, lsl #4
     afc:	0004629f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
     b00:	00046600 	andeq	r6, r4, r0, lsl #12
     b04:	39000200 	stmdbcc	r0, {r9}
     b08:	0004669f 	muleq	r4, pc, r6	; <UNPREDICTABLE>
     b0c:	00046e00 	andeq	r6, r4, r0, lsl #28
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
     b10:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     b14:	00000470 	andeq	r0, r0, r0, ror r4
     b18:	0000048c 	andeq	r0, r0, ip, lsl #9
     b1c:	00540001 	subseq	r0, r4, r1
	...
     b2c:	00040e00 	andeq	r0, r4, r0, lsl #28
     b30:	00041a00 	andeq	r1, r4, r0, lsl #20
     b34:	50000100 	andpl	r0, r0, r0, lsl #2
     b38:	0000041a 	andeq	r0, r0, sl, lsl r4
     b3c:	0000041d 	andeq	r0, r0, sp, lsl r4
     b40:	1d510001 	ldclne	0, cr0, [r1, #-4]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
     b44:	52000004 	andpl	r0, r0, #4
     b48:	01000004 	tsteq	r0, r4
     b4c:	00005500 	andeq	r5, r0, r0, lsl #10
	...
     b5c:	0000040e 	andeq	r0, r0, lr, lsl #8
     b60:	00000418 	andeq	r0, r0, r8, lsl r4
     b64:	18510001 	ldmdane	r1, {r0}^
     b68:	1d000004 	stcne	0, cr0, [r0, #-16]
     b6c:	01000004 	tsteq	r0, r4
     b70:	041d5200 	ldreq	r5, [sp], #-512	; 0xfffffe00
     b74:	04520000 	ldrbeq	r0, [r2], #-0
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
     b78:	00010000 	andeq	r0, r1, r0
     b7c:	00000056 	andeq	r0, r0, r6, asr r0
     b80:	00000000 	andeq	r0, r0, r0
     b84:	01010100 	mrseq	r0, (UNDEF: 17)
     b88:	00000000 	andeq	r0, r0, r0
     b8c:	00041400 	andeq	r1, r4, r0, lsl #8
     b90:	00041e00 	andeq	r1, r4, r0, lsl #28
     b94:	30000200 	andcc	r0, r0, r0, lsl #4
     b98:	00041e9f 	muleq	r4, pc, lr	; <UNPREDICTABLE>
     b9c:	00042200 	andeq	r2, r4, r0, lsl #4
     ba0:	31000200 	mrscc	r0, R8_usr
     ba4:	0004229f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
     ba8:	00043400 	andeq	r3, r4, r0, lsl #8
     bac:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     bb0:	00000436 	andeq	r0, r0, r6, lsr r4
  for (i = 0; i < 4; ++i)
     bb4:	00000452 	andeq	r0, r0, r2, asr r4
     bb8:	00540001 	subseq	r0, r4, r1
	...
  for (i = 0; i < 4; ++i)
     bc4:	0003de00 	andeq	sp, r3, r0, lsl #28
     bc8:	00040e00 	andeq	r0, r4, r0, lsl #28
    for (j = 0; j < 4; ++j)
     bcc:	53000100 	movwpl	r0, #256	; 0x100
	...
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
     bd8:	00000003 	andeq	r0, r0, r3
     bdc:	00000000 	andeq	r0, r0, r0
     be0:	00000394 	muleq	r0, r4, r3
     be4:	00000396 	muleq	r0, r6, r3
    for (j = 0; j < 4; ++j)
     be8:	9f300002 	svcls	0x00300002
     bec:	00000396 	muleq	r0, r6, r3
  for (i = 0; i < 4; ++i)
     bf0:	000003c0 	andeq	r0, r0, r0, asr #7
     bf4:	c2510001 	subsgt	r0, r1, #1
    for (j = 0; j < 4; ++j)
     bf8:	d0000003 	andle	r0, r0, r3
}
     bfc:	01000003 	tsteq	r0, r3
  for (i = 0; i < 4; ++i)
     c00:	03d25100 	bicseq	r5, r2, #0, 2
     c04:	03dc0000 	bicseq	r0, ip, #0
     c08:	00010000 	andeq	r0, r1, r0
  temp = (*state)[3][1];
     c0c:	00000051 	andeq	r0, r0, r1, asr r0
	...
  (*state)[1][1] = (*state)[0][1];
     c18:	9c000000 	stcls	0, cr0, [r0], {-0}
  temp = (*state)[0][2];
     c1c:	b8000003 	stmdalt	r0, {r0, r1}
  (*state)[0][2] = (*state)[2][2];
     c20:	01000003 	tsteq	r0, r3
  temp = (*state)[1][2];
     c24:	03ba5300 			; <UNDEFINED> instruction: 0x03ba5300
  (*state)[1][2] = (*state)[3][2];
     c28:	03c80000 	biceq	r0, r8, #0
  temp = (*state)[0][3];
     c2c:	00010000 	andeq	r0, r1, r0
  (*state)[0][3] = (*state)[1][3];
     c30:	0003ca53 	andeq	ip, r3, r3, asr sl
  (*state)[1][3] = (*state)[2][3];
     c34:	0003d400 	andeq	sp, r3, r0, lsl #8
  (*state)[2][3] = (*state)[3][3];
     c38:	53000100 	movwpl	r0, #256	; 0x100
	...
  AddRoundKey(0, state, RoundKey);
     c48:	022e0000 	eoreq	r0, lr, #0
     c4c:	023c0000 	eorseq	r0, ip, #0
  for (round = 1; ; ++round)
     c50:	00010000 	andeq	r0, r1, r0
    MixColumns(state);
     c54:	00023c50 	andeq	r3, r2, r0, asr ip
    AddRoundKey(round, state, RoundKey);
     c58:	00039000 	andeq	r9, r3, r0
     c5c:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     c60:	00039000 	andeq	r9, r3, r0
  for (round = 1; ; ++round)
     c64:	00039400 	andeq	r9, r3, r0, lsl #8
    SubBytes(state);
     c68:	91000300 	mrsls	r0, LR_irq
    ShiftRows(state);
     c6c:	00007fb0 			; <UNDEFINED> instruction: 0x00007fb0
     c70:	00000000 	andeq	r0, r0, r0
    if (round == Nr) {
     c74:	00030000 	andeq	r0, r3, r0
  AddRoundKey(Nr, state, RoundKey);
     c78:	02360000 	eorseq	r0, r6, #0
     c7c:	023c0000 	eorseq	r0, ip, #0
}
     c80:	00020000 	andeq	r0, r2, r0
{
     c84:	023c9f30 	eorseq	r9, ip, #48, 30	; 0xc0
  AddRoundKey(Nr, state, RoundKey);
     c88:	03940000 	orrseq	r0, r4, #0
     c8c:	00010000 	andeq	r0, r1, r0
     c90:	00000059 	andeq	r0, r0, r9, asr r0
  for (round = (Nr - 1); ; --round)
     c94:	00000000 	andeq	r0, r0, r0
    InvMixColumns(state);
     c98:	42000000 	andmi	r0, r0, #0
  for (round = (Nr - 1); ; --round)
     c9c:	4c000002 	stcmi	0, cr0, [r0], {2}
    InvShiftRows(state);
     ca0:	01000003 	tsteq	r0, r3
     ca4:	00005b00 	andeq	r5, r0, r0, lsl #22
	...
    AddRoundKey(round, state, RoundKey);
     cb0:	0000024a 	andeq	r0, r0, sl, asr #4
     cb4:	0000035e 	andeq	r0, r0, lr, asr r3
    if (round == 0) {
     cb8:	005a0001 	subseq	r0, sl, r1
	...
    buf[i] ^= Iv[i];
     cc4:	00024e00 	andeq	r4, r2, r0, lsl #28
     cc8:	00038600 	andeq	r8, r3, r0, lsl #12
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
     ccc:	58000100 	stmdapl	r0, {r8}
	...
  KeyExpansion(ctx->RoundKey, key);
     cd8:	02500000 	subseq	r0, r0, #0
}
     cdc:	033e0000 	teqeq	lr, #0
{
     ce0:	00010000 	andeq	r0, r1, r0
  KeyExpansion(ctx->RoundKey, key);
     ce4:	00000054 	andeq	r0, r0, r4, asr r0
	...
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     cf0:	0001bc00 	andeq	fp, r1, r0, lsl #24
}
     cf4:	0001c600 	andeq	ip, r1, r0, lsl #12
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     cf8:	50000100 	andpl	r0, r0, r0, lsl #2
     cfc:	000001c6 	andeq	r0, r0, r6, asr #3
}
     d00:	0000022e 	andeq	r0, r0, lr, lsr #4
{
     d04:	00590001 	subseq	r0, r9, r1
  Cipher((state_t*)buf, ctx->RoundKey);
     d08:	00000000 	andeq	r0, r0, r0
     d0c:	03000000 	movweq	r0, #0
{
     d10:	00000000 	andeq	r0, r0, r0
  InvCipher((state_t*)buf, ctx->RoundKey);
     d14:	0001c200 	andeq	ip, r1, r0, lsl #4
     d18:	0001c600 	andeq	ip, r1, r0, lsl #12
}
     d1c:	30000200 	andcc	r0, r0, r0, lsl #4
{
     d20:	0001c69f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
     d24:	00022400 	andeq	r2, r2, r0, lsl #8
  uint8_t *Iv = ctx->Iv;
     d28:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     d2c:	00000226 	andeq	r0, r0, r6, lsr #4
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d30:	0000022e 	andeq	r0, r0, lr, lsr #4
    XorWithIv(buf, Iv);
     d34:	00550001 	subseq	r0, r5, r1
	...
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d40:	0001e200 	andeq	lr, r1, r0, lsl #4
    buf += AES_BLOCKLEN;
     d44:	00021e00 	andeq	r1, r2, r0, lsl #28
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d48:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
     d54:	00000001 	andeq	r0, r0, r1
{
     d58:	00010000 	andeq	r0, r1, r0
     d5c:	00000000 	andeq	r0, r0, r0
     d60:	00010000 	andeq	r0, r1, r0
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d64:	00000000 	andeq	r0, r0, r0
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
     d68:	00010000 	andeq	r0, r1, r0
     d6c:	00000000 	andeq	r0, r0, r0
    InvCipher((state_t*)buf, ctx->RoundKey);
     d70:	01e20000 	mvneq	r0, r0
     d74:	01e50000 	mvneq	r0, r0
    XorWithIv(buf, ctx->Iv);
     d78:	00010000 	andeq	r0, r1, r0
     d7c:	0001e550 	andeq	lr, r1, r0, asr r5
     d80:	0001e600 	andeq	lr, r1, r0, lsl #12
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
     d84:	7b000600 	blvc	258c <rsbox+0xd44>
     d88:	27007a00 	strcs	r7, [r0, -r0, lsl #20]
     d8c:	0001e69f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d90:	0001e800 	andeq	lr, r1, r0, lsl #16
     d94:	50000100 	andpl	r0, r0, r0, lsl #2
}
     d98:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
{
     d9c:	000001f4 	strdeq	r0, [r0], -r4
     da0:	007b0006 	rsbseq	r0, fp, r6
     da4:	9f270078 	svcls	0x00270078
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     da8:	000001f4 	strdeq	r0, [r0], -r4
          ctx->Iv[bi] = 0;
     dac:	000001f7 	strdeq	r0, [r0], -r7
     db0:	f7500001 			; <UNDEFINED> instruction: 0xf7500001
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     db4:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
      bi = 0;
     db8:	06000001 	streq	r0, [r0], -r1
    buf[i] = (buf[i] ^ buffer[bi]);
     dbc:	78007b00 	stmdavc	r0, {r8, r9, fp, ip, sp, lr}
     dc0:	f89f2700 			; <UNDEFINED> instruction: 0xf89f2700
     dc4:	fa000001 	blx	dd0 <AES_CTR_xcrypt_buffer+0x34>
     dc8:	01000001 	tsteq	r0, r1
     dcc:	02025000 	andeq	r5, r2, #0
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     dd0:	02060000 	andeq	r0, r6, #0
     dd4:	00060000 	andeq	r0, r6, r0
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
     dd8:	00770078 	rsbseq	r0, r7, r8, ror r0
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
     ddc:	02069f27 	andeq	r9, r6, #39, 30	; 0x9c
     de0:	02090000 	andeq	r0, r9, #0
     de4:	00010000 	andeq	r0, r1, r0
      Cipher((state_t*)buffer,ctx->RoundKey);
     de8:	00020950 	andeq	r0, r2, r0, asr r9
     dec:	00020a00 	andeq	r0, r2, r0, lsl #20
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     df0:	78000600 	stmdavc	r0, {r9, sl}
     df4:	27007700 	strcs	r7, [r0, -r0, lsl #14]
        if (ctx->Iv[bi] == 255)
     df8:	00020a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
     dfc:	00020c00 	andeq	r0, r2, r0, lsl #24
        ctx->Iv[bi] += 1;
     e00:	50000100 	andpl	r0, r0, r0, lsl #2
     e04:	00000214 	andeq	r0, r0, r4, lsl r2
      bi = 0;
     e08:	00000218 	andeq	r0, r0, r8, lsl r2
}
     e0c:	00770006 	rsbseq	r0, r7, r6
int atoi(const char* str) {
     e10:	9f27007a 	svcls	0x0027007a
  int res = 0;
     e14:	00000218 	andeq	r0, r0, r8, lsl r2
    res = res * 10 + str[i] - '0';
     e18:	0000021b 	andeq	r0, r0, fp, lsl r2
     e1c:	1b500001 	blne	1400e28 <__ROM_SIZE__+0x13c0e28>
     e20:	1c000002 	stcne	0, cr0, [r0], {2}
  for (int i = 0; str[i] != '\0'; ++i) {
     e24:	06000002 	streq	r0, [r0], -r2
     e28:	7a007700 	bvc	1ea30 <__RAM_SIZE__+0x16a30>
uint32_t atoh(const char* str) {
     e2c:	1c9f2700 	ldcne	7, cr2, [pc], {0}
  uint32_t hex = 0;
     e30:	26000002 	strcs	r0, [r0], -r2
    } else if (str[i] >= 'a' && str[i] <= 'f') {
     e34:	01000002 	tsteq	r0, r2
     e38:	00005000 	andeq	r5, r0, r0
	...
  for (uint32_t i = 0; str[i] != '\0'; i++) {
     e44:	000001ca 	andeq	r0, r0, sl, asr #3
     e48:	00000226 	andeq	r0, r0, r6, lsr #4
    if (str[i] >= '0' && str[i] <= '9') {
     e4c:	005a0001 	subseq	r0, sl, r1
	...
      value = str[i] - '0';
     e58:	aa000000 	bge	e60 <atoh+0x34>
    } else if (str[i] >= 'A' && str[i] <= 'F') {
     e5c:	b8000001 	stmdalt	r0, {r0}
     e60:	01000001 	tsteq	r0, r1
      value = str[i] - 'A' + 10;
     e64:	01b85000 			; <UNDEFINED> instruction: 0x01b85000
}
     e68:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
int r32(int argc, char *argv[]) {
     e6c:	00040000 	andeq	r0, r4, r0
  if (argc < 2) {
     e70:	9f5001f3 	svcls	0x005001f3
	...
  printf("0x%x: 0x%x\n", addr, data);
     e7c:	017a0000 	cmneq	sl, r0
     e80:	01aa0000 			; <UNDEFINED> instruction: 0x01aa0000
}
     e84:	00010000 	andeq	r0, r1, r0
    printf("Usage: %s <address> (in hex)\n", argv[0]);
     e88:	00000053 	andeq	r0, r0, r3, asr r0
     e8c:	00000000 	andeq	r0, r0, r0
    return -1;
     e90:	00000300 	andeq	r0, r0, r0, lsl #6
     e94:	00000000 	andeq	r0, r0, r0
     e98:	00013200 	andeq	r3, r1, r0, lsl #4
int w32(int argc, char *argv[]) {
     e9c:	00013400 	andeq	r3, r1, r0, lsl #8
  if (argc < 3) {
     ea0:	30000200 	andcc	r0, r0, r0, lsl #4
  uint32_t addr = atoh(argv[1]);
     ea4:	0001349f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     ea8:	00015c00 	andeq	r5, r1, r0, lsl #24
  uint32_t data = atoh(argv[2]);
     eac:	52000100 	andpl	r0, r0, #0, 2
     eb0:	0000015e 	andeq	r0, r0, lr, asr r1
  return 0;
     eb4:	0000016c 	andeq	r0, r0, ip, ror #2
    printf("Usage: %s <address> (in hex) <value> (in hex)\n", argv[0]);
     eb8:	6e520001 	cdpvs	0, 5, cr0, cr2, cr1, {0}
     ebc:	78000001 	stmdavc	r0, {r0}
    return -1;
     ec0:	01000001 	tsteq	r0, r1
     ec4:	00005200 	andeq	r5, r0, r0, lsl #4
	...
  uint32_t addr = atoh(argv[1]);
     ed4:	0000013a 	andeq	r0, r0, sl, lsr r1
     ed8:	00000154 	andeq	r0, r0, r4, asr r1
  uint32_t length = atoi(argv[2]);
     edc:	56530001 	ldrbpl	r0, [r3], -r1
     ee0:	64000001 	strvs	r0, [r0], #-1
  for (uint32_t i = 0, data = 0; i < length; i++) {
     ee4:	01000001 	tsteq	r0, r1
    printf("Usage: %s <address> (in hex) <num_words> (in decimal)\n", argv[0]);
     ee8:	01665300 	cmneq	r6, r0, lsl #6
     eec:	01700000 	cmneq	r0, r0
    return -1;
     ef0:	00010000 	andeq	r0, r1, r0
     ef4:	00000053 	andeq	r0, r0, r3, asr r0
    printf("0x%x: 0x%x\n", addr, data);
     ef8:	00000000 	andeq	r0, r0, r0
     efc:	00000200 	andeq	r0, r0, r0, lsl #4
    addr += 4;
     f00:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
  for (uint32_t i = 0, data = 0; i < length; i++) {
     f04:	fc000000 	stc2	0, cr0, [r0], {-0}
  return 0;
     f08:	02000000 	andeq	r0, r0, #0
}
     f0c:	fc9f3000 	ldc2	0, cr3, [pc], {0}
     f10:	22000000 	andcs	r0, r0, #0
{
     f14:	01000001 	tsteq	r0, r1
  if (argc < 4) {
     f18:	01265e00 			; <UNDEFINED> instruction: 0x01265e00
  uint32_t addr = atoh(argv[1]);
     f1c:	01320000 	teqeq	r2, r0
     f20:	00010000 	andeq	r0, r1, r0
  uint32_t bit_loc = atoi(argv[2]);
     f24:	0000005e 	andeq	r0, r0, lr, asr r0
	...
  uint32_t bit_val = atoi(argv[3]);
     f30:	0000fc00 	andeq	pc, r0, r0, lsl #24
  if (bit_loc > 31) {
     f34:	00011800 	andeq	r1, r1, r0, lsl #16
  if (bit_val != 0 && bit_val != 1) {
     f38:	53000100 	movwpl	r0, #256	; 0x100
  uint32_t data = reg32(addr);
     f3c:	0000011a 	andeq	r0, r0, sl, lsl r1
  data = data | (bit_val << bit_loc);
     f40:	00000126 	andeq	r0, r0, r6, lsr #2
  data = data & ~(!bit_val << bit_loc);
     f44:	00530001 	subseq	r0, r3, r1
	...
    printf("Error: Invalid bit location argument\n");
     f54:	0004c600 	andeq	ip, r4, r0, lsl #12
     f58:	0004cc00 	andeq	ip, r4, r0, lsl #24
    printf("Error: Invalid bit value argument\n");
     f5c:	50000100 	andpl	r0, r0, r0, lsl #2
     f60:	000004cc 	andeq	r0, r0, ip, asr #9
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)> <bit_value(0 or 1)>\n", argv[0]);
     f64:	000004cf 	andeq	r0, r0, pc, asr #9
     f68:	d0700004 	rsbsle	r0, r0, r4
  return -1;
     f6c:	04cf9f7e 	strbeq	r9, [pc], #3966	; f74 <w32_bit+0x60>
     f70:	04d20000 	ldrbeq	r0, [r2], #0
     f74:	00040000 	andeq	r0, r4, r0
     f78:	9f5001f3 	svcls	0x005001f3
	...
  uint32_t addr = atoh(argv[1]);
     f88:	000004c6 	andeq	r0, r0, r6, asr #9
  uint32_t bit_loc = atoi(argv[2]);
     f8c:	000004cf 	andeq	r0, r0, pc, asr #9
     f90:	cf510001 	svcgt	0x00510001
  if (bit_loc > 31) {
     f94:	d2000004 	andle	r0, r0, #4
  uint32_t data = reg32(addr);
     f98:	04000004 	streq	r0, [r0], #-4
  printf("Bit %u @ 0x%08x: %u\n", bit_loc, addr, bit_val);
     f9c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     fa0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    printf("Error: Invalid bit location argument\n");
     fac:	0004ae00 	andeq	sl, r4, r0, lsl #28
     fb0:	0004b700 	andeq	fp, r4, r0, lsl #14
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)\n", argv[0]);
     fb4:	50000100 	andpl	r0, r0, r0, lsl #2
     fb8:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
  return -1;
     fbc:	000004c6 	andeq	r0, r0, r6, asr #9
     fc0:	00540001 	subseq	r0, r4, r1
	...
size_t strlen(const char *str) {
     fcc:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
  while (str[len]) {
     fd0:	b7000004 	strlt	r0, [r0, -r4]
     fd4:	01000004 	tsteq	r0, r4
     fd8:	04b75100 	ldrteq	r5, [r7], #256	; 0x100
  while (*str1 && (*str1 == *str2)) {
     fdc:	04c60000 	strbeq	r0, [r6], #0
    str2++;
     fe0:	00040000 	andeq	r0, r4, r0
  while (*str1 && (*str1 == *str2)) {
     fe4:	9f5101f3 	svcls	0x005101f3
	...
    *(str1++) = *(str2++);
     ff4:	000004ae 	andeq	r0, r0, lr, lsr #9
     ff8:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
  while (*str2) {
     ffc:	b7520001 	ldrblt	r0, [r2, -r1]
  *str1 = '\0';
    1000:	c6000004 	strgt	r0, [r0], -r4
}
    1004:	01000004 	tsteq	r0, r4
  for (i = 0; i < size; i++) {
    1008:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    1014:	04a60000 	strteq	r0, [r6], #0
}
    1018:	04ab0000 	strteq	r0, [fp], #0
  for (i = 0; i < size; i++) {
    101c:	00010000 	andeq	r0, r1, r0
    dest_char[i] = val;
    1020:	0004ab50 	andeq	sl, r4, r0, asr fp
  for (i = 0; i < size; i++) {
    1024:	0004ae00 	andeq	sl, r4, r0, lsl #28
}
    1028:	f3000400 	vshl.u8	d0, d0, d0
void __attribute__((optimize("O0"), weak)) initial_setup(void) {
    102c:	009f5001 	addseq	r5, pc, r1
	...
  char *src = &_etext, *dst = &_data;
    1038:	a6000000 	strge	r0, [r0], -r0
  if (dst != src)
    103c:	ab000004 	blge	1054 <initial_setup+0x28>
    1040:	01000004 	tsteq	r0, r4
    while (dst < &_edata) *(dst++) = *(src++);
    1044:	04ab5100 	strteq	r5, [fp], #256	; 0x100
    1048:	04ae0000 	strteq	r0, [lr], #0
    104c:	00040000 	andeq	r0, r4, r0
    1050:	9f5101f3 	svcls	0x005101f3
	...
  for (dst = &_bss; dst < &_ebss; dst++) *dst = 0;
    1064:	00000036 	andeq	r0, r0, r6, lsr r0
    1068:	36510001 	ldrbcc	r0, [r1], -r1
    106c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    1070:	04000000 	streq	r0, [r0], #-0
    1074:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
  platform_init();
    1078:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
}
    107c:	00000000 	andeq	r0, r0, r0
    1080:	00000300 	andeq	r0, r0, r0, lsl #6
    1084:	04000000 	streq	r0, [r0], #-0
    1088:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    108c:	02000000 	andeq	r0, r0, #0
    1090:	089f3000 	ldmeq	pc, {ip, sp}	; <UNPREDICTABLE>
    1094:	36000000 	strcc	r0, [r0], -r0
static void delete(void) {
    1098:	01000000 	mrseq	r0, (UNDEF: 0)
  __write_char__(BACK_SPACE);
    109c:	00365200 	eorseq	r5, r6, r0, lsl #4
    10a0:	00f40000 	rscseq	r0, r4, r0
  __write_char__(SPACE);
    10a4:	00010000 	andeq	r0, r1, r0
  __write_char__(BACK_SPACE);
    10a8:	00000053 	andeq	r0, r0, r3, asr r0
	...
static void clear_prompt(int char_count) {
    10b4:	00003800 	andeq	r3, r0, r0, lsl #16
  while (char_count) {
    10b8:	00007a00 	andeq	r7, r0, r0, lsl #20
    delete ();
    10bc:	51000100 	mrspl	r0, (UNDEF: 16)
  while (char_count) {
    10c0:	0000007a 	andeq	r0, r0, sl, ror r0
}
    10c4:	00000080 	andeq	r0, r0, r0, lsl #1
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    10c8:	7d710003 	ldclvc	0, cr0, [r1, #-12]!
    auto_load[i].command(0, NULL);
    10cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    10dc:	36000000 	strcc	r0, [r0], -r0
    10e0:	3a000000 	bcc	10e8 <exec_auto_cmds+0x22>
    10e4:	05000000 	streq	r0, [r0, #-0]
}
    10e8:	327f7300 	rsbscc	r7, pc, #0, 6
static int show_history(int argc, char **argv) {
    10ec:	003a9f24 	eorseq	r9, sl, r4, lsr #30
  uint32_t end_index = total_num_commands-1;
    10f0:	004e0000 	subeq	r0, lr, r0
  if (total_num_commands > NUM_HISTORY_ENTRIES) {
    10f4:	00050000 	andeq	r0, r5, r0
    10f8:	24320072 	ldrtcs	r0, [r2], #-114	; 0xffffff8e
    beg_index = total_num_commands - NUM_HISTORY_ENTRIES;
    10fc:	00004e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    1100:	00008000 	andeq	r8, r0, r0
  uint32_t beg_index = 0;
    1104:	73000500 	movwvc	r0, #1280	; 0x500
    printf("%s\n", cmd_history[index % NUM_HISTORY_ENTRIES]);
    1108:	9f24327c 	svcls	0x0024327c
    110c:	00000086 	andeq	r0, r0, r6, lsl #1
    1110:	00000092 	muleq	r0, r2, r0
    1114:	00720005 	rsbseq	r0, r2, r5
  for (uint32_t index = beg_index; index <= end_index; ++index) {
    1118:	929f2432 	addsls	r2, pc, #838860800	; 0x32000000
}
    111c:	ec000000 	stc	0, cr0, [r0], {-0}
    1120:	05000000 	streq	r0, [r0, #-0]
    1124:	327f7300 	rsbscc	r7, pc, #0, 6
    1128:	00009f24 	andeq	r9, r0, r4, lsr #30
int cmd_exec_status(int argc, char **argv) {
    112c:	00000000 	andeq	r0, r0, r0
  printf("%d\n", __cmd_exec_status);
    1130:	00010000 	andeq	r0, r1, r0
    1134:	00000000 	andeq	r0, r0, r0
}
    1138:	000000ae 	andeq	r0, r0, lr, lsr #1
    113c:	000000d8 	ldrdeq	r0, [r0], -r8
    1140:	d8510001 	ldmdale	r1, {r0}^
static int build_info(int argc, char **argv) {
    1144:	dc000000 	stcle	0, cr0, [r0], {-0}
  printf("Build: [" SHELL_VERSION ":" USER_REPO_VERSION "] - [" BUILD_USER
    1148:	02000000 	andeq	r0, r0, #0
}
    114c:	dc779100 	ldflep	f1, [r7], #-0
    1150:	ec000000 	stc	0, cr0, [r0], {-0}
static void execute(int argc, char **argv) {
    1154:	07000000 	streq	r0, [r0, -r0]
    1158:	327f7300 	rsbscc	r7, pc, #0, 6
  for (int i = 0; table[i].command_name != NULL; i++) {
    115c:	22007024 	andcs	r7, r0, #36	; 0x24
	...
    116c:	0000001c 	andeq	r0, r0, ip, lsl r0
    if (strcmp(argv[0], table[i].command_name) == 0) {
    1170:	00000022 	andeq	r0, r0, r2, lsr #32
    1174:	22500001 	subscs	r0, r0, #1
      __cmd_exec_status = table[i].command(argc, &argv[0]);
    1178:	5a000000 	bpl	1180 <execute+0x2c>
    117c:	01000000 	mrseq	r0, (UNDEF: 0)
    1180:	00005c00 	andeq	r5, r0, r0, lsl #24
    1184:	00000000 	andeq	r0, r0, r0
  if (match_found == FALSE) {
    1188:	00010000 	andeq	r0, r1, r0
    printf("\"%s\": command not found. Use \"help\" to list all command.\n",
    118c:	00010100 	andeq	r0, r1, r0, lsl #2
    1190:	001e0000 	andseq	r0, lr, r0
    __cmd_exec_status = -1;
    1194:	00240000 	eoreq	r0, r4, r0
    1198:	00020000 	andeq	r0, r2, r0
}
    119c:	00249f30 	eoreq	r9, r4, r0, lsr pc
    11a0:	00300000 	eorseq	r0, r0, r0
    11a4:	00010000 	andeq	r0, r1, r0
    11a8:	00003050 	andeq	r3, r0, r0, asr r0
int help(int argc, char **argv) {
    11ac:	00003400 	andeq	r3, r0, r0, lsl #8
  if (argc > 1 && (strcmp(argv[1], "-l")==0)) {
    11b0:	70000500 	andvc	r0, r0, r0, lsl #10
    11b4:	9f243400 	svcls	0x00243400
    11b8:	00000034 	andeq	r0, r0, r4, lsr r0
    11bc:	0000005a 	andeq	r0, r0, sl, asr r0
    printf("use: help -l for list only.\n\n");
    11c0:	00500001 	subseq	r0, r0, r1
  bool verbose = true;
    11c4:	00000000 	andeq	r0, r0, r0
    verbose = false;
    11c8:	02000000 	andeq	r0, r0, #0
    printf("\n");
    11cc:	00000000 	andeq	r0, r0, r0
    i++;
    11d0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
  while (table[i].command_name != NULL) {
    11d4:	24000000 	strcs	r0, [r0], #-0
    11d8:	02000000 	andeq	r0, r0, #0
    11dc:	309f3000 	addscc	r3, pc, r0
    printf(table[i].command_name);
    11e0:	34000000 	strcc	r0, [r0], #-0
    if (verbose) {
    11e4:	01000000 	mrseq	r0, (UNDEF: 0)
      printf("\n\t");
    11e8:	00485300 	subeq	r5, r8, r0, lsl #6
      printf(table[i].command_help);
    11ec:	004a0000 	subeq	r0, sl, r0
    11f0:	00010000 	andeq	r0, r1, r0
    11f4:	00005653 	andeq	r5, r0, r3, asr r6
    verbose = false;
    11f8:	00005800 	andeq	r5, r0, r0, lsl #16
}
    11fc:	53000100 	movwpl	r0, #256	; 0x100
	...
    1208:	00000004 	andeq	r0, r0, r4
    120c:	0000001e 	andeq	r0, r0, lr, lsl r0
    1210:	00000024 	andeq	r0, r0, r4, lsr #32
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    1214:	9f300002 	svcls	0x00300002
static void add_command_to_history(const char *cmd_str) {
    1218:	00000024 	andeq	r0, r0, r4, lsr #32
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    121c:	0000005a 	andeq	r0, r0, sl, asr r0
    1220:	00510001 	subseq	r0, r1, r1
	...
  int index = total_num_commands % NUM_HISTORY_ENTRIES;
    1230:	06000000 	streq	r0, [r0], -r0
  memcpy(&cmd_history[index], cmd_str, LINE_BUFF_SIZE);
    1234:	01000000 	mrseq	r0, (UNDEF: 0)
    1238:	00065000 	andeq	r5, r6, r0
    123c:	001c0000 	andseq	r0, ip, r0
    1240:	00010000 	andeq	r0, r1, r0
  total_num_commands++;
    1244:	00000051 	andeq	r0, r0, r1, asr r0
  curr_command_ptr = total_num_commands;
    1248:	00000000 	andeq	r0, r0, r0
    124c:	00000100 	andeq	r0, r0, r0, lsl #2
    1250:	02000000 	andeq	r0, r0, #0
    1254:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
static int parse_line(char **argv, char *line_buff, int argument_size) {
    1258:	02000000 	andeq	r0, r0, #0
    125c:	089f3000 	ldmeq	pc, {ip, sp}	; <UNPREDICTABLE>
  int length = strlen(line_buff);
    1260:	0c000000 	stceq	0, cr0, [r0], {-0}
    1264:	01000000 	mrseq	r0, (UNDEF: 0)
  int argc = 0;
    1268:	00125000 	andseq	r5, r2, r0
         pos++)
    126c:	001c0000 	andseq	r0, ip, r0
    for (; line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    1270:	00010000 	andeq	r0, r1, r0
    1274:	00000050 	andeq	r0, r0, r0, asr r0
    1278:	00000000 	andeq	r0, r0, r0
    127c:	00000300 	andeq	r0, r0, r0, lsl #6
    if (line_buff[pos] == '\t' || line_buff[pos] == SPACE)
    1280:	00000200 	andeq	r0, r0, r0, lsl #4
    1284:	00000800 	andeq	r0, r0, r0, lsl #16
      line_buff[pos] = END_OF_LINE;
    1288:	30000200 	andcc	r0, r0, r0, lsl #4
  while (pos <= length) {
    128c:	0000089f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    if (line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    1290:	00001c00 	andeq	r1, r0, r0, lsl #24
    1294:	52000100 	andpl	r0, r0, #0, 2
	...
      argv[argc++] = &line_buff[pos];
    12a4:	00000110 	andeq	r0, r0, r0, lsl r1
}
    12a8:	0000011a 	andeq	r0, r0, sl, lsl r1
static int prefix_match(char *sub, int len, const char *str) {
    12ac:	1a500001 	bne	14012b8 <__ROM_SIZE__+0x13c12b8>
    12b0:	60000001 	andvs	r0, r0, r1
  if (sub == NULL || str == NULL || len <= 0 || len > strlen(str)) {
    12b4:	04000001 	streq	r0, [r0], #-1
    12b8:	5001f300 	andpl	pc, r1, r0, lsl #6
    12bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
  for (int i = 0; i<len; ++i) {
    12c8:	00011000 	andeq	r1, r1, r0
    if (sub[i] != str[i]) {
    12cc:	00011d00 	andeq	r1, r1, r0, lsl #26
    12d0:	51000100 	mrspl	r0, (UNDEF: 16)
  for (int i = 0; i<len; ++i) {
    12d4:	0000011d 	andeq	r0, r0, sp, lsl r1
}
    12d8:	00000160 	andeq	r0, r0, r0, ror #2
  return TRUE;
    12dc:	00540001 	subseq	r0, r4, r1
	...
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    12ec:	00012001 	andeq	r2, r1, r1
    12f0:	00012200 	andeq	r2, r1, r0, lsl #4
    12f4:	50000100 	andpl	r0, r0, r0, lsl #2
      curr_command_ptr == 0) {
    12f8:	00000122 	andeq	r0, r0, r2, lsr #2
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    12fc:	0000013e 	andeq	r0, r0, lr, lsr r1
    printf("%s", cmd_buff);
    1300:	40550001 	subsmi	r0, r5, r1
    1304:	46000001 	strmi	r0, [r0], -r1
  memset(cmd_buff, 0, LINE_BUFF_SIZE);
    1308:	01000001 	tsteq	r0, r1
    130c:	00005500 	andeq	r5, r0, r0, lsl #10
	...
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    131c:	01280000 			; <UNDEFINED> instruction: 0x01280000
    1320:	01380000 	teqeq	r8, r0
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    1324:	00010000 	andeq	r0, r1, r0
    1328:	00013850 	andeq	r3, r1, r0, asr r8
    132c:	00013b00 	andeq	r3, r1, r0, lsl #22
    1330:	51000100 	mrspl	r0, (UNDEF: 16)
  *char_count = strlen(cmd_buff);
    1334:	00000140 	andeq	r0, r0, r0, asr #2
    1338:	00000142 	andeq	r0, r0, r2, asr #2
  printf("%s", cmd_buff);
    133c:	42500001 	subsmi	r0, r0, #1
    1340:	45000001 	strmi	r0, [r0, #-1]
    1344:	01000001 	tsteq	r0, r1
    1348:	00005100 	andeq	r5, r0, r0, lsl #2
	...
  memset(cmd_buff, 0, LINE_BUFF_SIZE);
    1354:	0000012e 	andeq	r0, r0, lr, lsr #2
    1358:	00000130 	andeq	r0, r0, r0, lsr r1
  *char_count = 0;
    135c:	00530001 	subseq	r0, r3, r1
	...
  curr_command_ptr++;
    1368:	30000000 	andcc	r0, r0, r0
    136c:	34000001 	strcc	r0, [r0], #-1
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    1370:	05000001 	streq	r0, [r0, #-1]
    1374:	31007300 	mrscc	r7, LR_irq
    1378:	01349f1a 	teqeq	r4, sl, lsl pc
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    137c:	013b0000 	teqeq	fp, r0
    1380:	00010000 	andeq	r0, r1, r0
    1384:	00000053 	andeq	r0, r0, r3, asr r0
	...
  *char_count = strlen(cmd_buff);
    1390:	0000a800 	andeq	sl, r0, r0, lsl #16
  printf("%s", cmd_buff);
    1394:	0000b200 	andeq	fp, r0, r0, lsl #4
    1398:	50000100 	andpl	r0, r0, r0, lsl #2
}
    139c:	000000b2 	strheq	r0, [r0], -r2
    13a0:	00000110 	andeq	r0, r0, r0, lsl r1
void set_read_char(int (*func)(void)) { __read_char__ = func; }
    13a4:	01f30004 	mvnseq	r0, r4
    13a8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
void set_read_char2(int (*func)(void)) { __read_char2__ = func; }
    13b4:	00a80000 	adceq	r0, r8, r0
    13b8:	00b50000 	adcseq	r0, r5, r0
void set_write_char(void (*func)(char)) { __write_char__ = func; }
    13bc:	00010000 	andeq	r0, r1, r0
    13c0:	0000b551 	andeq	fp, r0, r1, asr r5
    13c4:	00011000 	andeq	r1, r1, r0
void set_write_char2(void (*func)(char)) { __write_char2__ = func; }
    13c8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
    13d8:	00b80100 	adcseq	r0, r8, r0, lsl #2
  if (cmd_buff == NULL || char_count <= 0) {
    13dc:	00ba0000 	adcseq	r0, sl, r0
static void handle_tab(char *cmd_buff, int *char_count) {
    13e0:	00010000 	andeq	r0, r1, r0
    13e4:	0000ba50 	andeq	fp, r0, r0, asr sl
  int last_match = -1;
    13e8:	0000e600 	andeq	lr, r0, r0, lsl #12
  int match_count = 0;
    13ec:	56000100 	strpl	r0, [r0], -r0, lsl #2
  int i = 0;
    13f0:	000000e8 	andeq	r0, r0, r8, ror #1
    i++;
    13f4:	000000f6 	strdeq	r0, [r0], -r6
  while (table[i].command_name != NULL) { //loop over all commands
    13f8:	00560001 	subseq	r0, r6, r1
	...
    if (prefix_match(cmd_buff, *char_count, table[i].command_name)) {
    1408:	0000c001 	andeq	ip, r0, r1
    140c:	0000c200 	andeq	ip, r0, r0, lsl #4
      match_count++;
    1410:	50000100 	andpl	r0, r0, r0, lsl #2
      printf("\n%s", table[i].command_name);
    1414:	000000c2 	andeq	r0, r0, r2, asr #1
    1418:	000000e6 	andeq	r0, r0, r6, ror #1
      last_match = i;
    141c:	e8550001 	ldmda	r5, {r0}^
  if (match_count == 1) {
    1420:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    1424:	01000000 	mrseq	r0, (UNDEF: 0)
  if (match_count) {
    1428:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    memcpy(cmd_buff, table[last_match].command_name, LINE_BUFF_SIZE);
    143c:	00c80000 	sbceq	r0, r8, r0
    *char_count = strlen(cmd_buff);
    1440:	00d40000 	sbcseq	r0, r4, r0
    1444:	00010000 	andeq	r0, r1, r0
    1448:	0000d450 	andeq	sp, r0, r0, asr r4
    printf("\n");
    144c:	0000da00 	andeq	sp, r0, r0, lsl #20
    1450:	53000100 	movwpl	r0, #256	; 0x100
    prepend_prompt();
    1454:	000000e8 	andeq	r0, r0, r8, ror #1
    printf(PROMPT);
    1458:	000000ea 	andeq	r0, r0, sl, ror #1
    145c:	ea500001 	b	1401468 <__ROM_SIZE__+0x13c1468>
    printf("%s", cmd_buff);
    1460:	ed000000 	stc	0, cr0, [r0, #-0]
    1464:	01000000 	mrseq	r0, (UNDEF: 0)
    1468:	00f05300 	rscseq	r5, r0, r0, lsl #6
    146c:	00f20000 	rscseq	r0, r2, r0
    1470:	00010000 	andeq	r0, r1, r0
    1474:	0000f250 	andeq	pc, r0, r0, asr r2	; <UNPREDICTABLE>
    1478:	0000f500 	andeq	pc, r0, r0, lsl #10
__attribute__((weak)) int active_prompt() { return TRUE; }
    147c:	53000100 	movwpl	r0, #256	; 0x100
	...
  for (int i = 0; i < LINE_BUFF_SIZE; i++) line_buff[i] = 0;
    148c:	00d20000 	sbcseq	r0, r2, r0
    1490:	00d60000 	sbcseq	r0, r6, r0
    1494:	00010000 	andeq	r0, r1, r0
    1498:	0000d652 	andeq	sp, r0, r2, asr r6
  for (int i = 0; i < MAX_ARG_COUNT; i++) argv[i] = NULL;
    149c:	0000e200 	andeq	lr, r0, r0, lsl #4
    14a0:	50000100 	andpl	r0, r0, r0, lsl #2
    14a4:	000000e2 	andeq	r0, r0, r2, ror #1
    14a8:	000000e6 	andeq	r0, r0, r6, ror #1
    14ac:	00530001 	subseq	r0, r3, r1
	...
  int special_key = 0;
    14bc:	60000000 	andvs	r0, r0, r0
        special_key = 1;
    14c0:	6a000000 	bvs	14c8 <shell+0x48>
        line_buff[count] = END_OF_LINE;
    14c4:	01000000 	mrseq	r0, (UNDEF: 0)
    14c8:	006a5000 	rsbeq	r5, sl, r0
    14cc:	007c0000 	rsbseq	r0, ip, r0
        __write_char__(NEW_LINE);
    14d0:	00040000 	andeq	r0, r4, r0
    14d4:	9f5001f3 	svcls	0x005001f3
  add_command_to_history(line_buff);
    14d8:	0000007c 	andeq	r0, r0, ip, ror r0
    14dc:	00000080 	andeq	r0, r0, r0, lsl #1
  argc = parse_line(argv, line_buff, MAX_ARG_COUNT);
    14e0:	80500001 	subshi	r0, r0, r1
    14e4:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
  if (argc > 0) execute(argc, argv);
    14e8:	04000000 	streq	r0, [r0], #-0
}
    14ec:	5001f300 	andpl	pc, r1, r0, lsl #6
        if (!__echo) {
    14f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
        line_buff[count] = END_OF_LINE;
    1504:	00006000 	andeq	r6, r0, r0
    1508:	00006d00 	andeq	r6, r0, r0, lsl #26
        delete ();
    150c:	51000100 	mrspl	r0, (UNDEF: 16)
      if (__echo) {
    1510:	0000006d 	andeq	r0, r0, sp, rrx
    1514:	0000007a 	andeq	r0, r0, sl, ror r0
        __write_char__(c);
    1518:	7a550001 	bvc	1541524 <__ROM_SIZE__+0x1501524>
    151c:	7c000000 	stcvc	0, cr0, [r0], {-0}
          delete ();
    1520:	04000000 	streq	r0, [r0], #-0
          delete ();
    1524:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1528:	00007c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    152c:	00007e00 	andeq	r7, r0, r0, lsl #28
        special_key = 2;
    1530:	51000100 	mrspl	r0, (UNDEF: 16)
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    1534:	0000007e 	andeq	r0, r0, lr, ror r0
        special_key = 0;
    1538:	0000008a 	andeq	r0, r0, sl, lsl #1
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    153c:	8a550001 	bhi	1541548 <__ROM_SIZE__+0x1501548>
        if (!__echo) {
    1540:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
          clear_prompt(count + 4);
    1544:	04000000 	streq	r0, [r0], #-0
    1548:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
        if (c == 'A') {
    154c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
        special_key = 0;
    1558:	70000000 	andvc	r0, r0, r0
          clear_prompt(count);
    155c:	72000000 	andvc	r0, r0, #0
    1560:	01000000 	mrseq	r0, (UNDEF: 0)
          handle_up_arrow(line_buff, &count);
    1564:	00725000 	rsbseq	r5, r2, r0
    1568:	007c0000 	rsbseq	r0, ip, r0
    156c:	00010000 	andeq	r0, r1, r0
        handle_tab(line_buff, &count);
    1570:	00008a54 	andeq	r8, r0, r4, asr sl
    1574:	00009e00 	andeq	r9, r0, r0, lsl #28
      loop();
    1578:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    s = __read_char__();
    1588:	00000078 	andeq	r0, r0, r8, ror r0
    if (s != -1) {
    158c:	0000007c 	andeq	r0, r0, ip, ror r0
      c = (char)s;
    1590:	8a500001 	bhi	140159c <__ROM_SIZE__+0x13c159c>
      if (c == CARRIAGE_RETURN || c == NEW_LINE) {
    1594:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    1598:	01000000 	mrseq	r0, (UNDEF: 0)
      if (c == DELETE || c == BACK_SPACE) {
    159c:	00005600 	andeq	r5, r0, r0, lsl #12
    15a0:	00000000 	andeq	r0, r0, r0
      } else if (c == ESCAPE) {
    15a4:	00020000 	andeq	r0, r2, r0
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    15a8:	00780000 	rsbseq	r0, r8, r0
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    15ac:	007c0000 	rsbseq	r0, ip, r0
    15b0:	00020000 	andeq	r0, r2, r0
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    15b4:	008a9f30 	addeq	r9, sl, r0, lsr pc
    15b8:	009e0000 	addseq	r0, lr, r0
    15bc:	00010000 	andeq	r0, r1, r0
      else if (c == TAB) {
    15c0:	00000055 	andeq	r0, r0, r5, asr r0
        line_buff[count] = c;
    15c4:	00000000 	andeq	r0, r0, r0
    15c8:	00000200 	andeq	r0, r0, r0, lsl #4
    15cc:	00007800 	andeq	r7, r0, r0, lsl #16
        count++;
    15d0:	00007c00 	andeq	r7, r0, r0, lsl #24
  if (argc > 0) execute(argc, argv);
    15d4:	30000200 	andcc	r0, r0, r0, lsl #4
    15d8:	00008c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
}
    15dc:	00009300 	andeq	r9, r0, r0, lsl #6
    15e0:	52000100 	andpl	r0, r0, #0, 2
	...
  setup();
    15f4:	00000030 	andeq	r0, r0, r0, lsr r0
    shell();
    15f8:	0000003a 	andeq	r0, r0, sl, lsr r0
int exec(char *cmd_str) {
    15fc:	3a500001 	bcc	1401608 <__ROM_SIZE__+0x13c1608>
    1600:	4c000000 	stcmi	0, cr0, [r0], {-0}
  argc = parse_line(argv, cmd_str, MAX_ARG_COUNT);
    1604:	04000000 	streq	r0, [r0], #-0
    1608:	5001f300 	andpl	pc, r1, r0, lsl #6
  if (argc > 0) execute(argc, argv);
    160c:	00004c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
  return __cmd_exec_status;
    1610:	00005000 	andeq	r5, r0, r0
}
    1614:	50000100 	andpl	r0, r0, r0, lsl #2
  if (argc > 0) execute(argc, argv);
    1618:	00000050 	andeq	r0, r0, r0, asr r0
    161c:	00000060 	andeq	r0, r0, r0, rrx
    1620:	01f30004 	mvnseq	r0, r4
cmd get_function_addr(char *cmd_str) {
    1624:	00009f50 	andeq	r9, r0, r0, asr pc
	...
  for (int i = 0; table[i].command_name != NULL; i++) {
    1634:	00300000 	eorseq	r0, r0, r0
    1638:	003d0000 	eorseq	r0, sp, r0
    if (strcmp(cmd_str, table[i].command_name) == 0) {
    163c:	00010000 	andeq	r0, r1, r0
    1640:	00003d51 	andeq	r3, r0, r1, asr sp
      return table[i].command;
    1644:	00004c00 	andeq	r4, r0, r0, lsl #24
    1648:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
  return NULL;
    164c:	0000004c 	andeq	r0, r0, ip, asr #32
}
    1650:	0000004e 	andeq	r0, r0, lr, asr #32
    1654:	4e510001 	cdpmi	0, 5, cr0, cr1, cr1, {0}
    1658:	60000000 	andvs	r0, r0, r0
    165c:	01000000 	mrseq	r0, (UNDEF: 0)
    1660:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    166c:	00400000 	subeq	r0, r0, r0
    1670:	00420000 	subeq	r0, r2, r0
    1674:	00010000 	andeq	r0, r1, r0
    1678:	00004250 	andeq	r4, r0, r0, asr r2
    167c:	00004a00 	andeq	r4, r0, r0, lsl #20
    1680:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    168c:	00460000 	subeq	r0, r6, r0
    1690:	004a0000 	subeq	r0, sl, r0
    1694:	00010000 	andeq	r0, r1, r0
    1698:	00000050 	andeq	r0, r0, r0, asr r0
	...
    16ac:	00000800 	andeq	r0, r0, r0, lsl #16
    16b0:	50000100 	andpl	r0, r0, r0, lsl #2
    16b4:	00000008 	andeq	r0, r0, r8
    16b8:	0000001a 	andeq	r0, r0, sl, lsl r0
    16bc:	01f30004 	mvnseq	r0, r4
    16c0:	001a9f50 	andseq	r9, sl, r0, asr pc
    16c4:	001e0000 	andseq	r0, lr, r0
    16c8:	00010000 	andeq	r0, r1, r0
    16cc:	00001e50 	andeq	r1, r0, r0, asr lr
    16d0:	00003000 	andeq	r3, r0, r0
    16d4:	f3000400 	vshl.u8	d0, d0, d0
    16d8:	009f5001 	addseq	r5, pc, r1
	...
    16ec:	0b000000 	bleq	16f4 <cmd_end_+0x1c>
    16f0:	01000000 	mrseq	r0, (UNDEF: 0)
    16f4:	000b5100 	andeq	r5, fp, r0, lsl #2
    16f8:	001a0000 	andseq	r0, sl, r0
    16fc:	00040000 	andeq	r0, r4, r0
    1700:	9f5101f3 	svcls	0x005101f3
    1704:	0000001a 	andeq	r0, r0, sl, lsl r0
    1708:	0000001c 	andeq	r0, r0, ip, lsl r0
    170c:	1c510001 	mrrcne	0, 0, r0, r1, cr1
    1710:	30000000 	andcc	r0, r0, r0
    1714:	04000000 	streq	r0, [r0], #-0
    1718:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    171c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1728:	00000e00 	andeq	r0, r0, r0, lsl #28
    172c:	00001200 	andeq	r1, r0, r0, lsl #4
    1730:	50000100 	andpl	r0, r0, r0, lsl #2
    1734:	00000012 	andeq	r0, r0, r2, lsl r0
    1738:	00000015 	andeq	r0, r0, r5, lsl r0
    173c:	00510001 	subseq	r0, r1, r1
	...
    1748:	00001000 	andeq	r1, r0, r0
    174c:	00001500 	andeq	r1, r0, r0, lsl #10
    1750:	52000100 	andpl	r0, r0, #0, 2
	...
    1760:	00000050 	andeq	r0, r0, r0, asr r0
    1764:	0000005e 	andeq	r0, r0, lr, asr r0
    1768:	5e500001 	cdppl	0, 5, cr0, cr0, cr1, {0}
    176c:	60000000 	andvs	r0, r0, r0
    1770:	04000000 	streq	r0, [r0], #-0
    1774:	5001f300 	andpl	pc, r1, r0, lsl #6
    1778:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    177c:	00000000 	andeq	r0, r0, r0
    1780:	00000400 	andeq	r0, r0, r0, lsl #8
    1784:	00005000 	andeq	r5, r0, r0
    1788:	00005400 	andeq	r5, r0, r0, lsl #8
    178c:	30000200 	andcc	r0, r0, r0, lsl #4
    1790:	0000549f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1794:	00006000 	andeq	r6, r0, r0
    1798:	53000100 	movwpl	r0, #256	; 0x100
	...
    17a4:	00000003 	andeq	r0, r0, r3
    17a8:	00000050 	andeq	r0, r0, r0, asr r0
    17ac:	0000005e 	andeq	r0, r0, lr, asr r0
    17b0:	5e500001 	cdppl	0, 5, cr0, cr0, cr1, {0}
    17b4:	60000000 	andvs	r0, r0, r0
    17b8:	04000000 	streq	r0, [r0], #-0
    17bc:	5001f300 	andpl	pc, r1, r0, lsl #6
    17c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    17cc:	00003a00 	andeq	r3, r0, r0, lsl #20
    17d0:	00004e00 	andeq	r4, r0, r0, lsl #28
    17d4:	50000100 	andpl	r0, r0, r0, lsl #2
    17d8:	0000004e 	andeq	r0, r0, lr, asr #32
    17dc:	00000050 	andeq	r0, r0, r0, asr r0
    17e0:	01f30004 	mvnseq	r0, r4
    17e4:	00009f50 	andeq	r9, r0, r0, asr pc
    17e8:	00000000 	andeq	r0, r0, r0
    17ec:	00050000 	andeq	r0, r5, r0
    17f0:	003a0000 	eorseq	r0, sl, r0
    17f4:	003e0000 	eorseq	r0, lr, r0
    17f8:	00020000 	andeq	r0, r2, r0
    17fc:	003e9f30 	eorseq	r9, lr, r0, lsr pc
    1800:	00500000 	subseq	r0, r0, r0
    1804:	00010000 	andeq	r0, r1, r0
    1808:	00000053 	andeq	r0, r0, r3, asr r0
    180c:	00000000 	andeq	r0, r0, r0
    1810:	3a000300 	bcc	2418 <rsbox+0xbd0>
    1814:	50000000 	andpl	r0, r0, r0
    1818:	01000000 	mrseq	r0, (UNDEF: 0)
    181c:	00005100 	andeq	r5, r0, r0, lsl #2
    1820:	00000000 	andeq	r0, r0, r0
    1824:	00040000 	andeq	r0, r4, r0
    1828:	003a0000 	eorseq	r0, sl, r0
    182c:	004e0000 	subeq	r0, lr, r0
    1830:	00010000 	andeq	r0, r1, r0
    1834:	00004e50 	andeq	r4, r0, r0, asr lr
    1838:	00005000 	andeq	r5, r0, r0
    183c:	f3000400 	vshl.u8	d0, d0, d0
    1840:	009f5001 	addseq	r5, pc, r1
	...
    1850:	00002600 	andeq	r2, r0, r0, lsl #12
    1854:	00002a00 	andeq	r2, r0, r0, lsl #20
    1858:	50000100 	andpl	r0, r0, r0, lsl #2
    185c:	0000002a 	andeq	r0, r0, sl, lsr #32
    1860:	0000002e 	andeq	r0, r0, lr, lsr #32
    1864:	01700003 	cmneq	r0, r3
    1868:	00002e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    186c:	00003800 	andeq	r3, r0, r0, lsl #16
    1870:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1880:	00000026 	andeq	r0, r0, r6, lsr #32
    1884:	0000002a 	andeq	r0, r0, sl, lsr #32
    1888:	2a510001 	bcs	1441894 <__ROM_SIZE__+0x1401894>
    188c:	3a000000 	bcc	1894 <rsbox+0x4c>
    1890:	01000000 	mrseq	r0, (UNDEF: 0)
    1894:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    18a0:	00100000 	andseq	r0, r0, r0
    18a4:	00140000 	andseq	r0, r4, r0
    18a8:	00010000 	andeq	r0, r1, r0
    18ac:	00001450 	andeq	r1, r0, r0, asr r4
    18b0:	00002200 	andeq	r2, r0, r0, lsl #4
    18b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    18c4:	00000010 	andeq	r0, r0, r0, lsl r0
    18c8:	00000016 	andeq	r0, r0, r6, lsl r0
    18cc:	16510001 	ldrbne	r0, [r1], -r1
    18d0:	26000000 	strcs	r0, [r0], -r0
    18d4:	01000000 	mrseq	r0, (UNDEF: 0)
    18d8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    18e8:	00040000 	andeq	r0, r4, r0
    18ec:	00010000 	andeq	r0, r1, r0
    18f0:	00000450 	andeq	r0, r0, r0, asr r4
    18f4:	00001000 	andeq	r1, r0, r0
    18f8:	52000100 	andpl	r0, r0, #0, 2
	...
    1904:	00000001 	andeq	r0, r0, r1
    1908:	00000002 	andeq	r0, r0, r2
    190c:	00000006 	andeq	r0, r0, r6
    1910:	9f300002 	svcls	0x00300002
    1914:	00000006 	andeq	r0, r0, r6
    1918:	00000010 	andeq	r0, r0, r0, lsl r0
    191c:	00500001 	subseq	r0, r0, r1
	...
    192c:	08000001 	stmdaeq	r0, {r0}
    1930:	01000001 	tsteq	r0, r1
    1934:	01085000 	mrseq	r5, (UNDEF: 8)
    1938:	01180000 	tsteq	r8, r0
    193c:	00040000 	andeq	r0, r4, r0
    1940:	9f5001f3 	svcls	0x005001f3
	...
    1950:	00000100 	andeq	r0, r0, r0, lsl #2
    1954:	00000106 	andeq	r0, r0, r6, lsl #2
    1958:	06510001 	ldrbeq	r0, [r1], -r1
    195c:	18000001 	stmdane	r0, {r0}
    1960:	04000001 	streq	r0, [r0], #-1
    1964:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1968:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1974:	00018000 	andeq	r8, r1, r0
    1978:	00018c00 	andeq	r8, r1, r0, lsl #24
    197c:	50000100 	andpl	r0, r0, r0, lsl #2
    1980:	0000018c 	andeq	r0, r0, ip, lsl #3
    1984:	000001e8 	andeq	r0, r0, r8, ror #3
    1988:	01f30004 	mvnseq	r0, r4
    198c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    199c:	00000180 	andeq	r0, r0, r0, lsl #3
    19a0:	0000018a 	andeq	r0, r0, sl, lsl #3
    19a4:	8a510001 	bhi	14419b0 <__ROM_SIZE__+0x14019b0>
    19a8:	8f000001 	svchi	0x00000001
    19ac:	01000001 	tsteq	r0, r1
    19b0:	018f5300 	orreq	r5, pc, r0, lsl #6
    19b4:	01e80000 	mvneq	r0, r0
    19b8:	00040000 	andeq	r0, r4, r0
    19bc:	9f5101f3 	svcls	0x005101f3
	...
    19c8:	00000001 	andeq	r0, r0, r1
    19cc:	00000000 	andeq	r0, r0, r0
    19d0:	00000182 	andeq	r0, r0, r2, lsl #3
    19d4:	0000019e 	muleq	r0, lr, r1
    19d8:	9f300002 	svcls	0x00300002
    19dc:	0000019e 	muleq	r0, lr, r1
    19e0:	000001cc 	andeq	r0, r0, ip, asr #3
    19e4:	cc550001 	mrrcgt	0, 0, r0, r5, cr1
    19e8:	d0000001 	andle	r0, r0, r1
    19ec:	02000001 	andeq	r0, r0, #1
    19f0:	d09f3000 	addsle	r3, pc, r0
    19f4:	d2000001 	andle	r0, r0, #1
    19f8:	01000001 	tsteq	r0, r1
    19fc:	00005500 	andeq	r5, r0, r0, lsl #10
    1a00:	00000000 	andeq	r0, r0, r0
    1a04:	00020000 	andeq	r0, r2, r0
    1a08:	00000000 	andeq	r0, r0, r0
    1a0c:	01820000 	orreq	r0, r2, r0
    1a10:	019a0000 	orrseq	r0, sl, r0
    1a14:	00020000 	andeq	r0, r2, r0
    1a18:	019e9f31 	orrseq	r9, lr, r1, lsr pc
    1a1c:	01cc0000 	biceq	r0, ip, r0
    1a20:	00010000 	andeq	r0, r1, r0
    1a24:	0001cc56 	andeq	ip, r1, r6, asr ip
    1a28:	0001d000 	andeq	sp, r1, r0
    1a2c:	31000200 	mrscc	r0, R8_usr
    1a30:	0001d09f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    1a34:	0001d200 	andeq	sp, r1, r0, lsl #4
    1a38:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1a48:	05f80000 	ldrbeq	r0, [r8, #0]!
    1a4c:	06000000 	streq	r0, [r0], -r0
    1a50:	00010000 	andeq	r0, r1, r0
    1a54:	00060050 	andeq	r0, r6, r0, asr r0
    1a58:	00062400 	andeq	r2, r6, r0, lsl #8
    1a5c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1a60:	00000624 	andeq	r0, r0, r4, lsr #12
    1a64:	00000628 	andeq	r0, r0, r8, lsr #12
    1a68:	01f30004 	mvnseq	r0, r4
    1a6c:	00009f50 	andeq	r9, r0, r0, asr pc
    1a70:	00000000 	andeq	r0, r0, r0
    1a74:	00020000 	andeq	r0, r2, r0
    1a78:	05fc0000 	ldrbeq	r0, [ip, #0]!
    1a7c:	06000000 	streq	r0, [r0], -r0
    1a80:	00020000 	andeq	r0, r2, r0
    1a84:	06009f30 			; <UNDEFINED> instruction: 0x06009f30
    1a88:	06240000 	strteq	r0, [r4], -r0
    1a8c:	00010000 	andeq	r0, r1, r0
    1a90:	00000055 	andeq	r0, r0, r5, asr r0
	...
    1a9c:	d0000000 	andle	r0, r0, r0
    1aa0:	da000005 	ble	1abc <rsbox+0x274>
    1aa4:	01000005 	tsteq	r0, r5
    1aa8:	05da5000 	ldrbeq	r5, [sl]
    1aac:	05dd0000 	ldrbeq	r0, [sp]
    1ab0:	00010000 	andeq	r0, r1, r0
    1ab4:	0005dd51 	andeq	sp, r5, r1, asr sp
    1ab8:	0005f800 	andeq	pc, r5, r0, lsl #16
    1abc:	f3000400 	vshl.u8	d0, d0, d0
    1ac0:	009f5001 	addseq	r5, pc, r1
	...
    1acc:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    1ad0:	e2000005 	and	r0, r0, #5
    1ad4:	01000005 	tsteq	r0, r5
    1ad8:	05ec5000 	strbeq	r5, [ip, #0]!
    1adc:	05f10000 	ldrbeq	r0, [r1, #0]!
    1ae0:	00010000 	andeq	r0, r1, r0
    1ae4:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1af4:	00000a00 	andeq	r0, r0, r0, lsl #20
    1af8:	00000c00 	andeq	r0, r0, r0, lsl #24
    1afc:	53000100 	movwpl	r0, #256	; 0x100
    1b00:	0000000c 	andeq	r0, r0, ip
    1b04:	0000001e 	andeq	r0, r0, lr, lsl r0
    1b08:	74910002 	ldrvc	r0, [r1], #2
    1b0c:	0000001e 	andeq	r0, r0, lr, lsl r0
    1b10:	00000020 	andeq	r0, r0, r0, lsr #32
    1b14:	20530001 	subscs	r0, r3, r1
    1b18:	6c000000 	stcvs	0, cr0, [r0], {-0}
    1b1c:	02000000 	andeq	r0, r0, #0
    1b20:	00749100 	rsbseq	r9, r4, r0, lsl #2
	...
    1b3c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1b40:	12000000 	andne	r0, r0, #0
    1b44:	01000000 	mrseq	r0, (UNDEF: 0)
    1b48:	00125300 	andseq	r5, r2, r0, lsl #6
    1b4c:	00180000 	andseq	r0, r8, r0
    1b50:	00010000 	andeq	r0, r1, r0
    1b54:	00001852 	andeq	r1, r0, r2, asr r8
    1b58:	00001c00 	andeq	r1, r0, r0, lsl #24
    1b5c:	53000100 	movwpl	r0, #256	; 0x100
    1b60:	0000001c 	andeq	r0, r0, ip, lsl r0
    1b64:	00000024 	andeq	r0, r0, r4, lsr #32
    1b68:	70910002 	addsvc	r0, r1, r2
    1b6c:	00000024 	andeq	r0, r0, r4, lsr #32
    1b70:	00000028 	andeq	r0, r0, r8, lsr #32
    1b74:	28510001 	ldmdacs	r1, {r0}^
    1b78:	34000000 	strcc	r0, [r0], #-0
    1b7c:	02000000 	andeq	r0, r0, #0
    1b80:	34709100 	ldrbtcc	r9, [r0], #-256	; 0xffffff00
    1b84:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1b88:	01000000 	mrseq	r0, (UNDEF: 0)
    1b8c:	00385300 	eorseq	r5, r8, r0, lsl #6
    1b90:	00540000 	subseq	r0, r4, r0
    1b94:	00020000 	andeq	r0, r2, r0
    1b98:	00547091 			; <UNDEFINED> instruction: 0x00547091
    1b9c:	00560000 	subseq	r0, r6, r0
    1ba0:	00020000 	andeq	r0, r2, r0
    1ba4:	0056007d 	subseq	r0, r6, sp, ror r0
    1ba8:	006c0000 	rsbeq	r0, ip, r0
    1bac:	00020000 	andeq	r0, r2, r0
    1bb0:	0000787d 	andeq	r7, r0, sp, ror r8
	...
    1bbc:	01180000 	tsteq	r8, r0
    1bc0:	011c0000 	tsteq	ip, r0
    1bc4:	00010000 	andeq	r0, r1, r0
    1bc8:	00011c50 	andeq	r1, r1, r0, asr ip
    1bcc:	00012800 	andeq	r2, r1, r0, lsl #16
    1bd0:	f3000400 	vshl.u8	d0, d0, d0
    1bd4:	009f5001 	addseq	r5, pc, r1
	...
    1be0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1be4:	1f000001 	svcne	0x00000001
    1be8:	01000001 	tsteq	r0, r1
    1bec:	011f5100 	tsteq	pc, r0, lsl #2
    1bf0:	01280000 			; <UNDEFINED> instruction: 0x01280000
    1bf4:	00040000 	andeq	r0, r4, r0
    1bf8:	9f5101f3 	svcls	0x005101f3
	...
    1c04:	00000002 	andeq	r0, r0, r2
    1c08:	0000009c 	muleq	r0, ip, r0
    1c0c:	000000a0 	andeq	r0, r0, r0, lsr #1
    1c10:	9f300002 	svcls	0x00300002
    1c14:	000000a0 	andeq	r0, r0, r0, lsr #1
    1c18:	000000bc 	strheq	r0, [r0], -ip
    1c1c:	00540001 	subseq	r0, r4, r1
	...
    1c34:	94000000 	strls	r0, [r0], #-0
    1c38:	aa000004 	bge	1c50 <rsbox+0x408>
    1c3c:	01000004 	tsteq	r0, r4
    1c40:	04c45000 	strbeq	r5, [r4], #0
    1c44:	04ca0000 	strbeq	r0, [sl], #0
    1c48:	00010000 	andeq	r0, r1, r0
    1c4c:	0004f450 	andeq	pc, r4, r0, asr r4	; <UNPREDICTABLE>
    1c50:	0004f700 	andeq	pc, r4, r0, lsl #14
    1c54:	50000100 	andpl	r0, r0, r0, lsl #2
    1c58:	000004fe 	strdeq	r0, [r0], -lr
    1c5c:	0000051a 	andeq	r0, r0, sl, lsl r5
    1c60:	30500001 	subscc	r0, r0, r1
    1c64:	32000005 	andcc	r0, r0, #5
    1c68:	01000005 	tsteq	r0, r5
    1c6c:	05425000 	strbeq	r5, [r2, #-0]
    1c70:	05460000 	strbeq	r0, [r6, #-0]
    1c74:	00010000 	andeq	r0, r1, r0
    1c78:	00054c50 	andeq	r4, r5, r0, asr ip
    1c7c:	00054f00 	andeq	r4, r5, r0, lsl #30
    1c80:	50000100 	andpl	r0, r0, r0, lsl #2
    1c84:	0000055e 	andeq	r0, r0, lr, asr r5
    1c88:	000005a8 	andeq	r0, r0, r8, lsr #11
    1c8c:	00500001 	subseq	r0, r0, r1
	...
    1c98:	bc000000 	stclt	0, cr0, [r0], {-0}
    1c9c:	c0000004 	andgt	r0, r0, r4
    1ca0:	01000004 	tsteq	r0, r4
    1ca4:	05a85000 	streq	r5, [r8, #0]!
    1ca8:	05ad0000 	streq	r0, [sp, #0]!
    1cac:	00010000 	andeq	r0, r1, r0
    1cb0:	00000050 	andeq	r0, r0, r0, asr r0
    1cb4:	00000000 	andeq	r0, r0, r0
    1cb8:	00000100 	andeq	r0, r0, r0, lsl #2
    1cbc:	00000000 	andeq	r0, r0, r0
    1cc0:	01010000 	mrseq	r0, (UNDEF: 1)
    1cc4:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1cc8:	94000004 	strls	r0, [r0], #-4
    1ccc:	02000004 	andeq	r0, r0, #4
    1cd0:	949f3000 	ldrls	r3, [pc], #0	; 1cd8 <rsbox+0x490>
    1cd4:	96000004 	strls	r0, [r0], -r4
    1cd8:	01000004 	tsteq	r0, r4
    1cdc:	04985500 	ldreq	r5, [r8], #1280	; 0x500
    1ce0:	05040000 	streq	r0, [r4, #-0]
    1ce4:	00010000 	andeq	r0, r1, r0
    1ce8:	00050655 	andeq	r0, r5, r5, asr r6
    1cec:	00050c00 	andeq	r0, r5, r0, lsl #24
    1cf0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    1cf4:	0000050e 	andeq	r0, r0, lr, lsl #10
    1cf8:	0000052c 	andeq	r0, r0, ip, lsr #10
    1cfc:	2c550001 	mrrccs	0, 0, r0, r5, cr1
    1d00:	30000005 	andcc	r0, r0, r5
    1d04:	02000005 	andeq	r0, r0, #5
    1d08:	309f3000 	addscc	r3, pc, r0
    1d0c:	bc000005 	stclt	0, cr0, [r0], {5}
    1d10:	01000005 	tsteq	r0, r5
    1d14:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    1d20:	04940000 	ldreq	r0, [r4], #0
    1d24:	054c0000 	strbeq	r0, [ip, #-0]
    1d28:	00010000 	andeq	r0, r1, r0
    1d2c:	00056654 	andeq	r6, r5, r4, asr r6
    1d30:	0005bc00 	andeq	fp, r5, r0, lsl #24
    1d34:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1d40:	00000006 	andeq	r0, r0, r6
    1d44:	0000045c 	andeq	r0, r0, ip, asr r4
    1d48:	0000045e 	andeq	r0, r0, lr, asr r4
    1d4c:	9f300002 	svcls	0x00300002
    1d50:	0000045e 	andeq	r0, r0, lr, asr r4
    1d54:	00000472 	andeq	r0, r0, r2, ror r4
    1d58:	00530001 	subseq	r0, r3, r1
	...
    1d64:	00047200 	andeq	r7, r4, r0, lsl #4
    1d68:	00048900 	andeq	r8, r4, r0, lsl #18
    1d6c:	53000100 	movwpl	r0, #256	; 0x100
	...
    1d7c:	01280000 			; <UNDEFINED> instruction: 0x01280000
    1d80:	01340000 	teqeq	r4, r0
    1d84:	00010000 	andeq	r0, r1, r0
    1d88:	00013450 	andeq	r3, r1, r0, asr r4
    1d8c:	00017200 	andeq	r7, r1, r0, lsl #4
    1d90:	58000100 	stmdapl	r0, {r8}
    1d94:	00000172 	andeq	r0, r0, r2, ror r1
    1d98:	00000180 	andeq	r0, r0, r0, lsl #3
    1d9c:	01f30004 	mvnseq	r0, r4
    1da0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    1db0:	00000128 	andeq	r0, r0, r8, lsr #2
    1db4:	00000134 	andeq	r0, r0, r4, lsr r1
    1db8:	34510001 	ldrbcc	r0, [r1], #-1
    1dbc:	72000001 	andvc	r0, r0, #1
    1dc0:	01000001 	tsteq	r0, r1
    1dc4:	01725600 	cmneq	r2, r0, lsl #12
    1dc8:	01800000 	orreq	r0, r0, r0
    1dcc:	00040000 	andeq	r0, r4, r0
    1dd0:	9f5101f3 	svcls	0x005101f3
	...
    1ddc:	00010101 	andeq	r0, r1, r1, lsl #2
    1de0:	01300000 	teqeq	r0, r0
    1de4:	015c0000 	cmpeq	ip, r0
    1de8:	00020000 	andeq	r0, r2, r0
    1dec:	015c9f30 	cmpeq	ip, r0, lsr pc
    1df0:	015e0000 	cmpeq	lr, r0
    1df4:	00020000 	andeq	r0, r2, r0
    1df8:	015e9f31 	cmpeq	lr, r1, lsr pc
    1dfc:	016e0000 	cmneq	lr, r0
    1e00:	00020000 	andeq	r0, r2, r0
    1e04:	00009f30 	andeq	r9, r0, r0, lsr pc
    1e08:	00000000 	andeq	r0, r0, r0
    1e0c:	00030000 	andeq	r0, r3, r0
    1e10:	01300000 	teqeq	r0, r0
    1e14:	01340000 	teqeq	r4, r0
    1e18:	00020000 	andeq	r0, r2, r0
    1e1c:	01349f30 	teqeq	r4, r0, lsr pc
    1e20:	01720000 	cmneq	r2, r0
    1e24:	00010000 	andeq	r0, r1, r0
    1e28:	00000055 	andeq	r0, r0, r5, asr r0
	...
    1e34:	00022c00 	andeq	r2, r2, r0, lsl #24
    1e38:	00023400 	andeq	r3, r2, r0, lsl #8
    1e3c:	50000100 	andpl	r0, r0, r0, lsl #2
    1e40:	00000234 	andeq	r0, r0, r4, lsr r2
    1e44:	0000027e 	andeq	r0, r0, lr, ror r2
    1e48:	00550001 	subseq	r0, r5, r1
	...
    1e54:	2c000000 	stccs	0, cr0, [r0], {-0}
    1e58:	37000002 	strcc	r0, [r0, -r2]
    1e5c:	01000002 	tsteq	r0, r2
    1e60:	02375100 	eorseq	r5, r7, #0, 2
    1e64:	027e0000 	rsbseq	r0, lr, #0
    1e68:	00010000 	andeq	r0, r1, r0
    1e6c:	00000054 	andeq	r0, r0, r4, asr r0
	...
    1e78:	00022c00 	andeq	r2, r2, r0, lsl #24
    1e7c:	00023700 	andeq	r3, r2, r0, lsl #14
    1e80:	52000100 	andpl	r0, r0, #0, 2
    1e84:	00000237 	andeq	r0, r0, r7, lsr r2
    1e88:	0000027e 	andeq	r0, r0, lr, ror r2
    1e8c:	01f30004 	mvnseq	r0, r4
    1e90:	00009f52 	andeq	r9, r0, r2, asr pc
    1e94:	00000000 	andeq	r0, r0, r0
    1e98:	00010000 	andeq	r0, r1, r0
    1e9c:	00010100 	andeq	r0, r1, r0, lsl #2
    1ea0:	02320000 	eorseq	r0, r2, #0
    1ea4:	02400000 	subeq	r0, r0, #0
    1ea8:	00020000 	andeq	r0, r2, r0
    1eac:	02409f30 	subeq	r9, r0, #48, 30	; 0xc0
    1eb0:	02740000 	rsbseq	r0, r4, #0
    1eb4:	00010000 	andeq	r0, r1, r0
    1eb8:	00027450 	andeq	r7, r2, r0, asr r4
    1ebc:	00027a00 	andeq	r7, r2, r0, lsl #20
    1ec0:	70000300 	andvc	r0, r0, r0, lsl #6
    1ec4:	027a9f01 	rsbseq	r9, sl, #1, 30
    1ec8:	027e0000 	rsbseq	r0, lr, #0
    1ecc:	00010000 	andeq	r0, r1, r0
    1ed0:	00000050 	andeq	r0, r0, r0, asr r0
    1ed4:	00000000 	andeq	r0, r0, r0
    1ed8:	00000200 	andeq	r0, r0, r0, lsl #4
    1edc:	00023200 	andeq	r3, r2, r0, lsl #4
    1ee0:	00024000 	andeq	r4, r2, r0
    1ee4:	30000200 	andcc	r0, r0, r0, lsl #4
    1ee8:	0002409f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1eec:	00027e00 	andeq	r7, r2, r0, lsl #28
    1ef0:	53000100 	movwpl	r0, #256	; 0x100
	...
    1f00:	0000023a 	andeq	r0, r0, sl, lsr r2
    1f04:	0000023e 	andeq	r0, r0, lr, lsr r2
    1f08:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
    1f0c:	7e000002 	cdpvc	0, 0, cr0, cr0, cr2, {0}
    1f10:	01000002 	tsteq	r0, r2
    1f14:	00005c00 	andeq	r5, r0, r0, lsl #24
	...
    1f24:	000003ae 	andeq	r0, r0, lr, lsr #7
    1f28:	000003c8 	andeq	r0, r0, r8, asr #7
    1f2c:	c8500001 	ldmdagt	r0, {r0}^
    1f30:	40000003 	andmi	r0, r0, r3
    1f34:	01000004 	tsteq	r0, r4
    1f38:	04405800 	strbeq	r5, [r0], #-2048	; 0xfffff800
    1f3c:	04500000 	ldrbeq	r0, [r0], #-0
    1f40:	00010000 	andeq	r0, r1, r0
    1f44:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1f50:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    1f54:	c8000003 	stmdagt	r0, {r0, r1}
    1f58:	01000003 	tsteq	r0, r3
    1f5c:	03c85100 	biceq	r5, r8, #0, 2
    1f60:	04400000 	strbeq	r0, [r0], #-0
    1f64:	00010000 	andeq	r0, r1, r0
    1f68:	00044056 	andeq	r4, r4, r6, asr r0
    1f6c:	00045000 	andeq	r5, r4, r0
    1f70:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1f80:	000003c8 	andeq	r0, r0, r8, asr #7
    1f84:	00000400 	andeq	r0, r0, r0, lsl #8
    1f88:	04550001 	ldrbeq	r0, [r5], #-1
    1f8c:	40000004 	andmi	r0, r0, r4
    1f90:	01000004 	tsteq	r0, r4
    1f94:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    1fa0:	03c80000 	biceq	r0, r8, #0
    1fa4:	04000000 	streq	r0, [r0], #-0
    1fa8:	00010000 	andeq	r0, r1, r0
    1fac:	00040459 	andeq	r0, r4, r9, asr r4
    1fb0:	00044000 	andeq	r4, r4, r0
    1fb4:	59000100 	stmdbpl	r0, {r8}
	...
    1fc0:	00010100 	andeq	r0, r1, r0, lsl #2
    1fc4:	00000000 	andeq	r0, r0, r0
    1fc8:	000003c8 	andeq	r0, r0, r8, asr #7
    1fcc:	000003e6 	andeq	r0, r0, r6, ror #7
    1fd0:	e65a0001 	ldrb	r0, [sl], -r1
    1fd4:	f4000003 	vst4.8	{d0-d3}, [r0], r3
    1fd8:	01000003 	tsteq	r0, r3
    1fdc:	03f45500 	mvnseq	r5, #0, 10
    1fe0:	03fa0000 	mvnseq	r0, #0
    1fe4:	00010000 	andeq	r0, r1, r0
    1fe8:	0004045a 	andeq	r0, r4, sl, asr r4
    1fec:	00040800 	andeq	r0, r4, r0, lsl #16
    1ff0:	5a000100 	bpl	23f8 <rsbox+0xbb0>
	...
    2004:	0000027e 	andeq	r0, r0, lr, ror r2
    2008:	00000290 	muleq	r0, r0, r2
    200c:	90500001 	subsls	r0, r0, r1
    2010:	b6000002 	strlt	r0, [r0], -r2
    2014:	01000002 	tsteq	r0, r2
    2018:	02b65600 	adcseq	r5, r6, #0, 12
    201c:	02b80000 	adcseq	r0, r8, #0
    2020:	00010000 	andeq	r0, r1, r0
    2024:	0002b850 	andeq	fp, r2, r0, asr r8
    2028:	0002ba00 	andeq	fp, r2, r0, lsl #20
    202c:	f3000400 	vshl.u8	d0, d0, d0
    2030:	009f5001 	addseq	r5, pc, r1
	...
    2040:	00027e00 	andeq	r7, r2, r0, lsl #28
    2044:	00029300 	andeq	r9, r2, r0, lsl #6
    2048:	51000100 	mrspl	r0, (UNDEF: 16)
    204c:	00000293 	muleq	r0, r3, r2
    2050:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    2054:	b6550001 	ldrblt	r0, [r5], -r1
    2058:	ba000002 	blt	2068 <rsbox+0x820>
    205c:	01000002 	tsteq	r0, r2
    2060:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    2070:	0000027e 	andeq	r0, r0, lr, ror r2
    2074:	00000293 	muleq	r0, r3, r2
    2078:	93520001 	cmpls	r2, #1
    207c:	b6000002 	strlt	r0, [r0], -r2
    2080:	01000002 	tsteq	r0, r2
    2084:	02b65400 	adcseq	r5, r6, #0, 8
    2088:	02ba0000 	adcseq	r0, sl, #0
    208c:	00010000 	andeq	r0, r1, r0
    2090:	00000052 	andeq	r0, r0, r2, asr r0
	...
    209c:	00029a00 	andeq	r9, r2, r0, lsl #20
    20a0:	0002aa00 	andeq	sl, r2, r0, lsl #20
    20a4:	53000100 	movwpl	r0, #256	; 0x100
    20a8:	000002ae 	andeq	r0, r0, lr, lsr #5
    20ac:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    20b0:	00530001 	subseq	r0, r3, r1
	...
    20bc:	c0000000 	andgt	r0, r0, r0
    20c0:	da000000 	ble	20c8 <rsbox+0x880>
    20c4:	01000000 	mrseq	r0, (UNDEF: 0)
    20c8:	00da5000 	sbcseq	r5, sl, r0
    20cc:	01000000 	mrseq	r0, (UNDEF: 0)
    20d0:	00040000 	andeq	r0, r4, r0
    20d4:	9f5001f3 	svcls	0x005001f3
	...
    20e4:	000000c0 	andeq	r0, r0, r0, asr #1
    20e8:	000000da 	ldrdeq	r0, [r0], -sl
    20ec:	da510001 	ble	14420f8 <__ROM_SIZE__+0x14020f8>
    20f0:	00000000 	andeq	r0, r0, r0
    20f4:	04000001 	streq	r0, [r0], #-1
    20f8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    20fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2100:	00000000 	andeq	r0, r0, r0
    2104:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    2108:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    210c:	01000000 	mrseq	r0, (UNDEF: 0)
    2110:	00005500 	andeq	r5, r0, r0, lsl #10
    2114:	00000000 	andeq	r0, r0, r0
    2118:	00010000 	andeq	r0, r1, r0
    211c:	00000000 	andeq	r0, r0, r0
    2120:	000000c8 	andeq	r0, r0, r8, asr #1
    2124:	000000d4 	ldrdeq	r0, [r0], -r4
    2128:	9f300002 	svcls	0x00300002
    212c:	000000d4 	ldrdeq	r0, [r0], -r4
    2130:	000000d6 	ldrdeq	r0, [r0], -r6
    2134:	d6540001 	ldrble	r0, [r4], -r1
    2138:	da000000 	ble	2140 <rsbox+0x8f8>
    213c:	02000000 	andeq	r0, r0, #0
    2140:	009f3000 	addseq	r3, pc, r0
	...
    214c:	0000da00 	andeq	sp, r0, r0, lsl #20
    2150:	0000f400 	andeq	pc, r0, r0, lsl #8
    2154:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2164:	01e80000 	mvneq	r0, r0
    2168:	01f30000 	mvnseq	r0, r0
    216c:	00010000 	andeq	r0, r1, r0
    2170:	0001f350 	andeq	pc, r1, r0, asr r3	; <UNPREDICTABLE>
    2174:	00022200 	andeq	r2, r2, r0, lsl #4
    2178:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    217c:	00000222 	andeq	r0, r0, r2, lsr #4
    2180:	0000022c 	andeq	r0, r0, ip, lsr #4
    2184:	00500001 	subseq	r0, r0, r1
	...
    2190:	00020600 	andeq	r0, r2, r0, lsl #12
    2194:	00021200 	andeq	r1, r2, r0, lsl #4
    2198:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    21a8:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
    21ac:	032d0000 			; <UNDEFINED> instruction: 0x032d0000
    21b0:	00010000 	andeq	r0, r1, r0
    21b4:	00032d50 	andeq	r2, r3, r0, asr sp
    21b8:	00037000 	andeq	r7, r3, r0
    21bc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    21c0:	00000370 	andeq	r0, r0, r0, ror r3
    21c4:	00000378 	andeq	r0, r0, r8, ror r3
    21c8:	01f30004 	mvnseq	r0, r4
    21cc:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    21dc:	00000320 	andeq	r0, r0, r0, lsr #6
    21e0:	0000032a 	andeq	r0, r0, sl, lsr #6
    21e4:	2a510001 	bcs	14421f0 <__ROM_SIZE__+0x14021f0>
    21e8:	70000003 	andvc	r0, r0, r3
    21ec:	01000003 	tsteq	r0, r3
    21f0:	03705500 	cmneq	r0, #0, 10
    21f4:	03780000 	cmneq	r8, #0
    21f8:	00040000 	andeq	r0, r4, r0
    21fc:	9f5101f3 	svcls	0x005101f3
	...
    2208:	03500000 	cmpeq	r0, #0
    220c:	035d0000 	cmpeq	sp, #0
    2210:	00010000 	andeq	r0, r1, r0
    2214:	00000053 	andeq	r0, r0, r3, asr r0
	...
    2224:	0002ba00 	andeq	fp, r2, r0, lsl #20
    2228:	0002d600 	andeq	sp, r2, r0, lsl #12
    222c:	50000100 	andpl	r0, r0, r0, lsl #2
    2230:	000002d6 	ldrdeq	r0, [r0], -r6
    2234:	000002dc 	ldrdeq	r0, [r0], -ip
    2238:	dc540001 	mrrcle	0, 0, r0, r4, cr1
    223c:	e3000002 	movw	r0, #2
    2240:	01000002 	tsteq	r0, r2
    2244:	02e35000 	rsceq	r5, r3, #0
    2248:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
    224c:	00010000 	andeq	r0, r1, r0
    2250:	00000054 	andeq	r0, r0, r4, asr r0
	...
    2260:	0002ba00 	andeq	fp, r2, r0, lsl #20
    2264:	0002d400 	andeq	sp, r2, r0, lsl #8
    2268:	51000100 	mrspl	r0, (UNDEF: 16)
    226c:	000002d4 	ldrdeq	r0, [r0], -r4
    2270:	000002dc 	ldrdeq	r0, [r0], -ip
    2274:	01f30004 	mvnseq	r0, r4
    2278:	02dc9f51 	sbcseq	r9, ip, #324	; 0x144
    227c:	02e00000 	rsceq	r0, r0, #0
    2280:	00010000 	andeq	r0, r1, r0
    2284:	0002e051 	andeq	lr, r2, r1, asr r0
    2288:	00032000 	andeq	r2, r3, r0
    228c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    2298:	02f80000 	rscseq	r0, r8, #0
    229c:	03000000 	movweq	r0, #0
    22a0:	00010000 	andeq	r0, r1, r0
    22a4:	00000051 	andeq	r0, r0, r1, asr r0
	...
    22b0:	00008800 	andeq	r8, r0, r0, lsl #16
    22b4:	00008e00 	andeq	r8, r0, r0, lsl #28
    22b8:	50000100 	andpl	r0, r0, r0, lsl #2
    22bc:	0000008e 	andeq	r0, r0, lr, lsl #1
    22c0:	0000009a 	muleq	r0, sl, r0
    22c4:	00540001 	subseq	r0, r4, r1
    22c8:	00000000 	andeq	r0, r0, r0
    22cc:	Address 0x00000000000022cc is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	000003c0 	andeq	r0, r0, r0, asr #7
  14:	00000010 	andeq	r0, r0, r0, lsl r0
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01680002 	cmneq	r8, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  34:	00000064 	andeq	r0, r0, r4, rrx
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	01fc0002 	mvnseq	r0, r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	00000434 	andeq	r0, r0, r4, lsr r4
  54:	00000064 	andeq	r0, r0, r4, rrx
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	02900002 	addseq	r0, r0, #2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00000498 	muleq	r0, r8, r4
  74:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	03ba0002 			; <UNDEFINED> instruction: 0x03ba0002
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00000524 	andeq	r0, r0, r4, lsr #10
  94:	00000002 	andeq	r0, r0, r2
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	04720002 	ldrbteq	r0, [r2], #-2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00000528 	andeq	r0, r0, r8, lsr #10
  b4:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	068b0002 	streq	r0, [fp], r2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	000005d4 	ldrdeq	r0, [r0], -r4
  d4:	0000025c 	andeq	r0, r0, ip, asr r2
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	0a080002 	beq	2000f4 <__ROM_SIZE__+0x1c00f4>
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00000830 	andeq	r0, r0, r0, lsr r8
  f4:	000005e0 	andeq	r0, r0, r0, ror #11
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	169f0002 	ldrne	r0, [pc], r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00000e10 	andeq	r0, r0, r0, lsl lr
 114:	0000005a 	andeq	r0, r0, sl, asr r0
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	17ef0002 	strbne	r0, [pc, r2]!
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00000e6c 	andeq	r0, r0, ip, ror #28
 134:	00000160 	andeq	r0, r0, r0, ror #2
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	1d730002 	ldclne	0, cr0, [r3, #-8]!
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00000fcc 	andeq	r0, r0, ip, asr #31
 154:	00000060 	andeq	r0, r0, r0, rrx
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	1f9d0002 	svcne	0x009d0002
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	0000102c 	andeq	r1, r0, ip, lsr #32
 174:	00000628 	andeq	r0, r0, r8, lsr #12
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000000b3 	strheq	r0, [r0], -r3
       4:	00900003 	addseq	r0, r0, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
      24:	2f657661 	svccs	0x00657661
      28:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
      2c:	7463652f 	strbtvc	r6, [r3], #-1327	; 0xfffffad1
      30:	61632f66 	cmnvs	r3, r6, ror #30
      34:	682f0072 	stmdavs	pc!, {r1, r4, r5, r6}	; <UNPREDICTABLE>
      38:	2f656d6f 	svccs	0x00656d6f
      3c:	61647264 	cmnvs	r4, r4, ror #4
      40:	652f6576 	strvs	r6, [pc, #-1398]!	; fffffad2 <_STACK_TOP_+0xdfff7ad6>
      44:	2f626f66 	svccs	0x00626f66
      48:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
      4c:	68732f6c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
      50:	006c6c65 	rsbeq	r6, ip, r5, ror #24
      54:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffa0 <_STACK_TOP_+0xdfff7fa4>
      58:	72642f65 	rsbvc	r2, r4, #404	; 0x194
      5c:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
      60:	6f66652f 	svcvs	0x0066652f
      64:	68732f62 	ldmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
      68:	2f6c6c65 	svccs	0x006c6c65
      6c:	2f62696c 	svccs	0x0062696c
      70:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
      74:	00006674 	andeq	r6, r0, r4, ror r6
      78:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
      7c:	0100632e 	tsteq	r0, lr, lsr #6
      80:	68730000 	ldmdavs	r3!, {}^	; <UNPREDICTABLE>
      84:	2e6c6c65 	cdpcs	12, 6, cr6, cr12, cr5, {3}
      88:	00020068 	andeq	r0, r2, r8, rrx
      8c:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
      90:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
      94:	00030068 	andeq	r0, r3, r8, rrx
      98:	21050000 	mrscs	r0, (UNDEF: 5)
      9c:	c0020500 	andgt	r0, r2, r0, lsl #10
      a0:	16000003 	strne	r0, [r0], -r3
      a4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
      a8:	20062106 	andcs	r2, r6, r6, lsl #2
      ac:	01052f06 	tsteq	r5, r6, lsl #30
      b0:	04021306 	streq	r1, [r2], #-774	; 0xfffffcfa
      b4:	fa010100 	blx	404bc <__ROM_SIZE__+0x4bc>
      b8:	03000000 	movweq	r0, #0
      bc:	00004600 	andeq	r4, r0, r0, lsl #12
      c0:	fb010200 	blx	408ca <__ROM_SIZE__+0x8ca>
      c4:	01000d0e 	tsteq	r0, lr, lsl #26
      c8:	00010101 	andeq	r0, r1, r1, lsl #2
      cc:	00010000 	andeq	r0, r1, r0
      d0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
      d4:	2f656d6f 	svccs	0x00656d6f
      d8:	61647264 	cmnvs	r4, r4, ror #4
      dc:	652f6576 	strvs	r6, [pc, #-1398]!	; fffffb6e <_STACK_TOP_+0xdfff7b72>
      e0:	2f626f66 	svccs	0x00626f66
      e4:	66746365 	ldrbtvs	r6, [r4], -r5, ror #6
      e8:	7261632f 	rsbvc	r6, r1, #-1140850688	; 0xbc000000
      ec:	616c702f 	cmnvs	ip, pc, lsr #32
      f0:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
      f4:	61752f6d 	cmnvs	r5, sp, ror #30
      f8:	00007472 	andeq	r7, r0, r2, ror r4
      fc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     100:	0100632e 	tsteq	r0, lr, lsr #6
     104:	05000000 	streq	r0, [r0, #-0]
     108:	02050014 	andeq	r0, r5, #20
     10c:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     110:	06011203 	streq	r1, [r1], -r3, lsl #4
     114:	00050501 	andeq	r0, r5, r1, lsl #10
     118:	06010402 	streq	r0, [r1], -r2, lsl #8
     11c:	00090522 	andeq	r0, r9, r2, lsr #10
     120:	11010402 	tstne	r1, r2, lsl #8
     124:	02000b05 	andeq	r0, r0, #5120	; 0x1400
     128:	01060104 	tsteq	r6, r4, lsl #2
     12c:	02000905 	andeq	r0, r0, #81920	; 0x14000
     130:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
     134:	053f0603 	ldreq	r0, [pc, #-1539]!	; fffffb39 <_STACK_TOP_+0xdfff7b3d>
     138:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
     13c:	052f0603 	streq	r0, [pc, #-1539]!	; fffffb41 <_STACK_TOP_+0xdfff7b45>
     140:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
     144:	05053001 	streq	r3, [r5, #-1]
     148:	20061f06 	andcs	r1, r6, r6, lsl #30
     14c:	052f0105 	streq	r0, [pc, #-261]!	; 4f <vector_table+0x4f>
     150:	05000611 	streq	r0, [r0, #-1553]	; 0xfffff9ef
     154:	0003f402 	andeq	pc, r3, r2, lsl #8
     158:	03051400 	movweq	r1, #21504	; 0x5400
     15c:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
     160:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
     164:	02001d05 	andeq	r1, r0, #320	; 0x140
     168:	3c060104 	stfccs	f0, [r6], {4}
     16c:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
     170:	01060104 	tsteq	r6, r4, lsl #2
     174:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
     178:	16052f01 	strne	r2, [r5], -r1, lsl #30
     17c:	03054c06 	movweq	r4, #23558	; 0x5c06
     180:	060b0514 			; <UNDEFINED> instruction: 0x060b0514
     184:	06030501 	streq	r0, [r3], -r1, lsl #10
     188:	060c053f 			; <UNDEFINED> instruction: 0x060c053f
     18c:	06030501 	streq	r0, [r3], -r1, lsl #10
     190:	060c052f 	streq	r0, [ip], -pc, lsr #10
     194:	06030501 	streq	r0, [r3], -r1, lsl #10
     198:	060a0531 			; <UNDEFINED> instruction: 0x060a0531
     19c:	06030501 	streq	r0, [r3], -r1, lsl #10
     1a0:	060c0531 			; <UNDEFINED> instruction: 0x060c0531
     1a4:	06030501 	streq	r0, [r3], -r1, lsl #10
     1a8:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
     1ac:	3d010501 	cfstr32cc	mvfx0, [r1, #-4]
     1b0:	01000402 	tsteq	r0, r2, lsl #8
     1b4:	0000fb01 	andeq	pc, r0, r1, lsl #22
     1b8:	47000300 	strmi	r0, [r0, -r0, lsl #6]
     1bc:	02000000 	andeq	r0, r0, #0
     1c0:	0d0efb01 	vstreq	d15, [lr, #-4]
     1c4:	01010100 	mrseq	r0, (UNDEF: 17)
     1c8:	00000001 	andeq	r0, r0, r1
     1cc:	01000001 	tsteq	r0, r1
     1d0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 11c <vector_table+0x11c>
     1d4:	72642f65 	rsbvc	r2, r4, #404	; 0x194
     1d8:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
     1dc:	6f66652f 	svcvs	0x0066652f
     1e0:	63652f62 	cmnvs	r5, #392	; 0x188
     1e4:	632f6674 			; <UNDEFINED> instruction: 0x632f6674
     1e8:	702f7261 	eorvc	r7, pc, r1, ror #4
     1ec:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
     1f0:	2f6d726f 	svccs	0x006d726f
     1f4:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     1f8:	61750000 	cmnvs	r5, r0
     1fc:	2e327472 	mrccs	4, 1, r7, cr2, cr2, {3}
     200:	00010063 	andeq	r0, r1, r3, rrx
     204:	15050000 	strne	r0, [r5, #-0]
     208:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
     20c:	03000004 	movweq	r0, #4
     210:	01060112 	tsteq	r6, r2, lsl r1
     214:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
     218:	22060104 	andcs	r0, r6, #4, 2
     21c:	02000905 	andeq	r0, r0, #81920	; 0x14000
     220:	05110104 	ldreq	r0, [r1, #-260]	; 0xfffffefc
     224:	0402000b 	streq	r0, [r2], #-11
     228:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
     22c:	04020009 	streq	r0, [r2], #-9
     230:	03052e01 	movweq	r2, #24065	; 0x5e01
     234:	0c053f06 	stceq	15, cr3, [r5], {6}
     238:	03050106 	movweq	r0, #20742	; 0x5106
     23c:	06052f06 	streq	r2, [r5], -r6, lsl #30
     240:	01050106 	tsteq	r5, r6, lsl #2
     244:	06050530 			; <UNDEFINED> instruction: 0x06050530
     248:	0520061f 	streq	r0, [r0, #-1567]!	; 0xfffff9e1
     24c:	12052f01 	andne	r2, r5, #1, 30
     250:	02050006 	andeq	r0, r5, #6
     254:	00000458 	andeq	r0, r0, r8, asr r4
     258:	13030514 	movwne	r0, #13588	; 0x3514
     25c:	01060a05 	tsteq	r6, r5, lsl #20
     260:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
     264:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
     268:	053c0601 	ldreq	r0, [ip, #-1537]!	; 0xfffff9ff
     26c:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
     270:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
     274:	01053e0a 	tsteq	r5, sl, lsl #28
     278:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
     27c:	1403054c 	strne	r0, [r3], #-1356	; 0xfffffab4
     280:	01060c05 	tsteq	r6, r5, lsl #24
     284:	3f060305 	svccc	0x00060305
     288:	01060d05 	tsteq	r6, r5, lsl #26
     28c:	2f060305 	svccs	0x00060305
     290:	01060d05 	tsteq	r6, r5, lsl #26
     294:	31060305 	tstcc	r6, r5, lsl #6
     298:	01060b05 	tsteq	r6, r5, lsl #22
     29c:	31060305 	tstcc	r6, r5, lsl #6
     2a0:	01060d05 	tsteq	r6, r5, lsl #26
     2a4:	31060305 	tstcc	r6, r5, lsl #6
     2a8:	01060c05 	tsteq	r6, r5, lsl #24
     2ac:	023d0105 	eorseq	r0, sp, #1073741825	; 0x40000001
     2b0:	01010004 	tsteq	r1, r4
     2b4:	00000116 	andeq	r0, r0, r6, lsl r1
     2b8:	00ac0003 	adceq	r0, ip, r3
     2bc:	01020000 	mrseq	r0, (UNDEF: 2)
     2c0:	000d0efb 	strdeq	r0, [sp], -fp
     2c4:	01010101 	tsteq	r1, r1, lsl #2
     2c8:	01000000 	mrseq	r0, (UNDEF: 0)
     2cc:	2f010000 	svccs	0x00010000
     2d0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     2d4:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
     2d8:	2f657661 	svccs	0x00657661
     2dc:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
     2e0:	7463652f 	strbtvc	r6, [r3], #-1327	; 0xfffffad1
     2e4:	61632f66 	cmnvs	r3, r6, ror #30
     2e8:	6c702f72 	ldclvs	15, cr2, [r0], #-456	; 0xfffffe38
     2ec:	6f667461 	svcvs	0x00667461
     2f0:	2f006d72 	svccs	0x00006d72
     2f4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     2f8:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
     2fc:	2f657661 	svccs	0x00657661
     300:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
     304:	7463652f 	strbtvc	r6, [r3], #-1327	; 0xfffffad1
     308:	61632f66 	cmnvs	r3, r6, ror #30
     30c:	6c702f72 	ldclvs	15, cr2, [r0], #-456	; 0xfffffe38
     310:	6f667461 	svcvs	0x00667461
     314:	752f6d72 	strvc	r6, [pc, #-3442]!	; fffff5aa <_STACK_TOP_+0xdfff75ae>
     318:	00747261 	rsbseq	r7, r4, r1, ror #4
     31c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 268 <vector_table+0x268>
     320:	72642f65 	rsbvc	r2, r4, #404	; 0x194
     324:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
     328:	6f66652f 	svcvs	0x0066652f
     32c:	68732f62 	ldmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
     330:	2f6c6c65 	svccs	0x006c6c65
     334:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
     338:	7000006c 	andvc	r0, r0, ip, rrx
     33c:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
     340:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
     344:	00010063 	andeq	r0, r1, r3, rrx
     348:	72617500 	rsbvc	r7, r1, #0, 10
     34c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     350:	75000002 	strvc	r0, [r0, #-2]
     354:	32747261 	rsbscc	r7, r4, #268435462	; 0x10000006
     358:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     35c:	68730000 	ldmdavs	r3!, {}^	; <UNPREDICTABLE>
     360:	2e6c6c65 	cdpcs	12, 6, cr6, cr12, cr5, {3}
     364:	00030068 	andeq	r0, r3, r8, rrx
     368:	12050000 	andne	r0, r5, #0
     36c:	98020500 	stmdals	r2, {r8, sl}
     370:	03000004 	movweq	r0, #4
     374:	03050121 	movweq	r0, #20769	; 0x5121
     378:	060c0515 			; <UNDEFINED> instruction: 0x060c0515
     37c:	06030501 	streq	r0, [r3], -r1, lsl #10
     380:	060c0576 			; <UNDEFINED> instruction: 0x060c0576
     384:	06030501 	streq	r0, [r3], -r1, lsl #10
     388:	060b0569 	streq	r0, [fp], -r9, ror #10
     38c:	06030501 	streq	r0, [r3], -r1, lsl #10
     390:	060d0559 			; <UNDEFINED> instruction: 0x060d0559
     394:	06030501 	streq	r0, [r3], -r1, lsl #10
     398:	060c052f 	streq	r0, [ip], -pc, lsr #10
     39c:	06030501 	streq	r0, [r3], -r1, lsl #10
     3a0:	060c0569 	streq	r0, [ip], -r9, ror #10
     3a4:	06030501 	streq	r0, [r3], -r1, lsl #10
     3a8:	060e054b 	streq	r0, [lr], -fp, asr #10
     3ac:	06030501 	streq	r0, [r3], -r1, lsl #10
     3b0:	060d052f 	streq	r0, [sp], -pc, lsr #10
     3b4:	67010501 	strvs	r0, [r1, -r1, lsl #10]
     3b8:	50061605 	andpl	r1, r6, r5, lsl #12
     3bc:	2f210505 	svccs	0x00210505
int ping(int argc, char** argv) {
     3c0:	3d3d2f2f 	ldccc	15, cr2, [sp, #-188]!	; 0xffffff44
    printf("MESG Received a ping\n");
     3c4:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
}
     3c8:	0009023d 	andeq	r0, r9, sp, lsr r2
     3cc:	00ab0101 	adceq	r0, fp, r1, lsl #2
void uputc(char c) {
     3d0:	00030000 	andeq	r0, r3, r0
  while ((UARTFR >> 5) & 1)
     3d4:	0000007f 	andeq	r0, r0, pc, ror r0
     3d8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  UART_DR = c;
     3dc:	0101000d 	tsteq	r1, sp
  if (c == '\n')
     3e0:	00000101 	andeq	r0, r0, r1, lsl #2
}
     3e4:	00000100 	andeq	r0, r0, r0, lsl #2
    uputc('\r');
     3e8:	6f682f01 	svcvs	0x00682f01
}
     3ec:	642f656d 	strtvs	r6, [pc], #-1389	; 3f4 <ugetc>
     3f0:	76616472 			; <UNDEFINED> instruction: 0x76616472
  if (!((UARTFR >> 4) & 1)) return UART_DR;
     3f4:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
     3f8:	652f626f 	strvs	r6, [pc, #-623]!	; 191 <vector_table+0x191>
     3fc:	2f667463 	svccs	0x00667463
     400:	2f726163 	svccs	0x00726163
  return -1;
     404:	74616c70 	strbtvc	r6, [r1], #-3184	; 0xfffff390
}
     408:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
     40c:	73752f00 	cmnvc	r5, #0, 30
  UARTCTL = 0;
     410:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     414:	63672f62 	cmnvs	r7, #392	; 0x188
  UARTIBRD = 8;
     418:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
  UARTFBRD = 44;
     41c:	6f6e2d6d 	svcvs	0x006e2d6d
  UARTCC = 0;
     420:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  UARTLCRH = 0x60;
     424:	2f696261 	svccs	0x00696261
  UARTCTL = 0x301;
     428:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
}
     42c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
     430:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
void u2putc(char c) {
     434:	00006564 	andeq	r6, r0, r4, ror #10
  while ((UART2FR >> 5) & 1)
     438:	74636576 	strbtvc	r6, [r3], #-1398	; 0xfffffa8a
     43c:	745f726f 	ldrbvc	r7, [pc], #-623	; 444 <u2putc+0x10>
  UART2_DR = c;
     440:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
  if (c == '\n')
     444:	0100632e 	tsteq	r0, lr, lsr #6
}
     448:	74730000 	ldrbtvc	r0, [r3], #-0
    u2putc('\r');
     44c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
}
     450:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     454:	05000000 	streq	r0, [r0, #-0]
  if (!((UART2FR >> 4) & 1)) return UART2_DR;
     458:	0205001c 	andeq	r0, r5, #28
     45c:	00000524 	andeq	r0, r0, r4, lsr #10
     460:	05011603 	streq	r1, [r1, #-1539]	; 0xfffff9fd
     464:	04020003 	streq	r0, [r2], #-3
  return -1;
     468:	05051301 	streq	r1, [r5, #-769]	; 0xfffffcff
}
     46c:	01040200 	mrseq	r0, R12_usr
     470:	00090513 	andeq	r0, r9, r3, lsl r5
  UART2CTL = 0;
     474:	11010402 	tstne	r1, r2, lsl #8
     478:	01000102 	tsteq	r0, r2, lsl #2
  UART2IBRD = 8;
     47c:	0001dd01 	andeq	sp, r1, r1, lsl #26
  UART2FBRD = 44;
     480:	b3000300 	movwlt	r0, #768	; 0x300
  UART2CC = 0;
     484:	02000000 	andeq	r0, r0, #0
  UART2LCRH = 0x60;
     488:	0d0efb01 	vstreq	d15, [lr, #-4]
  UART2CTL = 0x301;
     48c:	01010100 	mrseq	r0, (UNDEF: 17)
}
     490:	00000001 	andeq	r0, r0, r1
     494:	01000001 	tsteq	r0, r1
  RCGCUART |= 3;
     498:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3e4 <uputc+0x14>
     49c:	72642f65 	rsbvc	r2, r4, #404	; 0x194
     4a0:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
     4a4:	6f66652f 	svcvs	0x0066652f
  RCGCGPIO |= 3;
     4a8:	68732f62 	ldmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
     4ac:	2f6c6c65 	svccs	0x006c6c65
     4b0:	2f62696c 	svccs	0x0062696c
  GPIODEN = 0x03;
     4b4:	6c6d656d 	cfstr64vs	mvdx6, [sp], #-436	; 0xfffffe4c
     4b8:	2f00676f 	svccs	0x0000676f
  GPIOAFSEL = 0x03;
     4bc:	2f727375 	svccs	0x00727375
  GPIOPCTL |= 0x00000011;
     4c0:	2f62696c 	svccs	0x0062696c
     4c4:	2f636367 	svccs	0x00636367
     4c8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  GPIODEN2 = 0x03;
     4cc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     4d0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  GPIOAFSEL2 = 0x03;
     4d4:	30312f69 	eorscc	r2, r1, r9, ror #30
  GPIOPCTL2 |= 0x00000011;
     4d8:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
     4dc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     4e0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
}
     4e4:	6f682f00 	svcvs	0x00682f00
     4e8:	642f656d 	strtvs	r6, [pc], #-1389	; 4f0 <platform_init+0x4>
void platform_init() {
     4ec:	76616472 			; <UNDEFINED> instruction: 0x76616472
    pin_setup();
     4f0:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
    uart_init();
     4f4:	732f626f 			; <UNDEFINED> instruction: 0x732f626f
    uart2_init();
     4f8:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
    set_read_char(ugetc);
     4fc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    set_read_char2(u2getc);
     500:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
     504:	00676e69 	rsbeq	r6, r7, r9, ror #28
    set_write_char(uputc);
     508:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    set_write_char2(u2putc);
     50c:	2e676f6c 	cdpcs	15, 6, cr6, cr7, cr12, {3}
     510:	00010063 	andeq	r0, r1, r3, rrx
}
     514:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     518:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     51c:	00020068 	andeq	r0, r2, r8, rrx
     520:	6d656d00 	stclvs	13, cr6, [r5, #-0]
     524:	2e676f6c 	cdpcs	15, 6, cr6, cr7, cr12, {3}
  selected_mode = mode;
     528:	00010068 	andeq	r0, r1, r8, rrx
  if (selected_mode == NONE) {
     52c:	72747300 	rsbsvc	r7, r4, #0, 6
  out_buf_rgn.addr = addr;
     530:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
  out_buf_rgn.size = size / 2;
     534:	00030068 	andeq	r0, r3, r8, rrx
  out_buf_rgn.curr_index = 0;
     538:	3d050000 	stccc	0, cr0, [r5, #-0]
  inp_buf_rgn.addr = addr + size / 2;
     53c:	28020500 	stmdacs	r2, {r8, sl}
  inp_buf_rgn.curr_index = 0;
     540:	03000005 	movweq	r0, #5
  if (!(selected_mode & INP)) {
     544:	03050116 	movweq	r0, #20758	; 0x5116
    out_buf_rgn.size = size;
     548:	06110513 			; <UNDEFINED> instruction: 0x06110513
  memset(addr, 0, size);
     54c:	06030501 	streq	r0, [r3], -r1, lsl #10
     550:	06060530 			; <UNDEFINED> instruction: 0x06060530
  } else if (!(selected_mode & OUT)) {
     554:	1d3d0501 	cfldr32ne	mvfx0, [sp, #-4]!
     558:	27060305 	strcs	r0, [r6, -r5, lsl #6]
    inp_buf_rgn.addr = addr;
     55c:	01061405 	tsteq	r6, r5, lsl #8
    inp_buf_rgn.size = size;
     560:	21060305 	tstcs	r6, r5, lsl #6
     564:	01061b05 	tsteq	r6, r5, lsl #22
  if (!(selected_mode & INP)) {
     568:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
     56c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     570:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
  if (inp_buf_rgn.addr[inp_buf_rgn.curr_index] == 0) {
     574:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
     578:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
  int val = inp_buf_rgn.addr[inp_buf_rgn.curr_index];
     57c:	03052014 	movweq	r2, #20500	; 0x5014
  inp_buf_rgn.addr[inp_buf_rgn.curr_index] = 0;
     580:	14052106 	strne	r2, [r5], #-262	; 0xfffffefa
  inp_buf_rgn.curr_index++;
     584:	03050106 	movweq	r0, #20742	; 0x5106
     588:	1a052106 	bne	1489a8 <__ROM_SIZE__+0x1089a8>
  if (inp_buf_rgn.curr_index == inp_buf_rgn.size) {
     58c:	03050106 	movweq	r0, #20742	; 0x5106
}
     590:	06052206 	streq	r2, [r5], -r6, lsl #4
    inp_buf_rgn.curr_index = 0;
     594:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    return -1;
     598:	16053f06 	strne	r3, [r5], -r6, lsl #30
     59c:	03050106 	movweq	r0, #20742	; 0x5106
    return -1;
     5a0:	20062806 	andcs	r2, r6, r6, lsl #16
     5a4:	2f010520 	svccs	0x00010520
  if (!(selected_mode & OUT) || c == 0) {
     5a8:	03060a05 	movweq	r0, #27141	; 0x6a05
     5ac:	0d052078 	stceq	0, cr2, [r5, #-480]	; 0xfffffe20
     5b0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
  out_buf_rgn.addr[out_buf_rgn.curr_index] = (uint8_t) c;
     5b4:	16053f06 	strne	r3, [r5], -r6, lsl #30
     5b8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
  out_buf_rgn.curr_index++;
     5bc:	16052f06 	strne	r2, [r5], -r6, lsl #30
  if (out_buf_rgn.curr_index == out_buf_rgn.size) {
     5c0:	052e0106 	streq	r0, [lr, #-262]!	; 0xfffffefa
     5c4:	05420613 	strbeq	r0, [r2, #-1555]	; 0xfffff9ed
    out_buf_rgn.curr_index = 0;
     5c8:	17051303 	strne	r1, [r5, -r3, lsl #6]
     5cc:	06050106 	streq	r0, [r5], -r6, lsl #2
     5d0:	0603052e 	streq	r0, [r3], -lr, lsr #10
static void outstr(const char *str) {
     5d4:	06120540 	ldreq	r0, [r2], -r0, asr #10
  while (*str != '\0') {
     5d8:	2e230501 	cfsh64cs	mvdx0, mvdx3, #1
    __write_char__(*str);
     5dc:	05201705 	streq	r1, [r0, #-1797]!	; 0xfffff8fb
    str++;
     5e0:	03052006 	movweq	r2, #20486	; 0x5006
  while (*str != '\0') {
     5e4:	1d052406 	cfstrsne	mvf2, [r5, #-24]	; 0xffffffe8
}
     5e8:	03050106 	movweq	r0, #20742	; 0x5106
     5ec:	2c052f06 	stccs	15, cr2, [r5], {6}
static bool printf_numbers(const char fmt, va_list *args, int l_count) {
     5f0:	03050106 	movweq	r0, #20742	; 0x5106
     5f4:	19052f06 	stmdbne	r5, {r1, r2, r8, r9, sl, fp, sp}
  switch (fmt) {
     5f8:	03050106 	movweq	r0, #20742	; 0x5106
     5fc:	2c053e06 	stccs	14, cr3, [r5], {6}
     600:	06050106 	streq	r0, [r5], -r6, lsl #2
      if (l_count == 0) {
     604:	33010520 	movwcc	r0, #5408	; 0x1520
     608:	1c060505 	cfstr32ne	mvfx0, [r6], {5}
        value = va_arg(*args, unsigned int);
     60c:	01061c05 	tsteq	r6, r5, lsl #24
     610:	74030c05 	strvc	r0, [r3], #-3077	; 0xfffff3fb
      if (fmt == 'u') {
     614:	1a05403c 	bne	15070c <__ROM_SIZE__+0x11070c>
        if (value == 0) {
     618:	580e0306 	stmdapl	lr, {r1, r2, r8, r9}
          __write_char__(hextable[0]);
     61c:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
     620:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
  return true;
     624:	1e052e06 	cdpne	14, 0, cr2, cr5, cr6, {0}
  switch (fmt) {
     628:	01040200 	mrseq	r0, R12_usr
      outstr("\nprintf-error\n");
     62c:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
      return false;
     630:	060e0524 	streq	r0, [lr], -r4, lsr #10
}
     634:	2e1f0501 	cfmul32cs	mvfx0, mvfx15, mvfx1
      if (l_count == 0) {
     638:	05202c05 	streq	r2, [r0, #-3077]!	; 0xfffff3fb
        value = va_arg(*args, int);
     63c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     640:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
      if (value < 0) {
     644:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
        num[num_len++] = hextable[value % 10];
     648:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
     64c:	01052006 	tsteq	r5, r6
     650:	06050531 			; <UNDEFINED> instruction: 0x06050531
     654:	061c051e 			; <UNDEFINED> instruction: 0x061c051e
     658:	00060201 	andeq	r0, r6, r1, lsl #4
     65c:	03b20101 			; <UNDEFINED> instruction: 0x03b20101
     660:	00030000 	andeq	r0, r3, r0
     664:	00000086 	andeq	r0, r0, r6, lsl #1
     668:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
        value = value / 10;
     66c:	0101000d 	tsteq	r1, sp
      } while (value > 0);
     670:	00000101 	andeq	r0, r0, r1, lsl #2
     674:	00000100 	andeq	r0, r0, r0, lsl #2
        __write_char__('-');
     678:	6f682f01 	svcvs	0x00682f01
     67c:	642f656d 	strtvs	r6, [pc], #-1389	; 684 <printf_numbers+0x94>
        value = -value;
     680:	76616472 			; <UNDEFINED> instruction: 0x76616472
        __write_char__(num[--num_len]);
     684:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
     688:	732f626f 			; <UNDEFINED> instruction: 0x732f626f
     68c:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
     690:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     694:	6972702f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, ip, sp, lr}^
      while (num_len > 0) {
     698:	0066746e 	rsbeq	r7, r6, lr, ror #8
  return true;
     69c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
          num[num_len++] = hextable[value % 10];
     6a0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     6a4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     6a8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     6ac:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     6b0:	61652d65 	cmnvs	r5, r5, ror #26
     6b4:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
     6b8:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
     6bc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
          value = value / 10;
     6c0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
        } while (value > 0);
     6c4:	70000065 	andvc	r0, r0, r5, rrx
        while (num_len > 0) {
     6c8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
          __write_char__(num[--num_len]);
     6cc:	00632e66 	rsbeq	r2, r3, r6, ror #28
     6d0:	73000001 	movwvc	r0, #1
     6d4:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
     6d8:	00682e67 	rsbeq	r2, r8, r7, ror #28
     6dc:	3c000002 	stccc	0, cr0, [r0], {2}
     6e0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
  return true;
     6e4:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
              __write_char__(hextable[val]);
     6e8:	0000003e 	andeq	r0, r0, lr, lsr r0
     6ec:	25050000 	strcs	r0, [r5, #-0]
              leading_zero_ignored = true;
     6f0:	d4020500 	strle	r0, [r2], #-1280	; 0xfffffb00
          while (start_bit >= 0) {
     6f4:	03000005 	movweq	r0, #5
            int val = (value >> start_bit) & 0xF;
     6f8:	0106012a 	tsteq	r6, sl, lsr #2
            if (val || leading_zero_ignored) {
     6fc:	2f060305 	svccs	0x00060305
     700:	01060905 	tsteq	r6, r5, lsl #18
     704:	21060505 	tstcs	r6, r5, lsl #10
          bool leading_zero_ignored = false;
     708:	0608053d 			; <UNDEFINED> instruction: 0x0608053d
          int start_bit = LAST_NIBBLE_FIRST_BIT;
     70c:	06090501 	streq	r0, [r9], -r1, lsl #10
  return true;
     710:	060a051e 			; <UNDEFINED> instruction: 0x060a051e
        return false;
     714:	20090501 	andcs	r0, r9, r1, lsl #10
        return false;
     718:	20320105 	eorscs	r0, r2, r5, lsl #2
     71c:	00064805 	andeq	r4, r6, r5, lsl #16
     720:	05f00205 	ldrbeq	r0, [r0, #517]!	; 0x205
     724:	06140000 	ldreq	r0, [r4], -r0
     728:	06030501 	streq	r0, [r3], -r1, lsl #10
     72c:	0514133d 	ldreq	r1, [r4, #-829]	; 0xfffffcc3
int printf(const char *fmt, ...) {
     730:	743b0307 	ldrtvc	r0, [fp], #-775	; 0xfffffcf9
     734:	060a0514 			; <UNDEFINED> instruction: 0x060a0514
     738:	06090501 	streq	r0, [r9], -r1, lsl #10
  va_start(args, fmt);
     73c:	060f053d 			; <UNDEFINED> instruction: 0x060f053d
  while (*fmt) {
     740:	07052e01 	streq	r2, [r5, -r1, lsl #28]
        if (*fmt == '%') {
     744:	2e110306 	cdpcs	3, 1, cr0, cr1, cr6, {0}
        __write_char__(*fmt);
     748:	01060a05 	tsteq	r6, r5, lsl #20
        fmt++;
     74c:	03060905 	movweq	r0, #26885	; 0x6905
  while (*fmt) {
     750:	0c052e0a 	stceq	14, cr2, [r5], {10}
    switch (state) {
     754:	0b050106 	bleq	140b74 <__ROM_SIZE__+0x100b74>
     758:	3c062f06 	stccc	15, cr2, [r6], {6}
          fmt++;
     75c:	030a0520 	movweq	r0, #42272	; 0xa520
          continue;
     760:	052e0116 	streq	r0, [lr, #-278]!	; 0xfffffeea
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
     764:	7f900303 	svcvc	0x00900303
     768:	06070501 	streq	r0, [r7], -r1, lsl #10
     76c:	2e00ed03 	cdpcs	13, 0, cr14, cr0, cr3, {0}
     770:	2f062006 	svccs	0x00062006
     774:	01060e05 	tsteq	r6, r5, lsl #28
        switch (*fmt) {
     778:	05230105 	streq	r0, [r3, #-261]!	; 0xfffffefb
     77c:	9a030607 	bls	c1fa0 <__ROM_SIZE__+0x81fa0>
     780:	05142e7f 	ldreq	r2, [r4, #-3711]	; 0xfffff181
     784:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
            __write_char__(*fmt);
     788:	052f0609 	streq	r0, [pc, #-1545]!	; 187 <vector_table+0x187>
     78c:	2e01060f 	cfmadd32cs	mvax0, mvfx0, mvfx1, mvfx15
            state = CHECK_CH;
     790:	03060705 	movweq	r0, #26373	; 0x6705
            break;
     794:	0a052e12 	beq	14bfe4 <__ROM_SIZE__+0x10bfe4>
     798:	07050106 	streq	r0, [r5, -r6, lsl #2]
            outstr(va_arg(args, const char *));
     79c:	01040200 	mrseq	r0, R12_usr
     7a0:	09053306 	stmdbeq	r5, {r1, r2, r8, r9, ip, sp}
     7a4:	01040200 	mrseq	r0, R12_usr
            fmt++;
     7a8:	00290513 	eoreq	r0, r9, r3, lsl r5
            break;
     7ac:	06010402 	streq	r0, [r1], -r2, lsl #8
            __write_char__(va_arg(args, int));
     7b0:	00220501 	eoreq	r0, r2, r1, lsl #10
     7b4:	ac010402 	cfstrsge	mvf0, [r1], {2}
     7b8:	02001805 	andeq	r1, r0, #327680	; 0x50000
            fmt++;
     7bc:	002e0104 	eoreq	r0, lr, r4, lsl #2
            break;
     7c0:	4a010402 	bmi	417d0 <__ROM_SIZE__+0x17d0>
            if (*fmt == 'l') {
     7c4:	02000905 	andeq	r0, r0, #81920	; 0x14000
     7c8:	2f060104 	svccs	0x00060104
            if (printf_numbers(*fmt, &args, l_count)) {
     7cc:	02000f05 	andeq	r0, r0, #5, 30
     7d0:	20060104 	andcs	r0, r6, r4, lsl #2
     7d4:	01040200 	mrseq	r0, R12_usr
              state = CHECK_CH;
     7d8:	07052106 	streq	r2, [r5, -r6, lsl #2]
              fmt++;
     7dc:	01040200 	mrseq	r0, R12_usr
              l_count++;
     7e0:	09050106 	stmdbeq	r5, {r1, r2, r8}
            if (printf_numbers(*fmt, &args, 0)) {
     7e4:	3c790306 	ldclcc	3, cr0, [r9], #-24	; 0xffffffe8
     7e8:	21063c06 	tstcs	r6, r6, lsl #24
              fmt++;
     7ec:	01060f05 	tsteq	r6, r5, lsl #30
              break;
     7f0:	06090520 	streq	r0, [r9], -r0, lsr #10
            return -1;
     7f4:	06200903 	strteq	r0, [r0], -r3, lsl #18
}
     7f8:	060d0520 	streq	r0, [sp], -r0, lsr #10
     7fc:	060a058f 	streq	r0, [sl], -pc, lsl #11
            return -1;
     800:	2e00c603 	cfmadd32cs	mvax0, mvfx12, mvfx0, mvfx3
     804:	02000905 	andeq	r0, r0, #81920	; 0x14000
     808:	03060104 	movweq	r0, #24836	; 0x6104
int printf2(const char *fmt, ...) {
     80c:	0b052e60 	bleq	14c194 <__ROM_SIZE__+0x10c194>
     810:	01040200 	mrseq	r0, R12_usr
    __write_char2__(*fmt);
     814:	002b0513 	eoreq	r0, fp, r3, lsl r5
     818:	06010402 	streq	r0, [r1], -r2, lsl #8
  while (*fmt != '\0') {
     81c:	00240501 	eoreq	r0, r4, r1, lsl #10
     820:	90010402 	andls	r0, r1, r2, lsl #8
     824:	02001a05 	andeq	r1, r0, #20480	; 0x5000
     828:	002e0104 	eoreq	r0, lr, r4, lsl #2
     82c:	4a010402 	bmi	4183c <__ROM_SIZE__+0x183c>
{
     830:	02000b05 	andeq	r0, r0, #5120	; 0x1400
  for (i = 0; i < Nk; ++i)
     834:	2f060104 	svccs	0x00060104
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
     838:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
     83c:	20060104 	andcs	r0, r6, r4, lsl #2
     840:	01040200 	mrseq	r0, R12_usr
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
     844:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
     848:	01040200 	mrseq	r0, R12_usr
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
     84c:	0f050106 	svceq	0x00050106
     850:	0b053006 	bleq	14c870 <__ROM_SIZE__+0x10c870>
     854:	9e20062f 	cfmadda32ls	mvax1, mvax0, mvfx0, mvfx15
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
     858:	1a030a05 	bne	c3074 <__ROM_SIZE__+0x83074>
  for (i = 0; i < Nk; ++i)
     85c:	060f0501 	streq	r0, [pc], -r1, lsl #10
     860:	132e7303 			; <UNDEFINED> instruction: 0x132e7303
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     864:	57062405 	strpl	r2, [r6, -r5, lsl #8]
    j = i * 4; k=(i - Nk) * 4;
     868:	23060d05 	movwcs	r0, #27909	; 0x6d05
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
     86c:	01061705 	tsteq	r6, r5, lsl #14
     870:	06110520 	ldreq	r0, [r1], -r0, lsr #10
     874:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
     878:	1e052f0d 	cdpne	15, 0, cr2, cr5, cr13, {0}
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
     87c:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     880:	10052f06 	andne	r2, r5, r6, lsl #30
     884:	052e0106 	streq	r0, [lr, #-262]!	; 0xfffffefa
     888:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
     88c:	02002001 	andeq	r2, r0, #1
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
     890:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
     894:	0f050e10 	svceq	0x00050e10
     898:	0520201f 	streq	r2, [r0, #-31]!	; 0xffffffe1
     89c:	0113030a 	tsteq	r3, sl, lsl #6
     8a0:	ac031005 	stcge	0, cr1, [r3], {5}
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
     8a4:	20202e7f 	eorcs	r2, r0, pc, ror lr
     8a8:	20013003 	andcs	r3, r1, r3
     8ac:	00062205 	andeq	r2, r6, r5, lsl #4
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     8b0:	07300205 	ldreq	r0, [r0, -r5, lsl #4]!
      k = (i - 1) * 4;
     8b4:	27030000 	strcs	r0, [r3, -r0]
      tempa[0]=RoundKey[k + 0];
     8b8:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
     8bc:	13670603 	cmnne	r7, #3145728	; 0x300000
      tempa[1]=RoundKey[k + 1];
     8c0:	10052214 	andne	r2, r5, r4, lsl r2
     8c4:	09050d06 	stmdbeq	r5, {r1, r2, r8, sl, fp}
      tempa[2]=RoundKey[k + 2];
     8c8:	05230625 	streq	r0, [r3, #-1573]!	; 0xfffff9db
     8cc:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
      tempa[3]=RoundKey[k + 3];
     8d0:	3d330609 	ldccc	6, cr0, [r3, #-36]!	; 0xffffffdc
     8d4:	01060c05 	tsteq	r6, r5, lsl #24
    if (i % Nk == 0)
     8d8:	21060905 	tstcs	r6, r5, lsl #18
     8dc:	05017603 	streq	r7, [r1, #-1539]	; 0xfffff9fd
        tempa[0] = tempa[1];
     8e0:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
        tempa[1] = tempa[2];
     8e4:	05052009 	streq	r2, [r5, #-9]
        tempa[2] = tempa[3];
     8e8:	0b052f06 	bleq	14c508 <__ROM_SIZE__+0x10c508>
        tempa[3] = u8tmp;
     8ec:	0e05134d 	cdpeq	3, 0, cr1, cr5, cr13, {2}
        tempa[0] = getSBoxValue(tempa[0]);
     8f0:	0b050106 	bleq	140d10 <__ROM_SIZE__+0x100d10>
     8f4:	11052106 	tstne	r5, r6, lsl #2
        tempa[1] = getSBoxValue(tempa[1]);
     8f8:	0b051006 	bleq	144918 <__ROM_SIZE__+0x104918>
     8fc:	09030622 	stmdbeq	r3, {r1, r5, r9, sl}
        tempa[2] = getSBoxValue(tempa[2]);
     900:	060e0520 	streq	r0, [lr], -r0, lsr #10
     904:	060f0501 	streq	r0, [pc], -r1, lsl #10
        tempa[3] = getSBoxValue(tempa[3]);
     908:	0610051f 			; <UNDEFINED> instruction: 0x0610051f
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
     90c:	200f0501 	andcs	r0, pc, r1, lsl #10
     910:	02002605 	andeq	r2, r0, #5242880	; 0x500000
     914:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
     918:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
}
     91c:	36053c01 	strcc	r3, [r5], -r1, lsl #24
     920:	02040200 	andeq	r0, r4, #0, 4
{
     924:	0609052e 	streq	r0, [r9], -lr, lsr #10
  for (i = 0; i < 4; ++i)
     928:	920d0532 	andls	r0, sp, #209715200	; 0xc800000
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
     92c:	0610053d 			; <UNDEFINED> instruction: 0x0610053d
     930:	060d0501 	streq	r0, [sp], -r1, lsl #10
     934:	13051321 	movwne	r1, #21281	; 0x5321
     938:	0d051106 	stfeqs	f1, [r5, #-24]	; 0xffffffe8
     93c:	03062021 	movweq	r2, #24609	; 0x6021
     940:	05674a09 	strbeq	r4, [r7, #-2569]!	; 0xfffff5f7
     944:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    for (j = 0; j < 4; ++j)
     948:	1321060d 			; <UNDEFINED> instruction: 0x1321060d
     94c:	11061305 	tstne	r6, r5, lsl #6
  for (i = 0; i < 4; ++i)
     950:	06210d05 	strteq	r0, [r1], -r5, lsl #26
     954:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
     958:	052e061c 	streq	r0, [lr, #-1564]!	; 0xfffff9e4
    for (j = 0; j < 4; ++j)
     95c:	2f063c0d 	svccs	0x00063c0d
}
     960:	01061005 	tsteq	r6, r5
  for (i = 0; i < 4; ++i)
     964:	21060d05 	tstcs	r6, r5, lsl #26
    for (j = 0; j < 4; ++j)
     968:	06130513 			; <UNDEFINED> instruction: 0x06130513
     96c:	210d0511 	tstcs	sp, r1, lsl r5
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
     970:	05132806 	ldreq	r2, [r3, #-2054]	; 0xfffff7fa
     974:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
     978:	0521060d 	streq	r0, [r1, #-1549]!	; 0xfffff9f3
     97c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
     980:	11052010 	tstne	r5, r0, lsl r0
    for (j = 0; j < 4; ++j)
     984:	060d052c 	streq	r0, [sp], -ip, lsr #10
     988:	06110526 	ldreq	r0, [r1], -r6, lsr #10
  for (i = 0; i < 4; ++i)
     98c:	4a100501 	bmi	401d98 <__ROM_SIZE__+0x3c1d98>
     990:	21060f05 	tstcs	r6, r5, lsl #30
    for (j = 0; j < 4; ++j)
     994:	06120513 			; <UNDEFINED> instruction: 0x06120513
}
     998:	060f0501 	streq	r0, [pc], -r1, lsl #10
  for (i = 0; i < 4; ++i)
     99c:	06150521 	ldreq	r0, [r5], -r1, lsr #10
     9a0:	220f0510 	andcs	r0, pc, #16, 10	; 0x4000000
     9a4:	207a0306 	rsbscs	r0, sl, r6, lsl #6
  temp           = (*state)[0][1];
     9a8:	06120513 			; <UNDEFINED> instruction: 0x06120513
  (*state)[0][1] = (*state)[1][1];
     9ac:	1f160501 	svcne	0x00160501
  (*state)[1][1] = (*state)[2][1];
     9b0:	060d052e 	streq	r0, [sp], -lr, lsr #10
  (*state)[2][1] = (*state)[3][1];
     9b4:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
  temp           = (*state)[0][2];
     9b8:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
  (*state)[0][2] = (*state)[2][2];
     9bc:	0f054a10 	svceq	0x00054a10
  temp           = (*state)[1][2];
     9c0:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
  (*state)[1][2] = (*state)[3][2];
     9c4:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
  temp           = (*state)[0][3];
     9c8:	0521060f 	streq	r0, [r1, #-1551]!	; 0xfffff9f1
  (*state)[0][3] = (*state)[3][3];
     9cc:	05100615 	ldreq	r0, [r0, #-1557]	; 0xfffff9eb
  (*state)[3][3] = (*state)[2][3];
     9d0:	1405220f 	strne	r2, [r5], #-527	; 0xfffffdf1
  (*state)[2][3] = (*state)[1][3];
     9d4:	2e207a03 	vmulcs.f32	s14, s0, s6
}
     9d8:	11030105 	tstne	r3, r5, lsl #2
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
     9dc:	03140501 	tsteq	r4, #4194304	; 0x400000
     9e0:	23055877 	movwcs	r5, #22647	; 0x5877
     9e4:	66160306 	ldrvs	r0, [r6], -r6, lsl #6
}
     9e8:	03050106 	movweq	r0, #20742	; 0x5106
{
     9ec:	09053d06 	stmdbeq	r5, {r1, r2, r8, sl, fp, ip, sp}
     9f0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
  for (i = 0; i < 4; ++i)
     9f4:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    t   = (*state)[i][0];
     9f8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
     9fc:	051e0609 	ldreq	r0, [lr, #-1545]	; 0xfffff9f7
     a00:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
     a04:	03052009 	movweq	r2, #20489	; 0x5009
     a08:	01053206 	tsteq	r5, r6, lsl #4
     a0c:	022e1306 	eoreq	r1, lr, #402653184	; 0x18000000
     a10:	01010005 	tsteq	r1, r5
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
     a14:	00000b1f 	andeq	r0, r0, pc, lsl fp
     a18:	00bb0003 	adcseq	r0, fp, r3
     a1c:	01020000 	mrseq	r0, (UNDEF: 2)
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
     a20:	000d0efb 	strdeq	r0, [sp], -fp
     a24:	01010101 	tsteq	r1, r1, lsl #2
     a28:	01000000 	mrseq	r0, (UNDEF: 0)
     a2c:	2f010000 	svccs	0x00010000
     a30:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
     a34:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
     a38:	2f657661 	svccs	0x00657661
     a3c:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
     a40:	6568732f 	strbvs	r7, [r8, #-815]!	; 0xfffffcd1
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
     a44:	6c2f6c6c 	stcvs	12, cr6, [pc], #-432	; 89c <KeyExpansion+0x6c>
     a48:	742f6269 	strtvc	r6, [pc], #-617	; a50 <MixColumns+0x64>
     a4c:	2d796e69 	ldclcs	14, cr6, [r9, #-420]!	; 0xfffffe5c
     a50:	00736561 	rsbseq	r6, r3, r1, ror #10
  for (i = 0; i < 4; ++i)
     a54:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     a58:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
}
     a5c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
{
     a60:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     a64:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  for (i = 0; i < 4; ++i)
     a68:	61652d65 	cmnvs	r5, r5, ror #26
    a = (*state)[i][0];
     a6c:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
     a70:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
    b = (*state)[i][1];
     a74:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
     a78:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    c = (*state)[i][2];
     a7c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
     a80:	2f656d6f 	svccs	0x00656d6f
     a84:	61647264 	cmnvs	r4, r4, ror #4
     a88:	652f6576 	strvs	r6, [pc, #-1398]!	; 51a <platform_init+0x2e>
     a8c:	2f626f66 	svccs	0x00626f66
     a90:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
     a94:	696c2f6c 	stmdbvs	ip!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     a98:	74732f62 	ldrbtvc	r2, [r3], #-3938	; 0xfffff09e
     a9c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     aa0:	65610000 	strbvs	r0, [r1, #-0]!
     aa4:	00632e73 	rsbeq	r2, r3, r3, ror lr
     aa8:	73000001 	movwvc	r0, #1
     aac:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
     ab0:	00682e66 	rsbeq	r2, r8, r6, ror #28
     ab4:	73000002 	movwvc	r0, #2
     ab8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     abc:	00682e74 	rsbeq	r2, r8, r4, ror lr
     ac0:	61000002 	tstvs	r0, r2
     ac4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     ac8:	00000100 	andeq	r0, r0, r0, lsl #2
     acc:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     ad0:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     ad4:	00000300 	andeq	r0, r0, r0, lsl #6
     ad8:	00010500 	andeq	r0, r1, r0, lsl #10
     adc:	08300205 	ldmdaeq	r0!, {r0, r2, r9}
     ae0:	92030000 	andls	r0, r3, #0
     ae4:	01060101 	tsteq	r6, r1, lsl #2
     ae8:	2f060305 	svccs	0x00060305
     aec:	0a051513 	beq	145f40 <__ROM_SIZE__+0x105f40>
     af0:	03050106 	movweq	r0, #20742	; 0x5106
     af4:	00050520 	andeq	r0, r5, r0, lsr #10
     af8:	06030402 	streq	r0, [r3], -r2, lsl #8
     afc:	00240522 	eoreq	r0, r4, r2, lsr #10
     b00:	06030402 	streq	r0, [r3], -r2, lsl #8
     b04:	00200501 	eoreq	r0, r0, r1, lsl #10
     b08:	20030402 	andcs	r0, r3, r2, lsl #8
     b0c:	02001b05 	andeq	r1, r0, #5120	; 0x1400
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
     b10:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
     b14:	04020005 	streq	r0, [r2], #-5
     b18:	052f0603 	streq	r0, [pc, #-1539]!	; 51d <platform_init+0x31>
     b1c:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
     b20:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
     b24:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
     b28:	05053c03 	streq	r3, [r5, #-3075]	; 0xfffff3fd
     b2c:	03040200 	movweq	r0, #16896	; 0x4200
     b30:	20052f06 	andcs	r2, r5, r6, lsl #30
     b34:	03040200 	movweq	r0, #16896	; 0x4200
     b38:	1b050106 	blne	140f58 <__ROM_SIZE__+0x100f58>
     b3c:	03040200 	movweq	r0, #16896	; 0x4200
     b40:	0005053c 	andeq	r0, r5, ip, lsr r5
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
     b44:	06030402 	streq	r0, [r3], -r2, lsl #8
     b48:	0020052f 	eoreq	r0, r0, pc, lsr #10
     b4c:	06030402 	streq	r0, [r3], -r2, lsl #8
     b50:	001b0501 	andseq	r0, fp, r1, lsl #10
     b54:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
     b58:	02001705 	andeq	r1, r0, #1310720	; 0x140000
     b5c:	1b060304 	blne	181774 <__ROM_SIZE__+0x141774>
     b60:	02000f05 	andeq	r0, r0, #5, 30
     b64:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
     b68:	04020003 	streq	r0, [r2], #-3
     b6c:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
     b70:	2e09030a 	cdpcs	3, 0, cr0, cr9, cr10, {0}
     b74:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
     b78:	03060204 	movweq	r0, #25092	; 0x6204
     b7c:	07052e32 	smladxeq	r5, r2, lr, r2
     b80:	02040200 	andeq	r0, r4, #0, 4
     b84:	10050106 	andne	r0, r5, r6, lsl #2
     b88:	02040200 	andeq	r0, r4, #0, 4
     b8c:	15052006 	strne	r2, [r5, #-6]
     b90:	02040200 	andeq	r0, r4, #0, 4
     b94:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     b98:	02040200 	andeq	r0, r4, #0, 4
     b9c:	1f052106 	svcne	0x00052106
     ba0:	02040200 	andeq	r0, r4, #0, 4
     ba4:	2e050106 	adfcss	f0, f5, f6
     ba8:	02040200 	andeq	r0, r4, #0, 4
     bac:	0015052e 	andseq	r0, r5, lr, lsr #10
     bb0:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
  for (i = 0; i < 4; ++i)
     bb4:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
     bb8:	4b060204 	blmi	1813d0 <__ROM_SIZE__+0x1413d0>
     bbc:	02001f05 	andeq	r1, r0, #5, 30
}
     bc0:	01060204 	tsteq	r6, r4, lsl #4
  for (i = 0; i < 4; ++i)
     bc4:	02040200 	andeq	r0, r4, #0, 4
     bc8:	002e052e 	eoreq	r0, lr, lr, lsr #10
    for (j = 0; j < 4; ++j)
     bcc:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
{
     bd0:	02000d05 	andeq	r0, r0, #320	; 0x140
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
     bd4:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
     bd8:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
     bdc:	05052002 	streq	r2, [r5, #-2]
     be0:	02040200 	andeq	r0, r4, #0, 4
     be4:	1f054b06 	svcne	0x00054b06
    for (j = 0; j < 4; ++j)
     be8:	02040200 	andeq	r0, r4, #0, 4
     bec:	2e050106 	adfcss	f0, f5, f6
  for (i = 0; i < 4; ++i)
     bf0:	02040200 	andeq	r0, r4, #0, 4
     bf4:	000d052e 	andeq	r0, sp, lr, lsr #10
    for (j = 0; j < 4; ++j)
     bf8:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
}
     bfc:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
  for (i = 0; i < 4; ++i)
     c00:	05200204 	streq	r0, [r0, #-516]!	; 0xfffffdfc
     c04:	04020005 	streq	r0, [r2], #-5
     c08:	054b0602 	strbeq	r0, [fp, #-1538]	; 0xfffff9fe
  temp = (*state)[3][1];
     c0c:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
  (*state)[3][1] = (*state)[2][1];
     c10:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
  (*state)[2][1] = (*state)[1][1];
     c14:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
  (*state)[1][1] = (*state)[0][1];
     c18:	0d052002 	stceq	0, cr2, [r5, #-8]
  temp = (*state)[0][2];
     c1c:	02040200 	andeq	r0, r4, #0, 4
  (*state)[0][2] = (*state)[2][2];
     c20:	0015052e 	andseq	r0, r5, lr, lsr #10
  temp = (*state)[1][2];
     c24:	20020402 	andcs	r0, r2, r2, lsl #8
  (*state)[1][2] = (*state)[3][2];
     c28:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
  temp = (*state)[0][3];
     c2c:	03060204 	movweq	r0, #25092	; 0x6204
  (*state)[0][3] = (*state)[1][3];
     c30:	10052e4a 	andne	r2, r5, sl, asr #28
  (*state)[1][3] = (*state)[2][3];
     c34:	01040200 	mrseq	r0, R12_usr
  (*state)[2][3] = (*state)[3][3];
     c38:	00030520 	andeq	r0, r3, r0, lsr #10
}
     c3c:	06010402 	streq	r0, [r1], -r2, lsl #8
{
     c40:	06070501 	streq	r0, [r7], -r1, lsl #10
  AddRoundKey(0, state, RoundKey);
     c44:	060e0531 			; <UNDEFINED> instruction: 0x060e0531
     c48:	06070501 	streq	r0, [r7], -r1, lsl #10
     c4c:	06180521 	ldreq	r0, [r8], -r1, lsr #10
  for (round = 1; ; ++round)
     c50:	2e0f0501 	cfsh32cs	mvfx0, mvfx15, #1
    MixColumns(state);
     c54:	2f060705 	svccs	0x00060705
    AddRoundKey(round, state, RoundKey);
     c58:	01061805 	tsteq	r6, r5, lsl #16
     c5c:	200f052e 	andcs	r0, pc, lr, lsr #10
     c60:	2f060705 	svccs	0x00060705
  for (round = 1; ; ++round)
     c64:	01061805 	tsteq	r6, r5, lsl #16
    SubBytes(state);
     c68:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
    ShiftRows(state);
     c6c:	052f0607 	streq	r0, [pc, #-1543]!	; 66d <printf_numbers+0x7d>
     c70:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    if (round == Nr) {
     c74:	05052e0f 	streq	r2, [r5, #-3599]	; 0xfffff1f1
  AddRoundKey(Nr, state, RoundKey);
     c78:	08053206 	stmdaeq	r5, {r1, r2, r9, ip, sp}
     c7c:	09050106 	stmdbeq	r5, {r1, r2, r8}
}
     c80:	05134306 	ldreq	r4, [r3, #-774]	; 0xfffffcfa
{
     c84:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
  AddRoundKey(Nr, state, RoundKey);
     c88:	052f0609 	streq	r0, [pc, #-1545]!	; 687 <printf_numbers+0x97>
     c8c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     c90:	052f0609 	streq	r0, [pc, #-1545]!	; 68f <printf_numbers+0x9f>
  for (round = (Nr - 1); ; --round)
     c94:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    InvMixColumns(state);
     c98:	052f0609 	streq	r0, [pc, #-1545]!	; 697 <printf_numbers+0xa7>
  for (round = (Nr - 1); ; --round)
     c9c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    InvShiftRows(state);
     ca0:	05360609 	ldreq	r0, [r6, #-1545]!	; 0xfffff9f7
     ca4:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    InvSubBytes(state);
     ca8:	09052e12 	stmdbeq	r5, {r1, r4, r9, sl, fp, sp}
    AddRoundKey(round, state, RoundKey);
     cac:	14052f06 	strne	r2, [r5], #-3846	; 0xfffff0fa
     cb0:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
     cb4:	0609052e 	streq	r0, [r9], -lr, lsr #10
    if (round == 0) {
     cb8:	0614052f 	ldreq	r0, [r4], -pc, lsr #10
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
     cbc:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
    buf[i] ^= Iv[i];
     cc0:	2f060905 	svccs	0x00060905
     cc4:	01061405 	tsteq	r6, r5, lsl #8
     cc8:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
     ccc:	05310607 	ldreq	r0, [r1, #-1543]!	; 0xfffff9f9
     cd0:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
}
     cd4:	01054a10 	tsteq	r5, r0, lsl sl
  KeyExpansion(ctx->RoundKey, key);
     cd8:	064a1403 	strbeq	r1, [sl], -r3, lsl #8
}
     cdc:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
{
     ce0:	03000009 	movweq	r0, #9
  KeyExpansion(ctx->RoundKey, key);
     ce4:	01060115 	tsteq	r6, r5, lsl r1
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     ce8:	21060305 	tstcs	r6, r5, lsl #6
     cec:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
     cf0:	2e030501 	cfsh32cs	mvfx0, mvfx3, #1
}
     cf4:	02000705 	andeq	r0, r0, #1310720	; 0x140000
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     cf8:	24060304 	strcs	r0, [r6], #-772	; 0xfffffcfc
     cfc:	02003305 	andeq	r3, r0, #335544320	; 0x14000000
}
     d00:	01060304 	tsteq	r6, r4, lsl #6
{
     d04:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
  Cipher((state_t*)buf, ctx->RoundKey);
     d08:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
     d0c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
{
     d10:	16052e03 	strne	r2, [r5], -r3, lsl #28
  InvCipher((state_t*)buf, ctx->RoundKey);
     d14:	03040200 	movweq	r0, #16896	; 0x4200
     d18:	0018052e 	andseq	r0, r8, lr, lsr #10
}
     d1c:	06030402 	streq	r0, [r3], -r2, lsl #8
{
     d20:	04020072 	streq	r0, [r2], #-114	; 0xffffff8e
     d24:	05200603 	streq	r0, [r0, #-1539]!	; 0xfffff9fd
  uint8_t *Iv = ctx->Iv;
     d28:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
     d2c:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d30:	04020005 	streq	r0, [r2], #-5
    XorWithIv(buf, Iv);
     d34:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
    Cipher((state_t*)buf, ctx->RoundKey);
     d38:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
     d3c:	002c0602 	eoreq	r0, ip, r2, lsl #12
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d40:	06020402 	streq	r0, [r2], -r2, lsl #8
    buf += AES_BLOCKLEN;
     d44:	000f052e 	andeq	r0, pc, lr, lsr #10
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d48:	06010402 	streq	r0, [r1], -r2, lsl #8
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
     d4c:	0003052e 	andeq	r0, r3, lr, lsr #10
     d50:	06010402 	streq	r0, [r1], -r2, lsl #8
}
     d54:	3e0c0501 	cfsh32cc	mvfx0, mvfx12, #1
{
     d58:	06330105 	ldrteq	r0, [r3], -r5, lsl #2
     d5c:	13030525 	movwne	r0, #13605	; 0x3525
     d60:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d64:	060f0501 	streq	r0, [pc], -r1, lsl #10
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
     d68:	06030520 	streq	r0, [r3], -r0, lsr #10
     d6c:	300c0501 	andcc	r0, ip, r1, lsl #10
    InvCipher((state_t*)buf, ctx->RoundKey);
     d70:	20061105 	andcs	r1, r6, r5, lsl #2
     d74:	01060505 	tsteq	r6, r5, lsl #10
    XorWithIv(buf, ctx->Iv);
     d78:	052a0105 	streq	r0, [sl, #-261]!	; 0xfffffefb
     d7c:	04020007 	streq	r0, [r2], #-7
     d80:	05260603 	streq	r0, [r6, #-1539]!	; 0xfffff9fd
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
     d84:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
     d88:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
     d8c:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
  for (i = 0; i < length; i += AES_BLOCKLEN)
     d90:	18057403 	stmdane	r5, {r0, r1, sl, ip, sp, lr}
     d94:	03040200 	movweq	r0, #16896	; 0x4200
}
     d98:	02002c06 	andeq	r2, r0, #1536	; 0x600
{
     d9c:	20060304 	andcs	r0, r6, r4, lsl #6
     da0:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
     da4:	20060104 	andcs	r0, r6, r4, lsl #2
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     da8:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
          ctx->Iv[bi] = 0;
     dac:	01060104 	tsteq	r6, r4, lsl #2
     db0:	02001605 	andeq	r1, r0, #5242880	; 0x500000
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     db4:	2c060204 	sfmcs	f0, 4, [r6], {4}
      bi = 0;
     db8:	02040200 	andeq	r0, r4, #0, 4
    buf[i] = (buf[i] ^ buffer[bi]);
     dbc:	0f052006 	svceq	0x00052006
     dc0:	02040200 	andeq	r0, r4, #0, 4
     dc4:	03052006 	movweq	r2, #20486	; 0x5006
     dc8:	02040200 	andeq	r0, r4, #0, 4
     dcc:	0c050106 	stfeqs	f0, [r5], {6}
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     dd0:	01052030 	tsteq	r5, r0, lsr r0
     dd4:	06160525 	ldreq	r0, [r6], -r5, lsr #10
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
     dd8:	062e7903 	strteq	r7, [lr], -r3, lsl #18
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
     ddc:	05202020 	streq	r2, [r0, #-32]!	; 0xffffffe0
     de0:	0d030601 	stceq	6, cr0, [r3, #-4]
     de4:	1303054a 	movwne	r0, #13642	; 0x354a
      Cipher((state_t*)buffer,ctx->RoundKey);
     de8:	06120515 			; <UNDEFINED> instruction: 0x06120515
     dec:	06030501 	streq	r0, [r3], -r1, lsl #10
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     df0:	061f0521 	ldreq	r0, [pc], -r1, lsr #10
     df4:	20120501 	andscs	r0, r2, r1, lsl #10
        if (ctx->Iv[bi] == 255)
     df8:	21060305 	tstcs	r6, r5, lsl #6
     dfc:	01061f05 	tsteq	r6, r5, lsl #30
        ctx->Iv[bi] += 1;
     e00:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
     e04:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
      bi = 0;
     e08:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
}
     e0c:	03052012 	movweq	r2, #20498	; 0x5012
int atoi(const char* str) {
     e10:	12052106 	andne	r2, r5, #-2147483647	; 0x80000001
  int res = 0;
     e14:	03050106 	movweq	r0, #20742	; 0x5106
    res = res * 10 + str[i] - '0';
     e18:	12052306 	andne	r2, r5, #402653184	; 0x18000000
     e1c:	03050106 	movweq	r0, #20742	; 0x5106
     e20:	1f052106 	svcne	0x00052106
  for (int i = 0; str[i] != '\0'; ++i) {
     e24:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
     e28:	06030520 	streq	r0, [r3], -r0, lsr #10
uint32_t atoh(const char* str) {
     e2c:	06120521 	ldreq	r0, [r2], -r1, lsr #10
  uint32_t hex = 0;
     e30:	06030501 	streq	r0, [r3], -r1, lsl #10
    } else if (str[i] >= 'a' && str[i] <= 'f') {
     e34:	06120522 	ldreq	r0, [r2], -r2, lsr #10
     e38:	06030501 	streq	r0, [r3], -r1, lsl #10
     e3c:	061f0521 	ldreq	r0, [pc], -r1, lsr #10
    hex |= value;
     e40:	20120501 	andscs	r0, r2, r1, lsl #10
  for (uint32_t i = 0; str[i] != '\0'; i++) {
     e44:	21060305 	tstcs	r6, r5, lsl #6
     e48:	01061205 	tsteq	r6, r5, lsl #4
    if (str[i] >= '0' && str[i] <= '9') {
     e4c:	23060305 	movwcs	r0, #25349	; 0x6305
     e50:	01061205 	tsteq	r6, r5, lsl #4
     e54:	21060305 	tstcs	r6, r5, lsl #6
      value = str[i] - '0';
     e58:	01061f05 	tsteq	r6, r5, lsl #30
    } else if (str[i] >= 'A' && str[i] <= 'F') {
     e5c:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
     e60:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
      value = str[i] - 'A' + 10;
     e64:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
}
     e68:	03052012 	movweq	r2, #20498	; 0x5012
int r32(int argc, char *argv[]) {
     e6c:	1f052106 	svcne	0x00052106
  if (argc < 2) {
     e70:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
  uint32_t addr = atoh(argv[1]);
     e74:	06030520 	streq	r0, [r3], -r0, lsr #10
     e78:	06120521 	ldreq	r0, [r2], -r1, lsr #10
  printf("0x%x: 0x%x\n", addr, data);
     e7c:	21010501 	tstcs	r1, r1, lsl #10
     e80:	03052306 	movweq	r2, #21254	; 0x5306
}
     e84:	06120513 			; <UNDEFINED> instruction: 0x06120513
    printf("Usage: %s <address> (in hex)\n", argv[0]);
     e88:	75010501 	strvc	r0, [r1, #-1281]	; 0xfffffaff
     e8c:	01063206 	tsteq	r6, r6, lsl #4
    return -1;
     e90:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
     e94:	0a051313 	beq	145ae8 <__ROM_SIZE__+0x105ae8>
     e98:	03050106 	movweq	r0, #20742	; 0x5106
int w32(int argc, char *argv[]) {
     e9c:	00050520 	andeq	r0, r5, r0, lsr #10
  if (argc < 3) {
     ea0:	06030402 	streq	r0, [r3], -r2, lsl #8
  uint32_t addr = atoh(argv[1]);
     ea4:	00090522 	andeq	r0, r9, r2, lsr #10
     ea8:	06030402 	streq	r0, [r3], -r2, lsl #8
  uint32_t data = atoh(argv[2]);
     eac:	00050501 	andeq	r0, r5, r1, lsl #10
     eb0:	06030402 	streq	r0, [r3], -r2, lsl #8
  return 0;
     eb4:	0027052f 	eoreq	r0, r7, pc, lsr #10
    printf("Usage: %s <address> (in hex) <value> (in hex)\n", argv[0]);
     eb8:	06030402 	streq	r0, [r3], -r2, lsl #8
     ebc:	00090501 	andeq	r0, r9, r1, lsl #10
    return -1;
     ec0:	4a030402 	bmi	c1ed0 <__ROM_SIZE__+0x81ed0>
     ec4:	02003805 	andeq	r3, r0, #327680	; 0x50000
     ec8:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
int read_mem(int argc, char *argv[]) {
     ecc:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
  if (argc < 3) {
     ed0:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
  uint32_t addr = atoh(argv[1]);
     ed4:	03040200 	movweq	r0, #16896	; 0x4200
     ed8:	00050520 	andeq	r0, r5, r0, lsr #10
  uint32_t length = atoi(argv[2]);
     edc:	06030402 	streq	r0, [r3], -r2, lsl #8
     ee0:	002d053d 	eoreq	r0, sp, sp, lsr r5
  for (uint32_t i = 0, data = 0; i < length; i++) {
     ee4:	01030402 	tsteq	r3, r2, lsl #8
    printf("Usage: %s <address> (in hex) <num_words> (in decimal)\n", argv[0]);
     ee8:	02003205 	andeq	r3, r0, #1342177280	; 0x50000000
     eec:	01060304 	tsteq	r6, r4, lsl #6
    return -1;
     ef0:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
     ef4:	2e060304 	cdpcs	3, 0, cr0, cr6, cr4, {0}
    printf("0x%x: 0x%x\n", addr, data);
     ef8:	02004d05 	andeq	r4, r0, #320	; 0x140
     efc:	01060304 	tsteq	r6, r4, lsl #6
    addr += 4;
     f00:	03040200 	movweq	r0, #16896	; 0x4200
  for (uint32_t i = 0, data = 0; i < length; i++) {
     f04:	00050520 	andeq	r0, r5, r0, lsr #10
  return 0;
     f08:	06030402 	streq	r0, [r3], -r2, lsl #8
}
     f0c:	002d054b 	eoreq	r0, sp, fp, asr #10
     f10:	01030402 	tsteq	r3, r2, lsl #8
{
     f14:	02003205 	andeq	r3, r0, #1342177280	; 0x50000000
  if (argc < 4) {
     f18:	01060304 	tsteq	r6, r4, lsl #6
  uint32_t addr = atoh(argv[1]);
     f1c:	03040200 	movweq	r0, #16896	; 0x4200
     f20:	003e052e 	eorseq	r0, lr, lr, lsr #10
  uint32_t bit_loc = atoi(argv[2]);
     f24:	06030402 	streq	r0, [r3], -r2, lsl #8
     f28:	004d052e 	subeq	r0, sp, lr, lsr #10
  uint32_t bit_val = atoi(argv[3]);
     f2c:	06030402 	streq	r0, [r3], -r2, lsl #8
     f30:	04020001 	streq	r0, [r2], #-1
  if (bit_loc > 31) {
     f34:	05052003 	streq	r2, [r5, #-3]
  if (bit_val != 0 && bit_val != 1) {
     f38:	03040200 	movweq	r0, #16896	; 0x4200
  uint32_t data = reg32(addr);
     f3c:	2d054b06 	vstrcs	d4, [r5, #-24]	; 0xffffffe8
  data = data | (bit_val << bit_loc);
     f40:	03040200 	movweq	r0, #16896	; 0x4200
  data = data & ~(!bit_val << bit_loc);
     f44:	00320501 	eorseq	r0, r2, r1, lsl #10
     f48:	06030402 	streq	r0, [r3], -r2, lsl #8
     f4c:	04020001 	streq	r0, [r2], #-1
  return 0;
     f50:	3e052e03 	cdpcc	14, 0, cr2, cr5, cr3, {0}
    printf("Error: Invalid bit location argument\n");
     f54:	03040200 	movweq	r0, #16896	; 0x4200
     f58:	4d052e06 	stcmi	14, cr2, [r5, #-24]	; 0xffffffe8
    printf("Error: Invalid bit value argument\n");
     f5c:	03040200 	movweq	r0, #16896	; 0x4200
     f60:	02000106 	andeq	r0, r0, #-2147483647	; 0x80000001
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)> <bit_value(0 or 1)>\n", argv[0]);
     f64:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
     f68:	04020005 	streq	r0, [r2], #-5
  return -1;
     f6c:	054b0603 	strbeq	r0, [fp, #-1539]	; 0xfffff9fd
     f70:	0402002d 	streq	r0, [r2], #-45	; 0xffffffd3
     f74:	32050103 	andcc	r0, r5, #-1073741824	; 0xc0000000
     f78:	03040200 	movweq	r0, #16896	; 0x4200
{
     f7c:	02000106 	andeq	r0, r0, #-2147483647	; 0x80000001
  if (argc < 3) {
     f80:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
  uint32_t addr = atoh(argv[1]);
     f84:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
     f88:	052e0603 	streq	r0, [lr, #-1539]!	; 0xfffff9fd
  uint32_t bit_loc = atoi(argv[2]);
     f8c:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
     f90:	00010603 	andeq	r0, r1, r3, lsl #12
  if (bit_loc > 31) {
     f94:	20030402 	andcs	r0, r3, r2, lsl #8
  uint32_t data = reg32(addr);
     f98:	02001605 	andeq	r1, r0, #5242880	; 0x500000
  printf("Bit %u @ 0x%08x: %u\n", bit_loc, addr, bit_val);
     f9c:	03060304 	movweq	r0, #25348	; 0x6304
     fa0:	02002e79 	andeq	r2, r0, #1936	; 0x790
     fa4:	20060304 	andcs	r0, r6, r4, lsl #6
  return 0;
     fa8:	02000f05 	andeq	r0, r0, #5, 30
    printf("Error: Invalid bit location argument\n");
     fac:	20060104 	andcs	r0, r6, r4, lsl #2
     fb0:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)\n", argv[0]);
     fb4:	01060104 	tsteq	r6, r4, lsl #2
     fb8:	09030105 	stmdbeq	r3, {r0, r2, r8}
  return -1;
     fbc:	00062e2e 	andeq	r2, r6, lr, lsr #28
     fc0:	0a5e0205 	beq	17817dc <__ROM_SIZE__+0x17417dc>
     fc4:	26030000 	strcs	r0, [r3], -r0
     fc8:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
size_t strlen(const char *str) {
     fcc:	134b0603 	movtne	r0, #46595	; 0xb603
  while (str[len]) {
     fd0:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
     fd4:	2e030501 	cfsh32cs	mvfx0, mvfx3, #1
     fd8:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
  while (*str1 && (*str1 == *str2)) {
     fdc:	22060304 	andcs	r0, r6, #4, 6	; 0x10000000
    str2++;
     fe0:	02000705 	andeq	r0, r0, #1310720	; 0x140000
  while (*str1 && (*str1 == *str2)) {
     fe4:	01060304 	tsteq	r6, r4, lsl #6
     fe8:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
  return *str1 - *str2;
     fec:	3d060304 	stccc	3, cr0, [r6, #-16]
}
     ff0:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    *(str1++) = *(str2++);
     ff4:	01060304 	tsteq	r6, r4, lsl #6
     ff8:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
  while (*str2) {
     ffc:	4b060304 	blmi	181c14 <__ROM_SIZE__+0x141c14>
  *str1 = '\0';
    1000:	02000705 	andeq	r0, r0, #1310720	; 0x140000
}
    1004:	01060304 	tsteq	r6, r4, lsl #6
  for (i = 0; i < size; i++) {
    1008:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    dest_char[i] = src_char[i];
    100c:	2f060304 	svccs	0x00060304
    1010:	02000705 	andeq	r0, r0, #1310720	; 0x140000
  for (i = 0; i < size; i++) {
    1014:	01060304 	tsteq	r6, r4, lsl #6
}
    1018:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
  for (i = 0; i < size; i++) {
    101c:	22060304 	andcs	r0, r6, #4, 6	; 0x10000000
    dest_char[i] = val;
    1020:	02001605 	andeq	r1, r0, #5242880	; 0x500000
  for (i = 0; i < size; i++) {
    1024:	01060304 	tsteq	r6, r4, lsl #6
}
    1028:	02002a05 	andeq	r2, r0, #20480	; 0x5000
void __attribute__((optimize("O0"), weak)) initial_setup(void) {
    102c:	059e0304 	ldreq	r0, [lr, #772]	; 0x304
    1030:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
  char *src = &_etext, *dst = &_data;
    1034:	52059e03 	andpl	r9, r5, #3, 28	; 0x30
    1038:	03040200 	movweq	r0, #16896	; 0x4200
  if (dst != src)
    103c:	0016059e 	mulseq	r6, lr, r5
    1040:	90030402 	andls	r0, r3, r2, lsl #8
    while (dst < &_edata) *(dst++) = *(src++);
    1044:	02002a05 	andeq	r2, r0, #20480	; 0x5000
    1048:	05900304 	ldreq	r0, [r0, #772]	; 0x304
    104c:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
    1050:	3e057403 	cdpcc	4, 0, cr7, cr5, cr3, {0}
    1054:	03040200 	movweq	r0, #16896	; 0x4200
    1058:	003c0520 	eorseq	r0, ip, r0, lsr #10
  for (dst = &_bss; dst < &_ebss; dst++) *dst = 0;
    105c:	66030402 	strvs	r0, [r3], -r2, lsl #8
    1060:	02005205 	andeq	r5, r0, #1342177280	; 0x50000000
    1064:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
    1068:	04020050 	streq	r0, [r2], #-80	; 0xffffffb0
    106c:	14053c03 	strne	r3, [r5], #-3075	; 0xfffff3fd
    1070:	03040200 	movweq	r0, #16896	; 0x4200
    1074:	00050520 	andeq	r0, r5, r0, lsr #10
  platform_init();
    1078:	06030402 	streq	r0, [r3], -r2, lsl #8
}
    107c:	0016054b 	andseq	r0, r6, fp, asr #10
    1080:	06030402 	streq	r0, [r3], -r2, lsl #8
    1084:	002a0501 	eoreq	r0, sl, r1, lsl #10
    1088:	3c030402 	cfstrscc	mvf0, [r3], {2}
    108c:	02002805 	andeq	r2, r0, #327680	; 0x50000
    1090:	05820304 	streq	r0, [r2, #772]	; 0x304
    1094:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
static void delete(void) {
    1098:	3c052003 	stccc	0, cr2, [r5], {3}
  __write_char__(BACK_SPACE);
    109c:	03040200 	movweq	r0, #16896	; 0x4200
    10a0:	00520574 	subseq	r0, r2, r4, ror r5
  __write_char__(SPACE);
    10a4:	20030402 	andcs	r0, r3, r2, lsl #8
  __write_char__(BACK_SPACE);
    10a8:	02005005 	andeq	r5, r0, #5
    10ac:	05580304 	ldrbeq	r0, [r8, #-772]	; 0xfffffcfc
}
    10b0:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
static void clear_prompt(int char_count) {
    10b4:	05052003 	streq	r2, [r5, #-3]
  while (char_count) {
    10b8:	03040200 	movweq	r0, #16896	; 0x4200
    delete ();
    10bc:	16052106 	strne	r2, [r5], -r6, lsl #2
  while (char_count) {
    10c0:	03040200 	movweq	r0, #16896	; 0x4200
}
    10c4:	2a050106 	bcs	1414e4 <__ROM_SIZE__+0x1014e4>
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    10c8:	03040200 	movweq	r0, #16896	; 0x4200
    auto_load[i].command(0, NULL);
    10cc:	00280566 	eoreq	r0, r8, r6, ror #10
    10d0:	3c030402 	cfstrscc	mvf0, [r3], {2}
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    10d4:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
    10d8:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
    10dc:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    10e0:	52058203 	andpl	r8, r5, #805306368	; 0x30000000
    10e4:	03040200 	movweq	r0, #16896	; 0x4200
}
    10e8:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
static int show_history(int argc, char **argv) {
    10ec:	50052e03 	andpl	r2, r5, r3, lsl #28
  uint32_t end_index = total_num_commands-1;
    10f0:	03040200 	movweq	r0, #16896	; 0x4200
  if (total_num_commands > NUM_HISTORY_ENTRIES) {
    10f4:	0014053c 	andseq	r0, r4, ip, lsr r5
    10f8:	20030402 	andcs	r0, r3, r2, lsl #8
    beg_index = total_num_commands - NUM_HISTORY_ENTRIES;
    10fc:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    1100:	21060304 	tstcs	r6, r4, lsl #6
  uint32_t beg_index = 0;
    1104:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    printf("%s\n", cmd_history[index % NUM_HISTORY_ENTRIES]);
    1108:	01060304 	tsteq	r6, r4, lsl #6
    110c:	03040200 	movweq	r0, #16896	; 0x4200
    1110:	002a052e 	eoreq	r0, sl, lr, lsr #10
    1114:	66030402 	strvs	r0, [r3], -r2, lsl #8
  for (uint32_t index = beg_index; index <= end_index; ++index) {
    1118:	03040200 	movweq	r0, #16896	; 0x4200
}
    111c:	0028053c 	eoreq	r0, r8, ip, lsr r5
    1120:	58030402 	stmdapl	r3, {r1, sl}
    1124:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
    1128:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
int cmd_exec_status(int argc, char **argv) {
    112c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
  printf("%d\n", __cmd_exec_status);
    1130:	52053c03 	andpl	r3, r5, #768	; 0x300
    1134:	03040200 	movweq	r0, #16896	; 0x4200
}
    1138:	00500520 	subseq	r0, r0, r0, lsr #10
    113c:	58030402 	stmdapl	r3, {r1, sl}
    1140:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
static int build_info(int argc, char **argv) {
    1144:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
  printf("Build: [" SHELL_VERSION ":" USER_REPO_VERSION "] - [" BUILD_USER
    1148:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
}
    114c:	76030603 	strvc	r0, [r3], -r3, lsl #12
    1150:	000f0520 	andeq	r0, pc, r0, lsr #10
static void execute(int argc, char **argv) {
    1154:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    1158:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
  for (int i = 0; table[i].command_name != NULL; i++) {
    115c:	01060104 	tsteq	r6, r4, lsl #2
    1160:	0c030105 	stfeqs	f0, [r3], {5}
    1164:	062e204a 	strteq	r2, [lr], -sl, asr #32
    1168:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    116c:	1800000b 	stmdane	r0, {r0, r1, r3}
    if (strcmp(argv[0], table[i].command_name) == 0) {
    1170:	13130305 	tstne	r3, #335544320	; 0x14000000
    1174:	01060a05 	tsteq	r6, r5, lsl #20
      __cmd_exec_status = table[i].command(argc, &argv[0]);
    1178:	20060f05 	andcs	r0, r6, r5, lsl #30
    117c:	01060305 	tsteq	r6, r5, lsl #6
    1180:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
    1184:	05200611 	streq	r0, [r0, #-1553]!	; 0xfffff9ef
  if (match_found == FALSE) {
    1188:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    printf("\"%s\": command not found. Use \"help\" to list all command.\n",
    118c:	07052a01 	streq	r2, [r5, -r1, lsl #20]
    1190:	03040200 	movweq	r0, #16896	; 0x4200
    __cmd_exec_status = -1;
    1194:	18052606 	stmdane	r5, {r1, r2, r9, sl, sp}
    1198:	03040200 	movweq	r0, #16896	; 0x4200
}
    119c:	16050106 	strne	r0, [r5], -r6, lsl #2
    11a0:	03040200 	movweq	r0, #16896	; 0x4200
    11a4:	00180582 	andseq	r0, r8, r2, lsl #11
    11a8:	06030402 	streq	r0, [r3], -r2, lsl #8
int help(int argc, char **argv) {
    11ac:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
  if (argc > 1 && (strcmp(argv[1], "-l")==0)) {
    11b0:	05200603 	streq	r0, [r0, #-1539]!	; 0xfffff9fd
    11b4:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
    11b8:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    11bc:	04020005 	streq	r0, [r2], #-5
    printf("use: help -l for list only.\n\n");
    11c0:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
  bool verbose = true;
    11c4:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    verbose = false;
    11c8:	002c0602 	eoreq	r0, ip, r2, lsl #12
    printf("\n");
    11cc:	06020402 	streq	r0, [r2], -r2, lsl #8
    i++;
    11d0:	000f0520 	andeq	r0, pc, r0, lsr #10
  while (table[i].command_name != NULL) {
    11d4:	06020402 	streq	r0, [r2], -r2, lsl #8
    11d8:	00030520 	andeq	r0, r3, r0, lsr #10
    11dc:	06020402 	streq	r0, [r2], -r2, lsl #8
    printf(table[i].command_name);
    11e0:	300c0501 	andcc	r0, ip, r1, lsl #10
    if (verbose) {
    11e4:	25010520 	strcs	r0, [r1, #-1312]	; 0xfffffae0
      printf("\n\t");
    11e8:	03061605 	movweq	r1, #26117	; 0x6605
      printf(table[i].command_help);
    11ec:	20062e79 	andcs	r2, r6, r9, ror lr
    11f0:	01052020 	tsteq	r5, r0, lsr #32
    11f4:	4a0a0306 	bmi	281e14 <__ROM_SIZE__+0x241e14>
    verbose = false;
    11f8:	15130305 	ldrne	r0, [r3, #-773]	; 0xfffffcfb
}
    11fc:	01060805 	tsteq	r6, r5, lsl #16
    1200:	21060305 	tstcs	r6, r5, lsl #6
    1204:	01061f05 	tsteq	r6, r5, lsl #30
    1208:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
    120c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    1210:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    1214:	03052012 	movweq	r2, #20498	; 0x5012
static void add_command_to_history(const char *cmd_str) {
    1218:	1f052106 	svcne	0x00052106
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    121c:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    1220:	06030520 	streq	r0, [r3], -r0, lsr #10
  int index = total_num_commands % NUM_HISTORY_ENTRIES;
    1224:	06120521 	ldreq	r0, [r2], -r1, lsr #10
    1228:	06030501 	streq	r0, [r3], -r1, lsl #10
    122c:	06080523 	streq	r0, [r8], -r3, lsr #10
    1230:	06030501 	streq	r0, [r3], -r1, lsl #10
  memcpy(&cmd_history[index], cmd_str, LINE_BUFF_SIZE);
    1234:	061f0521 	ldreq	r0, [pc], -r1, lsr #10
    1238:	20120501 	andscs	r0, r2, r1, lsl #10
    123c:	21060305 	tstcs	r6, r5, lsl #6
    1240:	01061205 	tsteq	r6, r5, lsl #4
  total_num_commands++;
    1244:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
  curr_command_ptr = total_num_commands;
    1248:	01060805 	tsteq	r6, r5, lsl #16
    124c:	21060305 	tstcs	r6, r5, lsl #6
    1250:	01061f05 	tsteq	r6, r5, lsl #30
    1254:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
static int parse_line(char **argv, char *line_buff, int argument_size) {
    1258:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    125c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
  int length = strlen(line_buff);
    1260:	05230603 	streq	r0, [r3, #-1539]!	; 0xfffff9fd
    1264:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
  int argc = 0;
    1268:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
         pos++)
    126c:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
    for (; line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    1270:	03052012 	movweq	r2, #20498	; 0x5012
    1274:	1f052106 	svcne	0x00052106
    1278:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    127c:	06030520 	streq	r0, [r3], -r0, lsr #10
    if (line_buff[pos] == '\t' || line_buff[pos] == SPACE)
    1280:	061f0521 	ldreq	r0, [pc], -r1, lsr #10
    1284:	20120501 	andscs	r0, r2, r1, lsl #10
      line_buff[pos] = END_OF_LINE;
    1288:	21060305 	tstcs	r6, r5, lsl #6
  while (pos <= length) {
    128c:	01061205 	tsteq	r6, r5, lsl #4
    if (line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    1290:	06210105 	strteq	r0, [r1], -r5, lsl #2
    1294:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    1298:	153d0603 	ldrne	r0, [sp, #-1539]!	; 0xfffff9fd
    129c:	06202e06 	strteq	r2, [r0], -r6, lsl #28
      argv[argc++] = &line_buff[pos];
    12a0:	060e0534 			; <UNDEFINED> instruction: 0x060e0534
    12a4:	06050501 	streq	r0, [r5], -r1, lsl #10
}
    12a8:	15053d35 	strne	r3, [r5, #-3381]	; 0xfffff2cb
static int prefix_match(char *sub, int len, const char *str) {
    12ac:	06587803 	ldrbeq	r7, [r8], -r3, lsl #16
    12b0:	06130520 	ldreq	r0, [r3], -r0, lsr #10
  if (sub == NULL || str == NULL || len <= 0 || len > strlen(str)) {
    12b4:	14050520 	strne	r0, [r5], #-1312	; 0xfffffae0
    12b8:	08053d3d 	stmdaeq	r5, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    12bc:	03050106 	movweq	r0, #20742	; 0x5106
    12c0:	01053506 	tsteq	r5, r6, lsl #10
  for (int i = 0; i<len; ++i) {
    12c4:	06205906 	strteq	r5, [r0], -r6, lsl #18
    12c8:	82020500 	andhi	r0, r2, #0, 10
    if (sub[i] != str[i]) {
    12cc:	1600000c 	strne	r0, [r0], -ip
    12d0:	03050106 	movweq	r0, #20742	; 0x5106
  for (int i = 0; i<len; ++i) {
    12d4:	06153d06 	ldreq	r3, [r5], -r6, lsl #26
}
    12d8:	3406202e 	strcc	r2, [r6], #-46	; 0xffffffd2
  return TRUE;
    12dc:	01060e05 	tsteq	r6, r5, lsl #28
      return FALSE;
    12e0:	36060505 	strcc	r0, [r6], -r5, lsl #10
}
    12e4:	78031c05 	stmdavc	r3, {r0, r2, sl, fp, ip}
static void handle_up_arrow(char *cmd_buff, int *char_count) {
    12e8:	0520063c 	streq	r0, [r0, #-1596]!	; 0xfffff9c4
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    12ec:	0520061a 	streq	r0, [r0, #-1562]!	; 0xfffff9e6
    12f0:	3d3d1405 	cfldrscc	mvf1, [sp, #-20]!	; 0xffffffec
    12f4:	06080559 			; <UNDEFINED> instruction: 0x06080559
      curr_command_ptr == 0) {
    12f8:	34010501 	strcc	r0, [r1], #-1281	; 0xfffffaff
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    12fc:	05000620 	streq	r0, [r0, #-1568]	; 0xfffff9e0
    printf("%s", cmd_buff);
    1300:	000cbc02 	andeq	fp, ip, r2, lsl #24
    1304:	01200300 			; <UNDEFINED> instruction: 0x01200300
  memset(cmd_buff, 0, LINE_BUFF_SIZE);
    1308:	13130305 	tstne	r3, #335544320	; 0x14000000
    130c:	01060a05 	tsteq	r6, r5, lsl #20
  curr_command_ptr--;
    1310:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
    1314:	04020005 	streq	r0, [r2], #-5
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    1318:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    131c:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
    1320:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    1324:	0402000c 	streq	r0, [r2], #-12
    1328:	21052003 	tstcs	r5, r3
    132c:	03040200 	movweq	r0, #16896	; 0x4200
    1330:	02005606 	andeq	r5, r0, #6291456	; 0x600000
  *char_count = strlen(cmd_buff);
    1334:	20060304 	andcs	r0, r6, r4, lsl #6
    1338:	02000f05 	andeq	r0, r0, #5, 30
  printf("%s", cmd_buff);
    133c:	20060104 	andcs	r0, r6, r4, lsl #2
    1340:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    1344:	01060104 	tsteq	r6, r4, lsl #2
    1348:	06320105 	ldrteq	r0, [r2], -r5, lsl #2
static void handle_down_arrow(char *cmd_buff, int *char_count) {
    134c:	207de903 	rsbscs	lr, sp, r3, lsl #18
    1350:	03050106 	movweq	r0, #20742	; 0x5106
  memset(cmd_buff, 0, LINE_BUFF_SIZE);
    1354:	01052106 	tsteq	r5, r6, lsl #2
    1358:	23062f06 	movwcs	r2, #28422	; 0x6f06
  *char_count = 0;
    135c:	03050106 	movweq	r0, #20742	; 0x5106
  if (curr_command_ptr == total_num_commands) return;
    1360:	052f3d06 	streq	r3, [pc, #-3334]!	; 662 <printf_numbers+0x72>
    1364:	20670601 	rsbcs	r0, r7, r1, lsl #12
  curr_command_ptr++;
    1368:	02050006 	andeq	r0, r5, #6
    136c:	00000cf6 	strdeq	r0, [r0], -r6
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    1370:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    1374:	06210603 	strteq	r0, [r1], -r3, lsl #12
    1378:	2f01052e 	svccs	0x0001052e
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    137c:	01ef0306 	mvneq	r0, r6, lsl #6
    1380:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    1384:	06300603 	ldrteq	r0, [r0], -r3, lsl #12
    1388:	01052020 	tsteq	r5, r0, lsr #32
  *char_count = strlen(cmd_buff);
    138c:	0623062f 	strteq	r0, [r3], -pc, lsr #12
    1390:	06030501 	streq	r0, [r3], -r1, lsl #10
  printf("%s", cmd_buff);
    1394:	20200630 	eorcs	r0, r0, r0, lsr r6
    1398:	062f0105 	strteq	r0, [pc], -r5, lsl #2
}
    139c:	06201603 	strteq	r1, [r0], -r3, lsl #12
    13a0:	06030501 	streq	r0, [r3], -r1, lsl #10
void set_read_char(int (*func)(void)) { __read_char__ = func; }
    13a4:	0c051359 	stceq	3, cr1, [r5], {89}	; 0x59
    13a8:	03050106 	movweq	r0, #20742	; 0x5106
    13ac:	0c052f06 	stceq	15, cr2, [r5], {6}
void set_read_char2(int (*func)(void)) { __read_char2__ = func; }
    13b0:	0a051106 	beq	1457d0 <__ROM_SIZE__+0x1057d0>
    13b4:	20030521 	andcs	r0, r3, r1, lsr #10
    13b8:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
void set_write_char(void (*func)(char)) { __write_char__ = func; }
    13bc:	22060304 	andcs	r0, r6, #4, 6	; 0x10000000
    13c0:	03040200 	movweq	r0, #16896	; 0x4200
    13c4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
void set_write_char2(void (*func)(char)) { __write_char2__ = func; }
    13c8:	02004b03 	andeq	r4, r0, #3072	; 0xc00
    13cc:	05130304 	ldreq	r0, [r3, #-772]	; 0xfffffcfc
    13d0:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
}
    13d4:	1d050d03 	stcne	13, cr0, [r5, #-12]
}
    13d8:	03040200 	movweq	r0, #16896	; 0x4200
  if (cmd_buff == NULL || char_count <= 0) {
    13dc:	08050106 	stmdaeq	r5, {r1, r2, r8}
static void handle_tab(char *cmd_buff, int *char_count) {
    13e0:	03040200 	movweq	r0, #16896	; 0x4200
    13e4:	00090524 	andeq	r0, r9, r4, lsr #10
  int last_match = -1;
    13e8:	21030402 	tstcs	r3, r2, lsl #8
  int match_count = 0;
    13ec:	02000f05 	andeq	r0, r0, #5, 30
  int i = 0;
    13f0:	1b060104 	blne	181808 <__ROM_SIZE__+0x141808>
    i++;
    13f4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
  while (table[i].command_name != NULL) { //loop over all commands
    13f8:	01060104 	tsteq	r6, r4, lsl #2
    13fc:	01053606 	tsteq	r5, r6, lsl #12
    1400:	062e4b06 	strteq	r4, [lr], -r6, lsl #22
    if (prefix_match(cmd_buff, *char_count, table[i].command_name)) {
    1404:	56020500 	strpl	r0, [r2], -r0, lsl #10
    1408:	1500000d 	strne	r0, [r0, #-13]
    140c:	03050106 	movweq	r0, #20742	; 0x5106
      match_count++;
    1410:	13136706 	tstne	r3, #1572864	; 0x180000
      printf("\n%s", table[i].command_name);
    1414:	01060a05 	tsteq	r6, r5, lsl #20
    1418:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
      last_match = i;
    141c:	04020005 	streq	r0, [r2], #-5
  if (match_count == 1) {
    1420:	00220603 	eoreq	r0, r2, r3, lsl #12
    1424:	59030402 	stmdbpl	r3, {r1, sl}
  if (match_count) {
    1428:	03040200 	movweq	r0, #16896	; 0x4200
}
    142c:	0017054b 	andseq	r0, r7, fp, asr #10
    memcpy(cmd_buff, table[last_match].command_name, LINE_BUFF_SIZE);
    1430:	06030402 	streq	r0, [r3], -r2, lsl #8
    1434:	00050501 	andeq	r0, r5, r1, lsl #10
    1438:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    143c:	03040200 	movweq	r0, #16896	; 0x4200
    *char_count = strlen(cmd_buff);
    1440:	02004b06 	andeq	r4, r0, #6144	; 0x1800
    1444:	05590304 	ldrbeq	r0, [r9, #-772]	; 0xfffffcfc
    1448:	04020009 	streq	r0, [r2], #-9
    printf("\n");
    144c:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    1450:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
    prepend_prompt();
    1454:	7a030603 	bvc	c2c68 <__ROM_SIZE__+0x82c68>
    printf(PROMPT);
    1458:	001d0520 	andseq	r0, sp, r0, lsr #10
    145c:	06030402 	streq	r0, [r3], -r2, lsl #8
    printf("%s", cmd_buff);
    1460:	000f0501 	andeq	r0, pc, r1, lsl #10
    1464:	06010402 	streq	r0, [r1], -r2, lsl #8
    1468:	00030520 	andeq	r0, r3, r0, lsr #10
    146c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1470:	03010501 	movweq	r0, #5377	; 0x1501
    1474:	063c2e09 	ldrteq	r2, [ip], -r9, lsl #28
    1478:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
__attribute__((weak)) int active_prompt() { return TRUE; }
    147c:	0300000d 	movweq	r0, #13
static void shell(void) {
    1480:	0106010a 	tsteq	r6, sl, lsl #2
  int count = 0;
    1484:	59060305 	stmdbpl	r6, {r0, r2, r8, r9}
  for (int i = 0; i < LINE_BUFF_SIZE; i++) line_buff[i] = 0;
    1488:	05131314 	ldreq	r1, [r3, #-788]	; 0xfffffcec
    148c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1490:	0305200a 	movweq	r2, #20490	; 0x500a
    1494:	060b0520 	streq	r0, [fp], -r0, lsr #10
    1498:	05200e03 	streq	r0, [r0, #-3587]!	; 0xfffff1fd
  for (int i = 0; i < MAX_ARG_COUNT; i++) argv[i] = NULL;
    149c:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    14a0:	054b060b 	strbeq	r0, [fp, #-1547]	; 0xfffff9f5
    14a4:	017a032e 	cmneq	sl, lr, lsr #6
    14a8:	0a052006 	beq	1494c8 <__ROM_SIZE__+0x1094c8>
    14ac:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
    14b0:	04020005 	streq	r0, [r2], #-5
  prepend_prompt();
    14b4:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
  printf(PROMPT);
    14b8:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
  int special_key = 0;
    14bc:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
        special_key = 1;
    14c0:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
        line_buff[count] = END_OF_LINE;
    14c4:	0c052e02 	stceq	14, cr2, [r5], {2}
    14c8:	02040200 	andeq	r0, r4, #0, 4
    14cc:	002e0558 	eoreq	r0, lr, r8, asr r5
        __write_char__(NEW_LINE);
    14d0:	06020402 	streq	r0, [r2], -r2, lsl #8
    14d4:	054a6903 	strbeq	r6, [sl, #-2307]	; 0xfffff6fd
  add_command_to_history(line_buff);
    14d8:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
    14dc:	05200602 	streq	r0, [r0, #-1538]!	; 0xfffff9fe
  argc = parse_line(argv, line_buff, MAX_ARG_COUNT);
    14e0:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    14e4:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
  if (argc > 0) execute(argc, argv);
    14e8:	04020003 	streq	r0, [r2], #-3
}
    14ec:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
        if (!__echo) {
    14f0:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
    14f4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
        if (count == 0) continue;
    14f8:	67310607 	ldrvs	r0, [r1, -r7, lsl #12]!
        count--;
    14fc:	060f054d 	streq	r0, [pc], -sp, asr #10
        line_buff[count] = END_OF_LINE;
    1500:	00250501 	eoreq	r0, r5, r1, lsl #10
    1504:	06010402 	streq	r0, [r1], -r2, lsl #8
    1508:	00070520 	andeq	r0, r7, r0, lsr #10
        delete ();
    150c:	06010402 	streq	r0, [r1], -r2, lsl #8
      if (__echo) {
    1510:	06090501 	streq	r0, [r9], -r1, lsl #10
    1514:	06140531 			; <UNDEFINED> instruction: 0x06140531
        __write_char__(c);
    1518:	3c0c0501 	cfstr32cc	mvfx0, [ip], {1}
    151c:	33060905 	movwcc	r0, #26885	; 0x6905
          delete ();
    1520:	01061505 	tsteq	r6, r5, lsl #10
          delete ();
    1524:	06090520 	streq	r0, [r9], -r0, lsr #10
    1528:	060a053d 			; <UNDEFINED> instruction: 0x060a053d
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    152c:	1e090514 	mcrne	5, 0, r0, cr9, cr4, {0}
        special_key = 2;
    1530:	2e270105 	sufcss	f0, f7, f5
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    1534:	70010100 	andvc	r0, r1, r0, lsl #2
        special_key = 0;
    1538:	03000001 	movweq	r0, #1
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    153c:	00007200 	andeq	r7, r0, r0, lsl #4
        if (!__echo) {
    1540:	fb010200 	blx	41d4a <__ROM_SIZE__+0x1d4a>
          clear_prompt(count + 4);
    1544:	01000d0e 	tsteq	r0, lr, lsl #26
    1548:	00010101 	andeq	r0, r1, r1, lsl #2
        if (c == 'A') {
    154c:	00010000 	andeq	r0, r1, r0
          handle_down_arrow(line_buff, &count);
    1550:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    1554:	2f656d6f 	svccs	0x00656d6f
        special_key = 0;
    1558:	61647264 	cmnvs	r4, r4, ror #4
          clear_prompt(count);
    155c:	652f6576 	strvs	r6, [pc, #-1398]!	; fee <strcmp+0x12>
    1560:	2f626f66 	svccs	0x00626f66
          handle_up_arrow(line_buff, &count);
    1564:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
    1568:	696c2f6c 	stmdbvs	ip!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    156c:	32612f62 	rsbcc	r2, r1, #392	; 0x188
        handle_tab(line_buff, &count);
    1570:	752f0069 	strvc	r0, [pc, #-105]!	; 150f <shell+0x8f>
    1574:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 13b0 <set_read_char2>
      loop();
    1578:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    if (!active_prompt()) {
    157c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    1580:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    s = __read_char__();
    1584:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1588:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    if (s != -1) {
    158c:	2e30312f 	rsfcssp	f3, f0, #10.0
      c = (char)s;
    1590:	2f312e33 	svccs	0x00312e33
      if (c == CARRIAGE_RETURN || c == NEW_LINE) {
    1594:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1598:	00656475 	rsbeq	r6, r5, r5, ror r4
      if (c == DELETE || c == BACK_SPACE) {
    159c:	69326100 	ldmdbvs	r2!, {r8, sp, lr}
    15a0:	0100632e 	tsteq	r0, lr, lsr #6
      } else if (c == ESCAPE) {
    15a4:	74730000 	ldrbtvc	r0, [r3], #-0
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    15a8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    15ac:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    15b0:	05000000 	streq	r0, [r0, #-0]
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    15b4:	0205001b 	andeq	r0, r5, #27
    15b8:	00000e10 	andeq	r0, r0, r0, lsl lr
    15bc:	06011203 	streq	r1, [r1], -r3, lsl #4
      else if (c == TAB) {
    15c0:	06030501 	streq	r0, [r3], -r1, lsl #10
        line_buff[count] = c;
    15c4:	08051321 	stmdaeq	r5, {r0, r5, r8, r9, ip}
    15c8:	060c0501 	streq	r0, [ip], -r1, lsl #10
    15cc:	1f070501 	svcne	0x00070501
        count++;
    15d0:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
  if (argc > 0) execute(argc, argv);
    15d4:	04020005 	streq	r0, [r2], #-5
    15d8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
}
    15dc:	0402000f 	streq	r0, [r2], #-15
    15e0:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    15e4:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
void prompt() {
    15e8:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
  initial_setup();
    15ec:	03040200 	movweq	r0, #16896	; 0x4200
  exec_auto_cmds();
    15f0:	0023052e 	eoreq	r0, r3, lr, lsr #10
  setup();
    15f4:	06030402 	streq	r0, [r3], -r2, lsl #8
    shell();
    15f8:	0013051f 	andseq	r0, r3, pc, lsl r5
int exec(char *cmd_str) {
    15fc:	20010402 	andcs	r0, r1, r2, lsl #8
    1600:	02001605 	andeq	r1, r0, #5242880	; 0x500000
  argc = parse_line(argv, cmd_str, MAX_ARG_COUNT);
    1604:	01060104 	tsteq	r6, r4, lsl #2
    1608:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
  if (argc > 0) execute(argc, argv);
    160c:	06200104 	strteq	r0, [r0], -r4, lsl #2
  return __cmd_exec_status;
    1610:	06010531 			; <UNDEFINED> instruction: 0x06010531
}
    1614:	06200513 			; <UNDEFINED> instruction: 0x06200513
  if (argc > 0) execute(argc, argv);
    1618:	05010622 	streq	r0, [r1, #-1570]	; 0xfffff9de
    161c:	13210603 			; <UNDEFINED> instruction: 0x13210603
    1620:	01080514 	tsteq	r8, r4, lsl r5
cmd get_function_addr(char *cmd_str) {
    1624:	01061105 	tsteq	r6, r5, lsl #2
  for (int i = 0; table[i].command_name != NULL; i++) {
    1628:	051d0c05 	ldreq	r0, [sp, #-3077]	; 0xfffff3fb
    162c:	0c052303 	stceq	3, cr2, [r5], {3}
    1630:	1e052306 	cdpne	3, 0, cr2, cr5, cr6, {0}
    1634:	0f050106 	svceq	0x00050106
    1638:	0607053c 			; <UNDEFINED> instruction: 0x0607053c
    if (strcmp(cmd_str, table[i].command_name) == 0) {
    163c:	061c052f 	ldreq	r0, [ip], -pc, lsr #10
    1640:	06050501 	streq	r0, [r5], -r1, lsl #10
      return table[i].command;
    1644:	09051328 	stmdbeq	r5, {r3, r5, r8, r9, ip}
    1648:	28050106 	stmdacs	r5, {r1, r2, r8}
  return NULL;
    164c:	02040200 	andeq	r0, r4, #0, 4
}
    1650:	2e730306 	cdpcs	3, 7, cr0, cr3, cr6, {0}
    1654:	02002905 	andeq	r2, r0, #81920	; 0x14000
    1658:	01060204 	tsteq	r6, r4, lsl #4
    165c:	02001805 	andeq	r1, r0, #327680	; 0x50000
    1660:	20060104 	andcs	r0, r6, r4, lsl #2
    1664:	02001b05 	andeq	r1, r0, #5120	; 0x1400
    1668:	01060104 	tsteq	r6, r4, lsl #2
    166c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    1670:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    1674:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    1678:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    167c:	07053c08 	streq	r3, [r5, -r8, lsl #24]
    1680:	16052f06 	strne	r2, [r5], -r6, lsl #30
    1684:	05200106 	streq	r0, [r0, #-262]!	; 0xfffffefa
    1688:	0523060c 	streq	r0, [r3, #-1548]!	; 0xfffff9f4
    168c:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    1690:	07053c0f 	streq	r3, [r5, -pc, lsl #24]
    1694:	1c052f06 	stcne	15, cr2, [r5], {6}
    1698:	20200106 	eorcs	r0, r0, r6, lsl #2
    169c:	03060305 	movweq	r0, #25349	; 0x6305
    16a0:	0105010a 	tsteq	r5, sl, lsl #2
    16a4:	01021306 	tsteq	r2, r6, lsl #6
    16a8:	02010100 	andeq	r0, r1, #0, 2
    16ac:	03000003 	movweq	r0, #3
    16b0:	0000f700 	andeq	pc, r0, r0, lsl #14
    16b4:	fb010200 	blx	41ebe <__ROM_SIZE__+0x1ebe>
    16b8:	01000d0e 	tsteq	r0, lr, lsl #26
    16bc:	00010101 	andeq	r0, r1, r1, lsl #2
    16c0:	00010000 	andeq	r0, r1, r0
    16c4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    16c8:	2f656d6f 	svccs	0x00656d6f
    16cc:	61647264 	cmnvs	r4, r4, ror #4
    16d0:	652f6576 	strvs	r6, [pc, #-1398]!	; 1162 <execute+0xe>
    16d4:	2f626f66 	svccs	0x00626f66
    16d8:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
    16dc:	696c2f6c 	stmdbvs	ip!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    16e0:	74752f62 	ldrbtvc	r2, [r5], #-3938	; 0xfffff09e
    16e4:	00736c69 	rsbseq	r6, r3, r9, ror #24
    16e8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    16ec:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    16f0:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    16f4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    16f8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    16fc:	61652d65 	cmnvs	r5, r5, ror #26
    1700:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
    1704:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
    1708:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    170c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1710:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    1714:	2f656d6f 	svccs	0x00656d6f
    1718:	61647264 	cmnvs	r4, r4, ror #4
    171c:	652f6576 	strvs	r6, [pc, #-1398]!	; 11ae <help+0x2>
    1720:	2f626f66 	svccs	0x00626f66
    1724:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
    1728:	68732f6c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    172c:	006c6c65 	rsbeq	r6, ip, r5, ror #24
    1730:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 167c <_varw32+0x4>
    1734:	72642f65 	rsbvc	r2, r4, #404	; 0x194
    1738:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
    173c:	6f66652f 	svcvs	0x0066652f
    1740:	68732f62 	ldmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1744:	2f6c6c65 	svccs	0x006c6c65
    1748:	2f62696c 	svccs	0x0062696c
    174c:	00693261 	rsbeq	r3, r9, r1, ror #4
    1750:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 169c <_varw32_bit>
    1754:	72642f65 	rsbvc	r2, r4, #404	; 0x194
    1758:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
    175c:	6f66652f 	svcvs	0x0066652f
    1760:	68732f62 	ldmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1764:	2f6c6c65 	svccs	0x006c6c65
    1768:	2f62696c 	svccs	0x0062696c
    176c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    1770:	00006674 	andeq	r6, r0, r4, ror r6
    1774:	6c697475 	cfstrdvs	mvd7, [r9], #-468	; 0xfffffe2c
    1778:	00632e73 	rsbeq	r2, r3, r3, ror lr
    177c:	73000001 	movwvc	r0, #1
    1780:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1784:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1788:	73000002 	movwvc	r0, #2
    178c:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
    1790:	0300682e 	movweq	r6, #2094	; 0x82e
    1794:	32610000 	rsbcc	r0, r1, #0
    1798:	00682e69 	rsbeq	r2, r8, r9, ror #28
    179c:	70000004 	andvc	r0, r0, r4
    17a0:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    17a4:	00682e66 	rsbeq	r2, r8, r6, ror #28
    17a8:	00000005 	andeq	r0, r0, r5
    17ac:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    17b0:	000e6c02 	andeq	r6, lr, r2, lsl #24
    17b4:	01180300 	tsteq	r8, r0, lsl #6
    17b8:	03050106 	movweq	r0, #20742	; 0x5106
    17bc:	06052106 	streq	r2, [r5], -r6, lsl #2
    17c0:	03050106 	movweq	r0, #20742	; 0x5106
    17c4:	13053306 	movwne	r3, #21254	; 0x5306
    17c8:	2e200106 	sufcss	f0, f0, f6
    17cc:	21060305 	tstcs	r6, r5, lsl #6
    17d0:	06080514 			; <UNDEFINED> instruction: 0x06080514
    17d4:	06030501 	streq	r0, [r3], -r1, lsl #10
    17d8:	06200622 	strteq	r0, [r0], -r2, lsr #12
    17dc:	060a052f 	streq	r0, [sl], -pc, lsr #10
    17e0:	21010501 	tstcs	r1, r1, lsl #10
    17e4:	03060505 	movweq	r0, #25861	; 0x6505
    17e8:	20062075 	andcs	r2, r6, r5, ror r0
    17ec:	052f0620 	streq	r0, [pc, #-1568]!	; 11d4 <help+0x28>
    17f0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    17f4:	0c030621 	stceq	6, cr0, [r3], {33}	; 0x21
    17f8:	05010674 	streq	r0, [r1, #-1652]	; 0xfffff98c
    17fc:	052f0603 	streq	r0, [pc, #-1539]!	; 1201 <help+0x55>
    1800:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1804:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    1808:	20010613 	andcs	r0, r1, r3, lsl r6
    180c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    1810:	06130521 	ldreq	r0, [r3], -r1, lsr #10
    1814:	03052001 	movweq	r2, #20481	; 0x5001
    1818:	0f052f06 	svceq	0x00052f06
    181c:	03050106 	movweq	r0, #20742	; 0x5106
    1820:	0a052206 	beq	14a040 <__ROM_SIZE__+0x10a040>
    1824:	01050106 	tsteq	r5, r6, lsl #2
    1828:	06050521 	streq	r0, [r5], -r1, lsr #10
    182c:	06207803 	strteq	r7, [r0], -r3, lsl #16
    1830:	2f062020 	svccs	0x00062020
    1834:	01060c05 	tsteq	r6, r5, lsl #24
    1838:	03062605 	movweq	r2, #26117	; 0x6605
    183c:	01066609 	tsteq	r6, r9, lsl #12
    1840:	2f060305 	svccs	0x00060305
    1844:	01060605 	tsteq	r6, r5, lsl #12
    1848:	33060305 	movwcc	r0, #25349	; 0x6305
    184c:	01061305 	tsteq	r6, r5, lsl #6
    1850:	03052e20 	movweq	r2, #24096	; 0x5e20
    1854:	15052106 	strne	r2, [r5, #-262]	; 0xfffffefa
    1858:	05200106 	streq	r0, [r0, #-262]!	; 0xfffffefa
    185c:	053e0603 	ldreq	r0, [lr, #-1539]!	; 0xfffff9fd
    1860:	11050108 	tstne	r5, r8, lsl #2
    1864:	03050106 	movweq	r0, #20742	; 0x5106
    1868:	05052020 	streq	r2, [r5, #-32]	; 0xffffffe0
    186c:	01790306 	cmneq	r9, r6, lsl #6
    1870:	06202006 	strteq	r2, [r0], -r6
    1874:	060c052f 	streq	r0, [ip], -pc, lsr #10
    1878:	00050501 	andeq	r0, r5, r1, lsl #10
    187c:	06030402 	streq	r0, [r3], -r2, lsl #8
    1880:	000a0543 	andeq	r0, sl, r3, asr #10
    1884:	06030402 	streq	r0, [r3], -r2, lsl #8
    1888:	00050501 	andeq	r0, r5, r1, lsl #10
    188c:	06030402 	streq	r0, [r3], -r2, lsl #8
    1890:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    1894:	0a054c03 	beq	1548a8 <__ROM_SIZE__+0x1148a8>
    1898:	03040200 	movweq	r0, #16896	; 0x4200
    189c:	2e050106 	adfcss	f0, f5, f6
    18a0:	03040200 	movweq	r0, #16896	; 0x4200
    18a4:	2f051c06 	svccs	0x00051c06
    18a8:	03040200 	movweq	r0, #16896	; 0x4200
    18ac:	22050106 	andcs	r0, r5, #-2147483647	; 0x80000001
    18b0:	01040200 	mrseq	r0, R12_usr
    18b4:	03052006 	movweq	r2, #20486	; 0x5006
    18b8:	01040200 	mrseq	r0, R12_usr
    18bc:	02000106 	andeq	r0, r0, #-2147483647	; 0x80000001
    18c0:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    18c4:	0105190a 	tsteq	r5, sl, lsl #18
    18c8:	065c0621 	ldrbeq	r0, [ip], -r1, lsr #12
    18cc:	06030501 	streq	r0, [r3], -r1, lsl #10
    18d0:	0606052f 	streq	r0, [r6], -pc, lsr #10
    18d4:	06030501 	streq	r0, [r3], -r1, lsl #10
    18d8:	06130532 			; <UNDEFINED> instruction: 0x06130532
    18dc:	052e2001 	streq	r2, [lr, #-1]!
    18e0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    18e4:	20010616 	andcs	r0, r1, r6, lsl r6
    18e8:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    18ec:	01061605 	tsteq	r6, r5, lsl #12
    18f0:	06030520 	streq	r0, [r3], -r0, lsr #10
    18f4:	0606053e 			; <UNDEFINED> instruction: 0x0606053e
    18f8:	06030501 	streq	r0, [r3], -r1, lsl #10
    18fc:	06060533 			; <UNDEFINED> instruction: 0x06060533
    1900:	06030501 	streq	r0, [r3], -r1, lsl #10
    1904:	060c0533 			; <UNDEFINED> instruction: 0x060c0533
    1908:	06030501 	streq	r0, [r3], -r1, lsl #10
    190c:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
    1910:	20080501 	andcs	r0, r8, r1, lsl #10
    1914:	21060305 	tstcs	r6, r5, lsl #6
    1918:	01061305 	tsteq	r6, r5, lsl #6
    191c:	201c052e 	andscs	r0, ip, lr, lsr #10
    1920:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    1924:	052f0603 	streq	r0, [pc, #-1539]!	; 1329 <handle_up_arrow+0x43>
    1928:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    192c:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    1930:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    1934:	05052401 	streq	r2, [r5, #-1025]	; 0xfffffbff
    1938:	206e0306 	rsbcs	r0, lr, r6, lsl #6
    193c:	2f062006 	svccs	0x00062006
    1940:	06200624 	strteq	r0, [r0], -r4, lsr #12
    1944:	0303052f 	movweq	r0, #13615	; 0x352f
    1948:	054b010a 	strbeq	r0, [fp, #-266]	; 0xfffffef6
    194c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    1950:	06940601 	ldreq	r0, [r4], r1, lsl #12
    1954:	06030501 	streq	r0, [r3], -r1, lsl #10
    1958:	0606052f 	streq	r0, [r6], -pc, lsr #10
    195c:	06030501 	streq	r0, [r3], -r1, lsl #10
    1960:	06130532 			; <UNDEFINED> instruction: 0x06130532
    1964:	052e2001 	streq	r2, [lr, #-1]!
    1968:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    196c:	20010616 	andcs	r0, r1, r6, lsl r6
    1970:	3e060305 	cdpcc	3, 0, cr0, cr6, cr5, {0}
    1974:	01060605 	tsteq	r6, r5, lsl #12
    1978:	33060305 	movwcc	r0, #25349	; 0x6305
    197c:	01060c05 	tsteq	r6, r5, lsl #24
    1980:	21060305 	tstcs	r6, r5, lsl #6
    1984:	01061c05 	tsteq	r6, r5, lsl #24
    1988:	21060305 	tstcs	r6, r5, lsl #6
    198c:	062e2e06 	strteq	r2, [lr], -r6, lsl #28
    1990:	060a052f 	streq	r0, [sl], -pc, lsr #10
    1994:	25010501 	strcs	r0, [r1, #-1281]	; 0xfffffaff
    1998:	03060505 	movweq	r0, #25861	; 0x6505
    199c:	20062074 	andcs	r2, r6, r4, ror r0
    19a0:	03052f06 	movweq	r2, #24326	; 0x5f06
    19a4:	4b010903 	blmi	43db8 <__ROM_SIZE__+0x3db8>
    19a8:	01060a05 	tsteq	r6, r5, lsl #20
    19ac:	01000902 	tsteq	r0, r2, lsl #18
    19b0:	0001bd01 	andeq	fp, r1, r1, lsl #26
    19b4:	78000300 	stmdavc	r0, {r8, r9}
    19b8:	02000000 	andeq	r0, r0, #0
    19bc:	0d0efb01 	vstreq	d15, [lr, #-4]
    19c0:	01010100 	mrseq	r0, (UNDEF: 17)
    19c4:	00000001 	andeq	r0, r0, r1
    19c8:	01000001 	tsteq	r0, r1
    19cc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1918 <rsbox+0xd0>
    19d0:	72642f65 	rsbvc	r2, r4, #404	; 0x194
    19d4:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
    19d8:	6f66652f 	svcvs	0x0066652f
    19dc:	68732f62 	ldmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    19e0:	2f6c6c65 	svccs	0x006c6c65
    19e4:	2f62696c 	svccs	0x0062696c
    19e8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    19ec:	2f00676e 	svccs	0x0000676e
    19f0:	2f727375 	svccs	0x00727375
    19f4:	2f62696c 	svccs	0x0062696c
    19f8:	2f636367 	svccs	0x00636367
    19fc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1a00:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1a04:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1a08:	30312f69 	eorscc	r2, r1, r9, ror #30
    1a0c:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    1a10:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1a14:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1a18:	74730000 	ldrbtvc	r0, [r3], #-0
    1a1c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    1a20:	0100632e 	tsteq	r0, lr, lsr #6
    1a24:	74730000 	ldrbtvc	r0, [r3], #-0
    1a28:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    1a2c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1a30:	05000000 	streq	r0, [r0, #-0]
    1a34:	02050020 	andeq	r0, r5, #32
    1a38:	00000fcc 	andeq	r0, r0, ip, asr #31
    1a3c:	06011203 	streq	r1, [r1], -r3, lsl #4
    1a40:	06030501 	streq	r0, [r3], -r1, lsl #10
    1a44:	0a051321 	beq	1466d0 <__ROM_SIZE__+0x1066d0>
    1a48:	09051106 	stmdbeq	r5, {r1, r2, r8, ip}
    1a4c:	06050521 	streq	r0, [r5], -r1, lsr #10
    1a50:	06080521 	streq	r0, [r8], -r1, lsr #10
    1a54:	06090501 	streq	r0, [r9], -r1, lsl #10
    1a58:	060d051f 			; <UNDEFINED> instruction: 0x060d051f
    1a5c:	20090501 	andcs	r0, r9, r1, lsl #10
    1a60:	31060305 	tstcc	r6, r5, lsl #6
    1a64:	13060105 	movwne	r0, #24837	; 0x6105
    1a68:	22063005 	andcs	r3, r6, #5
    1a6c:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    1a70:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    1a74:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    1a78:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    1a7c:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    1a80:	06010609 	streq	r0, [r1], -r9, lsl #12
    1a84:	060a051e 			; <UNDEFINED> instruction: 0x060a051e
    1a88:	20090501 	andcs	r0, r9, r1, lsl #10
    1a8c:	02001d05 	andeq	r1, r0, #320	; 0x140
    1a90:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
    1a94:	04020010 	streq	r0, [r2], #-16
    1a98:	03052001 	movweq	r2, #20481	; 0x5001
    1a9c:	12053206 	andne	r3, r5, #1610612736	; 0x60000000
    1aa0:	01050106 	tsteq	r5, r6, lsl #2
    1aa4:	062c0521 	strteq	r0, [ip], -r1, lsr #10
    1aa8:	13030530 	movwne	r0, #13616	; 0x3530
    1aac:	01060905 	tsteq	r6, r5, lsl #18
    1ab0:	21060505 	tstcs	r6, r5, lsl #10
    1ab4:	01061705 	tsteq	r6, r5, lsl #14
    1ab8:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
    1abc:	052d0609 	streq	r0, [sp, #-1545]!	; 0xfffff9f7
    1ac0:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    1ac4:	03052009 	movweq	r2, #20489	; 0x5009
    1ac8:	09053106 	stmdbeq	r5, {r1, r2, r8, ip, sp}
    1acc:	03050106 	movweq	r0, #20742	; 0x5106
    1ad0:	01052106 	tsteq	r5, r6, lsl #2
    1ad4:	05201306 	streq	r1, [r0, #-774]!	; 0xfffffcfa
    1ad8:	05220638 	streq	r0, [r2, #-1592]!	; 0xfffff9c8
    1adc:	13131303 	tstne	r3, #201326592	; 0xc000000
    1ae0:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    1ae4:	20030501 	andcs	r0, r3, r1, lsl #10
    1ae8:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    1aec:	21060304 	tstcs	r6, r4, lsl #6
    1af0:	02001c05 	andeq	r1, r0, #1280	; 0x500
    1af4:	01060304 	tsteq	r6, r4, lsl #6
    1af8:	02001205 	andeq	r1, r0, #1342177280	; 0x50000000
    1afc:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    1b00:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
    1b04:	052d0603 	streq	r0, [sp, #-1539]!	; 0xfffff9fd
    1b08:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    1b0c:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    1b10:	0402000f 	streq	r0, [r2], #-15
    1b14:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    1b18:	04020003 	streq	r0, [r2], #-3
    1b1c:	06010601 	streq	r0, [r1], -r1, lsl #12
    1b20:	06010531 			; <UNDEFINED> instruction: 0x06010531
    1b24:	30052013 	andcc	r2, r5, r3, lsl r0
    1b28:	03052206 	movweq	r2, #20998	; 0x5206
    1b2c:	05131313 	ldreq	r1, [r3, #-787]	; 0xfffffced
    1b30:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    1b34:	05052003 	streq	r2, [r5, #-3]
    1b38:	03040200 	movweq	r0, #16896	; 0x4200
    1b3c:	12052106 	andne	r2, r5, #-2147483647	; 0x80000001
    1b40:	03040200 	movweq	r0, #16896	; 0x4200
    1b44:	19050106 	stmdbne	r5, {r1, r2, r8}
    1b48:	03040200 	movweq	r0, #16896	; 0x4200
    1b4c:	1a051f06 	bne	14976c <__ROM_SIZE__+0x10976c>
    1b50:	03040200 	movweq	r0, #16896	; 0x4200
    1b54:	0f050106 	svceq	0x00050106
    1b58:	01040200 	mrseq	r0, R12_usr
    1b5c:	03052006 	movweq	r2, #20486	; 0x5006
    1b60:	01040200 	mrseq	r0, R12_usr
    1b64:	32060106 	andcc	r0, r6, #-2147483647	; 0x80000001
    1b68:	13060105 	movwne	r0, #24837	; 0x6105
    1b6c:	00010220 	andeq	r0, r1, r0, lsr #4
    1b70:	09c10101 	stmibeq	r1, {r0, r8}^
    1b74:	00030000 	andeq	r0, r3, r0
    1b78:	000000db 	ldrdeq	r0, [r0], -fp
    1b7c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1b80:	0101000d 	tsteq	r1, sp
    1b84:	00000101 	andeq	r0, r0, r1, lsl #2
    1b88:	00000100 	andeq	r0, r0, r0, lsl #2
    1b8c:	6f682f01 	svcvs	0x00682f01
    1b90:	642f656d 	strtvs	r6, [pc], #-1389	; 1b98 <rsbox+0x350>
    1b94:	76616472 			; <UNDEFINED> instruction: 0x76616472
    1b98:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
    1b9c:	732f626f 			; <UNDEFINED> instruction: 0x732f626f
    1ba0:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
    1ba4:	6568732f 	strbvs	r7, [r8, #-815]!	; 0xfffffcd1
    1ba8:	2f006c6c 	svccs	0x00006c6c
    1bac:	2f727375 	svccs	0x00727375
    1bb0:	2f62696c 	svccs	0x0062696c
    1bb4:	2f636367 	svccs	0x00636367
    1bb8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1bbc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1bc0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1bc4:	30312f69 	eorscc	r2, r1, r9, ror #30
    1bc8:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    1bcc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1bd0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1bd4:	6f682f00 	svcvs	0x00682f00
    1bd8:	642f656d 	strtvs	r6, [pc], #-1389	; 1be0 <rsbox+0x398>
    1bdc:	76616472 			; <UNDEFINED> instruction: 0x76616472
    1be0:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
    1be4:	732f626f 			; <UNDEFINED> instruction: 0x732f626f
    1be8:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
    1bec:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1bf0:	6972702f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, ip, sp, lr}^
    1bf4:	0066746e 	rsbeq	r7, r6, lr, ror #8
    1bf8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1b44 <rsbox+0x2fc>
    1bfc:	72642f65 	rsbvc	r2, r4, #404	; 0x194
    1c00:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
    1c04:	6f66652f 	svcvs	0x0066652f
    1c08:	68732f62 	ldmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1c0c:	2f6c6c65 	svccs	0x006c6c65
    1c10:	2f62696c 	svccs	0x0062696c
    1c14:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1c18:	0000676e 	andeq	r6, r0, lr, ror #14
    1c1c:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
    1c20:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    1c24:	73000001 	movwvc	r0, #1
    1c28:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
    1c2c:	0100682e 	tsteq	r0, lr, lsr #16
    1c30:	74730000 	ldrbtvc	r0, [r3], #-0
    1c34:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    1c38:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1c3c:	72700000 	rsbsvc	r0, r0, #0
    1c40:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    1c44:	0300682e 	movweq	r6, #2094	; 0x82e
    1c48:	74730000 	ldrbtvc	r0, [r3], #-0
    1c4c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    1c50:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1c54:	05000000 	streq	r0, [r0, #-0]
    1c58:	02050040 	andeq	r0, r5, #64	; 0x40
    1c5c:	0000102c 	andeq	r1, r0, ip, lsr #32
    1c60:	0102ee03 	tsteq	r2, r3, lsl #28
    1c64:	0b030305 	bleq	c2880 <__ROM_SIZE__+0x82880>
    1c68:	0905133c 	stmdbeq	r5, {r2, r3, r4, r5, r8, r9, ip}
    1c6c:	19050106 	stmdbne	r5, {r1, r2, r8}
    1c70:	0305202e 	movweq	r2, #20526	; 0x502e
    1c74:	06052706 	streq	r2, [r5], -r6, lsl #14
    1c78:	052e0106 	streq	r0, [lr, #-262]!	; 0xfffffefa
    1c7c:	052f0605 	streq	r0, [pc, #-1541]!	; 167f <_varw32+0x7>
    1c80:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    1c84:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
    1c88:	05200602 	streq	r0, [r0, #-1538]!	; 0xfffff9fe
    1c8c:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    1c90:	00010602 	andeq	r0, r1, r2, lsl #12
    1c94:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
    1c98:	02002005 	andeq	r2, r0, #5
    1c9c:	00200204 	eoreq	r0, r0, r4, lsl #4
    1ca0:	20020402 	andcs	r0, r2, r2, lsl #8
    1ca4:	02002605 	andeq	r2, r0, #5242880	; 0x500000
    1ca8:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
    1cac:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    1cb0:	0b052002 	bleq	149cc0 <__ROM_SIZE__+0x109cc0>
    1cb4:	01040200 	mrseq	r0, R12_usr
    1cb8:	03052006 	movweq	r2, #20486	; 0x5006
    1cbc:	060c054d 	streq	r0, [ip], -sp, asr #10
    1cc0:	2e030501 	cfsh32cs	mvfx0, mvfx3, #1
    1cc4:	02002a05 	andeq	r2, r0, #20480	; 0x5000
    1cc8:	20060304 	andcs	r0, r6, r4, lsl #6
    1ccc:	02002f05 	andeq	r2, r0, #5, 30
    1cd0:	01060304 	tsteq	r6, r4, lsl #6
    1cd4:	03040200 	movweq	r0, #16896	; 0x4200
    1cd8:	00230520 	eoreq	r0, r3, r0, lsr #10
    1cdc:	06030402 	streq	r0, [r3], -r2, lsl #8
    1ce0:	0026052e 	eoreq	r0, r6, lr, lsr #10
    1ce4:	06030402 	streq	r0, [r3], -r2, lsl #8
    1ce8:	00150501 	andseq	r0, r5, r1, lsl #10
    1cec:	06010402 	streq	r0, [r1], -r2, lsl #8
    1cf0:	0003053c 	andeq	r0, r3, ip, lsr r5
    1cf4:	06010402 	streq	r0, [r1], -r2, lsl #8
    1cf8:	10030601 	andne	r0, r3, r1, lsl #12
    1cfc:	0601054a 	streq	r0, [r1], -sl, asr #10
    1d00:	05203c2f 	streq	r3, [r0, #-3119]!	; 0xfffff3d1
    1d04:	0500061a 	streq	r0, [r0, #-1562]	; 0xfffff9e6
    1d08:	00109802 	andseq	r9, r0, r2, lsl #16
    1d0c:	7db10300 	ldcvc	3, cr0, [r1]
    1d10:	21030501 	tstcs	r3, r1, lsl #10
    1d14:	01053d4b 	tsteq	r5, fp, asr #26
    1d18:	2a053d06 	bcs	151138 <__ROM_SIZE__+0x111138>
    1d1c:	01063e06 	tsteq	r6, r6, lsl #28
    1d20:	2f060305 	svccs	0x00060305
    1d24:	01060905 	tsteq	r6, r5, lsl #18
    1d28:	21060505 	tstcs	r6, r5, lsl #10
    1d2c:	060f052f 	streq	r0, [pc], -pc, lsr #10
    1d30:	06090501 	streq	r0, [r9], -r1, lsl #10
    1d34:	0601051e 			; <UNDEFINED> instruction: 0x0601051e
    1d38:	22052032 	andcs	r2, r5, #50	; 0x32
    1d3c:	02050006 	andeq	r0, r5, #6
    1d40:	000010c6 	andeq	r1, r0, r6, asr #1
    1d44:	01028f03 	tsteq	r2, r3, lsl #30
    1d48:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
    1d4c:	0c050108 	stfeqs	f0, [r5], {8}
    1d50:	03050106 	movweq	r0, #20742	; 0x5106
    1d54:	00050520 	andeq	r0, r5, r0, lsr #10
    1d58:	06030402 	streq	r0, [r3], -r2, lsl #8
    1d5c:	00110521 	andseq	r0, r1, r1, lsr #10
    1d60:	06030402 	streq	r0, [r3], -r2, lsl #8
    1d64:	00050501 	andeq	r0, r5, r1, lsl #10
    1d68:	20030402 	andcs	r0, r3, r2, lsl #8
    1d6c:	02003605 	andeq	r3, r0, #5242880	; 0x500000
    1d70:	3b060304 	blcc	182988 <__ROM_SIZE__+0x142988>
    1d74:	02003705 	andeq	r3, r0, #1310720	; 0x140000
    1d78:	01060304 	tsteq	r6, r4, lsl #6
    1d7c:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    1d80:	20060104 	andcs	r0, r6, r4, lsl #2
    1d84:	02001c05 	andeq	r1, r0, #1280	; 0x500
    1d88:	01060104 	tsteq	r6, r4, lsl #2
    1d8c:	02001f05 	andeq	r1, r0, #5, 30
    1d90:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
    1d94:	04020003 	streq	r0, [r2], #-3
    1d98:	01052001 	tsteq	r5, r1
    1d9c:	30052031 	andcc	r2, r5, r1, lsr r0
    1da0:	02050006 	andeq	r0, r5, #6
    1da4:	000010ec 	andeq	r1, r0, ip, ror #1
    1da8:	017e9f03 	cmneq	lr, r3, lsl #30
    1dac:	03050106 	movweq	r0, #20742	; 0x5106
    1db0:	2a052106 	bcs	14a1d0 <__ROM_SIZE__+0x10a1d0>
    1db4:	03050106 	movweq	r0, #20742	; 0x5106
    1db8:	05133d06 	ldreq	r3, [r3, #-3334]	; 0xfffff2fa
    1dbc:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    1dc0:	05052006 	streq	r2, [r5, #-6]
    1dc4:	24052f06 	strcs	r2, [r5], #-3846	; 0xfffff0fa
    1dc8:	053c0106 	ldreq	r0, [ip, #-262]!	; 0xfffffefa
    1dcc:	05051e0c 	streq	r1, [r5, #-3596]	; 0xfffff1f4
    1dd0:	03040200 	movweq	r0, #16896	; 0x4200
    1dd4:	26053306 	strcs	r3, [r5], -r6, lsl #6
    1dd8:	03040200 	movweq	r0, #16896	; 0x4200
    1ddc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1de0:	03040200 	movweq	r0, #16896	; 0x4200
    1de4:	0038052e 	eorseq	r0, r8, lr, lsr #10
    1de8:	06030402 	streq	r0, [r3], -r2, lsl #8
    1dec:	00240565 	eoreq	r0, r4, r5, ror #10
    1df0:	20010402 	andcs	r0, r1, r2, lsl #8
    1df4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    1df8:	01060104 	tsteq	r6, r4, lsl #2
    1dfc:	01053206 	tsteq	r5, r6, lsl #4
    1e00:	052e1306 	streq	r1, [lr, #-774]!	; 0xfffffcfa
    1e04:	0500062c 	streq	r0, [r0, #-1580]	; 0xfffff9d4
    1e08:	00112c02 	andseq	r2, r1, r2, lsl #24
    1e0c:	02c90300 	sbceq	r0, r9, #0, 6
    1e10:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
    1e14:	06210603 	strteq	r0, [r1], -r3, lsl #12
    1e18:	2f06202e 	svccs	0x0006202e
    1e1c:	13060105 	movwne	r0, #24837	; 0x6105
    1e20:	00062e05 	andeq	r2, r6, r5, lsl #28
    1e24:	11440205 	cmpne	r4, r5, lsl #4
    1e28:	8c030000 	stchi	0, cr0, [r3], {-0}
    1e2c:	0106017f 	tsteq	r6, pc, ror r1
    1e30:	21060305 	tstcs	r6, r5, lsl #6
    1e34:	30062006 	andcc	r2, r6, r6
    1e38:	13060105 	movwne	r0, #24837	; 0x6105
    1e3c:	00062c05 	andeq	r2, r6, r5, lsl #24
    1e40:	11540205 	cmpne	r4, r5, lsl #4
    1e44:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    1e48:	0106017e 	tsteq	r6, lr, ror r1
    1e4c:	4b060305 	blmi	182a68 <__ROM_SIZE__+0x142a68>
    1e50:	01080514 	tsteq	r8, r4, lsl r5
    1e54:	01060c05 	tsteq	r6, r5, lsl #24
    1e58:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
    1e5c:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    1e60:	05200602 	streq	r0, [r0, #-1538]!	; 0xfffff9fe
    1e64:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
    1e68:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    1e6c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    1e70:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    1e74:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
    1e78:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
    1e7c:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
    1e80:	03054a01 	movweq	r4, #23041	; 0x5a01
    1e84:	01040200 	mrseq	r0, R12_usr
    1e88:	06050520 	streq	r0, [r5], -r0, lsr #10
    1e8c:	06090521 	streq	r0, [r9], -r1, lsr #10
    1e90:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
    1e94:	2f060705 	svccs	0x00060705
    1e98:	01062005 	tsteq	r6, r5
    1e9c:	052e2305 	streq	r2, [lr, #-773]!	; 0xfffffcfb
    1ea0:	1905201b 	stmdbne	r5, {r0, r1, r3, r4, sp}
    1ea4:	0607053c 			; <UNDEFINED> instruction: 0x0607053c
    1ea8:	0106132f 	tsteq	r6, pc, lsr #6
    1eac:	16060305 	strne	r0, [r6], -r5, lsl #6
    1eb0:	13050520 	movwne	r0, #21792	; 0x5520
    1eb4:	0617054c 	ldreq	r0, [r7], -ip, asr #10
    1eb8:	4c010501 	cfstr32mi	mvfx0, [r1], {1}
    1ebc:	0621052e 	strteq	r0, [r1], -lr, lsr #10
    1ec0:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    1ec4:	03000011 	movweq	r0, #17
    1ec8:	060101cc 	streq	r0, [r1], -ip, asr #3
    1ecc:	06030501 	streq	r0, [r3], -r1, lsl #10
    1ed0:	05141421 	ldreq	r1, [r4, #-1057]	; 0xfffffbdf
    1ed4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1ed8:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
    1edc:	02003c01 	andeq	r3, r0, #256	; 0x100
    1ee0:	00200104 	eoreq	r0, r0, r4, lsl #2
    1ee4:	20010402 	andcs	r0, r1, r2, lsl #8
    1ee8:	02001005 	andeq	r1, r0, #5
    1eec:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    1ef0:	05230605 	streq	r0, [r3, #-1541]!	; 0xfffff9fb
    1ef4:	05370608 	ldreq	r0, [r7, #-1544]!	; 0xfffff9f8
    1ef8:	0505230d 	streq	r2, [r5, #-781]	; 0xfffffcf3
    1efc:	2e0d0306 	cdpcs	3, 0, cr0, cr13, cr6, {0}
    1f00:	0606053d 			; <UNDEFINED> instruction: 0x0606053d
    1f04:	06090501 	streq	r0, [r9], -r1, lsl #10
    1f08:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    1f0c:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    1f10:	09054a12 	stmdbeq	r5, {r1, r4, r9, fp, lr}
    1f14:	06050520 	streq	r0, [r5], -r0, lsr #10
    1f18:	08053021 	stmdaeq	r5, {r0, r5, ip, sp}
    1f1c:	07050106 	streq	r0, [r5, -r6, lsl #2]
    1f20:	053d2f06 	ldreq	r2, [sp, #-3846]!	; 0xfffff0fa
    1f24:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    1f28:	0d052e07 	stceq	14, cr2, [r5, #-28]	; 0xffffffe4
    1f2c:	054a7603 	strbeq	r7, [sl, #-1539]	; 0xfffff9fd
    1f30:	11030603 	tstne	r3, r3, lsl #12
    1f34:	0601052e 	streq	r0, [r1], -lr, lsr #10
    1f38:	39052013 	stmdbcc	r5, {r0, r1, r4, sp}
    1f3c:	02050006 	andeq	r0, r5, #6
    1f40:	00001214 	andeq	r1, r0, r4, lsl r2
    1f44:	017da203 	cmneq	sp, r3, lsl #4
    1f48:	05150305 	ldreq	r0, [r5, #-773]	; 0xfffffcfb
    1f4c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1f50:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
    1f54:	1a051d01 	bne	149360 <__ROM_SIZE__+0x109360>
    1f58:	01040200 	mrseq	r0, R12_usr
    1f5c:	00170531 	andseq	r0, r7, r1, lsr r5
    1f60:	3c010402 	cfstrscc	mvf0, [r1], {2}
    1f64:	05270105 	streq	r0, [r7, #-261]!	; 0xfffffefb
    1f68:	051c0603 	ldreq	r0, [ip, #-1539]	; 0xfffff9fd
    1f6c:	05010622 	streq	r0, [r1, #-1570]	; 0xfffff9de
    1f70:	03052e07 	movweq	r2, #24071	; 0x5e07
    1f74:	0a055906 	beq	158394 <__ROM_SIZE__+0x118394>
    1f78:	03050106 	movweq	r0, #20742	; 0x5106
    1f7c:	2f064a2e 	svccs	0x00064a2e
    1f80:	01061505 	tsteq	r6, r5, lsl #10
    1f84:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    1f88:	01061405 	tsteq	r6, r5, lsl #8
    1f8c:	0648053c 			; <UNDEFINED> instruction: 0x0648053c
    1f90:	5800c903 	stmdapl	r0, {r0, r1, r8, fp, lr, pc}
    1f94:	03050106 	movweq	r0, #20742	; 0x5106
    1f98:	13133d06 	tstne	r3, #384	; 0x180
    1f9c:	01061005 	tsteq	r6, r5
    1fa0:	03052e20 	movweq	r2, #24096	; 0x5e20
    1fa4:	07052206 	streq	r2, [r5, -r6, lsl #4]
    1fa8:	051f0f06 	ldreq	r0, [pc, #-3846]	; 10aa <delete+0x12>
    1fac:	07052409 	streq	r2, [r5, -r9, lsl #8]
    1fb0:	0a052806 	beq	14bfd0 <__ROM_SIZE__+0x10bfd0>
    1fb4:	060d0511 			; <UNDEFINED> instruction: 0x060d0511
    1fb8:	060c0501 	streq	r0, [ip], -r1, lsl #10
    1fbc:	0615051e 			; <UNDEFINED> instruction: 0x0615051e
    1fc0:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    1fc4:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
    1fc8:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    1fcc:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    1fd0:	05052e02 	streq	r2, [r5, #-3586]	; 0xfffff1fe
    1fd4:	08053306 	stmdaeq	r5, {r1, r2, r8, r9, ip, sp}
    1fd8:	20050106 	andcs	r0, r5, r6, lsl #2
    1fdc:	01040200 	mrseq	r0, R12_usr
    1fe0:	0607052e 	streq	r0, [r7], -lr, lsr #10
    1fe4:	0616052f 	ldreq	r0, [r6], -pc, lsr #10
    1fe8:	06050501 	streq	r0, [r5], -r1, lsl #10
    1fec:	06080530 			; <UNDEFINED> instruction: 0x06080530
    1ff0:	06090501 	streq	r0, [r9], -r1, lsl #10
    1ff4:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    1ff8:	12052f05 	andne	r2, r5, #5, 30
    1ffc:	08050106 	stmdaeq	r5, {r1, r2, r8}
    2000:	0020052e 	eoreq	r0, r0, lr, lsr #10
    2004:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    2008:	02003b05 	andeq	r3, r0, #5120	; 0x1400
    200c:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
    2010:	05300607 	ldreq	r0, [r0, #-1543]!	; 0xfffff9f9
    2014:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    2018:	05202e10 	streq	r2, [r0, #-3600]!	; 0xfffff1f0
    201c:	0d030603 	stceq	6, cr0, [r3, #-12]
    2020:	06010520 	streq	r0, [r1], -r0, lsr #10
    2024:	3e052013 	mcrcc	0, 0, r2, cr5, cr3, {0}
    2028:	02050006 	andeq	r0, r5, #6
    202c:	000012aa 	andeq	r1, r0, sl, lsr #5
    2030:	017fb803 	cmneq	pc, r3, lsl #16
    2034:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    2038:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    203c:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    2040:	13051f01 	movwne	r1, #24321	; 0x5f01
    2044:	01040200 	mrseq	r0, R12_usr
    2048:	0022054b 	eoreq	r0, r2, fp, asr #10
    204c:	20020402 	andcs	r0, r2, r2, lsl #8
    2050:	02003705 	andeq	r3, r0, #1310720	; 0x140000
    2054:	002e0304 	eoreq	r0, lr, r4, lsl #6
    2058:	20030402 	andcs	r0, r3, r2, lsl #8
    205c:	02002e05 	andeq	r2, r0, #5, 28	; 0x50
    2060:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    2064:	1305320c 	movwne	r3, #21004	; 0x520c
    2068:	01040200 	mrseq	r0, R12_usr
    206c:	03052006 	movweq	r2, #20486	; 0x5006
    2070:	01040200 	mrseq	r0, R12_usr
    2074:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2078:	0c052f06 	stceq	15, cr2, [r5], {6}
    207c:	10050106 	andne	r0, r5, r6, lsl #2
    2080:	20080520 	andcs	r0, r8, r0, lsr #10
    2084:	02001a05 	andeq	r1, r0, #20480	; 0x5000
    2088:	2d060204 	sfmcs	f0, 4, [r6, #-16]
    208c:	02040200 	andeq	r0, r4, #0, 4
    2090:	02002006 	andeq	r2, r0, #6
    2094:	05200204 	streq	r0, [r0, #-516]!	; 0xfffffdfc
    2098:	050f0605 	streq	r0, [pc, #-1541]	; 1a9b <rsbox+0x253>
    209c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    20a0:	200a0301 	andcs	r0, sl, r1, lsl #6
    20a4:	051f0a05 	ldreq	r0, [pc, #-2565]	; 16a7 <_varw32_bit+0xb>
    20a8:	052e2a0e 	streq	r2, [lr, #-2574]!	; 0xfffff5f2
    20ac:	050d0605 	streq	r0, [sp, #-1541]	; 0xfffff9fb
    20b0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    20b4:	200a0301 	andcs	r0, sl, r1, lsl #6
    20b8:	03063e05 	movweq	r3, #28165	; 0x6e05
    20bc:	06207fb6 			; <UNDEFINED> instruction: 0x06207fb6
    20c0:	06030501 	streq	r0, [r3], -r1, lsl #10
    20c4:	062d052f 	strteq	r0, [sp], -pc, lsr #10
    20c8:	3c180501 	cfldr32cc	mvfx0, [r8], {1}
    20cc:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    20d0:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
    20d4:	43053d01 	movwmi	r3, #23809	; 0x5d01
    20d8:	01040200 	mrseq	r0, R12_usr
    20dc:	0605052d 	streq	r0, [r5], -sp, lsr #10
    20e0:	20200622 	eorcs	r0, r0, r2, lsr #12
    20e4:	01052f06 	tsteq	r5, r6, lsl #30
    20e8:	010b0306 	tsteq	fp, r6, lsl #6
    20ec:	03060305 	movweq	r0, #25349	; 0x6305
    20f0:	2e062078 	mcrcs	0, 0, r2, cr6, cr8, {3}
    20f4:	13053006 	movwne	r3, #20486	; 0x5006
    20f8:	03050106 	movweq	r0, #20742	; 0x5106
    20fc:	21054b06 	tstcs	r5, r6, lsl #22
    2100:	07050106 	streq	r0, [r5, -r6, lsl #2]
    2104:	06030520 	streq	r0, [r3], -r0, lsr #10
    2108:	06140559 			; <UNDEFINED> instruction: 0x06140559
    210c:	20030501 	andcs	r0, r3, r1, lsl #10
    2110:	053d063c 	ldreq	r0, [sp, #-1596]!	; 0xfffff9c4
    2114:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    2118:	03053c0f 	movweq	r3, #23567	; 0x5c0f
    211c:	40052206 	andmi	r2, r5, r6, lsl #4
    2120:	05010693 	streq	r0, [r1, #-1683]	; 0xfffff96d
    2124:	063d0603 	ldrteq	r0, [sp], -r3, lsl #12
    2128:	052f062e 	streq	r0, [pc, #-1582]!	; 1b02 <rsbox+0x2ba>
    212c:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    2130:	052f0603 	streq	r0, [pc, #-1539]!	; 1b35 <rsbox+0x2ed>
    2134:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    2138:	03053c06 	movweq	r3, #23558	; 0x5c06
    213c:	13053006 	movwne	r3, #20486	; 0x5006
    2140:	03050106 	movweq	r0, #20742	; 0x5106
    2144:	21054b06 	tstcs	r5, r6, lsl #22
    2148:	07050106 	streq	r0, [r5, -r6, lsl #2]
    214c:	06030520 	streq	r0, [r3], -r0, lsr #10
    2150:	06140559 			; <UNDEFINED> instruction: 0x06140559
    2154:	20030501 	andcs	r0, r3, r1, lsl #10
    2158:	11056706 	tstne	r5, r6, lsl #14
    215c:	0f050106 	svceq	0x00050106
    2160:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    2164:	06010522 	streq	r0, [r1], -r2, lsr #10
    2168:	2705204b 	strcs	r2, [r5, -fp, asr #32]
    216c:	02050006 	andeq	r0, r5, #6
    2170:	000013a4 	andeq	r1, r0, r4, lsr #7
    2174:	017fba03 	cmneq	pc, r3, lsl #20
    2178:	05012905 	streq	r2, [r1, #-2309]	; 0xfffff6fb
    217c:	05010637 	streq	r0, [r1, #-1591]	; 0xfffff9c9
    2180:	28052e3f 	stmdacs	r5, {r0, r1, r2, r3, r4, r5, r9, sl, fp, sp}
    2184:	2a054b06 	bcs	154da4 <__ROM_SIZE__+0x114da4>
    2188:	06390501 	ldrteq	r0, [r9], -r1, lsl #10
    218c:	2e410501 	cdpcs	5, 4, cr0, cr1, cr1, {0}
    2190:	4c062905 			; <UNDEFINED> instruction: 0x4c062905
    2194:	05012b05 	streq	r2, [r1, #-2821]	; 0xfffff4fb
    2198:	0501063a 	streq	r0, [r1, #-1594]	; 0xfffff9c6
    219c:	2a052e42 	bcs	14daac <__ROM_SIZE__+0x10daac>
    21a0:	2c054b06 			; <UNDEFINED> instruction: 0x2c054b06
    21a4:	063c0501 	ldrteq	r0, [ip], -r1, lsl #10
    21a8:	2e440501 	cdpcs	5, 4, cr0, cr4, cr1, {0}
    21ac:	4c062805 	stcmi	8, cr2, [r6], {5}
    21b0:	05140105 	ldreq	r0, [r4, #-261]	; 0xfffffefb
    21b4:	01052227 	tsteq	r5, r7, lsr #4
    21b8:	232d0514 			; <UNDEFINED> instruction: 0x232d0514
    21bc:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    21c0:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    21c4:	e4030639 	str	r0, [r3], #-1593	; 0xfffff9c7
    21c8:	03052000 	movweq	r2, #20480	; 0x5000
    21cc:	06060513 			; <UNDEFINED> instruction: 0x06060513
    21d0:	00390501 	eorseq	r0, r9, r1, lsl #10
    21d4:	2d010402 	cfstrscs	mvf0, [r1, #-8]
    21d8:	02001805 	andeq	r1, r0, #327680	; 0x50000
    21dc:	054b0104 	strbeq	r0, [fp, #-260]	; 0xfffffefc
    21e0:	2d2d2607 	stccs	6, cr2, [sp, #-28]!	; 0xffffffe4
    21e4:	03060505 	movweq	r0, #25861	; 0x6505
    21e8:	06052e0c 	streq	r2, [r5], -ip, lsl #28
    21ec:	09050106 	stmdbeq	r5, {r1, r2, r8}
    21f0:	20770306 	rsbscs	r0, r7, r6, lsl #6
    21f4:	01060f05 	tsteq	r6, r5, lsl #30
    21f8:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
    21fc:	05052009 	streq	r2, [r5, #-9]
    2200:	09052306 	stmdbeq	r5, {r1, r2, r8, r9, sp}
    2204:	08050106 	stmdaeq	r5, {r1, r2, r8}
    2208:	0607054a 	streq	r0, [r7], -sl, asr #10
    220c:	0612052f 	ldreq	r0, [r2], -pc, lsr #10
    2210:	06070501 	streq	r0, [r7], -r1, lsl #10
    2214:	1205132f 	andne	r1, r5, #-1140850688	; 0xbc000000
    2218:	03055706 	movweq	r5, #22278	; 0x5706
    221c:	06053606 	streq	r3, [r5], -r6, lsl #12
    2220:	03050106 	movweq	r0, #20742	; 0x5106
    2224:	06054206 	streq	r4, [r5], -r6, lsl #4
    2228:	01050106 	tsteq	r5, r6, lsl #2
    222c:	06050542 	streq	r0, [r5], -r2, asr #10
    2230:	052e7503 	streq	r7, [lr, #-1283]!	; 0xfffffafd
    2234:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    2238:	67062e05 	strvs	r2, [r6, -r5, lsl #28]
    223c:	01061305 	tsteq	r6, r5, lsl #6
    2240:	053c1105 	ldreq	r1, [ip, #-261]!	; 0xfffffefb
    2244:	59330605 	ldmdbpl	r3!, {r0, r2, r9, sl}
    2248:	66064b2f 	strvs	r4, [r6], -pc, lsr #22
    224c:	03062b05 	movweq	r2, #27397	; 0x6b05
    2250:	05827f81 	streq	r7, [r2, #3969]	; 0xf81
    2254:	3a05012d 	bcc	142710 <__ROM_SIZE__+0x102710>
    2258:	19050106 	stmdbne	r5, {r1, r2, r8}
    225c:	02050006 	andeq	r0, r5, #6
    2260:	00001480 	andeq	r1, r0, r0, lsl #9
    2264:	0101af03 	tsteq	r1, r3, lsl #30
    2268:	132f0305 			; <UNDEFINED> instruction: 0x132f0305
    226c:	01060705 	tsteq	r6, r5, lsl #14
    2270:	2f060305 	svccs	0x00060305
    2274:	14131413 	ldrne	r1, [r3], #-1043	; 0xfffffbed
    2278:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    227c:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    2280:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
    2284:	05200603 	streq	r0, [r0, #-1539]!	; 0xfffff9fd
    2288:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
    228c:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    2290:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
    2294:	05660603 	strbeq	r0, [r6, #-1539]!	; 0xfffff9fd
    2298:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
    229c:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    22a0:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    22a4:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    22a8:	04020003 	streq	r0, [r2], #-3
    22ac:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
    22b0:	1305300c 	movwne	r3, #20492	; 0x500c
    22b4:	01040200 	mrseq	r0, R12_usr
    22b8:	03052006 	movweq	r2, #20486	; 0x5006
    22bc:	01040200 	mrseq	r0, R12_usr
    22c0:	2b050106 	blcs	1426e0 <__ROM_SIZE__+0x1026e0>
    22c4:	03040200 	movweq	r0, #16896	; 0x4200
    22c8:	33052e06 	movwcc	r2, #24070	; 0x5e06
    22cc:	03040200 	movweq	r0, #16896	; 0x4200
    22d0:	26050106 	strcs	r0, [r5], -r6, lsl #2
    22d4:	03040200 	movweq	r0, #16896	; 0x4200
    22d8:	27056606 	strcs	r6, [r5, -r6, lsl #12]
    22dc:	03040200 	movweq	r0, #16896	; 0x4200
    22e0:	02000106 	andeq	r0, r0, #-2147483647	; 0x80000001
    22e4:	00200304 	eoreq	r0, r0, r4, lsl #6
    22e8:	20030402 	andcs	r0, r3, r2, lsl #8
    22ec:	14060305 	strne	r0, [r6], #-773	; 0xfffffcfb
    22f0:	0607052f 	streq	r0, [r7], -pc, lsr #10
    22f4:	053c7503 	ldreq	r7, [ip, #-1283]!	; 0xfffffafd
    22f8:	2e2a0315 	mcrcs	3, 1, r0, cr10, cr5, {0}
    22fc:	06090520 	streq	r0, [r9], -r0, lsr #10
    2300:	05206d03 	streq	r6, [r0, #-3331]!	; 0xfffff2fd
    2304:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    2308:	0905201a 	stmdbeq	r5, {r1, r3, r4, sp}
    230c:	3c065906 			; <UNDEFINED> instruction: 0x3c065906
    2310:	03052106 	movweq	r2, #20742	; 0x5106
    2314:	0100c703 	tsteq	r0, r3, lsl #14
    2318:	060a0540 	streq	r0, [sl], -r0, asr #10
    231c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2320:	0606055b 			; <UNDEFINED> instruction: 0x0606055b
    2324:	01052001 	tsteq	r5, r1
    2328:	06090521 	streq	r0, [r9], -r1, lsr #10
    232c:	2e7fb503 	cdpcs	5, 7, cr11, cr15, cr3, {0}
    2330:	01060d05 	tsteq	r6, r5, lsl #26
    2334:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    2338:	05260609 	streq	r0, [r6, #-1545]!	; 0xfffff9f7
    233c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2340:	0905200c 	stmdbeq	r5, {r2, r3, sp}
    2344:	0e053006 	cdpeq	0, 0, cr3, cr5, cr6, {0}
    2348:	09050106 	stmdbeq	r5, {r1, r2, r8}
    234c:	1a053006 	bne	14e36c <__ROM_SIZE__+0x10e36c>
    2350:	09050106 	stmdbeq	r5, {r1, r2, r8}
    2354:	07055906 	streq	r5, [r5, -r6, lsl #18]
    2358:	052e2a03 	streq	r2, [lr, #-2563]!	; 0xfffff5fd
    235c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    2360:	09052e0a 	stmdbeq	r5, {r1, r3, r9, sl, fp, sp}
    2364:	0b052f06 	bleq	14df84 <__ROM_SIZE__+0x10df84>
    2368:	2f584b03 	svccs	0x00584b03
    236c:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    2370:	03060104 	movweq	r0, #24836	; 0x6104
    2374:	15053c0d 	strne	r3, [r5, #-3085]	; 0xfffff3f3
    2378:	2905202f 	stmdbcs	r5, {r0, r1, r2, r3, r5, sp}
    237c:	01040200 	mrseq	r0, R12_usr
    2380:	30150522 	andscc	r0, r5, r2, lsr #10
    2384:	00290520 	eoreq	r0, r9, r0, lsr #10
    2388:	22010402 	andcs	r0, r1, #33554432	; 0x2000000
    238c:	2f060905 	svccs	0x00060905
    2390:	01060d05 	tsteq	r6, r5, lsl #26
    2394:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    2398:	0621060b 	strteq	r0, [r1], -fp, lsl #12
    239c:	06090520 	streq	r0, [r9], -r0, lsr #10
    23a0:	053c0a03 	ldreq	r0, [ip, #-2563]!	; 0xfffff5fd
    23a4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    23a8:	0531060b 	ldreq	r0, [r1, #-1547]!	; 0xfffff9f5
    23ac:	05134d09 	ldreq	r4, [r3, #-3337]	; 0xfffff2f7
    23b0:	05110615 	ldreq	r0, [r1, #-1557]	; 0xfffff9eb
    23b4:	0b052109 	bleq	14a7e0 <__ROM_SIZE__+0x10a7e0>
    23b8:	20710306 	rsbscs	r0, r1, r6, lsl #6
    23bc:	03062006 	movweq	r2, #24582	; 0x6006
    23c0:	09053c09 	stmdbeq	r5, {r0, r3, sl, fp, ip, sp}
    23c4:	06580a03 	ldrbeq	r0, [r8], -r3, lsl #20
    23c8:	052f062e 	streq	r0, [pc, #-1582]!	; 1da2 <rsbox+0x55a>
    23cc:	200b0307 	andcs	r0, fp, r7, lsl #6
    23d0:	b7030305 	strlt	r0, [r3, -r5, lsl #6]
    23d4:	05052e7f 	streq	r2, [r5, #-3711]	; 0xfffff181
    23d8:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    23dc:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
    23e0:	32060505 	andcc	r0, r6, #20971520	; 0x1400000
    23e4:	01060905 	tsteq	r6, r5, lsl #18
    23e8:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
    23ec:	01060805 	tsteq	r6, r5, lsl #16
    23f0:	3d060705 	stccc	7, cr0, [r6, #-20]	; 0xffffffec
    23f4:	01060905 	tsteq	r6, r5, lsl #18
    23f8:	22060705 	andcs	r0, r6, #1310720	; 0x140000
    23fc:	01060a05 	tsteq	r6, r5, lsl #20
    2400:	02002005 	andeq	r2, r0, #5
    2404:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    2408:	05340607 	ldreq	r0, [r4, #-1543]!	; 0xfffff9f9
    240c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    2410:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
    2414:	0e052e01 	cdpeq	14, 0, cr2, cr5, cr1, {0}
    2418:	2e0d0306 	cdpcs	3, 0, cr0, cr13, cr6, {0}
    241c:	01061105 	tsteq	r6, r5, lsl #2
    2420:	31060e05 	tstcc	r6, r5, lsl #28
    2424:	01061105 	tsteq	r6, r5, lsl #2
    2428:	31060e05 	tstcc	r6, r5, lsl #28
    242c:	01061c05 	tsteq	r6, r5, lsl #24
    2430:	053c1105 	ldreq	r1, [ip, #-261]!	; 0xfffffefb
    2434:	0532060e 	ldreq	r0, [r2, #-1550]!	; 0xfffff9f2
    2438:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    243c:	0c053c11 	stceq	12, cr3, [r5], {17}
    2440:	2e160306 	cdpcs	3, 1, cr0, cr6, cr6, {0}
    2444:	01060f05 	tsteq	r6, r5, lsl #30
    2448:	34060905 	strcc	r0, [r6], #-2309	; 0xfffff6fb
    244c:	01061205 	tsteq	r6, r5, lsl #4
    2450:	05201a05 	streq	r1, [r0, #-2565]!	; 0xfffff5fb
    2454:	05590609 	ldrbeq	r0, [r9, #-1545]	; 0xfffff9f7
    2458:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    245c:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
    2460:	17030601 	strne	r0, [r3, -r1, lsl #12]
    2464:	0001053c 	andeq	r0, r1, ip, lsr r5
    2468:	06010402 	streq	r0, [r1], -r2, lsl #8
    246c:	060f053d 			; <UNDEFINED> instruction: 0x060f053d
    2470:	e8020500 	stmda	r2, {r8, sl}
    2474:	03000015 	movweq	r0, #21
    2478:	0305013d 	movweq	r0, #20797	; 0x513d
    247c:	002f2f21 	eoreq	r2, pc, r1, lsr #30
    2480:	30010402 	andcc	r0, r1, r2, lsl #8
    2484:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    2488:	05130104 	ldreq	r0, [r3, #-260]	; 0xfffffefc
    248c:	04020009 	streq	r0, [r2], #-9
    2490:	19052d01 	stmdbne	r5, {r0, r8, sl, fp, sp}
    2494:	fc020500 	stc2	5, cr0, [r2], {-0}
    2498:	17000015 	smladne	r0, r5, r0, r0
    249c:	03050106 	movweq	r0, #20742	; 0x5106
    24a0:	15153d06 	ldrne	r3, [r5, #-3334]	; 0xfffff2fa
    24a4:	01060a05 	tsteq	r6, r5, lsl #20
    24a8:	0603052e 	streq	r0, [r3], -lr, lsr #10
    24ac:	06060531 			; <UNDEFINED> instruction: 0x06060531
    24b0:	03052001 	movweq	r2, #20481	; 0x5001
    24b4:	0a052206 	beq	14acd4 <__ROM_SIZE__+0x10acd4>
    24b8:	01050106 	tsteq	r5, r6, lsl #2
    24bc:	0011052f 	andseq	r0, r1, pc, lsr #10
    24c0:	06010402 	streq	r0, [r1], -r2, lsl #8
    24c4:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
    24c8:	053c0601 	ldreq	r0, [ip, #-1537]!	; 0xfffff9ff
    24cc:	05000626 	streq	r0, [r0, #-1574]	; 0xfffff9da
    24d0:	00162402 	andseq	r2, r6, r2, lsl #8
    24d4:	01061700 	tsteq	r6, r0, lsl #14
    24d8:	2f060305 	svccs	0x00060305
    24dc:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    24e0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    24e4:	32052003 	andcc	r2, r5, #3
    24e8:	02040200 	andeq	r0, r4, #0, 4
    24ec:	33052006 	movwcc	r2, #20486	; 0x5006
    24f0:	02040200 	andeq	r0, r4, #0, 4
    24f4:	13050106 	movwne	r0, #20742	; 0x5106
    24f8:	01040200 	mrseq	r0, R12_usr
    24fc:	18052006 	stmdane	r5, {r1, r2, sp}
    2500:	01040200 	mrseq	r0, R12_usr
    2504:	1b050106 	blne	142924 <__ROM_SIZE__+0x102924>
    2508:	01040200 	mrseq	r0, R12_usr
    250c:	0003054a 	andeq	r0, r3, sl, asr #10
    2510:	20010402 	andcs	r0, r1, r2, lsl #8
    2514:	21060505 	tstcs	r6, r5, lsl #10
    2518:	01060905 	tsteq	r6, r5, lsl #18
    251c:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
    2520:	052f0607 	streq	r0, [pc, #-1543]!	; 1f21 <rsbox+0x6d9>
    2524:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2528:	052e2e16 	streq	r2, [lr, #-3606]!	; 0xfffff1ea
    252c:	0105150a 	tsteq	r5, sl, lsl #10
    2530:	02022021 	andeq	r2, r2, #33	; 0x21
    2534:	Address 0x0000000000002534 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffff4c <_STACK_TOP_+0xdfff7f50>
   4:	72642f65 	rsbvc	r2, r4, #404	; 0x194
   8:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
   c:	6f66652f 	svcvs	0x0066652f
  10:	63652f62 	cmnvs	r5, #392	; 0x188
  14:	632f6674 			; <UNDEFINED> instruction: 0x632f6674
  18:	702f7261 	eorvc	r7, pc, r1, ror #4
  1c:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
  20:	6f630063 	svcvs	0x00630063
  24:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
  28:	65685f64 	strbvs	r5, [r8, #-3940]!	; 0xfffff09c
  2c:	6300706c 	movwvs	r7, #108	; 0x6c
  30:	616d6d6f 	cmnvs	sp, pc, ror #26
  34:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
  38:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  3c:	2064656e 	rsbcs	r6, r4, lr, ror #10
  40:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  44:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  48:	37314320 	ldrcc	r4, [r1, -r0, lsr #6]!
  4c:	2e303120 	rsfcssp	f3, f0, f0
  50:	20312e33 	eorscs	r2, r1, r3, lsr lr
  54:	31323032 	teqcc	r2, r2, lsr r0
  58:	31323630 	teqcc	r2, r0, lsr r6
  5c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  60:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  64:	2d202965 			; <UNDEFINED> instruction: 0x2d202965
  68:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
  6c:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
  70:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  74:	2d20346d 	cfstrscs	mvf3, [r0, #-436]!	; 0xfffffe4c
  78:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  7c:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  80:	6e75746d 	cdpvs	4, 7, cr7, cr5, cr13, {3}
  84:	6f633d65 	svcvs	0x00633d65
  88:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
  8c:	20346d2d 	eorscs	r6, r4, sp, lsr #26
  90:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  94:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  98:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  9c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  a0:	616d2d20 	cmnvs	sp, r0, lsr #26
  a4:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  a8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  ac:	6d2d6537 	cfstr32vs	mvfx6, [sp, #-220]!	; 0xffffff24
  b0:	67672d20 	strbvs	r2, [r7, -r0, lsr #26]!
  b4:	2d206264 	sfmcs	f6, 4, [r0, #-400]!	; 0xfffffe70
  b8:	2d20674f 	stccs	7, cr6, [r0, #-316]!	; 0xfffffec4
  bc:	65726666 	ldrbvs	r6, [r2, #-1638]!	; 0xfffff99a
  c0:	61747365 	cmnvs	r4, r5, ror #6
  c4:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
  c8:	68730067 	ldmdavs	r3!, {r0, r1, r2, r5, r6}^
  cc:	2074726f 	rsbscs	r7, r4, pc, ror #4
  d0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  d4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  d8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  dc:	61765f00 	cmnvs	r6, r0, lsl #30
  e0:	6e697072 	mcrvs	0, 3, r7, cr9, cr2, {3}
  e4:	682f0067 	stmdavs	pc!, {r0, r1, r2, r5, r6}	; <UNPREDICTABLE>
  e8:	2f656d6f 	svccs	0x00656d6f
  ec:	61647264 	cmnvs	r4, r4, ror #4
  f0:	652f6576 	strvs	r6, [pc, #-1398]!	; fffffb82 <_STACK_TOP_+0xdfff7b86>
  f4:	2f626f66 	svccs	0x00626f66
  f8:	66746365 	ldrbtvs	r6, [r4], -r5, ror #6
  fc:	7261632f 	rsbvc	r6, r1, #-1140850688	; 0xbc000000
 100:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 104:	6f6c2067 	svcvs	0x006c2067
 108:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
 10c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 110:	2064656e 	rsbcs	r6, r4, lr, ror #10
 114:	00746e69 	rsbseq	r6, r4, r9, ror #28
 118:	63677261 	cmnvs	r7, #268435462	; 0x10000006
 11c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 120:	6f6c2067 	svcvs	0x006c2067
 124:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 128:	7000746e 	andvc	r7, r0, lr, ror #8
 12c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 130:	68730066 	ldmdavs	r3!, {r1, r2, r5, r6}^
 134:	2074726f 	rsbscs	r7, r4, pc, ror #4
 138:	00746e69 	rsbseq	r6, r4, r9, ror #28
 13c:	76677261 	strbtvc	r7, [r7], -r1, ror #4
 140:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
 144:	6c00745f 	cfstrsvs	mvf7, [r0], {95}	; 0x5f
 148:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 14c:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
 150:	6300656c 	movwvs	r6, #1388	; 0x56c
 154:	616d6d6f 	cmnvs	sp, pc, ror #26
 158:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
 15c:	00656d61 	rsbeq	r6, r5, r1, ror #26
 160:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ac <vector_table+0xac>
 164:	72642f65 	rsbvc	r2, r4, #404	; 0x194
 168:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
 16c:	6f66652f 	svcvs	0x0066652f
 170:	63652f62 	cmnvs	r5, #392	; 0x188
 174:	632f6674 			; <UNDEFINED> instruction: 0x632f6674
 178:	702f7261 	eorvc	r7, pc, r1, ror #4
 17c:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
 180:	2f6d726f 	svccs	0x006d726f
 184:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 188:	7261752f 	rsbvc	r7, r1, #197132288	; 0xbc00000
 18c:	00632e74 	rsbeq	r2, r3, r4, ror lr
 190:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 194:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 198:	67750074 			; <UNDEFINED> instruction: 0x67750074
 19c:	00637465 	rsbeq	r7, r3, r5, ror #8
 1a0:	74757075 	ldrbtvc	r7, [r5], #-117	; 0xffffff8b
 1a4:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
 1a8:	2f656d6f 	svccs	0x00656d6f
 1ac:	61647264 	cmnvs	r4, r4, ror #4
 1b0:	652f6576 	strvs	r6, [pc, #-1398]!	; fffffc42 <_STACK_TOP_+0xdfff7c46>
 1b4:	2f626f66 	svccs	0x00626f66
 1b8:	66746365 	ldrbtvs	r6, [r4], -r5, ror #6
 1bc:	7261632f 	rsbvc	r6, r1, #-1140850688	; 0xbc000000
 1c0:	616c702f 	cmnvs	ip, pc, lsr #32
 1c4:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
 1c8:	61752f6d 	cmnvs	r5, sp, ror #30
 1cc:	752f7472 	strvc	r7, [pc, #-1138]!	; fffffd62 <_STACK_TOP_+0xdfff7d66>
 1d0:	32747261 	rsbscc	r7, r4, #268435462	; 0x10000006
 1d4:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
 1d8:	32747261 	rsbscc	r7, r4, #268435462	; 0x10000006
 1dc:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 1e0:	32750074 	rsbscc	r0, r5, #116	; 0x74
 1e4:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
 1e8:	67327500 	ldrvs	r7, [r2, -r0, lsl #10]!
 1ec:	00637465 	rsbeq	r7, r3, r5, ror #8
 1f0:	5f6e6970 	svcpl	0x006e6970
 1f4:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
 1f8:	65730070 	ldrbvs	r0, [r3, #-112]!	; 0xffffff90
 1fc:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 200:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 204:	32726168 	rsbscc	r6, r2, #104, 2
 208:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 20c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 210:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 214:	00726168 	rsbseq	r6, r2, r8, ror #2
 218:	5f746573 	svcpl	0x00746573
 21c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 220:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 224:	00327261 	eorseq	r7, r2, r1, ror #4
 228:	5f746573 	svcpl	0x00746573
 22c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 230:	6168635f 	cmnvs	r8, pc, asr r3
 234:	682f0072 	stmdavs	pc!, {r1, r4, r5, r6}	; <UNPREDICTABLE>
 238:	2f656d6f 	svccs	0x00656d6f
 23c:	61647264 	cmnvs	r4, r4, ror #4
 240:	652f6576 	strvs	r6, [pc, #-1398]!	; fffffcd2 <_STACK_TOP_+0xdfff7cd6>
 244:	2f626f66 	svccs	0x00626f66
 248:	66746365 	ldrbtvs	r6, [r4], -r5, ror #6
 24c:	7261632f 	rsbvc	r6, r1, #-1140850688	; 0xbc000000
 250:	616c702f 	cmnvs	ip, pc, lsr #32
 254:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
 258:	6c702f6d 	ldclvs	15, cr2, [r0], #-436	; 0xfffffe4c
 25c:	6f667461 	svcvs	0x00667461
 260:	632e6d72 			; <UNDEFINED> instruction: 0x632e6d72
 264:	616c7000 	cmnvs	ip, r0
 268:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
 26c:	6e695f6d 	cdpvs	15, 6, cr5, cr9, cr13, {3}
 270:	64007469 	strvs	r7, [r0], #-1129	; 0xfffffb97
 274:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 278:	685f746c 	ldmdavs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 27c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
 280:	5f007265 	svcpl	0x00007265
 284:	43415453 	movtmi	r5, #5203	; 0x1453
 288:	4f545f4b 	svcmi	0x00545f4b
 28c:	75005f50 	strvc	r5, [r0, #-3920]	; 0xfffff0b0
 290:	33746e69 	cmncc	r4, #1680	; 0x690
 294:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 298:	74636576 	strbtvc	r6, [r3], #-1398	; 0xfffffa8a
 29c:	745f726f 	ldrbvc	r7, [pc], #-623	; 2a4 <vector_table+0x2a4>
 2a0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 2a4:	6f682f00 	svcvs	0x00682f00
 2a8:	642f656d 	strtvs	r6, [pc], #-1389	; 2b0 <vector_table+0x2b0>
 2ac:	76616472 			; <UNDEFINED> instruction: 0x76616472
 2b0:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
 2b4:	652f626f 	strvs	r6, [pc, #-623]!	; 4d <vector_table+0x4d>
 2b8:	2f667463 	svccs	0x00667463
 2bc:	2f726163 	svccs	0x00726163
 2c0:	74616c70 	strbtvc	r6, [r1], #-3184	; 0xfffff390
 2c4:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
 2c8:	6365762f 	cmnvs	r5, #49283072	; 0x2f00000
 2cc:	5f726f74 	svcpl	0x00726f74
 2d0:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
 2d4:	00632e65 	rsbeq	r2, r3, r5, ror #28
 2d8:	5f6e6772 	svcpl	0x006e6772
 2dc:	6f666e69 	svcvs	0x00666e69
 2e0:	4e00745f 	cfmvsrmi	mvf0, r7
 2e4:	00454e4f 	subeq	r4, r5, pc, asr #28
 2e8:	5f6e6772 	svcpl	0x006e6772
 2ec:	6f666e69 	svcvs	0x00666e69
 2f0:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
 2f4:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 2f8:	6e67725f 	mcrvs	2, 3, r7, cr7, cr15, {2}
 2fc:	6d656d00 	stclvs	13, cr6, [r5, #-0]
 300:	00746573 	rsbseq	r6, r4, r3, ror r5
 304:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 308:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 30c:	646f6d5f 	strbtvs	r6, [pc], #-3423	; 314 <vector_table+0x314>
 310:	656d0065 	strbvs	r0, [sp, #-101]!	; 0xffffff9b
 314:	676f6c6d 	strbvs	r6, [pc, -sp, ror #24]!
 318:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0xffffffa1
 31c:	75630063 	strbvc	r0, [r3, #-99]!	; 0xffffff9d
 320:	695f7272 	ldmdbvs	pc, {r1, r4, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 324:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 328:	706e6900 	rsbvc	r6, lr, r0, lsl #18
 32c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 330:	6e67725f 	mcrvs	2, 3, r7, cr7, cr15, {2}
 334:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 338:	745f3874 	ldrbvc	r3, [pc], #-2164	; 340 <vector_table+0x340>
 33c:	6d656d00 	stclvs	13, cr6, [r5, #-0]
 340:	5f676f6c 	svcpl	0x00676f6c
 344:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 348:	6f682f00 	svcvs	0x00682f00
 34c:	642f656d 	strtvs	r6, [pc], #-1389	; 354 <vector_table+0x354>
 350:	76616472 			; <UNDEFINED> instruction: 0x76616472
 354:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
 358:	732f626f 			; <UNDEFINED> instruction: 0x732f626f
 35c:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
 360:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 364:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	; 0xffffff44
 368:	2f676f6c 	svccs	0x00676f6c
 36c:	6c6d656d 	cfstr64vs	mvdx6, [sp], #-436	; 0xfffffe4c
 370:	632e676f 			; <UNDEFINED> instruction: 0x632e676f
 374:	6d656d00 	stclvs	13, cr6, [r5, #-0]
 378:	5f676f6c 	svcpl	0x00676f6c
 37c:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
 380:	504e4900 	subpl	r4, lr, r0, lsl #18
 384:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
 388:	646f6d00 	strbtvs	r6, [pc], #-3328	; 390 <vector_table+0x390>
 38c:	00745f65 	rsbseq	r5, r4, r5, ror #30
 390:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
 394:	6c007274 	sfmvs	f7, 4, [r0], {116}	; 0x74
 398:	69646165 	stmdbvs	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 39c:	7a5f676e 	bvc	17da15c <__ROM_SIZE__+0x179a15c>
 3a0:	5f6f7265 	svcpl	0x006f7265
 3a4:	6f6e6769 	svcvs	0x006e6769
 3a8:	00646572 	rsbeq	r6, r4, r2, ror r5
 3ac:	72775f5f 	rsbsvc	r5, r7, #380	; 0x17c
 3b0:	5f657469 	svcpl	0x00657469
 3b4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 3b8:	005f5f32 	subseq	r5, pc, r2, lsr pc	; <UNPREDICTABLE>
 3bc:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
int ping(int argc, char** argv) {
 3c0:	00326674 	eorseq	r6, r2, r4, ror r6
    printf("MESG Received a ping\n");
 3c4:	74786568 	ldrbtvc	r6, [r8], #-1384	; 0xfffffa98
}
 3c8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 3cc:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
void uputc(char c) {
 3d0:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
  while ((UARTFR >> 5) & 1)
 3d4:	52415000 	subpl	r5, r1, #0
 3d8:	465f4553 			; <UNDEFINED> instruction: 0x465f4553
  UART_DR = c;
 3dc:	535f544d 	cmppl	pc, #1291845632	; 0x4d000000
  if (c == '\n')
 3e0:	6c005254 	sfmvs	f5, 4, [r0], {84}	; 0x54
}
 3e4:	756f635f 	strbvc	r6, [pc, #-863]!	; 8d <vector_table+0x8d>
    uputc('\r');
 3e8:	5f00746e 	svcpl	0x0000746e
}
 3ec:	5f61765f 	svcpl	0x0061765f
 3f0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
  if (!((UARTFR >> 4) & 1)) return UART_DR;
 3f4:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 3f8:	5f66746e 	svcpl	0x0066746e
 3fc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 400:	425f0065 	subsmi	r0, pc, #101	; 0x65
  return -1;
 404:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
}
 408:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 354 <vector_table+0x354>
 40c:	72642f65 	rsbvc	r2, r4, #404	; 0x194
  UARTCTL = 0;
 410:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
 414:	6f66652f 	svcvs	0x0066652f
  UARTIBRD = 8;
 418:	68732f62 	ldmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
  UARTFBRD = 44;
 41c:	2f6c6c65 	svccs	0x006c6c65
  UARTCC = 0;
 420:	2f62696c 	svccs	0x0062696c
  UARTLCRH = 0x60;
 424:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
  UARTCTL = 0x301;
 428:	702f6674 	eorvc	r6, pc, r4, ror r6	; <UNPREDICTABLE>
}
 42c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 430:	00632e66 	rsbeq	r2, r3, r6, ror #28
void u2putc(char c) {
 434:	72775f5f 	rsbsvc	r5, r7, #380	; 0x17c
  while ((UART2FR >> 5) & 1)
 438:	5f657469 	svcpl	0x00657469
 43c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  UART2_DR = c;
 440:	73005f5f 	movwvc	r5, #3935	; 0xf5f
  if (c == '\n')
 444:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
}
 448:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    u2putc('\r');
 44c:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
}
 450:	5f63756e 	svcpl	0x0063756e
 454:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
  if (!((UART2FR >> 4) & 1)) return UART2_DR;
 458:	00747369 	rsbseq	r7, r4, r9, ror #6
 45c:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 460:	72700065 	rsbsvc	r0, r0, #101	; 0x65
 464:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
  return -1;
 468:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
}
 46c:	73726562 	cmnvc	r2, #411041792	; 0x18800000
 470:	45484300 	strbmi	r4, [r8, #-768]	; 0xfffffd00
  UART2CTL = 0;
 474:	435f4b43 	cmpmi	pc, #68608	; 0x10c00
 478:	72610048 	rsbvc	r0, r1, #72	; 0x48
  UART2IBRD = 8;
 47c:	5f007367 	svcpl	0x00007367
  UART2FBRD = 44;
 480:	0070615f 	rsbseq	r6, r0, pc, asr r1
  UART2CC = 0;
 484:	5f534541 	svcpl	0x00534541
  UART2LCRH = 0x60;
 488:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
  UART2CTL = 0x301;
 48c:	7874635f 	ldmdavc	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
}
 490:	0076695f 	rsbseq	r6, r6, pc, asr r9
 494:	5f534541 	svcpl	0x00534541
  RCGCUART |= 3;
 498:	00787463 	rsbseq	r7, r8, r3, ror #8
 49c:	6d697478 	cfstrdvs	mvd7, [r9, #-480]!	; 0xfffffe20
 4a0:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
 4a4:	0061706d 	rsbeq	r7, r1, sp, rrx
  RCGCGPIO |= 3;
 4a8:	706d6574 	rsbvc	r6, sp, r4, ror r5
 4ac:	7a697300 	bvc	1a5d0b4 <__ROM_SIZE__+0x1a1d0b4>
 4b0:	00745f65 	rsbseq	r5, r4, r5, ror #30
  GPIODEN = 0x03;
 4b4:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
 4b8:	78654e65 	stmdavc	r5!, {r0, r2, r5, r6, r9, sl, fp, lr}^
  GPIOAFSEL = 0x03;
 4bc:	00764974 	rsbseq	r4, r6, r4, ror r9
  GPIOPCTL |= 0x00000011;
 4c0:	6f627372 	svcvs	0x00627372
 4c4:	45410078 	strbmi	r0, [r1, #-120]	; 0xffffff88
 4c8:	42435f53 	submi	r5, r3, #332	; 0x14c
  GPIODEN2 = 0x03;
 4cc:	6e655f43 	cdpvs	15, 6, cr5, cr5, cr3, {2}
 4d0:	70797263 	rsbsvc	r7, r9, r3, ror #4
  GPIOAFSEL2 = 0x03;
 4d4:	75625f74 	strbvc	r5, [r2, #-3956]!	; 0xfffff08c
  GPIOPCTL2 |= 0x00000011;
 4d8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 4dc:	53454100 	movtpl	r4, #20736	; 0x5100
 4e0:	4243455f 	submi	r4, r3, #398458880	; 0x17c00000
}
 4e4:	6365645f 	cmnvs	r5, #1593835520	; 0x5f000000
 4e8:	74707972 	ldrbtvc	r7, [r0], #-2418	; 0xfffff68e
void platform_init() {
 4ec:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    pin_setup();
 4f0:	00797063 	rsbseq	r7, r9, r3, rrx
    uart_init();
 4f4:	43766e49 	cmnmi	r6, #1168	; 0x490
    uart2_init();
 4f8:	65687069 	strbvs	r7, [r8, #-105]!	; 0xffffff97
    set_read_char(ugetc);
 4fc:	38750072 	ldmdacc	r5!, {r1, r4, r5, r6}^
    set_read_char2(u2getc);
 500:	00706d74 	rsbseq	r6, r0, r4, ror sp
 504:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    set_write_char(uputc);
 508:	73006874 	movwvc	r6, #2164	; 0x874
    set_write_char2(u2putc);
 50c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 510:	4100745f 	tstmi	r0, pc, asr r4
}
 514:	435f5345 	cmpmi	pc, #335544321	; 0x14000001
 518:	645f4342 	ldrbvs	r4, [pc], #-834	; 520 <platform_init+0x34>
 51c:	79726365 	ldmdbvc	r2!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 520:	625f7470 	subsvs	r7, pc, #112, 8	; 0x70000000
 524:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
  selected_mode = mode;
 528:	6e490072 	mcrvs	0, 2, r0, cr9, cr2, {3}
  if (selected_mode == NONE) {
 52c:	78694d76 	stmdavc	r9!, {r1, r2, r4, r5, r6, r8, sl, fp, lr}^
  out_buf_rgn.addr = addr;
 530:	756c6f43 	strbvc	r6, [ip, #-3907]!	; 0xfffff0bd
  out_buf_rgn.size = size / 2;
 534:	00736e6d 	rsbseq	r6, r3, sp, ror #28
  out_buf_rgn.curr_index = 0;
 538:	52646441 	rsbpl	r6, r4, #1090519040	; 0x41000000
  inp_buf_rgn.addr = addr + size / 2;
 53c:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
  inp_buf_rgn.curr_index = 0;
 540:	0079654b 	rsbseq	r6, r9, fp, asr #10
  if (!(selected_mode & INP)) {
 544:	5f534541 	svcpl	0x00534541
    out_buf_rgn.size = size;
 548:	5f525443 	svcpl	0x00525443
  memset(addr, 0, size);
 54c:	79726378 	ldmdbvc	r2!, {r3, r4, r5, r6, r8, r9, sp, lr}^
 550:	625f7470 	subsvs	r7, pc, #112, 8	; 0x70000000
  } else if (!(selected_mode & OUT)) {
 554:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 558:	6f720072 	svcvs	0x00720072
    inp_buf_rgn.addr = addr;
 55c:	00646e75 	rsbeq	r6, r4, r5, ror lr
    inp_buf_rgn.size = size;
 560:	6e6f6352 	mcrvs	3, 3, r6, cr15, cr2, {2}
 564:	53454100 	movtpl	r4, #20736	; 0x5100
  if (!(selected_mode & INP)) {
 568:	7874635f 	ldmdavc	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
 56c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 570:	0076695f 	rsbseq	r6, r6, pc, asr r9
  if (inp_buf_rgn.addr[inp_buf_rgn.curr_index] == 0) {
 574:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4c0 <pin_setup+0x28>
 578:	72642f65 	rsbvc	r2, r4, #404	; 0x194
  int val = inp_buf_rgn.addr[inp_buf_rgn.curr_index];
 57c:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
  inp_buf_rgn.addr[inp_buf_rgn.curr_index] = 0;
 580:	6f66652f 	svcvs	0x0066652f
  inp_buf_rgn.curr_index++;
 584:	68732f62 	ldmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
 588:	2f6c6c65 	svccs	0x006c6c65
  if (inp_buf_rgn.curr_index == inp_buf_rgn.size) {
 58c:	2f62696c 	svccs	0x0062696c
}
 590:	796e6974 	stmdbvc	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    inp_buf_rgn.curr_index = 0;
 594:	7365612d 	cmnvc	r5, #1073741835	; 0x4000000b
    return -1;
 598:	7365612f 	cmnvc	r5, #-1073741813	; 0xc000000b
 59c:	4100632e 	tstmi	r0, lr, lsr #6
    return -1;
 5a0:	455f5345 	ldrbmi	r5, [pc, #-837]	; 263 <vector_table+0x263>
 5a4:	655f4243 	ldrbvs	r4, [pc, #-579]	; 369 <vector_table+0x369>
  if (!(selected_mode & OUT) || c == 0) {
 5a8:	7972636e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 5ac:	49007470 	stmdbmi	r0, {r4, r5, r6, sl, ip, sp, lr}
 5b0:	6853766e 	ldmdavs	r3, {r1, r2, r3, r5, r6, r9, sl, ip, sp, lr}^
  out_buf_rgn.addr[out_buf_rgn.curr_index] = (uint8_t) c;
 5b4:	52746669 	rsbspl	r6, r4, #110100480	; 0x6900000
 5b8:	0073776f 	rsbseq	r7, r3, pc, ror #14
  out_buf_rgn.curr_index++;
 5bc:	4579654b 	ldrbmi	r6, [r9, #-1355]!	; 0xfffffab5
  if (out_buf_rgn.curr_index == out_buf_rgn.size) {
 5c0:	6e617078 	mcrvs	0, 3, r7, cr1, cr8, {3}
 5c4:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    out_buf_rgn.curr_index = 0;
 5c8:	766e4900 	strbtvc	r4, [lr], -r0, lsl #18
 5cc:	42627553 	rsbmi	r7, r2, #348127232	; 0x14c00000
 5d0:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
static void outstr(const char *str) {
 5d4:	53454100 	movtpl	r4, #20736	; 0x5100
  while (*str != '\0') {
 5d8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    __write_char__(*str);
 5dc:	74635f74 	strbtvc	r5, [r3], #-3956	; 0xfffff08c
    str++;
 5e0:	6f580078 	svcvs	0x00580078
  while (*str != '\0') {
 5e4:	74695772 	strbtvc	r5, [r9], #-1906	; 0xfffff88e
}
 5e8:	00764968 	rsbseq	r4, r6, r8, ror #18
 5ec:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 538 <memlog_init+0x10>
static bool printf_numbers(const char fmt, va_list *args, int l_count) {
 5f0:	72642f65 	rsbvc	r2, r4, #404	; 0x194
 5f4:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
  switch (fmt) {
 5f8:	6f66652f 	svcvs	0x0066652f
 5fc:	68732f62 	ldmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
 600:	2f6c6c65 	svccs	0x006c6c65
      if (l_count == 0) {
 604:	2f62696c 	svccs	0x0062696c
 608:	2f693261 	svccs	0x00693261
        value = va_arg(*args, unsigned int);
 60c:	2e693261 	cdpcs	2, 6, cr3, cr9, cr1, {3}
 610:	74610063 	strbtvc	r0, [r1], #-99	; 0xffffff9d
      if (fmt == 'u') {
 614:	6100686f 	tstvs	r0, pc, ror #16
        if (value == 0) {
 618:	00696f74 	rsbeq	r6, r9, r4, ror pc
          __write_char__(hextable[0]);
 61c:	7261765f 	rsbvc	r7, r1, #99614720	; 0x5f00000
 620:	5f323377 	svcpl	0x00323377
  return true;
 624:	00746962 	rsbseq	r6, r4, r2, ror #18
  switch (fmt) {
 628:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
      outstr("\nprintf-error\n");
 62c:	5f727470 	svcpl	0x00727470
      return false;
 630:	765f0074 			; <UNDEFINED> instruction: 0x765f0074
}
 634:	65727261 	ldrbvs	r7, [r2, #-609]!	; 0xfffffd9f
      if (l_count == 0) {
 638:	6d5f6461 	cfldrdvs	mvd6, [pc, #-388]	; 4bc <pin_setup+0x24>
        value = va_arg(*args, int);
 63c:	5f006d65 	svcpl	0x00006d65
 640:	77726176 			; <UNDEFINED> instruction: 0x77726176
      if (value < 0) {
 644:	62003233 	andvs	r3, r0, #805306371	; 0x30000003
        num[num_len++] = hextable[value % 10];
 648:	6c5f7469 	cfldrdvs	mvd7, [pc], {105}	; 0x69
 64c:	6200636f 	andvs	r6, r0, #-1140850687	; 0xbc000001
 650:	765f7469 	ldrbvc	r7, [pc], -r9, ror #8
 654:	2f006c61 	svccs	0x00006c61
 658:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 65c:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
 660:	2f657661 	svccs	0x00657661
 664:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
 668:	6568732f 	strbvs	r7, [r8, #-815]!	; 0xfffffcd1
        value = value / 10;
 66c:	6c2f6c6c 	stcvs	12, cr6, [pc], #-432	; 4c4 <pin_setup+0x2c>
      } while (value > 0);
 670:	752f6269 	strvc	r6, [pc, #-617]!	; 40f <ugetc+0x1b>
 674:	736c6974 	cmnvc	ip, #116, 18	; 0x1d0000
        __write_char__('-');
 678:	6974752f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, sp, lr}^
 67c:	632e736c 			; <UNDEFINED> instruction: 0x632e736c
        value = -value;
 680:	61737500 	cmnvs	r3, r0, lsl #10
        __write_char__(num[--num_len]);
 684:	5f006567 	svcpl	0x00006567
 688:	72726176 	rsbsvc	r6, r2, #-2147483619	; 0x8000001d
 68c:	5f003233 	svcpl	0x00003233
 690:	72726176 	rsbsvc	r6, r2, #-2147483619	; 0x8000001d
 694:	625f3233 	subsvs	r3, pc, #805306371	; 0x30000003
      while (num_len > 0) {
 698:	64007469 	strvs	r7, [r0], #-1129	; 0xfffffb97
  return true;
 69c:	00747365 	rsbseq	r7, r4, r5, ror #6
          num[num_len++] = hextable[value % 10];
 6a0:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
 6a4:	7300706d 	movwvc	r7, #109	; 0x6d
 6a8:	70637274 	rsbvc	r7, r3, r4, ror r2
 6ac:	74730079 	ldrbtvc	r0, [r3], #-121	; 0xffffff87
 6b0:	64003172 	strvs	r3, [r0], #-370	; 0xfffffe8e
 6b4:	5f747365 	svcpl	0x00747365
 6b8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 6bc:	63727300 	cmnvs	r2, #0, 6
          value = value / 10;
 6c0:	6168635f 	cmnvs	r8, pc, asr r3
        } while (value > 0);
 6c4:	74730072 	ldrbtvc	r0, [r3], #-114	; 0xffffff8e
        while (num_len > 0) {
 6c8:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
          __write_char__(num[--num_len]);
 6cc:	6f682f00 	svcvs	0x00682f00
 6d0:	642f656d 	strtvs	r6, [pc], #-1389	; 6d8 <printf_numbers+0xe8>
 6d4:	76616472 			; <UNDEFINED> instruction: 0x76616472
 6d8:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
 6dc:	732f626f 			; <UNDEFINED> instruction: 0x732f626f
 6e0:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
  return true;
 6e4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
              __write_char__(hextable[val]);
 6e8:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
 6ec:	2f676e69 	svccs	0x00676e69
              leading_zero_ignored = true;
 6f0:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
          while (start_bit >= 0) {
 6f4:	632e676e 			; <UNDEFINED> instruction: 0x632e676e
            int val = (value >> start_bit) & 0xF;
 6f8:	72747300 	rsbsvc	r7, r4, #0, 6
            if (val || leading_zero_ignored) {
 6fc:	61700032 	cmnvs	r0, r2, lsr r0
 700:	5f657372 	svcpl	0x00657372
 704:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
          bool leading_zero_ignored = false;
 708:	61686300 	cmnvs	r8, r0, lsl #6
          int start_bit = LAST_NIBBLE_FIRST_BIT;
 70c:	6f635f72 	svcvs	0x00635f72
  return true;
 710:	00746e75 	rsbseq	r6, r4, r5, ror lr
        return false;
 714:	7261765f 	rsbvc	r7, r1, #99614720	; 0x5f00000
        return false;
 718:	776f6873 			; <UNDEFINED> instruction: 0x776f6873
 71c:	7369685f 	cmnvc	r9, #6225920	; 0x5f0000
 720:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 724:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
 728:	5f657669 	svcpl	0x00657669
 72c:	6d6f7270 	sfmvs	f7, 2, [pc, #-448]!	; 574 <memlog_getc+0xc>
int printf(const char *fmt, ...) {
 730:	74007470 	strvc	r7, [r0], #-1136	; 0xfffffb90
 734:	6c61746f 	cfstrdvs	mvd7, [r1], #-444	; 0xfffffe44
 738:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
  va_start(args, fmt);
 73c:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 5c8 <memlog_putc+0x20>
  while (*fmt) {
 740:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
        if (*fmt == '%') {
 744:	5f5f0073 	svcpl	0x005f0073
        __write_char__(*fmt);
 748:	5f646d63 	svcpl	0x00646d63
        fmt++;
 74c:	63657865 	cmnvs	r5, #6619136	; 0x650000
  while (*fmt) {
 750:	6174735f 	cmnvs	r4, pc, asr r3
    switch (state) {
 754:	00737574 	rsbseq	r7, r3, r4, ror r5
 758:	62726576 	rsbsvs	r6, r2, #494927872	; 0x1d800000
          fmt++;
 75c:	0065736f 	rsbeq	r7, r5, pc, ror #6
          continue;
 760:	6164655f 	cmnvs	r4, pc, asr r5
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
 764:	2f006174 	svccs	0x00006174
 768:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 76c:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
 770:	2f657661 	svccs	0x00657661
 774:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
        switch (*fmt) {
 778:	6568732f 	strbvs	r7, [r8, #-815]!	; 0xfffffcd1
 77c:	732f6c6c 			; <UNDEFINED> instruction: 0x732f6c6c
 780:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
 784:	6568732f 	strbvs	r7, [r8, #-815]!	; 0xfffffcd1
            __write_char__(*fmt);
 788:	632e6c6c 			; <UNDEFINED> instruction: 0x632e6c6c
 78c:	61765f00 	cmnvs	r6, r0, lsl #30
            state = CHECK_CH;
 790:	646d6372 	strbtvs	r6, [sp], #-882	; 0xfffffc8e
            break;
 794:	6578655f 	ldrbvs	r6, [r8, #-1375]!	; 0xfffffaa1
 798:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
            outstr(va_arg(args, const char *));
 79c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 7a0:	725f5f00 	subsvc	r5, pc, #0, 30
 7a4:	5f646165 	svcpl	0x00646165
            fmt++;
 7a8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
            break;
 7ac:	69005f5f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}
            __write_char__(va_arg(args, int));
 7b0:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 7b4:	735f6c61 	cmpvc	pc, #24832	; 0x6100
 7b8:	70757465 	rsbsvc	r7, r5, r5, ror #8
            fmt++;
 7bc:	61765f00 	cmnvs	r6, r0, lsl #30
            break;
 7c0:	6c656872 	stclvs	8, cr6, [r5], #-456	; 0xfffffe38
            if (*fmt == 'l') {
 7c4:	61680070 	smcvs	32768	; 0x8000
 7c8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
            if (printf_numbers(*fmt, &args, l_count)) {
 7cc:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
 7d0:	74756100 	ldrbtvc	r6, [r5], #-256	; 0xffffff00
 7d4:	6f6c5f6f 	svcvs	0x006c5f6f
              state = CHECK_CH;
 7d8:	63006461 	movwvs	r6, #1121	; 0x461
              fmt++;
 7dc:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
              l_count++;
 7e0:	6f72705f 	svcvs	0x0072705f
            if (printf_numbers(*fmt, &args, 0)) {
 7e4:	0074706d 	rsbseq	r7, r4, sp, rrx
 7e8:	5f646d63 	svcpl	0x00646d63
              fmt++;
 7ec:	74736968 	ldrbtvc	r6, [r3], #-2408	; 0xfffff698
              break;
 7f0:	0079726f 	rsbseq	r7, r9, pc, ror #4
            return -1;
 7f4:	5f646d63 	svcpl	0x00646d63
}
 7f8:	00727473 	rsbseq	r7, r2, r3, ror r4
 7fc:	63657865 	cmnvs	r5, #6619136	; 0x650000
            return -1;
 800:	6e756600 	cdpvs	6, 7, cr6, cr5, cr0, {0}
 804:	655f0063 	ldrbvs	r0, [pc, #-99]	; 7a9 <printf+0x79>
 808:	00737362 	rsbseq	r7, r3, r2, ror #6
int printf2(const char *fmt, ...) {
 80c:	4d435f5f 	stclmi	15, cr5, [r3, #-380]	; 0xfffffe84
 810:	41545f44 	cmpmi	r4, r4, asr #30
    __write_char2__(*fmt);
 814:	5f454c42 	svcpl	0x00454c42
 818:	52415453 	subpl	r5, r1, #1392508928	; 0x53000000
  while (*fmt != '\0') {
 81c:	005f5f54 	subseq	r5, pc, r4, asr pc	; <UNPREDICTABLE>
 820:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
 824:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 828:	645f0066 	ldrbvs	r0, [pc], #-102	; 830 <KeyExpansion>
 82c:	00617461 	rsbeq	r7, r1, r1, ror #8
{
 830:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
  for (i = 0; i < Nk; ++i)
 834:	6461006c 	strbtvs	r0, [r1], #-108	; 0xffffff94
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 838:	6f635f64 	svcvs	0x00635f64
 83c:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 840:	6f745f64 	svcvs	0x00745f64
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 844:	7369685f 	cmnvc	r9, #6225920	; 0x5f0000
 848:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 84c:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
 850:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
 854:	5f5f005f 	svcpl	0x005f005f
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 858:	4f545541 	svcmi	0x00545541
  for (i = 0; i < Nk; ++i)
 85c:	4241545f 	submi	r5, r1, #1593835520	; 0x5f000000
 860:	535f454c 	cmppl	pc, #76, 10	; 0x13000000
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 864:	54524154 	ldrbpl	r4, [r2], #-340	; 0xfffffeac
    j = i * 4; k=(i - Nk) * 4;
 868:	73005f5f 	movwvc	r5, #3935	; 0xf5f
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 86c:	69636570 	stmdbvs	r3!, {r4, r5, r6, r8, sl, sp, lr}^
 870:	6b5f6c61 	blvs	17db9fc <__ROM_SIZE__+0x179b9fc>
 874:	63007965 	movwvs	r7, #2405	; 0x965
 878:	625f646d 	subsvs	r6, pc, #1828716544	; 0x6d000000
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 87c:	00666675 	rsbeq	r6, r6, r5, ror r6
 880:	7261765f 	rsbvc	r7, r1, #99614720	; 0x5f00000
 884:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 888:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
 88c:	70006f66 	andvc	r6, r0, r6, ror #30
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 890:	69666572 	stmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 894:	616d5f78 	smcvs	54776	; 0xd5f8
 898:	00686374 	rsbeq	r6, r8, r4, ror r3
 89c:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
 8a0:	74616d5f 	strbtvc	r6, [r1], #-3423	; 0xfffff2a1
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8a4:	70006863 	andvc	r6, r0, r3, ror #16
 8a8:	65706572 	ldrbvs	r6, [r0, #-1394]!	; 0xfffffa8e
 8ac:	705f646e 	subsvc	r6, pc, lr, ror #8
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8b0:	706d6f72 	rsbvc	r6, sp, r2, ror pc
      k = (i - 1) * 4;
 8b4:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
      tempa[0]=RoundKey[k + 0];
 8b8:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
 8bc:	6e616800 	cdpvs	8, 6, cr6, cr1, cr0, {0}
      tempa[1]=RoundKey[k + 1];
 8c0:	5f656c64 	svcpl	0x00656c64
 8c4:	6e776f64 	cdpvs	15, 7, cr6, cr7, cr4, {3}
      tempa[2]=RoundKey[k + 2];
 8c8:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
 8cc:	6700776f 	strvs	r7, [r0, -pc, ror #14]
      tempa[3]=RoundKey[k + 3];
 8d0:	665f7465 	ldrbvs	r7, [pc], -r5, ror #8
 8d4:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
    if (i % Nk == 0)
 8d8:	5f6e6f69 	svcpl	0x006e6f69
 8dc:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
        tempa[0] = tempa[1];
 8e0:	74616d00 	strbtvc	r6, [r1], #-3328	; 0xfffff300
        tempa[1] = tempa[2];
 8e4:	665f6863 	ldrbvs	r6, [pc], -r3, ror #16
        tempa[2] = tempa[3];
 8e8:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
        tempa[3] = u8tmp;
 8ec:	74616d00 	strbtvc	r6, [r1], #-3328	; 0xfffff300
        tempa[0] = getSBoxValue(tempa[0]);
 8f0:	635f6863 	cmpvs	pc, #6488064	; 0x630000
 8f4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
        tempa[1] = getSBoxValue(tempa[1]);
 8f8:	65786500 	ldrbvs	r6, [r8, #-1280]!	; 0xfffffb00
 8fc:	75615f63 	strbvc	r5, [r1, #-3939]!	; 0xfffff09d
        tempa[2] = getSBoxValue(tempa[2]);
 900:	635f6f74 	cmpvs	pc, #116, 30	; 0x1d0
 904:	0073646d 	rsbseq	r6, r3, sp, ror #8
        tempa[3] = getSBoxValue(tempa[3]);
 908:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 90c:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 798 <printf+0x68>
 910:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 914:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 918:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
}
 91c:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
 920:	68007865 	stmdavs	r0, {r0, r2, r5, r6, fp, ip, sp, lr}
{
 924:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
  for (i = 0; i < 4; ++i)
 928:	70755f65 	rsbsvc	r5, r5, r5, ror #30
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 92c:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
 930:	6c00776f 	stcvs	7, cr7, [r0], {111}	; 0x6f
 934:	00706f6f 	rsbseq	r6, r0, pc, ror #30
 938:	63657865 	cmnvs	r5, #6619136	; 0x650000
 93c:	00657475 	rsbeq	r7, r5, r5, ror r4
 940:	75677261 	strbvc	r7, [r7, #-609]!	; 0xfffffd9f
 944:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    for (j = 0; j < 4; ++j)
 948:	7a69735f 	bvc	1a5d6cc <__ROM_SIZE__+0x1a1d6cc>
 94c:	5f5f0065 	svcpl	0x005f0065
  for (i = 0; i < 4; ++i)
 950:	6f686365 	svcvs	0x00686365
 954:	67656200 	strbvs	r6, [r5, -r0, lsl #4]!
 958:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    for (j = 0; j < 4; ++j)
 95c:	5f007865 	svcpl	0x00007865
}
 960:	6165725f 	cmnvs	r5, pc, asr r2
  for (i = 0; i < 4; ++i)
 964:	68635f64 	stmdavs	r3!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    for (j = 0; j < 4; ++j)
 968:	5f327261 	svcpl	0x00327261
 96c:	655f005f 	ldrbvs	r0, [pc, #-95]	; 915 <KeyExpansion+0xe5>
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 970:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 974:	73625f00 	cmnvc	r2, #0, 30
 978:	Address 0x0000000000000978 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ROM_SIZE__+0x1090d24>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	2e30313a 	mrccs	1, 1, r3, cr0, cr10, {1}
   c:	30322d33 	eorscc	r2, r2, r3, lsr sp
  10:	302e3132 	eorcc	r3, lr, r2, lsr r1
  14:	29342d37 	ldmdbcs	r4!, {r0, r1, r2, r4, r5, r8, sl, fp, sp}
  18:	2e303120 	rsfcssp	f3, f0, f0
  1c:	20312e33 	eorscs	r2, r1, r3, lsr lr
  20:	31323032 	teqcc	r2, r2, lsr r0
  24:	31323630 	teqcc	r2, r0, lsr r6
  28:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  2c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  30:	Address 0x0000000000000030 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d453705 	stclcs	7, cr3, [r5, #-20]	; 0xffffffec
  14:	0d06004d 	stceq	0, cr0, [r6, #-308]	; 0xfffffecc
  18:	02094d07 	andeq	r4, r9, #448	; 0x1c0
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	011a0118 	tsteq	sl, r8, lsl r1
  28:	0122011e 			; <UNDEFINED> instruction: 0x0122011e

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000014 	andeq	r0, r0, r4, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	000003c0 	andeq	r0, r0, r0, asr #7
  1c:	00000010 	andeq	r0, r0, r0, lsl r0
  20:	83080e41 	movwhi	r0, #36417	; 0x8e41
  24:	00018e02 	andeq	r8, r1, r2, lsl #28
  28:	0000000c 	andeq	r0, r0, ip
  2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  30:	7c020001 	stcvc	0, cr0, [r2], {1}
  34:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  38:	00000014 	andeq	r0, r0, r4, lsl r0
  3c:	00000028 	andeq	r0, r0, r8, lsr #32
  40:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  44:	00000024 	andeq	r0, r0, r4, lsr #32
  48:	83080e41 	movwhi	r0, #36417	; 0x8e41
  4c:	00018e02 	andeq	r8, r1, r2, lsl #28
  50:	0000000c 	andeq	r0, r0, ip
  54:	00000028 	andeq	r0, r0, r8, lsr #32
  58:	000003f4 	strdeq	r0, [r0], -r4
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	0000000c 	andeq	r0, r0, ip
  64:	00000028 	andeq	r0, r0, r8, lsr #32
  68:	00000410 	andeq	r0, r0, r0, lsl r4
  6c:	00000024 	andeq	r0, r0, r4, lsr #32
  70:	0000000c 	andeq	r0, r0, ip
  74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  78:	7c020001 	stcvc	0, cr0, [r2], {1}
  7c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  80:	00000014 	andeq	r0, r0, r4, lsl r0
  84:	00000070 	andeq	r0, r0, r0, ror r0
  88:	00000434 	andeq	r0, r0, r4, lsr r4
  8c:	00000024 	andeq	r0, r0, r4, lsr #32
  90:	83080e41 	movwhi	r0, #36417	; 0x8e41
  94:	00018e02 	andeq	r8, r1, r2, lsl #28
  98:	0000000c 	andeq	r0, r0, ip
  9c:	00000070 	andeq	r0, r0, r0, ror r0
  a0:	00000458 	andeq	r0, r0, r8, asr r4
  a4:	0000001c 	andeq	r0, r0, ip, lsl r0
  a8:	0000000c 	andeq	r0, r0, ip
  ac:	00000070 	andeq	r0, r0, r0, ror r0
  b0:	00000474 	andeq	r0, r0, r4, ror r4
  b4:	00000024 	andeq	r0, r0, r4, lsr #32
  b8:	0000000c 	andeq	r0, r0, ip
  bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  c0:	7c020001 	stcvc	0, cr0, [r2], {1}
  c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  c8:	0000000c 	andeq	r0, r0, ip
  cc:	000000b8 	strheq	r0, [r0], -r8
  d0:	00000498 	muleq	r0, r8, r4
  d4:	00000054 	andeq	r0, r0, r4, asr r0
  d8:	00000014 	andeq	r0, r0, r4, lsl r0
  dc:	000000b8 	strheq	r0, [r0], -r8
  e0:	000004ec 	andeq	r0, r0, ip, ror #9
  e4:	00000038 	andeq	r0, r0, r8, lsr r0
  e8:	83080e41 	movwhi	r0, #36417	; 0x8e41
  ec:	00018e02 	andeq	r8, r1, r2, lsl #28
  f0:	0000000c 	andeq	r0, r0, ip
  f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  f8:	7c020001 	stcvc	0, cr0, [r2], {1}
  fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 100:	0000000c 	andeq	r0, r0, ip
 104:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	00000524 	andeq	r0, r0, r4, lsr #10
 10c:	00000002 	andeq	r0, r0, r2
 110:	0000000c 	andeq	r0, r0, ip
 114:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 118:	7c020001 	stcvc	0, cr0, [r2], {1}
 11c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 120:	00000020 	andeq	r0, r0, r0, lsr #32
 124:	00000110 	andeq	r0, r0, r0, lsl r1
 128:	00000528 	andeq	r0, r0, r8, lsr #10
 12c:	00000040 	andeq	r0, r0, r0, asr #32
 130:	84100e44 	ldrhi	r0, [r0], #-3652	; 0xfffff1bc
 134:	86038504 	strhi	r8, [r3], -r4, lsl #10
 138:	59018e02 	stmdbpl	r1, {r1, r9, sl, fp, pc}
 13c:	c5c4000e 	strbgt	r0, [r4, #14]
 140:	0000cec6 	andeq	ip, r0, r6, asr #29
 144:	0000000c 	andeq	r0, r0, ip
 148:	00000110 	andeq	r0, r0, r0, lsl r1
 14c:	00000568 	andeq	r0, r0, r8, ror #10
 150:	00000040 	andeq	r0, r0, r0, asr #32
 154:	0000000c 	andeq	r0, r0, ip
 158:	00000110 	andeq	r0, r0, r0, lsl r1
 15c:	000005a8 	andeq	r0, r0, r8, lsr #11
 160:	0000002c 	andeq	r0, r0, ip, lsr #32
 164:	0000000c 	andeq	r0, r0, ip
 168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 16c:	7c020001 	stcvc	0, cr0, [r2], {1}
 170:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 174:	00000014 	andeq	r0, r0, r4, lsl r0
 178:	00000164 	andeq	r0, r0, r4, ror #2
 17c:	000005d4 	ldrdeq	r0, [r0], -r4
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
 188:	00018e02 	andeq	r8, r1, r2, lsl #28
 18c:	00000020 	andeq	r0, r0, r0, lsr #32
 190:	00000164 	andeq	r0, r0, r4, ror #2
 194:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 198:	00000140 	andeq	r0, r0, r0, asr #2
 19c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 1a0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 1a4:	200e4101 	andcs	r4, lr, r1, lsl #2
 1a8:	0c0e0a60 			; <UNDEFINED> instruction: 0x0c0e0a60
 1ac:	00000b41 	andeq	r0, r0, r1, asr #22
 1b0:	00000038 	andeq	r0, r0, r8, lsr r0
 1b4:	00000164 	andeq	r0, r0, r4, ror #2
 1b8:	00000730 	andeq	r0, r0, r0, lsr r7
 1bc:	000000dc 	ldrdeq	r0, [r0], -ip
 1c0:	80100e41 	andshi	r0, r0, r1, asr #28
 1c4:	82038104 	andhi	r8, r3, #4, 2
 1c8:	41018302 	tstmi	r1, r2, lsl #6
 1cc:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 1d0:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 1d4:	02280e41 	eoreq	r0, r8, #1040	; 0x410
 1d8:	1c0e0a61 			; <UNDEFINED> instruction: 0x1c0e0a61
 1dc:	c4c5ce42 	strbgt	ip, [r5], #3650	; 0xe42
 1e0:	c341100e 	movtgt	r1, #4110	; 0x100e
 1e4:	0ec0c1c2 	acseqdm	f4, f2
 1e8:	000b4100 	andeq	r4, fp, r0, lsl #2
 1ec:	0000002c 	andeq	r0, r0, ip, lsr #32
 1f0:	00000164 	andeq	r0, r0, r4, ror #2
 1f4:	0000080c 	andeq	r0, r0, ip, lsl #16
 1f8:	00000024 	andeq	r0, r0, r4, lsr #32
 1fc:	80100e41 	andshi	r0, r0, r1, asr #28
 200:	82038104 	andhi	r8, r3, #4, 2
 204:	41018302 	tstmi	r1, r2, lsl #6
 208:	0684180e 	streq	r1, [r4], lr, lsl #16
 20c:	ce4b058e 	cdpgt	5, 4, cr0, cr11, cr14, {4}
 210:	41100ec4 	tstmi	r0, r4, asr #29
 214:	c0c1c2c3 	sbcgt	ip, r1, r3, asr #5
 218:	0000000e 	andeq	r0, r0, lr
 21c:	0000000c 	andeq	r0, r0, ip
 220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 224:	7c020001 	stcvc	0, cr0, [r2], {1}
 228:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 22c:	0000001c 	andeq	r0, r0, ip, lsl r0
 230:	0000021c 	andeq	r0, r0, ip, lsl r2
 234:	00000830 	andeq	r0, r0, r0, lsr r8
 238:	000000f4 	strdeq	r0, [r0], -r4
 23c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
 240:	41018e02 	tstmi	r1, r2, lsl #28
 244:	7502100e 	strvc	r1, [r2, #-14]
 248:	0000080e 	andeq	r0, r0, lr, lsl #16
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
 250:	0000021c 	andeq	r0, r0, ip, lsl r2
 254:	00000924 	andeq	r0, r0, r4, lsr #18
 258:	0000003e 	andeq	r0, r0, lr, lsr r0
 25c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 260:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 264:	00000001 	andeq	r0, r0, r1
 268:	00000018 	andeq	r0, r0, r8, lsl r0
 26c:	0000021c 	andeq	r0, r0, ip, lsl r2
 270:	00000962 	andeq	r0, r0, r2, ror #18
 274:	00000046 	andeq	r0, r0, r6, asr #32
 278:	84040e47 	strhi	r0, [r4], #-3655	; 0xfffff1b9
 27c:	0ec45401 	cdpeq	4, 12, cr5, cr4, cr1, {0}
 280:	00000000 	andeq	r0, r0, r0
 284:	0000000c 	andeq	r0, r0, ip
 288:	0000021c 	andeq	r0, r0, ip, lsl r2
 28c:	000009a8 	andeq	r0, r0, r8, lsr #19
 290:	00000032 	andeq	r0, r0, r2, lsr r0
 294:	0000000c 	andeq	r0, r0, ip
 298:	0000021c 	andeq	r0, r0, ip, lsl r2
 29c:	000009da 	ldrdeq	r0, [r0], -sl
 2a0:	00000012 	andeq	r0, r0, r2, lsl r0
 2a4:	00000024 	andeq	r0, r0, r4, lsr #32
 2a8:	0000021c 	andeq	r0, r0, ip, lsl r2
 2ac:	000009ec 	andeq	r0, r0, ip, ror #19
 2b0:	00000072 	andeq	r0, r0, r2, ror r0
 2b4:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
 2b8:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
 2bc:	87078608 	strhi	r8, [r7, -r8, lsl #12]
 2c0:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
 2c4:	8b038a04 	blhi	e2adc <__ROM_SIZE__+0xa2adc>
 2c8:	00018e02 	andeq	r8, r1, r2, lsl #28
 2cc:	00000028 	andeq	r0, r0, r8, lsr #32
 2d0:	0000021c 	andeq	r0, r0, ip, lsl r2
 2d4:	00000a5e 	andeq	r0, r0, lr, asr sl
 2d8:	00000166 	andeq	r0, r0, r6, ror #2
 2dc:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
 2e0:	86088509 	strhi	r8, [r8], -r9, lsl #10
 2e4:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 2e8:	8a048905 	bhi	122704 <__ROM_SIZE__+0xe2704>
 2ec:	8e028b03 	vmlahi.f64	d8, d2, d3
 2f0:	500e4101 	andpl	r4, lr, r1, lsl #2
 2f4:	240eae02 	strcs	sl, [lr], #-3586	; 0xfffff1fe
 2f8:	00000018 	andeq	r0, r0, r8, lsl r0
 2fc:	0000021c 	andeq	r0, r0, ip, lsl r2
 300:	00000bc4 	andeq	r0, r0, r4, asr #23
 304:	00000048 	andeq	r0, r0, r8, asr #32
 308:	8e040e47 	cdphi	14, 0, cr0, cr4, cr7, {2}
 30c:	000e5601 	andeq	r5, lr, r1, lsl #12
 310:	000000ce 	andeq	r0, r0, lr, asr #1
 314:	0000000c 	andeq	r0, r0, ip
 318:	0000021c 	andeq	r0, r0, ip, lsl r2
 31c:	00000c0c 	andeq	r0, r0, ip, lsl #24
 320:	00000032 	andeq	r0, r0, r2, lsr r0
 324:	00000018 	andeq	r0, r0, r8, lsl r0
 328:	0000021c 	andeq	r0, r0, ip, lsl r2
 32c:	00000c3e 	andeq	r0, r0, lr, lsr ip
 330:	00000044 	andeq	r0, r0, r4, asr #32
 334:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 338:	86038504 	strhi	r8, [r3], -r4, lsl #10
 33c:	00018e02 	andeq	r8, r1, r2, lsl #28
 340:	00000018 	andeq	r0, r0, r8, lsl r0
 344:	0000021c 	andeq	r0, r0, ip, lsl r2
 348:	00000c82 	andeq	r0, r0, r2, lsl #25
 34c:	0000003a 	andeq	r0, r0, sl, lsr r0
 350:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 354:	86038504 	strhi	r8, [r3], -r4, lsl #10
 358:	00018e02 	andeq	r8, r1, r2, lsl #28
 35c:	0000000c 	andeq	r0, r0, ip
 360:	0000021c 	andeq	r0, r0, ip, lsl r2
 364:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
 368:	0000001a 	andeq	r0, r0, sl, lsl r0
 36c:	00000014 	andeq	r0, r0, r4, lsl r0
 370:	0000021c 	andeq	r0, r0, ip, lsl r2
 374:	00000cd6 	ldrdeq	r0, [r0], -r6
 378:	00000008 	andeq	r0, r0, r8
 37c:	83080e41 	movwhi	r0, #36417	; 0x8e41
 380:	00018e02 	andeq	r8, r1, r2, lsl #28
 384:	00000018 	andeq	r0, r0, r8, lsl r0
 388:	0000021c 	andeq	r0, r0, ip, lsl r2
 38c:	00000cde 	ldrdeq	r0, [r0], -lr
 390:	00000018 	andeq	r0, r0, r8, lsl r0
 394:	83100e41 	tsthi	r0, #1040	; 0x410
 398:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
 39c:	00018e02 	andeq	r8, r1, r2, lsl #28
 3a0:	00000014 	andeq	r0, r0, r4, lsl r0
 3a4:	0000021c 	andeq	r0, r0, ip, lsl r2
 3a8:	00000cf6 	strdeq	r0, [r0], -r6
 3ac:	0000000c 	andeq	r0, r0, ip
 3b0:	83080e41 	movwhi	r0, #36417	; 0x8e41
 3b4:	00018e02 	andeq	r8, r1, r2, lsl #28
 3b8:	00000014 	andeq	r0, r0, r4, lsl r0
 3bc:	0000021c 	andeq	r0, r0, ip, lsl r2
int ping(int argc, char** argv) {
 3c0:	00000d02 	andeq	r0, r0, r2, lsl #26
    printf("MESG Received a ping\n");
 3c4:	0000000e 	andeq	r0, r0, lr
}
 3c8:	83080e41 	movwhi	r0, #36417	; 0x8e41
 3cc:	00018e02 	andeq	r8, r1, r2, lsl #28
void uputc(char c) {
 3d0:	00000014 	andeq	r0, r0, r4, lsl r0
  while ((UARTFR >> 5) & 1)
 3d4:	0000021c 	andeq	r0, r0, ip, lsl r2
 3d8:	00000d10 	andeq	r0, r0, r0, lsl sp
  UART_DR = c;
 3dc:	0000000e 	andeq	r0, r0, lr
  if (c == '\n')
 3e0:	83080e41 	movwhi	r0, #36417	; 0x8e41
}
 3e4:	00018e02 	andeq	r8, r1, r2, lsl #28
    uputc('\r');
 3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
}
 3ec:	0000021c 	andeq	r0, r0, ip, lsl r2
 3f0:	00000d1e 	andeq	r0, r0, lr, lsl sp
  if (!((UARTFR >> 4) & 1)) return UART_DR;
 3f4:	00000038 	andeq	r0, r0, r8, lsr r0
 3f8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
 3fc:	86058506 	strhi	r8, [r5], -r6, lsl #10
 400:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  return -1;
 404:	00018e02 	andeq	r8, r1, r2, lsl #28
}
 408:	00000024 	andeq	r0, r0, r4, lsr #32
 40c:	0000021c 	andeq	r0, r0, ip, lsl r2
  UARTCTL = 0;
 410:	00000d56 	andeq	r0, r0, r6, asr sp
 414:	00000046 	andeq	r0, r0, r6, asr #32
  UARTIBRD = 8;
 418:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
  UARTFBRD = 44;
 41c:	86058506 	strhi	r8, [r5], -r6, lsl #10
  UARTCC = 0;
 420:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
  UARTLCRH = 0x60;
 424:	41018e02 	tstmi	r1, r2, lsl #28
  UARTCTL = 0x301;
 428:	0e5e280e 	cdpeq	8, 5, cr2, cr14, cr14, {0}
}
 42c:	00000018 	andeq	r0, r0, r8, lsl r0
 430:	00000020 	andeq	r0, r0, r0, lsr #32
void u2putc(char c) {
 434:	0000021c 	andeq	r0, r0, ip, lsl r2
  while ((UART2FR >> 5) & 1)
 438:	00000d9c 	muleq	r0, ip, sp
 43c:	00000074 	andeq	r0, r0, r4, ror r0
  UART2_DR = c;
 440:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
  if (c == '\n')
 444:	86048505 	strhi	r8, [r4], -r5, lsl #10
}
 448:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    u2putc('\r');
 44c:	280e4101 	stmdacs	lr, {r0, r8, lr}
}
 450:	00140e77 	andseq	r0, r4, r7, ror lr
 454:	0000000c 	andeq	r0, r0, ip
  if (!((UART2FR >> 4) & 1)) return UART2_DR;
 458:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 45c:	7c020001 	stcvc	0, cr0, [r2], {1}
 460:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 464:	0000000c 	andeq	r0, r0, ip
  return -1;
 468:	00000454 	andeq	r0, r0, r4, asr r4
}
 46c:	00000e10 	andeq	r0, r0, r0, lsl lr
 470:	0000001c 	andeq	r0, r0, ip, lsl r0
  UART2CTL = 0;
 474:	0000000c 	andeq	r0, r0, ip
 478:	00000454 	andeq	r0, r0, r4, asr r4
  UART2IBRD = 8;
 47c:	00000e2c 	andeq	r0, r0, ip, lsr #28
  UART2FBRD = 44;
 480:	0000003e 	andeq	r0, r0, lr, lsr r0
  UART2CC = 0;
 484:	0000000c 	andeq	r0, r0, ip
  UART2LCRH = 0x60;
 488:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  UART2CTL = 0x301;
 48c:	7c020001 	stcvc	0, cr0, [r2], {1}
}
 490:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 494:	00000014 	andeq	r0, r0, r4, lsl r0
  RCGCUART |= 3;
 498:	00000484 	andeq	r0, r0, r4, lsl #9
 49c:	00000e6c 	andeq	r0, r0, ip, ror #28
 4a0:	00000030 	andeq	r0, r0, r0, lsr r0
 4a4:	83080e41 	movwhi	r0, #36417	; 0x8e41
  RCGCGPIO |= 3;
 4a8:	00018e02 	andeq	r8, r1, r2, lsl #28
 4ac:	00000018 	andeq	r0, r0, r8, lsl r0
 4b0:	00000484 	andeq	r0, r0, r4, lsl #9
  GPIODEN = 0x03;
 4b4:	00000e9c 	muleq	r0, ip, lr
 4b8:	00000030 	andeq	r0, r0, r0, lsr r0
  GPIOAFSEL = 0x03;
 4bc:	83100e41 	tsthi	r0, #1040	; 0x410
  GPIOPCTL |= 0x00000011;
 4c0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
 4c4:	00018e02 	andeq	r8, r1, r2, lsl #28
 4c8:	00000018 	andeq	r0, r0, r8, lsl r0
  GPIODEN2 = 0x03;
 4cc:	00000484 	andeq	r0, r0, r4, lsl #9
 4d0:	00000ecc 	andeq	r0, r0, ip, asr #29
  GPIOAFSEL2 = 0x03;
 4d4:	00000048 	andeq	r0, r0, r8, asr #32
  GPIOPCTL2 |= 0x00000011;
 4d8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 4dc:	86038504 	strhi	r8, [r3], -r4, lsl #10
 4e0:	00018e02 	andeq	r8, r1, r2, lsl #28
}
 4e4:	00000018 	andeq	r0, r0, r8, lsl r0
 4e8:	00000484 	andeq	r0, r0, r4, lsl #9
void platform_init() {
 4ec:	00000f14 	andeq	r0, r0, r4, lsl pc
    pin_setup();
 4f0:	00000068 	andeq	r0, r0, r8, rrx
    uart_init();
 4f4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    uart2_init();
 4f8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    set_read_char(ugetc);
 4fc:	00018e02 	andeq	r8, r1, r2, lsl #28
    set_read_char2(u2getc);
 500:	00000018 	andeq	r0, r0, r8, lsl r0
 504:	00000484 	andeq	r0, r0, r4, lsl #9
    set_write_char(uputc);
 508:	00000f7c 	andeq	r0, r0, ip, ror pc
    set_write_char2(u2putc);
 50c:	00000050 	andeq	r0, r0, r0, asr r0
 510:	83100e41 	tsthi	r0, #1040	; 0x410
}
 514:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
 518:	00018e02 	andeq	r8, r1, r2, lsl #28
 51c:	0000000c 	andeq	r0, r0, ip
 520:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 524:	7c020001 	stcvc	0, cr0, [r2], {1}
  selected_mode = mode;
 528:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  if (selected_mode == NONE) {
 52c:	0000000c 	andeq	r0, r0, ip
  out_buf_rgn.addr = addr;
 530:	0000051c 	andeq	r0, r0, ip, lsl r5
  out_buf_rgn.size = size / 2;
 534:	00000fcc 	andeq	r0, r0, ip, asr #31
  out_buf_rgn.curr_index = 0;
 538:	00000010 	andeq	r0, r0, r0, lsl r0
  inp_buf_rgn.addr = addr + size / 2;
 53c:	0000000c 	andeq	r0, r0, ip
  inp_buf_rgn.curr_index = 0;
 540:	0000051c 	andeq	r0, r0, ip, lsl r5
  if (!(selected_mode & INP)) {
 544:	00000fdc 	ldrdeq	r0, [r0], -ip
    out_buf_rgn.size = size;
 548:	00000016 	andeq	r0, r0, r6, lsl r0
  memset(addr, 0, size);
 54c:	0000000c 	andeq	r0, r0, ip
 550:	0000051c 	andeq	r0, r0, ip, lsl r5
  } else if (!(selected_mode & OUT)) {
 554:	00000ff2 	strdeq	r0, [r0], -r2
 558:	00000014 	andeq	r0, r0, r4, lsl r0
    inp_buf_rgn.addr = addr;
 55c:	0000000c 	andeq	r0, r0, ip
    inp_buf_rgn.size = size;
 560:	0000051c 	andeq	r0, r0, ip, lsl r5
 564:	00001006 	andeq	r1, r0, r6
  if (!(selected_mode & INP)) {
 568:	00000016 	andeq	r0, r0, r6, lsl r0
 56c:	0000000c 	andeq	r0, r0, ip
 570:	0000051c 	andeq	r0, r0, ip, lsl r5
  if (inp_buf_rgn.addr[inp_buf_rgn.curr_index] == 0) {
 574:	0000101c 	andeq	r1, r0, ip, lsl r0
 578:	00000010 	andeq	r0, r0, r0, lsl r0
  int val = inp_buf_rgn.addr[inp_buf_rgn.curr_index];
 57c:	0000000c 	andeq	r0, r0, ip
  inp_buf_rgn.addr[inp_buf_rgn.curr_index] = 0;
 580:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  inp_buf_rgn.curr_index++;
 584:	7c020001 	stcvc	0, cr0, [r2], {1}
 588:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  if (inp_buf_rgn.curr_index == inp_buf_rgn.size) {
 58c:	00000020 	andeq	r0, r0, r0, lsr #32
}
 590:	0000057c 	andeq	r0, r0, ip, ror r5
    inp_buf_rgn.curr_index = 0;
 594:	0000102c 	andeq	r1, r0, ip, lsr #32
    return -1;
 598:	0000006c 	andeq	r0, r0, ip, rrx
 59c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    return -1;
 5a0:	41018e02 	tstmi	r1, r2, lsl #28
 5a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  if (!(selected_mode & OUT) || c == 0) {
 5a8:	080e6607 	stmdaeq	lr, {r0, r1, r2, r9, sl, sp, lr}
 5ac:	000d0d41 	andeq	r0, sp, r1, asr #26
 5b0:	00000014 	andeq	r0, r0, r4, lsl r0
  out_buf_rgn.addr[out_buf_rgn.curr_index] = (uint8_t) c;
 5b4:	0000057c 	andeq	r0, r0, ip, ror r5
 5b8:	00001098 	muleq	r0, r8, r0
  out_buf_rgn.curr_index++;
 5bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  if (out_buf_rgn.curr_index == out_buf_rgn.size) {
 5c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
 5c4:	00018e02 	andeq	r8, r1, r2, lsl #28
    out_buf_rgn.curr_index = 0;
 5c8:	00000014 	andeq	r0, r0, r4, lsl r0
 5cc:	0000057c 	andeq	r0, r0, ip, ror r5
 5d0:	000010b4 	strheq	r1, [r0], -r4
static void outstr(const char *str) {
 5d4:	00000012 	andeq	r0, r0, r2, lsl r0
  while (*str != '\0') {
 5d8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    __write_char__(*str);
 5dc:	00018e02 	andeq	r8, r1, r2, lsl #28
    str++;
 5e0:	00000014 	andeq	r0, r0, r4, lsl r0
  while (*str != '\0') {
 5e4:	0000057c 	andeq	r0, r0, ip, ror r5
}
 5e8:	000010c6 	andeq	r1, r0, r6, asr #1
 5ec:	00000026 	andeq	r0, r0, r6, lsr #32
static bool printf_numbers(const char fmt, va_list *args, int l_count) {
 5f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
 5f4:	00018e02 	andeq	r8, r1, r2, lsl #28
  switch (fmt) {
 5f8:	00000018 	andeq	r0, r0, r8, lsl r0
 5fc:	0000057c 	andeq	r0, r0, ip, ror r5
 600:	000010ec 	andeq	r1, r0, ip, ror #1
      if (l_count == 0) {
 604:	00000040 	andeq	r0, r0, r0, asr #32
 608:	83100e41 	tsthi	r0, #1040	; 0x410
        value = va_arg(*args, unsigned int);
 60c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
 610:	00018e02 	andeq	r8, r1, r2, lsl #28
      if (fmt == 'u') {
 614:	00000014 	andeq	r0, r0, r4, lsl r0
        if (value == 0) {
 618:	0000057c 	andeq	r0, r0, ip, ror r5
          __write_char__(hextable[0]);
 61c:	0000112c 	andeq	r1, r0, ip, lsr #2
 620:	00000018 	andeq	r0, r0, r8, lsl r0
  return true;
 624:	83080e41 	movwhi	r0, #36417	; 0x8e41
  switch (fmt) {
 628:	00018e02 	andeq	r8, r1, r2, lsl #28
      outstr("\nprintf-error\n");
 62c:	00000014 	andeq	r0, r0, r4, lsl r0
      return false;
 630:	0000057c 	andeq	r0, r0, ip, ror r5
}
 634:	00001144 	andeq	r1, r0, r4, asr #2
      if (l_count == 0) {
 638:	00000010 	andeq	r0, r0, r0, lsl r0
        value = va_arg(*args, int);
 63c:	83080e41 	movwhi	r0, #36417	; 0x8e41
 640:	00018e02 	andeq	r8, r1, r2, lsl #28
      if (value < 0) {
 644:	0000001c 	andeq	r0, r0, ip, lsl r0
        num[num_len++] = hextable[value % 10];
 648:	0000057c 	andeq	r0, r0, ip, ror r5
 64c:	00001154 	andeq	r1, r0, r4, asr r1
 650:	00000058 	andeq	r0, r0, r8, asr r0
 654:	83180e42 	tsthi	r8, #1056	; 0x420
 658:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
 65c:	88038604 	stmdahi	r3, {r2, r9, sl, pc}
 660:	00018e02 	andeq	r8, r1, r2, lsl #28
 664:	00000018 	andeq	r0, r0, r8, lsl r0
 668:	0000057c 	andeq	r0, r0, ip, ror r5
        value = value / 10;
 66c:	000011ac 	andeq	r1, r0, ip, lsr #3
      } while (value > 0);
 670:	00000068 	andeq	r0, r0, r8, rrx
 674:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        __write_char__('-');
 678:	86038504 	strhi	r8, [r3], -r4, lsl #10
 67c:	00018e02 	andeq	r8, r1, r2, lsl #28
        value = -value;
 680:	00000020 	andeq	r0, r0, r0, lsr #32
        __write_char__(num[--num_len]);
 684:	0000057c 	andeq	r0, r0, ip, ror r5
 688:	00001214 	andeq	r1, r0, r4, lsl r2
 68c:	00000044 	andeq	r0, r0, r4, asr #32
 690:	83100e42 	tsthi	r0, #1056	; 0x420
 694:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      while (num_len > 0) {
 698:	5b018e02 	blpl	63ea8 <__ROM_SIZE__+0x23ea8>
  return true;
 69c:	c4c3000e 	strbgt	r0, [r3], #14
          num[num_len++] = hextable[value % 10];
 6a0:	0000cec5 	andeq	ip, r0, r5, asr #29
 6a4:	00000018 	andeq	r0, r0, r8, lsl r0
 6a8:	0000057c 	andeq	r0, r0, ip, ror r5
 6ac:	00001258 	andeq	r1, r0, r8, asr r2
 6b0:	00000052 	andeq	r0, r0, r2, asr r0
 6b4:	83100e41 	tsthi	r0, #1040	; 0x410
 6b8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
 6bc:	00018e02 	andeq	r8, r1, r2, lsl #28
          value = value / 10;
 6c0:	00000020 	andeq	r0, r0, r0, lsr #32
        } while (value > 0);
 6c4:	0000057c 	andeq	r0, r0, ip, ror r5
        while (num_len > 0) {
 6c8:	000012aa 	andeq	r1, r0, sl, lsr #5
          __write_char__(num[--num_len]);
 6cc:	0000003c 	andeq	r0, r0, ip, lsr r0
 6d0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
 6d4:	86038504 	strhi	r8, [r3], -r4, lsl #10
 6d8:	5a018e02 	bpl	63ee8 <__ROM_SIZE__+0x23ee8>
 6dc:	c5c4000e 	strbgt	r0, [r4, #14]
 6e0:	0000cec6 	andeq	ip, r0, r6, asr #29
  return true;
 6e4:	00000018 	andeq	r0, r0, r8, lsl r0
              __write_char__(hextable[val]);
 6e8:	0000057c 	andeq	r0, r0, ip, ror r5
 6ec:	000012e6 	andeq	r1, r0, r6, ror #5
              leading_zero_ignored = true;
 6f0:	00000066 	andeq	r0, r0, r6, rrx
          while (start_bit >= 0) {
 6f4:	83100e41 	tsthi	r0, #1040	; 0x410
            int val = (value >> start_bit) & 0xF;
 6f8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
            if (val || leading_zero_ignored) {
 6fc:	00018e02 	andeq	r8, r1, r2, lsl #28
 700:	00000018 	andeq	r0, r0, r8, lsl r0
 704:	0000057c 	andeq	r0, r0, ip, ror r5
          bool leading_zero_ignored = false;
 708:	0000134c 	andeq	r1, r0, ip, asr #6
          int start_bit = LAST_NIBBLE_FIRST_BIT;
 70c:	00000058 	andeq	r0, r0, r8, asr r0
  return true;
 710:	83100e41 	tsthi	r0, #1040	; 0x410
        return false;
 714:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
        return false;
 718:	00018e02 	andeq	r8, r1, r2, lsl #28
 71c:	0000000c 	andeq	r0, r0, ip
 720:	0000057c 	andeq	r0, r0, ip, ror r5
 724:	000013a4 	andeq	r1, r0, r4, lsr #7
 728:	0000000c 	andeq	r0, r0, ip
 72c:	0000000c 	andeq	r0, r0, ip
int printf(const char *fmt, ...) {
 730:	0000057c 	andeq	r0, r0, ip, ror r5
 734:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
 738:	0000000c 	andeq	r0, r0, ip
  va_start(args, fmt);
 73c:	0000000c 	andeq	r0, r0, ip
  while (*fmt) {
 740:	0000057c 	andeq	r0, r0, ip, ror r5
        if (*fmt == '%') {
 744:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
        __write_char__(*fmt);
 748:	0000000c 	andeq	r0, r0, ip
        fmt++;
 74c:	0000000c 	andeq	r0, r0, ip
  while (*fmt) {
 750:	0000057c 	andeq	r0, r0, ip, ror r5
    switch (state) {
 754:	000013c8 	andeq	r1, r0, r8, asr #7
 758:	0000000c 	andeq	r0, r0, ip
          fmt++;
 75c:	0000000c 	andeq	r0, r0, ip
          continue;
 760:	0000057c 	andeq	r0, r0, ip, ror r5
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
 764:	000013d4 	ldrdeq	r1, [r0], -r4
 768:	00000002 	andeq	r0, r0, r2
 76c:	0000000c 	andeq	r0, r0, ip
 770:	0000057c 	andeq	r0, r0, ip, ror r5
 774:	000013d6 	ldrdeq	r1, [r0], -r6
        switch (*fmt) {
 778:	00000002 	andeq	r0, r0, r2
 77c:	0000000c 	andeq	r0, r0, ip
 780:	0000057c 	andeq	r0, r0, ip, ror r5
 784:	000013d8 	ldrdeq	r1, [r0], -r8
            __write_char__(*fmt);
 788:	00000002 	andeq	r0, r0, r2
 78c:	0000002c 	andeq	r0, r0, ip, lsr #32
            state = CHECK_CH;
 790:	0000057c 	andeq	r0, r0, ip, ror r5
            break;
 794:	000013da 	ldrdeq	r1, [r0], -sl
 798:	000000a2 	andeq	r0, r0, r2, lsr #1
            outstr(va_arg(args, const char *));
 79c:	83200e44 			; <UNDEFINED> instruction: 0x83200e44
 7a0:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
 7a4:	88058606 	stmdahi	r5, {r1, r2, r9, sl, pc}
            fmt++;
 7a8:	8a038904 	bhi	e2bc0 <__ROM_SIZE__+0xa2bc0>
            break;
 7ac:	02018e02 	andeq	r8, r1, #2, 28
            __write_char__(va_arg(args, int));
 7b0:	c3000e45 	movwgt	r0, #3653	; 0xe45
 7b4:	c8c6c5c4 	stmiagt	r6, {r2, r6, r7, r8, sl, lr, pc}^
 7b8:	00cecac9 	sbceq	ip, lr, r9, asr #21
            fmt++;
 7bc:	0000000c 	andeq	r0, r0, ip
            break;
 7c0:	0000057c 	andeq	r0, r0, ip, ror r5
            if (*fmt == 'l') {
 7c4:	0000147c 	andeq	r1, r0, ip, ror r4
 7c8:	00000004 	andeq	r0, r0, r4
            if (printf_numbers(*fmt, &args, l_count)) {
 7cc:	00000020 	andeq	r0, r0, r0, lsr #32
 7d0:	0000057c 	andeq	r0, r0, ip, ror r5
 7d4:	00001480 	andeq	r1, r0, r0, lsl #9
              state = CHECK_CH;
 7d8:	00000168 	andeq	r0, r0, r8, ror #2
              fmt++;
 7dc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
              l_count++;
 7e0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
            if (printf_numbers(*fmt, &args, 0)) {
 7e4:	780e4101 	stmdavc	lr, {r0, r8, lr}
 7e8:	0c0e0a75 			; <UNDEFINED> instruction: 0x0c0e0a75
              fmt++;
 7ec:	00000b41 	andeq	r0, r0, r1, asr #22
              break;
 7f0:	00000014 	andeq	r0, r0, r4, lsl r0
            return -1;
 7f4:	0000057c 	andeq	r0, r0, ip, ror r5
}
 7f8:	000015e8 	andeq	r1, r0, r8, ror #11
 7fc:	00000014 	andeq	r0, r0, r4, lsl r0
            return -1;
 800:	83080e41 	movwhi	r0, #36417	; 0x8e41
 804:	00018e02 	andeq	r8, r1, r2, lsl #28
 808:	0000001c 	andeq	r0, r0, ip, lsl r0
int printf2(const char *fmt, ...) {
 80c:	0000057c 	andeq	r0, r0, ip, ror r5
 810:	000015fc 	strdeq	r1, [r0], -ip
    __write_char2__(*fmt);
 814:	00000028 	andeq	r0, r0, r8, lsr #32
 818:	8e040e41 	cdphi	14, 0, cr0, cr4, cr1, {2}
  while (*fmt != '\0') {
 81c:	480e4101 	stmdami	lr, {r0, r8, lr}
 820:	040e0a4a 	streq	r0, [lr], #-2634	; 0xfffff5b6
 824:	00000b42 	andeq	r0, r0, r2, asr #22
 828:	00000018 	andeq	r0, r0, r8, lsl r0
 82c:	0000057c 	andeq	r0, r0, ip, ror r5
{
 830:	00001624 	andeq	r1, r0, r4, lsr #12
  for (i = 0; i < Nk; ++i)
 834:	00000030 	andeq	r0, r0, r0, lsr r0
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 838:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 83c:	86038504 	strhi	r8, [r3], -r4, lsl #10
 840:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00000030 	andeq	r0, r0, r0, lsr r0
   4:	0000004e 	andeq	r0, r0, lr, asr #32
   8:	00000050 	andeq	r0, r0, r0, asr r0
   c:	00000052 	andeq	r0, r0, r2, asr r0
  10:	000000ca 	andeq	r0, r0, sl, asr #1
  14:	0000010e 	andeq	r0, r0, lr, lsl #2
  18:	00000112 	andeq	r0, r0, r2, lsl r1
  1c:	0000013a 	andeq	r0, r0, sl, lsr r1
  20:	00000142 	andeq	r0, r0, r2, asr #2
  24:	0000015c 	andeq	r0, r0, ip, asr r1
	...
  30:	00000112 	andeq	r0, r0, r2, lsl r1
  34:	00000120 	andeq	r0, r0, r0, lsr #2
  38:	00000124 	andeq	r0, r0, r4, lsr #2
  3c:	00000134 	andeq	r0, r0, r4, lsr r1
	...
  48:	00000062 	andeq	r0, r0, r2, rrx
  4c:	000000c6 	andeq	r0, r0, r6, asr #1
  50:	0000013e 	andeq	r0, r0, lr, lsr r1
  54:	00000142 	andeq	r0, r0, r2, asr #2
	...
  60:	000001ee 	andeq	r0, r0, lr, ror #3
  64:	0000020e 	andeq	r0, r0, lr, lsl #4
  68:	0000021e 	andeq	r0, r0, lr, lsl r2
  6c:	00000222 	andeq	r0, r0, r2, lsr #4
	...
  78:	00000002 	andeq	r0, r0, r2
  7c:	00000004 	andeq	r0, r0, r4
  80:	00000006 	andeq	r0, r0, r6
  84:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
  90:	0000001e 	andeq	r0, r0, lr, lsl r0
  94:	00000020 	andeq	r0, r0, r0, lsr #32
  98:	00000022 	andeq	r0, r0, r2, lsr #32
  9c:	00000058 	andeq	r0, r0, r8, asr r0
	...
  a8:	00000078 	andeq	r0, r0, r8, ror r0
  ac:	0000007c 	andeq	r0, r0, ip, ror r0
  b0:	0000008a 	andeq	r0, r0, sl, lsl #1
  b4:	0000009c 	muleq	r0, ip, r0
	...
  c0:	00000298 	muleq	r0, r8, r2
  c4:	000002aa 	andeq	r0, r0, sl, lsr #5
  c8:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
  cc:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
	...
