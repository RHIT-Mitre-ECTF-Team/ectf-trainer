
shell.elf:     file format elf32-littlearm


Disassembly of section .data:

20000000 <__echo>:
20000000:	Address 0x0000000020000000 is out of bounds.


Disassembly of section .bss:

20000004 <_bss>:
20000004:	00000000 	andeq	r0, r0, r0

20000008 <selected_mode>:

#include "memlog.h"
#include "string.h"

static rgn_info_t inp_buf_rgn, out_buf_rgn;
static mode_t selected_mode = NONE;
20000008:	00000000 	andeq	r0, r0, r0

2000000c <out_buf_rgn>:
	...

20000018 <inp_buf_rgn>:
	...

20000024 <__write_char__>:
#include "shell_config.h"
#include "string.h"

int (*__read_char__)(void);
int (*__read_char2__)(void);
void (*__write_char__)(char c);
20000024:	00000000 	andeq	r0, r0, r0

20000028 <total_num_commands>:
 * To reduce the shell size the history feature
 * is made optional. Skip history feature if
 * SHELL_NO_HISTORY is defined.
 */
#ifndef SHELL_NO_HISTORY
static volatile int total_num_commands = 0;
20000028:	00000000 	andeq	r0, r0, r0

2000002c <cmd_history>:
	...

2000006c <__cmd_exec_status>:
static volatile int __cmd_exec_status;
2000006c:	00000000 	andeq	r0, r0, r0

20000070 <curr_command_ptr>:
static volatile int curr_command_ptr = 0;
20000070:	00000000 	andeq	r0, r0, r0

20000074 <__read_char__>:
int (*__read_char__)(void);
20000074:	00000000 	andeq	r0, r0, r0

20000078 <__read_char2__>:
int (*__read_char2__)(void);
20000078:	00000000 	andeq	r0, r0, r0

2000007c <__write_char2__>:
void (*__write_char2__)(char c);
2000007c:	00000000 	andeq	r0, r0, r0

Disassembly of section .text:

00000000 <vector_table>:
       0:	20007ffc 	strdcs	r7, [r0], -ip
       4:	000016f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
       8:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
       c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      10:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      14:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      18:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
	...
      2c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      30:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      34:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
	...
      40:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      44:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      48:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      4c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      50:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      54:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      58:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      5c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      60:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      64:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      68:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      6c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      70:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      74:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      78:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      7c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      80:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      84:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      88:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      8c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      90:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      94:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      98:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      9c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      a0:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      a4:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      a8:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      ac:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      b0:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      b4:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      b8:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      bc:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      c0:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      c4:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      c8:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      cc:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      d0:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      d4:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      d8:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      dc:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      e0:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      e4:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      e8:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      ec:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      f0:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      f4:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      f8:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
      fc:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     100:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     104:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     108:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     10c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     110:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     114:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     118:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     11c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     120:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     124:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     128:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     12c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     130:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     134:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     138:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     13c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     140:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     144:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     148:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     14c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     150:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     154:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     158:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     15c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     160:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     164:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     168:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     16c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     170:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     174:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     178:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     17c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     180:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     184:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     188:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     18c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     190:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     194:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     198:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     19c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1a0:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1a4:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1a8:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1ac:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1b0:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1b4:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1b8:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1bc:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1c0:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1c4:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1c8:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1cc:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1d0:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1d4:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1d8:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1dc:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1e0:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1e4:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1e8:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1ec:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1f0:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1f4:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1f8:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     1fc:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     200:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     204:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     208:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     20c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     210:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     214:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     218:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     21c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     220:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     224:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     228:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     22c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     230:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     234:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     238:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     23c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     240:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     244:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     248:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     24c:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
	...

000003c0 <car_mesg>:

#include "shell.h"


int car_mesg(int argc, char** argv) {
     3c0:	b570      	push	{r4, r5, r6, lr}
     3c2:	4605      	mov	r5, r0
     3c4:	460e      	mov	r6, r1
    int ctr;
    printf("Received the message:");
     3c6:	4811      	ldr	r0, [pc, #68]	; (40c <car_mesg+0x4c>)
     3c8:	f000 f9f8 	bl	7bc <printf>
    for (ctr = 1; ctr < argc; ctr++) {
     3cc:	2401      	movs	r4, #1
     3ce:	e005      	b.n	3dc <car_mesg+0x1c>
        printf(" %s", argv[ctr]);
     3d0:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
     3d4:	480e      	ldr	r0, [pc, #56]	; (410 <car_mesg+0x50>)
     3d6:	f000 f9f1 	bl	7bc <printf>
    for (ctr = 1; ctr < argc; ctr++) {
     3da:	3401      	adds	r4, #1
     3dc:	42ac      	cmp	r4, r5
     3de:	dbf7      	blt.n	3d0 <car_mesg+0x10>
    }
    printf("\n");
     3e0:	480c      	ldr	r0, [pc, #48]	; (414 <car_mesg+0x54>)
     3e2:	f000 f9eb 	bl	7bc <printf>

    if (argc > 0) {
     3e6:	2d00      	cmp	r5, #0
     3e8:	dc01      	bgt.n	3ee <car_mesg+0x2e>
            printf("strcmp didn't match %s\n", argv[1]);
        }

    }
    return 0;
}
     3ea:	2000      	movs	r0, #0
     3ec:	bd70      	pop	{r4, r5, r6, pc}
        if (strcmp(argv[1], "PING_REPLY") == 0) {
     3ee:	490a      	ldr	r1, [pc, #40]	; (418 <car_mesg+0x58>)
     3f0:	6870      	ldr	r0, [r6, #4]
     3f2:	f000 fe39 	bl	1068 <strcmp>
     3f6:	b918      	cbnz	r0, 400 <car_mesg+0x40>
            printf("Got a ping reply.\n");
     3f8:	4808      	ldr	r0, [pc, #32]	; (41c <car_mesg+0x5c>)
     3fa:	f000 f9df 	bl	7bc <printf>
     3fe:	e7f4      	b.n	3ea <car_mesg+0x2a>
            printf("strcmp didn't match %s\n", argv[1]);
     400:	6871      	ldr	r1, [r6, #4]
     402:	4807      	ldr	r0, [pc, #28]	; (420 <car_mesg+0x60>)
     404:	f000 f9da 	bl	7bc <printf>
     408:	e7ef      	b.n	3ea <car_mesg+0x2a>
     40a:	bf00      	nop
     40c:	0000179c 	muleq	r0, ip, r7
     410:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
     414:	00001b08 	andeq	r1, r0, r8, lsl #22
     418:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
     41c:	000017c4 	andeq	r1, r0, r4, asr #15
     420:	000017d8 	ldrdeq	r1, [r0], -r8

00000424 <ping>:

#include "shell.h"


int ping(int argc, char** argv) {
     424:	b508      	push	{r3, lr}
    printf("Pinging the car.\n");
     426:	4804      	ldr	r0, [pc, #16]	; (438 <ping+0x14>)
     428:	f000 f9c8 	bl	7bc <printf>
    printf2("FOB_MESG PING\n");
     42c:	4803      	ldr	r0, [pc, #12]	; (43c <ping+0x18>)
     42e:	f000 fa33 	bl	898 <printf2>
    return 0;
}
     432:	2000      	movs	r0, #0
     434:	bd08      	pop	{r3, pc}
     436:	bf00      	nop
     438:	00001820 	andeq	r1, r0, r0, lsr #16
     43c:	00001834 	andeq	r1, r0, r4, lsr r8

00000440 <pair>:

#include "shell.h"


int pair(int argc, char** argv) {
     440:	b508      	push	{r3, lr}
    printf("Sending a pair request.\n");
     442:	4804      	ldr	r0, [pc, #16]	; (454 <pair+0x14>)
     444:	f000 f9ba 	bl	7bc <printf>
    printf2("FOB_MESG PAIR\n");
     448:	4803      	ldr	r0, [pc, #12]	; (458 <pair+0x18>)
     44a:	f000 fa25 	bl	898 <printf2>
    return 0;
}
     44e:	2000      	movs	r0, #0
     450:	bd08      	pop	{r3, pc}
     452:	bf00      	nop
     454:	00001864 	andeq	r1, r0, r4, ror #16
     458:	00001880 	andeq	r1, r0, r0, lsl #17

0000045c <uputc>:
 * limitations under the License.
 **/

#include "uart.h"

void uputc(char c) {
     45c:	b508      	push	{r3, lr}
  while ((UARTFR >> 5) & 1)
     45e:	4b07      	ldr	r3, [pc, #28]	; (47c <uputc+0x20>)
     460:	699b      	ldr	r3, [r3, #24]
     462:	f013 0f20 	tst.w	r3, #32
     466:	d1fa      	bne.n	45e <uputc+0x2>
    ;

  UART_DR = c;
     468:	4b04      	ldr	r3, [pc, #16]	; (47c <uputc+0x20>)
     46a:	6018      	str	r0, [r3, #0]
  if (c == '\n')
     46c:	280a      	cmp	r0, #10
     46e:	d000      	beq.n	472 <uputc+0x16>
    uputc('\r');
}
     470:	bd08      	pop	{r3, pc}
    uputc('\r');
     472:	200d      	movs	r0, #13
     474:	f7ff fff2 	bl	45c <uputc>
}
     478:	e7fa      	b.n	470 <uputc+0x14>
     47a:	bf00      	nop
     47c:	4000c000 	andmi	ip, r0, r0

00000480 <ugetc>:

int ugetc(void) {
  if (!((UARTFR >> 4) & 1)) return UART_DR;
     480:	4b05      	ldr	r3, [pc, #20]	; (498 <ugetc+0x18>)
     482:	699b      	ldr	r3, [r3, #24]
     484:	f013 0f10 	tst.w	r3, #16
     488:	d102      	bne.n	490 <ugetc+0x10>
     48a:	4b03      	ldr	r3, [pc, #12]	; (498 <ugetc+0x18>)
     48c:	6818      	ldr	r0, [r3, #0]
     48e:	4770      	bx	lr

  return -1;
     490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     494:	4770      	bx	lr
     496:	bf00      	nop
     498:	4000c000 	andmi	ip, r0, r0

0000049c <uart_init>:

void uart_init(void) {
  /* Disable UART0 */
  UARTCTL = 0;
     49c:	4b07      	ldr	r3, [pc, #28]	; (4bc <uart_init+0x20>)
     49e:	2200      	movs	r2, #0
     4a0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the Baud to 115200 */
  UARTIBRD = 8;
     4a2:	2108      	movs	r1, #8
     4a4:	6259      	str	r1, [r3, #36]	; 0x24
  UARTFBRD = 44;
     4a6:	212c      	movs	r1, #44	; 0x2c
     4a8:	6299      	str	r1, [r3, #40]	; 0x28

  /* Use system clock for Uart */
  UARTCC = 0;
     4aa:	f8c3 2fc8 	str.w	r2, [r3, #4040]	; 0xfc8

  /* 8n1 and no fifo */
  UARTLCRH = 0x60;
     4ae:	2260      	movs	r2, #96	; 0x60
     4b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable UART0, TXE and RXE */
  UARTCTL = 0x301;
     4b2:	f240 3201 	movw	r2, #769	; 0x301
     4b6:	631a      	str	r2, [r3, #48]	; 0x30
}
     4b8:	4770      	bx	lr
     4ba:	bf00      	nop
     4bc:	4000c000 	andmi	ip, r0, r0

000004c0 <u2putc>:
 * limitations under the License.
 **/

#include "uart2.h"

void u2putc(char c) {
     4c0:	b508      	push	{r3, lr}
  while ((UART2FR >> 5) & 1)
     4c2:	4b07      	ldr	r3, [pc, #28]	; (4e0 <u2putc+0x20>)
     4c4:	699b      	ldr	r3, [r3, #24]
     4c6:	f013 0f20 	tst.w	r3, #32
     4ca:	d1fa      	bne.n	4c2 <u2putc+0x2>
    ;

  UART2_DR = c;
     4cc:	4b04      	ldr	r3, [pc, #16]	; (4e0 <u2putc+0x20>)
     4ce:	6018      	str	r0, [r3, #0]
  if (c == '\n')
     4d0:	280a      	cmp	r0, #10
     4d2:	d000      	beq.n	4d6 <u2putc+0x16>
    u2putc('\r');
}
     4d4:	bd08      	pop	{r3, pc}
    u2putc('\r');
     4d6:	200d      	movs	r0, #13
     4d8:	f7ff fff2 	bl	4c0 <u2putc>
}
     4dc:	e7fa      	b.n	4d4 <u2putc+0x14>
     4de:	bf00      	nop
     4e0:	4000d000 	andmi	sp, r0, r0

000004e4 <u2getc>:

int u2getc(void) {
  if (!((UART2FR >> 4) & 1)) return UART2_DR;
     4e4:	4b05      	ldr	r3, [pc, #20]	; (4fc <u2getc+0x18>)
     4e6:	699b      	ldr	r3, [r3, #24]
     4e8:	f013 0f10 	tst.w	r3, #16
     4ec:	d102      	bne.n	4f4 <u2getc+0x10>
     4ee:	4b03      	ldr	r3, [pc, #12]	; (4fc <u2getc+0x18>)
     4f0:	6818      	ldr	r0, [r3, #0]
     4f2:	4770      	bx	lr

  return -1;
     4f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     4f8:	4770      	bx	lr
     4fa:	bf00      	nop
     4fc:	4000d000 	andmi	sp, r0, r0

00000500 <uart2_init>:

void uart2_init(void) {
  /* Disable the UART */
  UART2CTL = 0;
     500:	4b07      	ldr	r3, [pc, #28]	; (520 <uart2_init+0x20>)
     502:	2200      	movs	r2, #0
     504:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the Baud to 115200 */
  UART2IBRD = 8;
     506:	2108      	movs	r1, #8
     508:	6259      	str	r1, [r3, #36]	; 0x24
  UART2FBRD = 44;
     50a:	212c      	movs	r1, #44	; 0x2c
     50c:	6299      	str	r1, [r3, #40]	; 0x28

  /* Use system clock for Uart */
  UART2CC = 0;
     50e:	f8c3 2fc8 	str.w	r2, [r3, #4040]	; 0xfc8

  /* 8n1 and no fifo */
  UART2LCRH = 0x60;
     512:	2260      	movs	r2, #96	; 0x60
     514:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable UART with TXE and RXE */
  UART2CTL = 0x301;
     516:	f240 3201 	movw	r2, #769	; 0x301
     51a:	631a      	str	r2, [r3, #48]	; 0x30
}
     51c:	4770      	bx	lr
     51e:	bf00      	nop
     520:	4000d000 	andmi	sp, r0, r0

00000524 <pin_setup>:


void pin_setup() {
  /* Enable clock for UART0 and GPIO */
  // RCGCUART |= 1;
  RCGCUART |= 3;
     524:	4b13      	ldr	r3, [pc, #76]	; (574 <pin_setup+0x50>)
     526:	f8d3 2618 	ldr.w	r2, [r3, #1560]	; 0x618
     52a:	f042 0203 	orr.w	r2, r2, #3
     52e:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
   // RCGCGPIO |= 1;
  RCGCGPIO |= 3;
     532:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
     536:	f042 0203 	orr.w	r2, r2, #3
     53a:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608

  /* Set PIN PA0 and PA1 as uart */
  GPIODEN = 0x03;
     53e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     542:	2203      	movs	r2, #3
     544:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
  GPIOAFSEL = 0x03;
     548:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  GPIOPCTL |= 0x00000011;
     54c:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
     550:	f041 0111 	orr.w	r1, r1, #17
     554:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c

    /* Set PIN PA0 and PA1 as uart */
  GPIODEN2 = 0x03;
     558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     55c:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
  GPIOAFSEL2 = 0x03;
     560:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  GPIOPCTL2 |= 0x00000011;
     564:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
     568:	f042 0211 	orr.w	r2, r2, #17
     56c:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
}
     570:	4770      	bx	lr
     572:	bf00      	nop
     574:	400fe000 	andmi	lr, pc, r0

00000578 <platform_init>:

/**
 * @brief Inilialize the platform
 *
 */
void platform_init() {
     578:	b508      	push	{r3, lr}
    pin_setup();
     57a:	f7ff ffd3 	bl	524 <pin_setup>
    uart_init();
     57e:	f7ff ff8d 	bl	49c <uart_init>
    uart2_init();
     582:	f7ff ffbd 	bl	500 <uart2_init>
    set_read_char(ugetc);
     586:	4806      	ldr	r0, [pc, #24]	; (5a0 <platform_init+0x28>)
     588:	f000 ff52 	bl	1430 <set_read_char>
    set_read_char2(u2getc);
     58c:	4805      	ldr	r0, [pc, #20]	; (5a4 <platform_init+0x2c>)
     58e:	f000 ff55 	bl	143c <set_read_char2>
    set_write_char(uputc);
     592:	4805      	ldr	r0, [pc, #20]	; (5a8 <platform_init+0x30>)
     594:	f000 ff58 	bl	1448 <set_write_char>
    set_write_char2(u2putc);
     598:	4804      	ldr	r0, [pc, #16]	; (5ac <platform_init+0x34>)
     59a:	f000 ff5b 	bl	1454 <set_write_char2>
}
     59e:	bd08      	pop	{r3, pc}
     5a0:	00000481 	andeq	r0, r0, r1, lsl #9
     5a4:	000004e5 	andeq	r0, r0, r5, ror #9
     5a8:	0000045d 	andeq	r0, r0, sp, asr r4
     5ac:	000004c1 	andeq	r0, r0, r1, asr #9

000005b0 <default_handler>:

extern int _STACK_TOP_;
extern void reset_handler(void);

void default_handler(void) {
  while (1)
     5b0:	e7fe      	b.n	5b0 <default_handler>
	...

000005b4 <memlog_init>:

void memlog_init(uint8_t *addr, uint32_t size, mode_t mode) {
  selected_mode = mode;
     5b4:	4b0e      	ldr	r3, [pc, #56]	; (5f0 <memlog_init+0x3c>)
     5b6:	701a      	strb	r2, [r3, #0]

  if (selected_mode == NONE) {
     5b8:	b1ca      	cbz	r2, 5ee <memlog_init+0x3a>
void memlog_init(uint8_t *addr, uint32_t size, mode_t mode) {
     5ba:	b570      	push	{r4, r5, r6, lr}
    return;
  }

  out_buf_rgn.addr = addr;
     5bc:	6058      	str	r0, [r3, #4]
  out_buf_rgn.size = size / 2;
     5be:	084c      	lsrs	r4, r1, #1
     5c0:	609c      	str	r4, [r3, #8]
  out_buf_rgn.curr_index = 0;
     5c2:	2500      	movs	r5, #0
     5c4:	60dd      	str	r5, [r3, #12]

  inp_buf_rgn.addr = addr + size / 2;
     5c6:	1906      	adds	r6, r0, r4
     5c8:	611e      	str	r6, [r3, #16]
  inp_buf_rgn.size = size / 2;
     5ca:	615c      	str	r4, [r3, #20]
  inp_buf_rgn.curr_index = 0;
     5cc:	619d      	str	r5, [r3, #24]

  if (!(selected_mode & INP)) {
     5ce:	f012 0f01 	tst.w	r2, #1
     5d2:	d105      	bne.n	5e0 <memlog_init+0x2c>
    // No input, use the extra memory for output.

    out_buf_rgn.size = size;
     5d4:	6099      	str	r1, [r3, #8]

    inp_buf_rgn.addr = addr;
    inp_buf_rgn.size = size;
  }

  memset(addr, 0, size);
     5d6:	460a      	mov	r2, r1
     5d8:	2100      	movs	r1, #0
     5da:	f000 fd65 	bl	10a8 <memset>
}
     5de:	bd70      	pop	{r4, r5, r6, pc}
  } else if (!(selected_mode & OUT)) {
     5e0:	f012 0f02 	tst.w	r2, #2
     5e4:	d1f7      	bne.n	5d6 <memlog_init+0x22>
    inp_buf_rgn.addr = addr;
     5e6:	4b02      	ldr	r3, [pc, #8]	; (5f0 <memlog_init+0x3c>)
     5e8:	6118      	str	r0, [r3, #16]
    inp_buf_rgn.size = size;
     5ea:	6159      	str	r1, [r3, #20]
     5ec:	e7f3      	b.n	5d6 <memlog_init+0x22>
     5ee:	4770      	bx	lr
     5f0:	20000008 	andcs	r0, r0, r8

000005f4 <memlog_getc>:

int memlog_getc() {
  if (!(selected_mode & INP)) {
     5f4:	4b0e      	ldr	r3, [pc, #56]	; (630 <memlog_getc+0x3c>)
     5f6:	781b      	ldrb	r3, [r3, #0]
     5f8:	f013 0f01 	tst.w	r3, #1
     5fc:	d012      	beq.n	624 <memlog_getc+0x30>
    return -1;
  }

  if (inp_buf_rgn.addr[inp_buf_rgn.curr_index] == 0) {
     5fe:	4b0c      	ldr	r3, [pc, #48]	; (630 <memlog_getc+0x3c>)
     600:	691a      	ldr	r2, [r3, #16]
     602:	699b      	ldr	r3, [r3, #24]
     604:	5cd1      	ldrb	r1, [r2, r3]
     606:	b181      	cbz	r1, 62a <memlog_getc+0x36>
    return -1;
  }

  int val = inp_buf_rgn.addr[inp_buf_rgn.curr_index];
     608:	5cd0      	ldrb	r0, [r2, r3]
     60a:	b2c0      	uxtb	r0, r0
  inp_buf_rgn.addr[inp_buf_rgn.curr_index] = 0;
     60c:	2100      	movs	r1, #0
     60e:	54d1      	strb	r1, [r2, r3]
  inp_buf_rgn.curr_index++;
     610:	3301      	adds	r3, #1
     612:	4a07      	ldr	r2, [pc, #28]	; (630 <memlog_getc+0x3c>)
     614:	6193      	str	r3, [r2, #24]

  if (inp_buf_rgn.curr_index == inp_buf_rgn.size) {
     616:	6952      	ldr	r2, [r2, #20]
     618:	4293      	cmp	r3, r2
     61a:	d000      	beq.n	61e <memlog_getc+0x2a>
    inp_buf_rgn.curr_index = 0;
  }

  return val;
}
     61c:	4770      	bx	lr
    inp_buf_rgn.curr_index = 0;
     61e:	4b04      	ldr	r3, [pc, #16]	; (630 <memlog_getc+0x3c>)
     620:	6199      	str	r1, [r3, #24]
     622:	4770      	bx	lr
    return -1;
     624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     628:	4770      	bx	lr
    return -1;
     62a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     62e:	e7f5      	b.n	61c <memlog_getc+0x28>
     630:	20000008 	andcs	r0, r0, r8

00000634 <memlog_putc>:

void memlog_putc(char c) {
  if (!(selected_mode & OUT) || c == 0) {
     634:	4b09      	ldr	r3, [pc, #36]	; (65c <memlog_putc+0x28>)
     636:	781b      	ldrb	r3, [r3, #0]
     638:	f013 0f02 	tst.w	r3, #2
     63c:	d009      	beq.n	652 <memlog_putc+0x1e>
     63e:	b140      	cbz	r0, 652 <memlog_putc+0x1e>
    return;
  }

  out_buf_rgn.addr[out_buf_rgn.curr_index] = (uint8_t) c;
     640:	4a06      	ldr	r2, [pc, #24]	; (65c <memlog_putc+0x28>)
     642:	6851      	ldr	r1, [r2, #4]
     644:	68d3      	ldr	r3, [r2, #12]
     646:	54c8      	strb	r0, [r1, r3]
  out_buf_rgn.curr_index++;
     648:	3301      	adds	r3, #1
     64a:	60d3      	str	r3, [r2, #12]

  if (out_buf_rgn.curr_index == out_buf_rgn.size) {
     64c:	6892      	ldr	r2, [r2, #8]
     64e:	4293      	cmp	r3, r2
     650:	d000      	beq.n	654 <memlog_putc+0x20>
    out_buf_rgn.curr_index = 0;
  }
}
     652:	4770      	bx	lr
    out_buf_rgn.curr_index = 0;
     654:	4b01      	ldr	r3, [pc, #4]	; (65c <memlog_putc+0x28>)
     656:	2200      	movs	r2, #0
     658:	60da      	str	r2, [r3, #12]
     65a:	e7fa      	b.n	652 <memlog_putc+0x1e>
     65c:	20000008 	andcs	r0, r0, r8

00000660 <outstr>:
} printf_state;

static char hextable[] = {'0', '1', '2', '3', '4', '5', '6', '7',
                          '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

static void outstr(const char *str) {
     660:	b510      	push	{r4, lr}
     662:	4604      	mov	r4, r0
  while (*str != '\0') {
     664:	e003      	b.n	66e <outstr+0xe>
    __write_char__(*str);
     666:	4b04      	ldr	r3, [pc, #16]	; (678 <outstr+0x18>)
     668:	681b      	ldr	r3, [r3, #0]
     66a:	4798      	blx	r3
    str++;
     66c:	3401      	adds	r4, #1
  while (*str != '\0') {
     66e:	7820      	ldrb	r0, [r4, #0]
     670:	2800      	cmp	r0, #0
     672:	d1f8      	bne.n	666 <outstr+0x6>
  }
}
     674:	bd10      	pop	{r4, pc}
     676:	bf00      	nop
     678:	20000024 	andcs	r0, r0, r4, lsr #32

0000067c <printf_numbers>:

static bool printf_numbers(const char fmt, va_list *args, int l_count) {
     67c:	b530      	push	{r4, r5, lr}
     67e:	b085      	sub	sp, #20
     680:	4614      	mov	r4, r2
  char num[MAX_DIGITS];
  int num_len = 0;

  switch (fmt) {
     682:	2864      	cmp	r0, #100	; 0x64
     684:	d01d      	beq.n	6c2 <printf_numbers+0x46>
     686:	d914      	bls.n	6b2 <printf_numbers+0x36>
     688:	2875      	cmp	r0, #117	; 0x75
     68a:	d001      	beq.n	690 <printf_numbers+0x14>
     68c:	2878      	cmp	r0, #120	; 0x78
     68e:	d112      	bne.n	6b6 <printf_numbers+0x3a>
#ifndef SHELL_NO_PRINTF_LL
      long long unsigned int value = 0;
#else
      unsigned int value = 0;
#endif  // SHELL_NO_PRINTF_LL
      if (l_count == 0) {
     690:	2c00      	cmp	r4, #0
     692:	f040 8086 	bne.w	7a2 <printf_numbers+0x126>
        value = va_arg(*args, unsigned int);
     696:	680b      	ldr	r3, [r1, #0]
     698:	1d1a      	adds	r2, r3, #4
     69a:	600a      	str	r2, [r1, #0]
     69c:	681d      	ldr	r5, [r3, #0]
#endif  // SHELL_NO_PRINTF_LL
      } else {
        return false;
      }

      if (fmt == 'u') {
     69e:	2875      	cmp	r0, #117	; 0x75
     6a0:	d043      	beq.n	72a <printf_numbers+0xae>

        while (num_len > 0) {
          __write_char__(num[--num_len]);
        };
      } else {
        if (value == 0) {
     6a2:	2d00      	cmp	r5, #0
     6a4:	d176      	bne.n	794 <printf_numbers+0x118>
          __write_char__(hextable[0]);
     6a6:	4b40      	ldr	r3, [pc, #256]	; (7a8 <printf_numbers+0x12c>)
     6a8:	681b      	ldr	r3, [r3, #0]
     6aa:	2030      	movs	r0, #48	; 0x30
     6ac:	4798      	blx	r3
    }
    default:
      outstr("\nprintf-error\n");
      return false;
  }
  return true;
     6ae:	2001      	movs	r0, #1
     6b0:	e005      	b.n	6be <printf_numbers+0x42>
  switch (fmt) {
     6b2:	2858      	cmp	r0, #88	; 0x58
     6b4:	d0ec      	beq.n	690 <printf_numbers+0x14>
      outstr("\nprintf-error\n");
     6b6:	483d      	ldr	r0, [pc, #244]	; (7ac <printf_numbers+0x130>)
     6b8:	f7ff ffd2 	bl	660 <outstr>
      return false;
     6bc:	2000      	movs	r0, #0
}
     6be:	b005      	add	sp, #20
     6c0:	bd30      	pop	{r4, r5, pc}
      if (l_count == 0) {
     6c2:	2a00      	cmp	r2, #0
     6c4:	d16b      	bne.n	79e <printf_numbers+0x122>
        value = va_arg(*args, int);
     6c6:	680b      	ldr	r3, [r1, #0]
     6c8:	1d1a      	adds	r2, r3, #4
     6ca:	600a      	str	r2, [r1, #0]
     6cc:	681d      	ldr	r5, [r3, #0]
      if (value < 0) {
     6ce:	2d00      	cmp	r5, #0
     6d0:	db17      	blt.n	702 <printf_numbers+0x86>
        num[num_len++] = hextable[value % 10];
     6d2:	4a37      	ldr	r2, [pc, #220]	; (7b0 <printf_numbers+0x134>)
     6d4:	fb82 3205 	smull	r3, r2, r2, r5
     6d8:	17eb      	asrs	r3, r5, #31
     6da:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
     6de:	4619      	mov	r1, r3
     6e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     6e4:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
     6e8:	4832      	ldr	r0, [pc, #200]	; (7b4 <printf_numbers+0x138>)
     6ea:	5cc0      	ldrb	r0, [r0, r3]
     6ec:	4623      	mov	r3, r4
     6ee:	3310      	adds	r3, #16
     6f0:	446b      	add	r3, sp
     6f2:	3401      	adds	r4, #1
     6f4:	f803 0c0c 	strb.w	r0, [r3, #-12]
        value = value / 10;
     6f8:	462b      	mov	r3, r5
     6fa:	460d      	mov	r5, r1
      } while (value > 0);
     6fc:	2b09      	cmp	r3, #9
     6fe:	dce8      	bgt.n	6d2 <printf_numbers+0x56>
     700:	e00f      	b.n	722 <printf_numbers+0xa6>
        __write_char__('-');
     702:	4b29      	ldr	r3, [pc, #164]	; (7a8 <printf_numbers+0x12c>)
     704:	681b      	ldr	r3, [r3, #0]
     706:	202d      	movs	r0, #45	; 0x2d
     708:	4798      	blx	r3
        value = -value;
     70a:	426d      	negs	r5, r5
     70c:	e7e1      	b.n	6d2 <printf_numbers+0x56>
        __write_char__(num[--num_len]);
     70e:	3c01      	subs	r4, #1
     710:	f104 0310 	add.w	r3, r4, #16
     714:	eb0d 0203 	add.w	r2, sp, r3
     718:	4b23      	ldr	r3, [pc, #140]	; (7a8 <printf_numbers+0x12c>)
     71a:	681b      	ldr	r3, [r3, #0]
     71c:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
     720:	4798      	blx	r3
      while (num_len > 0) {
     722:	2c00      	cmp	r4, #0
     724:	dcf3      	bgt.n	70e <printf_numbers+0x92>
  return true;
     726:	2001      	movs	r0, #1
     728:	e7c9      	b.n	6be <printf_numbers+0x42>
          num[num_len++] = hextable[value % 10];
     72a:	4b23      	ldr	r3, [pc, #140]	; (7b8 <printf_numbers+0x13c>)
     72c:	fba3 2305 	umull	r2, r3, r3, r5
     730:	08db      	lsrs	r3, r3, #3
     732:	4619      	mov	r1, r3
     734:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     738:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
     73c:	481d      	ldr	r0, [pc, #116]	; (7b4 <printf_numbers+0x138>)
     73e:	5cc0      	ldrb	r0, [r0, r3]
     740:	4623      	mov	r3, r4
     742:	3310      	adds	r3, #16
     744:	446b      	add	r3, sp
     746:	3401      	adds	r4, #1
     748:	f803 0c0c 	strb.w	r0, [r3, #-12]
          value = value / 10;
     74c:	462b      	mov	r3, r5
     74e:	460d      	mov	r5, r1
        } while (value > 0);
     750:	2b09      	cmp	r3, #9
     752:	d8ea      	bhi.n	72a <printf_numbers+0xae>
        while (num_len > 0) {
     754:	2c00      	cmp	r4, #0
     756:	dd0a      	ble.n	76e <printf_numbers+0xf2>
          __write_char__(num[--num_len]);
     758:	3c01      	subs	r4, #1
     75a:	f104 0310 	add.w	r3, r4, #16
     75e:	eb0d 0203 	add.w	r2, sp, r3
     762:	4b11      	ldr	r3, [pc, #68]	; (7a8 <printf_numbers+0x12c>)
     764:	681b      	ldr	r3, [r3, #0]
     766:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
     76a:	4798      	blx	r3
     76c:	e7f2      	b.n	754 <printf_numbers+0xd8>
  return true;
     76e:	2001      	movs	r0, #1
     770:	e7a5      	b.n	6be <printf_numbers+0x42>
              __write_char__(hextable[val]);
     772:	4a0d      	ldr	r2, [pc, #52]	; (7a8 <printf_numbers+0x12c>)
     774:	6812      	ldr	r2, [r2, #0]
     776:	490f      	ldr	r1, [pc, #60]	; (7b4 <printf_numbers+0x138>)
     778:	5cc8      	ldrb	r0, [r1, r3]
     77a:	4790      	blx	r2
              leading_zero_ignored = true;
     77c:	2201      	movs	r2, #1
            start_bit -= 4;
     77e:	3c04      	subs	r4, #4
          while (start_bit >= 0) {
     780:	2c00      	cmp	r4, #0
     782:	db0a      	blt.n	79a <printf_numbers+0x11e>
            int val = (value >> start_bit) & 0xF;
     784:	fa25 f304 	lsr.w	r3, r5, r4
            if (val || leading_zero_ignored) {
     788:	f013 030f 	ands.w	r3, r3, #15
     78c:	d1f1      	bne.n	772 <printf_numbers+0xf6>
     78e:	2a00      	cmp	r2, #0
     790:	d0f5      	beq.n	77e <printf_numbers+0x102>
     792:	e7ee      	b.n	772 <printf_numbers+0xf6>
          bool leading_zero_ignored = false;
     794:	2200      	movs	r2, #0
          int start_bit = LAST_NIBBLE_FIRST_BIT;
     796:	241c      	movs	r4, #28
     798:	e7f2      	b.n	780 <printf_numbers+0x104>
  return true;
     79a:	2001      	movs	r0, #1
     79c:	e78f      	b.n	6be <printf_numbers+0x42>
        return false;
     79e:	2000      	movs	r0, #0
     7a0:	e78d      	b.n	6be <printf_numbers+0x42>
        return false;
     7a2:	2000      	movs	r0, #0
     7a4:	e78b      	b.n	6be <printf_numbers+0x42>
     7a6:	bf00      	nop
     7a8:	20000024 	andcs	r0, r0, r4, lsr #32
     7ac:	000018c0 	andeq	r1, r0, r0, asr #17
     7b0:	66666667 	strbtvs	r6, [r6], -r7, ror #12
     7b4:	000018d0 	ldrdeq	r1, [r0], -r0
     7b8:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

000007bc <printf>:

int printf(const char *fmt, ...) {
     7bc:	b40f      	push	{r0, r1, r2, r3}
     7be:	b530      	push	{r4, r5, lr}
     7c0:	b083      	sub	sp, #12
     7c2:	ab06      	add	r3, sp, #24
     7c4:	f853 4b04 	ldr.w	r4, [r3], #4
  printf_state state = CHECK_CH;
  va_list args;

  va_start(args, fmt);
     7c8:	9301      	str	r3, [sp, #4]
  printf_state state = CHECK_CH;
     7ca:	2500      	movs	r5, #0

  while (*fmt) {
     7cc:	e005      	b.n	7da <printf+0x1e>
    switch (state) {
      case CHECK_CH: {
        if (*fmt == '%') {
     7ce:	2825      	cmp	r0, #37	; 0x25
     7d0:	d00a      	beq.n	7e8 <printf+0x2c>
          state = PARSE_FMT_STR;
          fmt++;
          continue;
        }
        __write_char__(*fmt);
     7d2:	4b30      	ldr	r3, [pc, #192]	; (894 <printf+0xd8>)
     7d4:	681b      	ldr	r3, [r3, #0]
     7d6:	4798      	blx	r3
        fmt++;
     7d8:	3401      	adds	r4, #1
  while (*fmt) {
     7da:	7820      	ldrb	r0, [r4, #0]
     7dc:	2800      	cmp	r0, #0
     7de:	d050      	beq.n	882 <printf+0xc6>
    switch (state) {
     7e0:	2d00      	cmp	r5, #0
     7e2:	d0f4      	beq.n	7ce <printf+0x12>
     7e4:	b925      	cbnz	r5, 7f0 <printf+0x34>
     7e6:	e7f8      	b.n	7da <printf+0x1e>
          fmt++;
     7e8:	3401      	adds	r4, #1
          state = PARSE_FMT_STR;
     7ea:	2501      	movs	r5, #1
          continue;
     7ec:	e7f5      	b.n	7da <printf+0x1e>
        break;
      }
      case PARSE_FMT_STR: {
        // Support only basic format specifiers
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
          fmt++;
     7ee:	3401      	adds	r4, #1
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
     7f0:	7820      	ldrb	r0, [r4, #0]
     7f2:	b130      	cbz	r0, 802 <printf+0x46>
     7f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     7f8:	b2db      	uxtb	r3, r3
     7fa:	2b09      	cmp	r3, #9
     7fc:	d9f7      	bls.n	7ee <printf+0x32>
     7fe:	282d      	cmp	r0, #45	; 0x2d
     800:	d0f5      	beq.n	7ee <printf+0x32>
        }

        switch (*fmt) {
     802:	2863      	cmp	r0, #99	; 0x63
     804:	d019      	beq.n	83a <printf+0x7e>
     806:	d80b      	bhi.n	820 <printf+0x64>
     808:	2843      	cmp	r0, #67	; 0x43
     80a:	d016      	beq.n	83a <printf+0x7e>
     80c:	2853      	cmp	r0, #83	; 0x53
     80e:	d00b      	beq.n	828 <printf+0x6c>
     810:	2825      	cmp	r0, #37	; 0x25
     812:	d12c      	bne.n	86e <printf+0xb2>
          case '%':
            __write_char__(*fmt);
     814:	4b1f      	ldr	r3, [pc, #124]	; (894 <printf+0xd8>)
     816:	681b      	ldr	r3, [r3, #0]
     818:	4798      	blx	r3
            fmt++;
     81a:	3401      	adds	r4, #1
            state = CHECK_CH;
     81c:	2500      	movs	r5, #0
            break;
     81e:	e7dc      	b.n	7da <printf+0x1e>
     820:	286c      	cmp	r0, #108	; 0x6c
     822:	d014      	beq.n	84e <printf+0x92>
     824:	2873      	cmp	r0, #115	; 0x73
     826:	d122      	bne.n	86e <printf+0xb2>
            fmt++;
            state = CHECK_CH;
            break;
          case 's':
          case 'S':
            outstr(va_arg(args, const char *));
     828:	9b01      	ldr	r3, [sp, #4]
     82a:	1d1a      	adds	r2, r3, #4
     82c:	9201      	str	r2, [sp, #4]
     82e:	6818      	ldr	r0, [r3, #0]
     830:	f7ff ff16 	bl	660 <outstr>
            fmt++;
     834:	3401      	adds	r4, #1
            state = CHECK_CH;
     836:	2500      	movs	r5, #0
            break;
     838:	e7cf      	b.n	7da <printf+0x1e>
            __write_char__(va_arg(args, int));
     83a:	4b16      	ldr	r3, [pc, #88]	; (894 <printf+0xd8>)
     83c:	681a      	ldr	r2, [r3, #0]
     83e:	9b01      	ldr	r3, [sp, #4]
     840:	1d19      	adds	r1, r3, #4
     842:	9101      	str	r1, [sp, #4]
     844:	7818      	ldrb	r0, [r3, #0]
     846:	4790      	blx	r2
            fmt++;
     848:	3401      	adds	r4, #1
            state = CHECK_CH;
     84a:	2500      	movs	r5, #0
            break;
     84c:	e7c5      	b.n	7da <printf+0x1e>
          case 'l': {
            int l_count = 1;
            fmt++;
     84e:	1c65      	adds	r5, r4, #1
            if (*fmt == 'l') {
     850:	7863      	ldrb	r3, [r4, #1]
     852:	2b6c      	cmp	r3, #108	; 0x6c
     854:	d008      	beq.n	868 <printf+0xac>
            int l_count = 1;
     856:	2201      	movs	r2, #1
              l_count++;
              fmt++;
            }
            if (printf_numbers(*fmt, &args, l_count)) {
     858:	a901      	add	r1, sp, #4
     85a:	7828      	ldrb	r0, [r5, #0]
     85c:	f7ff ff0e 	bl	67c <printf_numbers>
     860:	b168      	cbz	r0, 87e <printf+0xc2>
              state = CHECK_CH;
              fmt++;
     862:	1c6c      	adds	r4, r5, #1
              state = CHECK_CH;
     864:	2500      	movs	r5, #0
              break;
     866:	e7b8      	b.n	7da <printf+0x1e>
              fmt++;
     868:	1ca5      	adds	r5, r4, #2
              l_count++;
     86a:	2202      	movs	r2, #2
     86c:	e7f4      	b.n	858 <printf+0x9c>
            }
            return -1;
          }
          default: {
            if (printf_numbers(*fmt, &args, 0)) {
     86e:	2200      	movs	r2, #0
     870:	a901      	add	r1, sp, #4
     872:	f7ff ff03 	bl	67c <printf_numbers>
     876:	b148      	cbz	r0, 88c <printf+0xd0>
              state = CHECK_CH;
              fmt++;
     878:	3401      	adds	r4, #1
              state = CHECK_CH;
     87a:	2500      	movs	r5, #0
              break;
     87c:	e7ad      	b.n	7da <printf+0x1e>
            return -1;
     87e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  va_end(args);
  return 0;
}
     882:	b003      	add	sp, #12
     884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     888:	b004      	add	sp, #16
     88a:	4770      	bx	lr
            return -1;
     88c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     890:	e7f7      	b.n	882 <printf+0xc6>
     892:	bf00      	nop
     894:	20000024 	andcs	r0, r0, r4, lsr #32

00000898 <printf2>:
}

#endif  // SHELL_PRINTF_LITE


int printf2(const char *fmt, ...) {
     898:	b40f      	push	{r0, r1, r2, r3}
     89a:	b510      	push	{r4, lr}
     89c:	9c02      	ldr	r4, [sp, #8]
  while (*fmt != '\0') {
     89e:	e003      	b.n	8a8 <printf2+0x10>
    __write_char2__(*fmt);
     8a0:	4b05      	ldr	r3, [pc, #20]	; (8b8 <printf2+0x20>)
     8a2:	681b      	ldr	r3, [r3, #0]
     8a4:	4798      	blx	r3
    fmt++;
     8a6:	3401      	adds	r4, #1
  while (*fmt != '\0') {
     8a8:	7820      	ldrb	r0, [r4, #0]
     8aa:	2800      	cmp	r0, #0
     8ac:	d1f8      	bne.n	8a0 <printf2+0x8>
  }
  return 0;
     8ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     8b2:	b004      	add	sp, #16
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop
     8b8:	2000007c 	andcs	r0, r0, ip, ror r0

000008bc <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
     8bc:	b510      	push	{r4, lr}
     8be:	b082      	sub	sp, #8
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
     8c0:	2200      	movs	r2, #0
     8c2:	e012      	b.n	8ea <KeyExpansion+0x2e>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
     8c4:	0093      	lsls	r3, r2, #2
     8c6:	f811 4022 	ldrb.w	r4, [r1, r2, lsl #2]
     8ca:	f800 4022 	strb.w	r4, [r0, r2, lsl #2]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
     8ce:	1c5c      	adds	r4, r3, #1
     8d0:	f811 c004 	ldrb.w	ip, [r1, r4]
     8d4:	f800 c004 	strb.w	ip, [r0, r4]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
     8d8:	1c9c      	adds	r4, r3, #2
     8da:	f811 c004 	ldrb.w	ip, [r1, r4]
     8de:	f800 c004 	strb.w	ip, [r0, r4]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
     8e2:	3303      	adds	r3, #3
     8e4:	5ccc      	ldrb	r4, [r1, r3]
     8e6:	54c4      	strb	r4, [r0, r3]
  for (i = 0; i < Nk; ++i)
     8e8:	3201      	adds	r2, #1
     8ea:	2a03      	cmp	r2, #3
     8ec:	d9ea      	bls.n	8c4 <KeyExpansion+0x8>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     8ee:	2304      	movs	r3, #4
     8f0:	e024      	b.n	93c <KeyExpansion+0x80>
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
     8f2:	0099      	lsls	r1, r3, #2
     8f4:	1f1a      	subs	r2, r3, #4
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
     8f6:	f810 c022 	ldrb.w	ip, [r0, r2, lsl #2]
     8fa:	f89d 4004 	ldrb.w	r4, [sp, #4]
     8fe:	ea8c 0c04 	eor.w	ip, ip, r4
     902:	f800 c023 	strb.w	ip, [r0, r3, lsl #2]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
     906:	eb00 0282 	add.w	r2, r0, r2, lsl #2
     90a:	f892 c001 	ldrb.w	ip, [r2, #1]
     90e:	f89d e005 	ldrb.w	lr, [sp, #5]
     912:	1c4c      	adds	r4, r1, #1
     914:	ea8c 0c0e 	eor.w	ip, ip, lr
     918:	f800 c004 	strb.w	ip, [r0, r4]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
     91c:	f892 c002 	ldrb.w	ip, [r2, #2]
     920:	f89d e006 	ldrb.w	lr, [sp, #6]
     924:	1c8c      	adds	r4, r1, #2
     926:	ea8c 0c0e 	eor.w	ip, ip, lr
     92a:	f800 c004 	strb.w	ip, [r0, r4]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
     92e:	78d2      	ldrb	r2, [r2, #3]
     930:	f89d 4007 	ldrb.w	r4, [sp, #7]
     934:	3103      	adds	r1, #3
     936:	4062      	eors	r2, r4
     938:	5442      	strb	r2, [r0, r1]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     93a:	3301      	adds	r3, #1
     93c:	2b2b      	cmp	r3, #43	; 0x2b
     93e:	d833      	bhi.n	9a8 <KeyExpansion+0xec>
      k = (i - 1) * 4;
     940:	1e5a      	subs	r2, r3, #1
      tempa[0]=RoundKey[k + 0];
     942:	f810 1022 	ldrb.w	r1, [r0, r2, lsl #2]
     946:	f88d 1004 	strb.w	r1, [sp, #4]
      tempa[1]=RoundKey[k + 1];
     94a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
     94e:	7854      	ldrb	r4, [r2, #1]
     950:	f88d 4005 	strb.w	r4, [sp, #5]
      tempa[2]=RoundKey[k + 2];
     954:	f892 e002 	ldrb.w	lr, [r2, #2]
     958:	f88d e006 	strb.w	lr, [sp, #6]
      tempa[3]=RoundKey[k + 3];
     95c:	f892 c003 	ldrb.w	ip, [r2, #3]
     960:	f88d c007 	strb.w	ip, [sp, #7]
    if (i % Nk == 0)
     964:	f013 0f03 	tst.w	r3, #3
     968:	d1c3      	bne.n	8f2 <KeyExpansion+0x36>
        tempa[0] = tempa[1];
     96a:	f88d 4004 	strb.w	r4, [sp, #4]
        tempa[1] = tempa[2];
     96e:	f88d e005 	strb.w	lr, [sp, #5]
        tempa[2] = tempa[3];
     972:	f88d c006 	strb.w	ip, [sp, #6]
        tempa[3] = u8tmp;
     976:	f88d 1007 	strb.w	r1, [sp, #7]
        tempa[0] = getSBoxValue(tempa[0]);
     97a:	4a0c      	ldr	r2, [pc, #48]	; (9ac <KeyExpansion+0xf0>)
     97c:	5d14      	ldrb	r4, [r2, r4]
     97e:	f88d 4004 	strb.w	r4, [sp, #4]
        tempa[1] = getSBoxValue(tempa[1]);
     982:	f812 e00e 	ldrb.w	lr, [r2, lr]
     986:	f88d e005 	strb.w	lr, [sp, #5]
        tempa[2] = getSBoxValue(tempa[2]);
     98a:	f812 c00c 	ldrb.w	ip, [r2, ip]
     98e:	f88d c006 	strb.w	ip, [sp, #6]
        tempa[3] = getSBoxValue(tempa[3]);
     992:	5c51      	ldrb	r1, [r2, r1]
     994:	f88d 1007 	strb.w	r1, [sp, #7]
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
     998:	eb02 0293 	add.w	r2, r2, r3, lsr #2
     99c:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
     9a0:	4054      	eors	r4, r2
     9a2:	f88d 4004 	strb.w	r4, [sp, #4]
     9a6:	e7a4      	b.n	8f2 <KeyExpansion+0x36>
  }
}
     9a8:	b002      	add	sp, #8
     9aa:	bd10      	pop	{r4, pc}
     9ac:	000018e0 	andeq	r1, r0, r0, ror #17

000009b0 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
     9b0:	b530      	push	{r4, r5, lr}
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
     9b2:	f04f 0e00 	mov.w	lr, #0
     9b6:	e014      	b.n	9e2 <AddRoundKey+0x32>
  {
    for (j = 0; j < 4; ++j)
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
     9b8:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
     9bc:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
     9c0:	f812 c00c 	ldrb.w	ip, [r2, ip]
     9c4:	eb01 048e 	add.w	r4, r1, lr, lsl #2
     9c8:	5ce5      	ldrb	r5, [r4, r3]
     9ca:	ea8c 0c05 	eor.w	ip, ip, r5
     9ce:	f804 c003 	strb.w	ip, [r4, r3]
    for (j = 0; j < 4; ++j)
     9d2:	3301      	adds	r3, #1
     9d4:	b2db      	uxtb	r3, r3
     9d6:	2b03      	cmp	r3, #3
     9d8:	d9ee      	bls.n	9b8 <AddRoundKey+0x8>
  for (i = 0; i < 4; ++i)
     9da:	f10e 0e01 	add.w	lr, lr, #1
     9de:	fa5f fe8e 	uxtb.w	lr, lr
     9e2:	f1be 0f03 	cmp.w	lr, #3
     9e6:	d801      	bhi.n	9ec <AddRoundKey+0x3c>
    for (j = 0; j < 4; ++j)
     9e8:	2300      	movs	r3, #0
     9ea:	e7f4      	b.n	9d6 <AddRoundKey+0x26>
    }
  }
}
     9ec:	bd30      	pop	{r4, r5, pc}

000009ee <SubBytes>:
// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
     9ee:	2200      	movs	r2, #0
     9f0:	2a03      	cmp	r2, #3
     9f2:	d81b      	bhi.n	a2c <SubBytes+0x3e>
  {
    for (j = 0; j < 4; ++j)
     9f4:	2300      	movs	r3, #0
     9f6:	2b03      	cmp	r3, #3
     9f8:	d815      	bhi.n	a26 <SubBytes+0x38>
{
     9fa:	b410      	push	{r4}
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
     9fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
     a00:	f811 c002 	ldrb.w	ip, [r1, r2]
     a04:	4c0a      	ldr	r4, [pc, #40]	; (a30 <SubBytes+0x42>)
     a06:	f814 c00c 	ldrb.w	ip, [r4, ip]
     a0a:	f801 c002 	strb.w	ip, [r1, r2]
    for (j = 0; j < 4; ++j)
     a0e:	3301      	adds	r3, #1
     a10:	b2db      	uxtb	r3, r3
     a12:	2b03      	cmp	r3, #3
     a14:	d9f2      	bls.n	9fc <SubBytes+0xe>
  for (i = 0; i < 4; ++i)
     a16:	3201      	adds	r2, #1
     a18:	b2d2      	uxtb	r2, r2
     a1a:	2a03      	cmp	r2, #3
     a1c:	d801      	bhi.n	a22 <SubBytes+0x34>
    for (j = 0; j < 4; ++j)
     a1e:	2300      	movs	r3, #0
     a20:	e7f7      	b.n	a12 <SubBytes+0x24>
    }
  }
}
     a22:	bc10      	pop	{r4}
     a24:	4770      	bx	lr
  for (i = 0; i < 4; ++i)
     a26:	3201      	adds	r2, #1
     a28:	b2d2      	uxtb	r2, r2
     a2a:	e7e1      	b.n	9f0 <SubBytes+0x2>
     a2c:	4770      	bx	lr
     a2e:	bf00      	nop
     a30:	000018e0 	andeq	r1, r0, r0, ror #17

00000a34 <ShiftRows>:
static void ShiftRows(state_t* state)
{
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
     a34:	7843      	ldrb	r3, [r0, #1]
  (*state)[0][1] = (*state)[1][1];
     a36:	7942      	ldrb	r2, [r0, #5]
     a38:	7042      	strb	r2, [r0, #1]
  (*state)[1][1] = (*state)[2][1];
     a3a:	7a42      	ldrb	r2, [r0, #9]
     a3c:	7142      	strb	r2, [r0, #5]
  (*state)[2][1] = (*state)[3][1];
     a3e:	7b42      	ldrb	r2, [r0, #13]
     a40:	7242      	strb	r2, [r0, #9]
  (*state)[3][1] = temp;
     a42:	7343      	strb	r3, [r0, #13]

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
     a44:	7883      	ldrb	r3, [r0, #2]
  (*state)[0][2] = (*state)[2][2];
     a46:	7a82      	ldrb	r2, [r0, #10]
     a48:	7082      	strb	r2, [r0, #2]
  (*state)[2][2] = temp;
     a4a:	7283      	strb	r3, [r0, #10]

  temp           = (*state)[1][2];
     a4c:	7983      	ldrb	r3, [r0, #6]
  (*state)[1][2] = (*state)[3][2];
     a4e:	7b82      	ldrb	r2, [r0, #14]
     a50:	7182      	strb	r2, [r0, #6]
  (*state)[3][2] = temp;
     a52:	7383      	strb	r3, [r0, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
     a54:	78c3      	ldrb	r3, [r0, #3]
  (*state)[0][3] = (*state)[3][3];
     a56:	7bc2      	ldrb	r2, [r0, #15]
     a58:	70c2      	strb	r2, [r0, #3]
  (*state)[3][3] = (*state)[2][3];
     a5a:	7ac2      	ldrb	r2, [r0, #11]
     a5c:	73c2      	strb	r2, [r0, #15]
  (*state)[2][3] = (*state)[1][3];
     a5e:	79c2      	ldrb	r2, [r0, #7]
     a60:	72c2      	strb	r2, [r0, #11]
  (*state)[1][3] = temp;
     a62:	71c3      	strb	r3, [r0, #7]
}
     a64:	4770      	bx	lr

00000a66 <xtime>:

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
     a66:	09c3      	lsrs	r3, r0, #7
     a68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     a6c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     a70:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
     a74:	b2c0      	uxtb	r0, r0
     a76:	4770      	bx	lr

00000a78 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
     a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a7c:	4681      	mov	r9, r0
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
     a7e:	2500      	movs	r5, #0
     a80:	e02f      	b.n	ae2 <MixColumns+0x6a>
  {  
    t   = (*state)[i][0];
     a82:	f819 a025 	ldrb.w	sl, [r9, r5, lsl #2]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
     a86:	eb09 0685 	add.w	r6, r9, r5, lsl #2
     a8a:	f896 b001 	ldrb.w	fp, [r6, #1]
     a8e:	ea8b 000a 	eor.w	r0, fp, sl
     a92:	f896 8002 	ldrb.w	r8, [r6, #2]
     a96:	78f7      	ldrb	r7, [r6, #3]
     a98:	ea80 0408 	eor.w	r4, r0, r8
     a9c:	407c      	eors	r4, r7
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
     a9e:	f7ff ffe2 	bl	a66 <xtime>
     aa2:	4060      	eors	r0, r4
     aa4:	ea8a 0000 	eor.w	r0, sl, r0
     aa8:	f809 0025 	strb.w	r0, [r9, r5, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
     aac:	ea8b 0008 	eor.w	r0, fp, r8
     ab0:	f7ff ffd9 	bl	a66 <xtime>
     ab4:	4060      	eors	r0, r4
     ab6:	ea8b 0b00 	eor.w	fp, fp, r0
     aba:	f886 b001 	strb.w	fp, [r6, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
     abe:	ea88 0007 	eor.w	r0, r8, r7
     ac2:	f7ff ffd0 	bl	a66 <xtime>
     ac6:	4060      	eors	r0, r4
     ac8:	ea88 0800 	eor.w	r8, r8, r0
     acc:	f886 8002 	strb.w	r8, [r6, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
     ad0:	ea87 000a 	eor.w	r0, r7, sl
     ad4:	f7ff ffc7 	bl	a66 <xtime>
     ad8:	4044      	eors	r4, r0
     ada:	407c      	eors	r4, r7
     adc:	70f4      	strb	r4, [r6, #3]
  for (i = 0; i < 4; ++i)
     ade:	3501      	adds	r5, #1
     ae0:	b2ed      	uxtb	r5, r5
     ae2:	2d03      	cmp	r5, #3
     ae4:	d9cd      	bls.n	a82 <MixColumns+0xa>
  }
}
     ae6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000aea <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
     aea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     aee:	b08b      	sub	sp, #44	; 0x2c
     af0:	9000      	str	r0, [sp, #0]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
     af2:	f04f 0900 	mov.w	r9, #0
     af6:	e0a4      	b.n	c42 <InvMixColumns+0x158>
  { 
    a = (*state)[i][0];
     af8:	9b00      	ldr	r3, [sp, #0]
     afa:	f813 b029 	ldrb.w	fp, [r3, r9, lsl #2]
    b = (*state)[i][1];
     afe:	eb03 0789 	add.w	r7, r3, r9, lsl #2
     b02:	f897 a001 	ldrb.w	sl, [r7, #1]
    c = (*state)[i][2];
     b06:	f897 8002 	ldrb.w	r8, [r7, #2]
    d = (*state)[i][3];
     b0a:	78fc      	ldrb	r4, [r7, #3]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
     b0c:	4658      	mov	r0, fp
     b0e:	f7ff ffaa 	bl	a66 <xtime>
     b12:	9006      	str	r0, [sp, #24]
     b14:	f7ff ffa7 	bl	a66 <xtime>
     b18:	9001      	str	r0, [sp, #4]
     b1a:	f7ff ffa4 	bl	a66 <xtime>
     b1e:	9007      	str	r0, [sp, #28]
     b20:	4650      	mov	r0, sl
     b22:	f7ff ffa0 	bl	a66 <xtime>
     b26:	9002      	str	r0, [sp, #8]
     b28:	f7ff ff9d 	bl	a66 <xtime>
     b2c:	9003      	str	r0, [sp, #12]
     b2e:	f7ff ff9a 	bl	a66 <xtime>
     b32:	4606      	mov	r6, r0
     b34:	4640      	mov	r0, r8
     b36:	f7ff ff96 	bl	a66 <xtime>
     b3a:	9008      	str	r0, [sp, #32]
     b3c:	f7ff ff93 	bl	a66 <xtime>
     b40:	9004      	str	r0, [sp, #16]
     b42:	f7ff ff90 	bl	a66 <xtime>
     b46:	4605      	mov	r5, r0
     b48:	4620      	mov	r0, r4
     b4a:	f7ff ff8c 	bl	a66 <xtime>
     b4e:	9009      	str	r0, [sp, #36]	; 0x24
     b50:	f7ff ff89 	bl	a66 <xtime>
     b54:	9005      	str	r0, [sp, #20]
     b56:	f7ff ff86 	bl	a66 <xtime>
     b5a:	f8dd e018 	ldr.w	lr, [sp, #24]
     b5e:	9a01      	ldr	r2, [sp, #4]
     b60:	ea8e 0302 	eor.w	r3, lr, r2
     b64:	b2db      	uxtb	r3, r3
     b66:	9907      	ldr	r1, [sp, #28]
     b68:	404b      	eors	r3, r1
     b6a:	b2db      	uxtb	r3, r3
     b6c:	f8dd c008 	ldr.w	ip, [sp, #8]
     b70:	ea8c 020a 	eor.w	r2, ip, sl
     b74:	b2d2      	uxtb	r2, r2
     b76:	4072      	eors	r2, r6
     b78:	b2d2      	uxtb	r2, r2
     b7a:	4053      	eors	r3, r2
     b7c:	9a04      	ldr	r2, [sp, #16]
     b7e:	ea82 0208 	eor.w	r2, r2, r8
     b82:	b2d2      	uxtb	r2, r2
     b84:	406a      	eors	r2, r5
     b86:	b2d2      	uxtb	r2, r2
     b88:	4053      	eors	r3, r2
     b8a:	ea80 0204 	eor.w	r2, r0, r4
     b8e:	b2d2      	uxtb	r2, r2
     b90:	4053      	eors	r3, r2
     b92:	f8dd c000 	ldr.w	ip, [sp]
     b96:	f80c 3029 	strb.w	r3, [ip, r9, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
     b9a:	ea81 030b 	eor.w	r3, r1, fp
     b9e:	b2da      	uxtb	r2, r3
     ba0:	f8dd c008 	ldr.w	ip, [sp, #8]
     ba4:	9b03      	ldr	r3, [sp, #12]
     ba6:	ea8c 0303 	eor.w	r3, ip, r3
     baa:	b2db      	uxtb	r3, r3
     bac:	4073      	eors	r3, r6
     bae:	b2db      	uxtb	r3, r3
     bb0:	4053      	eors	r3, r2
     bb2:	f8dd c020 	ldr.w	ip, [sp, #32]
     bb6:	ea8c 0208 	eor.w	r2, ip, r8
     bba:	b2d2      	uxtb	r2, r2
     bbc:	406a      	eors	r2, r5
     bbe:	b2d2      	uxtb	r2, r2
     bc0:	4053      	eors	r3, r2
     bc2:	9a05      	ldr	r2, [sp, #20]
     bc4:	4062      	eors	r2, r4
     bc6:	b2d2      	uxtb	r2, r2
     bc8:	4042      	eors	r2, r0
     bca:	b2d2      	uxtb	r2, r2
     bcc:	4053      	eors	r3, r2
     bce:	707b      	strb	r3, [r7, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
     bd0:	9b01      	ldr	r3, [sp, #4]
     bd2:	ea83 030b 	eor.w	r3, r3, fp
     bd6:	b2db      	uxtb	r3, r3
     bd8:	404b      	eors	r3, r1
     bda:	b2db      	uxtb	r3, r3
     bdc:	ea86 020a 	eor.w	r2, r6, sl
     be0:	b2d2      	uxtb	r2, r2
     be2:	4053      	eors	r3, r2
     be4:	4662      	mov	r2, ip
     be6:	f8dd c010 	ldr.w	ip, [sp, #16]
     bea:	ea82 020c 	eor.w	r2, r2, ip
     bee:	b2d2      	uxtb	r2, r2
     bf0:	406a      	eors	r2, r5
     bf2:	b2d2      	uxtb	r2, r2
     bf4:	4053      	eors	r3, r2
     bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
     bf8:	4054      	eors	r4, r2
     bfa:	b2e4      	uxtb	r4, r4
     bfc:	4044      	eors	r4, r0
     bfe:	b2e4      	uxtb	r4, r4
     c00:	4063      	eors	r3, r4
     c02:	70bb      	strb	r3, [r7, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
     c04:	ea8e 0b0b 	eor.w	fp, lr, fp
     c08:	fa5f fb8b 	uxtb.w	fp, fp
     c0c:	ea81 0b0b 	eor.w	fp, r1, fp
     c10:	fa5f fb8b 	uxtb.w	fp, fp
     c14:	9b03      	ldr	r3, [sp, #12]
     c16:	ea83 0a0a 	eor.w	sl, r3, sl
     c1a:	fa5f fa8a 	uxtb.w	sl, sl
     c1e:	ea86 060a 	eor.w	r6, r6, sl
     c22:	b2f6      	uxtb	r6, r6
     c24:	ea8b 0606 	eor.w	r6, fp, r6
     c28:	ea85 0508 	eor.w	r5, r5, r8
     c2c:	b2ed      	uxtb	r5, r5
     c2e:	4075      	eors	r5, r6
     c30:	9b05      	ldr	r3, [sp, #20]
     c32:	4053      	eors	r3, r2
     c34:	b2db      	uxtb	r3, r3
     c36:	4058      	eors	r0, r3
     c38:	b2c0      	uxtb	r0, r0
     c3a:	4068      	eors	r0, r5
     c3c:	70f8      	strb	r0, [r7, #3]
  for (i = 0; i < 4; ++i)
     c3e:	f109 0901 	add.w	r9, r9, #1
     c42:	f1b9 0f03 	cmp.w	r9, #3
     c46:	f77f af57 	ble.w	af8 <InvMixColumns+0xe>
  }
}
     c4a:	b00b      	add	sp, #44	; 0x2c
     c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c50 <InvSubBytes>:
// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
     c50:	2100      	movs	r1, #0
     c52:	2903      	cmp	r1, #3
     c54:	d81c      	bhi.n	c90 <InvSubBytes+0x40>
  {
    for (j = 0; j < 4; ++j)
     c56:	2300      	movs	r3, #0
     c58:	2b03      	cmp	r3, #3
     c5a:	d816      	bhi.n	c8a <InvSubBytes+0x3a>
{
     c5c:	b500      	push	{lr}
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
     c5e:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
     c62:	f81c e001 	ldrb.w	lr, [ip, r1]
     c66:	4a0b      	ldr	r2, [pc, #44]	; (c94 <InvSubBytes+0x44>)
     c68:	4472      	add	r2, lr
     c6a:	f892 210c 	ldrb.w	r2, [r2, #268]	; 0x10c
     c6e:	f80c 2001 	strb.w	r2, [ip, r1]
    for (j = 0; j < 4; ++j)
     c72:	3301      	adds	r3, #1
     c74:	b2db      	uxtb	r3, r3
     c76:	2b03      	cmp	r3, #3
     c78:	d9f1      	bls.n	c5e <InvSubBytes+0xe>
  for (i = 0; i < 4; ++i)
     c7a:	3101      	adds	r1, #1
     c7c:	b2c9      	uxtb	r1, r1
     c7e:	2903      	cmp	r1, #3
     c80:	d801      	bhi.n	c86 <InvSubBytes+0x36>
    for (j = 0; j < 4; ++j)
     c82:	2300      	movs	r3, #0
     c84:	e7f7      	b.n	c76 <InvSubBytes+0x26>
    }
  }
}
     c86:	f85d fb04 	ldr.w	pc, [sp], #4
  for (i = 0; i < 4; ++i)
     c8a:	3101      	adds	r1, #1
     c8c:	b2c9      	uxtb	r1, r1
     c8e:	e7e0      	b.n	c52 <InvSubBytes+0x2>
     c90:	4770      	bx	lr
     c92:	bf00      	nop
     c94:	000018e0 	andeq	r1, r0, r0, ror #17

00000c98 <InvShiftRows>:
static void InvShiftRows(state_t* state)
{
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
     c98:	7b43      	ldrb	r3, [r0, #13]
  (*state)[3][1] = (*state)[2][1];
     c9a:	7a42      	ldrb	r2, [r0, #9]
     c9c:	7342      	strb	r2, [r0, #13]
  (*state)[2][1] = (*state)[1][1];
     c9e:	7942      	ldrb	r2, [r0, #5]
     ca0:	7242      	strb	r2, [r0, #9]
  (*state)[1][1] = (*state)[0][1];
     ca2:	7842      	ldrb	r2, [r0, #1]
     ca4:	7142      	strb	r2, [r0, #5]
  (*state)[0][1] = temp;
     ca6:	7043      	strb	r3, [r0, #1]

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
     ca8:	7883      	ldrb	r3, [r0, #2]
  (*state)[0][2] = (*state)[2][2];
     caa:	7a82      	ldrb	r2, [r0, #10]
     cac:	7082      	strb	r2, [r0, #2]
  (*state)[2][2] = temp;
     cae:	7283      	strb	r3, [r0, #10]

  temp = (*state)[1][2];
     cb0:	7983      	ldrb	r3, [r0, #6]
  (*state)[1][2] = (*state)[3][2];
     cb2:	7b82      	ldrb	r2, [r0, #14]
     cb4:	7182      	strb	r2, [r0, #6]
  (*state)[3][2] = temp;
     cb6:	7383      	strb	r3, [r0, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
     cb8:	78c3      	ldrb	r3, [r0, #3]
  (*state)[0][3] = (*state)[1][3];
     cba:	79c2      	ldrb	r2, [r0, #7]
     cbc:	70c2      	strb	r2, [r0, #3]
  (*state)[1][3] = (*state)[2][3];
     cbe:	7ac2      	ldrb	r2, [r0, #11]
     cc0:	71c2      	strb	r2, [r0, #7]
  (*state)[2][3] = (*state)[3][3];
     cc2:	7bc2      	ldrb	r2, [r0, #15]
     cc4:	72c2      	strb	r2, [r0, #11]
  (*state)[3][3] = temp;
     cc6:	73c3      	strb	r3, [r0, #15]
}
     cc8:	4770      	bx	lr

00000cca <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
     cca:	b570      	push	{r4, r5, r6, lr}
     ccc:	4605      	mov	r5, r0
     cce:	460e      	mov	r6, r1
  uint8_t round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
     cd0:	460a      	mov	r2, r1
     cd2:	4601      	mov	r1, r0
     cd4:	2000      	movs	r0, #0
     cd6:	f7ff fe6b 	bl	9b0 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
     cda:	2401      	movs	r4, #1
     cdc:	e009      	b.n	cf2 <Cipher+0x28>
    SubBytes(state);
    ShiftRows(state);
    if (round == Nr) {
      break;
    }
    MixColumns(state);
     cde:	4628      	mov	r0, r5
     ce0:	f7ff feca 	bl	a78 <MixColumns>
    AddRoundKey(round, state, RoundKey);
     ce4:	4632      	mov	r2, r6
     ce6:	4629      	mov	r1, r5
     ce8:	4620      	mov	r0, r4
     cea:	f7ff fe61 	bl	9b0 <AddRoundKey>
  for (round = 1; ; ++round)
     cee:	3401      	adds	r4, #1
     cf0:	b2e4      	uxtb	r4, r4
    SubBytes(state);
     cf2:	4628      	mov	r0, r5
     cf4:	f7ff fe7b 	bl	9ee <SubBytes>
    ShiftRows(state);
     cf8:	4628      	mov	r0, r5
     cfa:	f7ff fe9b 	bl	a34 <ShiftRows>
    if (round == Nr) {
     cfe:	2c0a      	cmp	r4, #10
     d00:	d1ed      	bne.n	cde <Cipher+0x14>
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
     d02:	4632      	mov	r2, r6
     d04:	4629      	mov	r1, r5
     d06:	200a      	movs	r0, #10
     d08:	f7ff fe52 	bl	9b0 <AddRoundKey>
}
     d0c:	bd70      	pop	{r4, r5, r6, pc}

00000d0e <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
     d0e:	b570      	push	{r4, r5, r6, lr}
     d10:	4605      	mov	r5, r0
     d12:	460e      	mov	r6, r1
  uint8_t round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
     d14:	460a      	mov	r2, r1
     d16:	4601      	mov	r1, r0
     d18:	200a      	movs	r0, #10
     d1a:	f7ff fe49 	bl	9b0 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
     d1e:	2409      	movs	r4, #9
     d20:	e004      	b.n	d2c <InvCipher+0x1e>
    InvSubBytes(state);
    AddRoundKey(round, state, RoundKey);
    if (round == 0) {
      break;
    }
    InvMixColumns(state);
     d22:	4628      	mov	r0, r5
     d24:	f7ff fee1 	bl	aea <InvMixColumns>
  for (round = (Nr - 1); ; --round)
     d28:	3c01      	subs	r4, #1
     d2a:	b2e4      	uxtb	r4, r4
    InvShiftRows(state);
     d2c:	4628      	mov	r0, r5
     d2e:	f7ff ffb3 	bl	c98 <InvShiftRows>
    InvSubBytes(state);
     d32:	4628      	mov	r0, r5
     d34:	f7ff ff8c 	bl	c50 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
     d38:	4632      	mov	r2, r6
     d3a:	4629      	mov	r1, r5
     d3c:	4620      	mov	r0, r4
     d3e:	f7ff fe37 	bl	9b0 <AddRoundKey>
    if (round == 0) {
     d42:	2c00      	cmp	r4, #0
     d44:	d1ed      	bne.n	d22 <InvCipher+0x14>
  }

}
     d46:	bd70      	pop	{r4, r5, r6, pc}

00000d48 <XorWithIv>:


static void XorWithIv(uint8_t* buf, const uint8_t* Iv)
{
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
     d48:	2300      	movs	r3, #0
     d4a:	e007      	b.n	d5c <XorWithIv+0x14>
  {
    buf[i] ^= Iv[i];
     d4c:	5cca      	ldrb	r2, [r1, r3]
     d4e:	f810 c003 	ldrb.w	ip, [r0, r3]
     d52:	ea82 020c 	eor.w	r2, r2, ip
     d56:	54c2      	strb	r2, [r0, r3]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
     d58:	3301      	adds	r3, #1
     d5a:	b2db      	uxtb	r3, r3
     d5c:	2b0f      	cmp	r3, #15
     d5e:	d9f5      	bls.n	d4c <XorWithIv+0x4>
  }
}
     d60:	4770      	bx	lr

00000d62 <AES_init_ctx>:
{
     d62:	b508      	push	{r3, lr}
  KeyExpansion(ctx->RoundKey, key);
     d64:	f7ff fdaa 	bl	8bc <KeyExpansion>
}
     d68:	bd08      	pop	{r3, pc}

00000d6a <AES_init_ctx_iv>:
{
     d6a:	b538      	push	{r3, r4, r5, lr}
     d6c:	4604      	mov	r4, r0
     d6e:	4615      	mov	r5, r2
  KeyExpansion(ctx->RoundKey, key);
     d70:	f7ff fda4 	bl	8bc <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     d74:	2210      	movs	r2, #16
     d76:	4629      	mov	r1, r5
     d78:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
     d7c:	f000 f989 	bl	1092 <memcpy>
}
     d80:	bd38      	pop	{r3, r4, r5, pc}

00000d82 <AES_ctx_set_iv>:
{
     d82:	b508      	push	{r3, lr}
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     d84:	2210      	movs	r2, #16
     d86:	30b0      	adds	r0, #176	; 0xb0
     d88:	f000 f983 	bl	1092 <memcpy>
}
     d8c:	bd08      	pop	{r3, pc}

00000d8e <AES_ECB_encrypt>:
{
     d8e:	b508      	push	{r3, lr}
     d90:	460b      	mov	r3, r1
  Cipher((state_t*)buf, ctx->RoundKey);
     d92:	4601      	mov	r1, r0
     d94:	4618      	mov	r0, r3
     d96:	f7ff ff98 	bl	cca <Cipher>
}
     d9a:	bd08      	pop	{r3, pc}

00000d9c <AES_ECB_decrypt>:
{
     d9c:	b508      	push	{r3, lr}
     d9e:	460b      	mov	r3, r1
  InvCipher((state_t*)buf, ctx->RoundKey);
     da0:	4601      	mov	r1, r0
     da2:	4618      	mov	r0, r3
     da4:	f7ff ffb3 	bl	d0e <InvCipher>
}
     da8:	bd08      	pop	{r3, pc}

00000daa <AES_CBC_encrypt_buffer>:

void AES_CBC_encrypt_buffer(struct AES_ctx *ctx, uint8_t* buf, size_t length)
{
     daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     dae:	4606      	mov	r6, r0
     db0:	460c      	mov	r4, r1
     db2:	4617      	mov	r7, r2
  size_t i;
  uint8_t *Iv = ctx->Iv;
     db4:	f100 08b0 	add.w	r8, r0, #176	; 0xb0
     db8:	4641      	mov	r1, r8
  for (i = 0; i < length; i += AES_BLOCKLEN)
     dba:	2500      	movs	r5, #0
     dbc:	e009      	b.n	dd2 <AES_CBC_encrypt_buffer+0x28>
  {
    XorWithIv(buf, Iv);
     dbe:	4620      	mov	r0, r4
     dc0:	f7ff ffc2 	bl	d48 <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
     dc4:	4631      	mov	r1, r6
     dc6:	4620      	mov	r0, r4
     dc8:	f7ff ff7f 	bl	cca <Cipher>
  for (i = 0; i < length; i += AES_BLOCKLEN)
     dcc:	3510      	adds	r5, #16
    Iv = buf;
     dce:	4621      	mov	r1, r4
    buf += AES_BLOCKLEN;
     dd0:	3410      	adds	r4, #16
  for (i = 0; i < length; i += AES_BLOCKLEN)
     dd2:	42bd      	cmp	r5, r7
     dd4:	d3f3      	bcc.n	dbe <AES_CBC_encrypt_buffer+0x14>
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
     dd6:	2210      	movs	r2, #16
     dd8:	4640      	mov	r0, r8
     dda:	f000 f95a 	bl	1092 <memcpy>
}
     dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000de2 <AES_CBC_decrypt_buffer>:

void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
     de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     de6:	b084      	sub	sp, #16
     de8:	4607      	mov	r7, r0
     dea:	460c      	mov	r4, r1
     dec:	4690      	mov	r8, r2
  size_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
     dee:	2500      	movs	r5, #0
     df0:	e015      	b.n	e1e <AES_CBC_decrypt_buffer+0x3c>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
     df2:	2210      	movs	r2, #16
     df4:	4621      	mov	r1, r4
     df6:	4668      	mov	r0, sp
     df8:	f000 f94b 	bl	1092 <memcpy>
    InvCipher((state_t*)buf, ctx->RoundKey);
     dfc:	4639      	mov	r1, r7
     dfe:	4620      	mov	r0, r4
     e00:	f7ff ff85 	bl	d0e <InvCipher>
    XorWithIv(buf, ctx->Iv);
     e04:	f107 06b0 	add.w	r6, r7, #176	; 0xb0
     e08:	4631      	mov	r1, r6
     e0a:	4620      	mov	r0, r4
     e0c:	f7ff ff9c 	bl	d48 <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
     e10:	2210      	movs	r2, #16
     e12:	4669      	mov	r1, sp
     e14:	4630      	mov	r0, r6
     e16:	f000 f93c 	bl	1092 <memcpy>
    buf += AES_BLOCKLEN;
     e1a:	3410      	adds	r4, #16
  for (i = 0; i < length; i += AES_BLOCKLEN)
     e1c:	3510      	adds	r5, #16
     e1e:	4545      	cmp	r5, r8
     e20:	d3e7      	bcc.n	df2 <AES_CBC_decrypt_buffer+0x10>
  }

}
     e22:	b004      	add	sp, #16
     e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000e28 <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
     e28:	b5f0      	push	{r4, r5, r6, r7, lr}
     e2a:	b085      	sub	sp, #20
     e2c:	4607      	mov	r7, r0
     e2e:	460d      	mov	r5, r1
     e30:	4616      	mov	r6, r2
  uint8_t buffer[AES_BLOCKLEN];
  
  size_t i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     e32:	2310      	movs	r3, #16
     e34:	2400      	movs	r4, #0
     e36:	e013      	b.n	e60 <AES_CTR_xcrypt_buffer+0x38>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
	{
          ctx->Iv[bi] = 0;
     e38:	18fa      	adds	r2, r7, r3
     e3a:	2100      	movs	r1, #0
     e3c:	f882 10b0 	strb.w	r1, [r2, #176]	; 0xb0
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     e40:	3b01      	subs	r3, #1
     e42:	e01c      	b.n	e7e <AES_CTR_xcrypt_buffer+0x56>
          continue;
        } 
        ctx->Iv[bi] += 1;
        break;   
      }
      bi = 0;
     e44:	2300      	movs	r3, #0
    }

    buf[i] = (buf[i] ^ buffer[bi]);
     e46:	f815 c004 	ldrb.w	ip, [r5, r4]
     e4a:	f103 0210 	add.w	r2, r3, #16
     e4e:	446a      	add	r2, sp
     e50:	f812 ec10 	ldrb.w	lr, [r2, #-16]
     e54:	ea8c 0c0e 	eor.w	ip, ip, lr
     e58:	f805 c004 	strb.w	ip, [r5, r4]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     e5c:	3401      	adds	r4, #1
     e5e:	3301      	adds	r3, #1
     e60:	42b4      	cmp	r4, r6
     e62:	d219      	bcs.n	e98 <AES_CTR_xcrypt_buffer+0x70>
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
     e64:	2b10      	cmp	r3, #16
     e66:	d1ee      	bne.n	e46 <AES_CTR_xcrypt_buffer+0x1e>
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
     e68:	2210      	movs	r2, #16
     e6a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
     e6e:	4668      	mov	r0, sp
     e70:	f000 f90f 	bl	1092 <memcpy>
      Cipher((state_t*)buffer,ctx->RoundKey);
     e74:	4639      	mov	r1, r7
     e76:	4668      	mov	r0, sp
     e78:	f7ff ff27 	bl	cca <Cipher>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     e7c:	230f      	movs	r3, #15
     e7e:	2b00      	cmp	r3, #0
     e80:	dbe0      	blt.n	e44 <AES_CTR_xcrypt_buffer+0x1c>
        if (ctx->Iv[bi] == 255)
     e82:	18fa      	adds	r2, r7, r3
     e84:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
     e88:	2aff      	cmp	r2, #255	; 0xff
     e8a:	d0d5      	beq.n	e38 <AES_CTR_xcrypt_buffer+0x10>
        ctx->Iv[bi] += 1;
     e8c:	443b      	add	r3, r7
     e8e:	3201      	adds	r2, #1
     e90:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
      bi = 0;
     e94:	2300      	movs	r3, #0
        break;   
     e96:	e7d6      	b.n	e46 <AES_CTR_xcrypt_buffer+0x1e>
  }
}
     e98:	b005      	add	sp, #20
     e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000e9c <atoi>:
 * limitations under the License.
 **/

#include "a2i.h"

int atoi(const char* str) {
     e9c:	4601      	mov	r1, r0
  int res = 0;
  for (int i = 0; str[i] != '\0'; ++i) {
     e9e:	2200      	movs	r2, #0
  int res = 0;
     ea0:	4610      	mov	r0, r2
  for (int i = 0; str[i] != '\0'; ++i) {
     ea2:	e005      	b.n	eb0 <atoi+0x14>
    res = res * 10 + str[i] - '0';
     ea4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     ea8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
     eac:	3830      	subs	r0, #48	; 0x30
  for (int i = 0; str[i] != '\0'; ++i) {
     eae:	3201      	adds	r2, #1
     eb0:	5c8b      	ldrb	r3, [r1, r2]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d1f6      	bne.n	ea4 <atoi+0x8>
  }
  return res;
}
     eb6:	4770      	bx	lr

00000eb8 <atoh>:

uint32_t atoh(const char* str) {
     eb8:	4684      	mov	ip, r0
  uint32_t hex = 0;
  uint32_t value = 0;

  for (uint32_t i = 0; str[i] != '\0'; i++) {
     eba:	2100      	movs	r1, #0
  uint32_t hex = 0;
     ebc:	4608      	mov	r0, r1
  for (uint32_t i = 0; str[i] != '\0'; i++) {
     ebe:	e008      	b.n	ed2 <atoh+0x1a>
    if (str[i] >= '0' && str[i] <= '9') {
      value = str[i] - '0';
    } else if (str[i] >= 'a' && str[i] <= 'f') {
     ec0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
     ec4:	b2d2      	uxtb	r2, r2
     ec6:	2a05      	cmp	r2, #5
     ec8:	d80d      	bhi.n	ee6 <atoh+0x2e>
      value = str[i] - 'a' + 10;
     eca:	3b57      	subs	r3, #87	; 0x57
      continue;
    }

    // make space for the new nibble on the right
    hex = hex << 4;
    hex |= value;
     ecc:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
  for (uint32_t i = 0; str[i] != '\0'; i++) {
     ed0:	3101      	adds	r1, #1
     ed2:	f81c 3001 	ldrb.w	r3, [ip, r1]
     ed6:	b16b      	cbz	r3, ef4 <atoh+0x3c>
    if (str[i] >= '0' && str[i] <= '9') {
     ed8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
     edc:	b2d2      	uxtb	r2, r2
     ede:	2a09      	cmp	r2, #9
     ee0:	d8ee      	bhi.n	ec0 <atoh+0x8>
      value = str[i] - '0';
     ee2:	3b30      	subs	r3, #48	; 0x30
     ee4:	e7f2      	b.n	ecc <atoh+0x14>
    } else if (str[i] >= 'A' && str[i] <= 'F') {
     ee6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     eea:	b2d2      	uxtb	r2, r2
     eec:	2a05      	cmp	r2, #5
     eee:	d8ef      	bhi.n	ed0 <atoh+0x18>
      value = str[i] - 'A' + 10;
     ef0:	3b37      	subs	r3, #55	; 0x37
     ef2:	e7eb      	b.n	ecc <atoh+0x14>
  }

  return hex;
}
     ef4:	4770      	bx	lr
	...

00000ef8 <r32>:
/*
 * Memory manipulation utilities can be skipped to reduce
 * final binary size. Skip if SHELL_NO_UTILS is defined.
 */
#ifndef SHELL_NO_UTILS
int r32(int argc, char *argv[]) {
     ef8:	b508      	push	{r3, lr}
  if (argc < 2) {
     efa:	2801      	cmp	r0, #1
     efc:	dd09      	ble.n	f12 <r32+0x1a>
    printf("Usage: %s <address> (in hex)\n", argv[0]);
    return -1;
  }

  uint32_t addr = atoh(argv[1]);
     efe:	6848      	ldr	r0, [r1, #4]
     f00:	f7ff ffda 	bl	eb8 <atoh>
     f04:	4601      	mov	r1, r0
  uint32_t data;

  data = reg32(addr);
     f06:	6802      	ldr	r2, [r0, #0]

  printf("0x%x: 0x%x\n", addr, data);
     f08:	4805      	ldr	r0, [pc, #20]	; (f20 <r32+0x28>)
     f0a:	f7ff fc57 	bl	7bc <printf>
  return 0;
     f0e:	2000      	movs	r0, #0
}
     f10:	bd08      	pop	{r3, pc}
    printf("Usage: %s <address> (in hex)\n", argv[0]);
     f12:	6809      	ldr	r1, [r1, #0]
     f14:	4803      	ldr	r0, [pc, #12]	; (f24 <r32+0x2c>)
     f16:	f7ff fc51 	bl	7bc <printf>
    return -1;
     f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     f1e:	e7f7      	b.n	f10 <r32+0x18>
     f20:	00001b0c 	andeq	r1, r0, ip, lsl #22
     f24:	00001aec 	andeq	r1, r0, ip, ror #21

00000f28 <w32>:

int w32(int argc, char *argv[]) {
     f28:	b538      	push	{r3, r4, r5, lr}
     f2a:	460c      	mov	r4, r1
  if (argc < 3) {
     f2c:	2802      	cmp	r0, #2
     f2e:	dd09      	ble.n	f44 <w32+0x1c>
    printf("Usage: %s <address> (in hex) <value> (in hex)\n", argv[0]);
    return -1;
  }
  uint32_t addr = atoh(argv[1]);
     f30:	6848      	ldr	r0, [r1, #4]
     f32:	f7ff ffc1 	bl	eb8 <atoh>
     f36:	4605      	mov	r5, r0
  uint32_t data = atoh(argv[2]);
     f38:	68a0      	ldr	r0, [r4, #8]
     f3a:	f7ff ffbd 	bl	eb8 <atoh>
  reg32(addr) = data;
     f3e:	6028      	str	r0, [r5, #0]

  return 0;
     f40:	2000      	movs	r0, #0
}
     f42:	bd38      	pop	{r3, r4, r5, pc}
    printf("Usage: %s <address> (in hex) <value> (in hex)\n", argv[0]);
     f44:	6809      	ldr	r1, [r1, #0]
     f46:	4803      	ldr	r0, [pc, #12]	; (f54 <w32+0x2c>)
     f48:	f7ff fc38 	bl	7bc <printf>
    return -1;
     f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     f50:	e7f7      	b.n	f42 <w32+0x1a>
     f52:	bf00      	nop
     f54:	00001b18 	andeq	r1, r0, r8, lsl fp

00000f58 <read_mem>:

int read_mem(int argc, char *argv[]) {
     f58:	b570      	push	{r4, r5, r6, lr}
     f5a:	460d      	mov	r5, r1
  if (argc < 3) {
     f5c:	2802      	cmp	r0, #2
     f5e:	dd09      	ble.n	f74 <read_mem+0x1c>
    printf("Usage: %s <address> (in hex) <num_words> (in decimal)\n", argv[0]);
    return -1;
  }

  uint32_t addr = atoh(argv[1]);
     f60:	6848      	ldr	r0, [r1, #4]
     f62:	f7ff ffa9 	bl	eb8 <atoh>
     f66:	4604      	mov	r4, r0
  uint32_t length = atoi(argv[2]);
     f68:	68a8      	ldr	r0, [r5, #8]
     f6a:	f7ff ff97 	bl	e9c <atoi>
     f6e:	4606      	mov	r6, r0

  for (uint32_t i = 0, data = 0; i < length; i++) {
     f70:	2500      	movs	r5, #0
     f72:	e00d      	b.n	f90 <read_mem+0x38>
    printf("Usage: %s <address> (in hex) <num_words> (in decimal)\n", argv[0]);
     f74:	6809      	ldr	r1, [r1, #0]
     f76:	4808      	ldr	r0, [pc, #32]	; (f98 <read_mem+0x40>)
     f78:	f7ff fc20 	bl	7bc <printf>
    return -1;
     f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     f80:	e009      	b.n	f96 <read_mem+0x3e>
    data = reg32(addr);
     f82:	6822      	ldr	r2, [r4, #0]
    printf("0x%x: 0x%x\n", addr, data);
     f84:	4621      	mov	r1, r4
     f86:	4805      	ldr	r0, [pc, #20]	; (f9c <read_mem+0x44>)
     f88:	f7ff fc18 	bl	7bc <printf>

    addr += 4;
     f8c:	3404      	adds	r4, #4
  for (uint32_t i = 0, data = 0; i < length; i++) {
     f8e:	3501      	adds	r5, #1
     f90:	42b5      	cmp	r5, r6
     f92:	d3f6      	bcc.n	f82 <read_mem+0x2a>
  }

  return 0;
     f94:	2000      	movs	r0, #0
}
     f96:	bd70      	pop	{r4, r5, r6, pc}
     f98:	00001b48 	andeq	r1, r0, r8, asr #22
     f9c:	00001b0c 	andeq	r1, r0, ip, lsl #22

00000fa0 <w32_bit>:

#ifndef SHELL_NO_BIT_UTILS
int w32_bit(int argc, char *argv[])
{
     fa0:	b570      	push	{r4, r5, r6, lr}
     fa2:	460c      	mov	r4, r1
  if (argc < 4) {
     fa4:	2803      	cmp	r0, #3
     fa6:	dd22      	ble.n	fee <w32_bit+0x4e>
    goto usage;
  }

  uint32_t addr = atoh(argv[1]);
     fa8:	6848      	ldr	r0, [r1, #4]
     faa:	f7ff ff85 	bl	eb8 <atoh>
     fae:	4606      	mov	r6, r0
  uint32_t bit_loc = atoi(argv[2]);
     fb0:	68a0      	ldr	r0, [r4, #8]
     fb2:	f7ff ff73 	bl	e9c <atoi>
     fb6:	4605      	mov	r5, r0
  uint32_t bit_val = atoi(argv[3]);
     fb8:	68e0      	ldr	r0, [r4, #12]
     fba:	f7ff ff6f 	bl	e9c <atoi>
     fbe:	4603      	mov	r3, r0

  if (bit_loc > 31) {
     fc0:	2d1f      	cmp	r5, #31
     fc2:	d80d      	bhi.n	fe0 <w32_bit+0x40>
    printf("Error: Invalid bit location argument\n");
    goto usage;
  }

  if (bit_val != 0 && bit_val != 1) {
     fc4:	2801      	cmp	r0, #1
     fc6:	d80f      	bhi.n	fe8 <w32_bit+0x48>
    printf("Error: Invalid bit value argument\n");
    goto usage;
  }

  uint32_t data = reg32(addr);
     fc8:	6832      	ldr	r2, [r6, #0]
  data = data | (bit_val << bit_loc);
     fca:	40a8      	lsls	r0, r5
     fcc:	4310      	orrs	r0, r2
  data = data & ~(!bit_val << bit_loc);
     fce:	fab3 f383 	clz	r3, r3
     fd2:	095b      	lsrs	r3, r3, #5
     fd4:	40ab      	lsls	r3, r5
     fd6:	ea20 0303 	bic.w	r3, r0, r3
  reg32(addr) = data;
     fda:	6033      	str	r3, [r6, #0]

  return 0;
     fdc:	2000      	movs	r0, #0
usage:
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)> <bit_value(0 or 1)>\n", argv[0]);
  return -1;
}
     fde:	bd70      	pop	{r4, r5, r6, pc}
    printf("Error: Invalid bit location argument\n");
     fe0:	4806      	ldr	r0, [pc, #24]	; (ffc <w32_bit+0x5c>)
     fe2:	f7ff fbeb 	bl	7bc <printf>
    goto usage;
     fe6:	e002      	b.n	fee <w32_bit+0x4e>
    printf("Error: Invalid bit value argument\n");
     fe8:	4805      	ldr	r0, [pc, #20]	; (1000 <w32_bit+0x60>)
     fea:	f7ff fbe7 	bl	7bc <printf>
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)> <bit_value(0 or 1)>\n", argv[0]);
     fee:	6821      	ldr	r1, [r4, #0]
     ff0:	4804      	ldr	r0, [pc, #16]	; (1004 <w32_bit+0x64>)
     ff2:	f7ff fbe3 	bl	7bc <printf>
  return -1;
     ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     ffa:	e7f0      	b.n	fde <w32_bit+0x3e>
     ffc:	00001b80 	andeq	r1, r0, r0, lsl #23
    1000:	00001ba8 	andeq	r1, r0, r8, lsr #23
    1004:	00001bcc 	andeq	r1, r0, ip, asr #23

00001008 <r32_bit>:

int r32_bit(int argc, char *argv[])
{
    1008:	b538      	push	{r3, r4, r5, lr}
    100a:	460c      	mov	r4, r1
  if (argc < 3) {
    100c:	2802      	cmp	r0, #2
    100e:	dd16      	ble.n	103e <r32_bit+0x36>
    goto usage;
  }

  uint32_t addr = atoh(argv[1]);
    1010:	6848      	ldr	r0, [r1, #4]
    1012:	f7ff ff51 	bl	eb8 <atoh>
    1016:	4605      	mov	r5, r0
  uint32_t bit_loc = atoi(argv[2]);
    1018:	68a0      	ldr	r0, [r4, #8]
    101a:	f7ff ff3f 	bl	e9c <atoi>
    101e:	4601      	mov	r1, r0

  if (bit_loc > 31) {
    1020:	281f      	cmp	r0, #31
    1022:	d809      	bhi.n	1038 <r32_bit+0x30>
    printf("Error: Invalid bit location argument\n");
    goto usage;
  }

  uint32_t data = reg32(addr);
    1024:	682b      	ldr	r3, [r5, #0]
  uint32_t bit_val = (data >> bit_loc) & 0x1;
    1026:	40c3      	lsrs	r3, r0
  printf("Bit %u @ 0x%08x: %u\n", bit_loc, addr, bit_val);
    1028:	f003 0301 	and.w	r3, r3, #1
    102c:	462a      	mov	r2, r5
    102e:	4807      	ldr	r0, [pc, #28]	; (104c <r32_bit+0x44>)
    1030:	f7ff fbc4 	bl	7bc <printf>
  return 0;
    1034:	2000      	movs	r0, #0

usage:
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)\n", argv[0]);
  return -1;
}
    1036:	bd38      	pop	{r3, r4, r5, pc}
    printf("Error: Invalid bit location argument\n");
    1038:	4805      	ldr	r0, [pc, #20]	; (1050 <r32_bit+0x48>)
    103a:	f7ff fbbf 	bl	7bc <printf>
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)\n", argv[0]);
    103e:	6821      	ldr	r1, [r4, #0]
    1040:	4804      	ldr	r0, [pc, #16]	; (1054 <r32_bit+0x4c>)
    1042:	f7ff fbbb 	bl	7bc <printf>
  return -1;
    1046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    104a:	e7f4      	b.n	1036 <r32_bit+0x2e>
    104c:	00001c28 	andeq	r1, r0, r8, lsr #24
    1050:	00001b80 	andeq	r1, r0, r0, lsl #23
    1054:	00001c40 	andeq	r1, r0, r0, asr #24

00001058 <strlen>:
 * limitations under the License.
 **/

#include "string.h"

size_t strlen(const char *str) {
    1058:	4602      	mov	r2, r0
  size_t len = 0;
    105a:	2000      	movs	r0, #0
  while (str[len]) {
    105c:	e000      	b.n	1060 <strlen+0x8>
    len++;
    105e:	3001      	adds	r0, #1
  while (str[len]) {
    1060:	5c13      	ldrb	r3, [r2, r0]
    1062:	2b00      	cmp	r3, #0
    1064:	d1fb      	bne.n	105e <strlen+0x6>
  }
  return len;
}
    1066:	4770      	bx	lr

00001068 <strcmp>:

int strcmp(const char *str1, const char *str2) {
  while (*str1 && (*str1 == *str2)) {
    1068:	e001      	b.n	106e <strcmp+0x6>
    str1++;
    106a:	3001      	adds	r0, #1
    str2++;
    106c:	3101      	adds	r1, #1
  while (*str1 && (*str1 == *str2)) {
    106e:	7803      	ldrb	r3, [r0, #0]
    1070:	b113      	cbz	r3, 1078 <strcmp+0x10>
    1072:	780a      	ldrb	r2, [r1, #0]
    1074:	4293      	cmp	r3, r2
    1076:	d0f8      	beq.n	106a <strcmp+0x2>
  }
  return *str1 - *str2;
    1078:	7808      	ldrb	r0, [r1, #0]
}
    107a:	1a18      	subs	r0, r3, r0
    107c:	4770      	bx	lr

0000107e <strcpy>:

char *strcpy(char *str1, const char *str2) {
  while (*str2) {
    107e:	e002      	b.n	1086 <strcpy+0x8>
    *(str1++) = *(str2++);
    1080:	3101      	adds	r1, #1
    1082:	f800 3b01 	strb.w	r3, [r0], #1
  while (*str2) {
    1086:	780b      	ldrb	r3, [r1, #0]
    1088:	2b00      	cmp	r3, #0
    108a:	d1f9      	bne.n	1080 <strcpy+0x2>
  }
  *str1 = '\0';
    108c:	7003      	strb	r3, [r0, #0]
  return 0;
}
    108e:	4618      	mov	r0, r3
    1090:	4770      	bx	lr

00001092 <memcpy>:

void *memcpy(void *dest, const void *src, size_t size) {
  size_t i;
  char *src_char = (char *)src;
  char *dest_char = (char *)dest;
  for (i = 0; i < size; i++) {
    1092:	2300      	movs	r3, #0
    1094:	e004      	b.n	10a0 <memcpy+0xe>
    dest_char[i] = src_char[i];
    1096:	f811 c003 	ldrb.w	ip, [r1, r3]
    109a:	f800 c003 	strb.w	ip, [r0, r3]
  for (i = 0; i < size; i++) {
    109e:	3301      	adds	r3, #1
    10a0:	4293      	cmp	r3, r2
    10a2:	d3f8      	bcc.n	1096 <memcpy+0x4>
  }
  return 0;
}
    10a4:	2000      	movs	r0, #0
    10a6:	4770      	bx	lr

000010a8 <memset>:

void *memset(void *dest, int val, size_t size) {
  size_t i;
  char *dest_char = (char *)dest;
  for (i = 0; i < size; i++) {
    10a8:	2300      	movs	r3, #0
    10aa:	e001      	b.n	10b0 <memset+0x8>
    dest_char[i] = val;
    10ac:	54c1      	strb	r1, [r0, r3]
  for (i = 0; i < size; i++) {
    10ae:	3301      	adds	r3, #1
    10b0:	4293      	cmp	r3, r2
    10b2:	d3fb      	bcc.n	10ac <memset+0x4>
  }

  return 0;
}
    10b4:	2000      	movs	r0, #0
    10b6:	4770      	bx	lr

000010b8 <initial_setup>:
         "@" BUILD_HOST "] - " __DATE__ " - " __TIME__ "\n");
  return 0;
}


void __attribute__((optimize("O0"), weak)) initial_setup(void) {
    10b8:	b580      	push	{r7, lr}
    10ba:	b082      	sub	sp, #8
    10bc:	af00      	add	r7, sp, #0
   * and zero the .bss section. This helps keep the user/custom
   * linker script and makefiles free from special variables to be declared.
   * Less burden on the user.
   */
  extern char _etext, _data, _edata, _bss, _ebss;
  char *src = &_etext, *dst = &_data;
    10be:	4b14      	ldr	r3, [pc, #80]	; (1110 <initial_setup+0x58>)
    10c0:	607b      	str	r3, [r7, #4]
    10c2:	4b14      	ldr	r3, [pc, #80]	; (1114 <initial_setup+0x5c>)
    10c4:	603b      	str	r3, [r7, #0]
  /**
   * Copy over the data section from ROM to RAM.
   * In case of RAM based target, we skip this since
   * src and dst would point to same location in RAM
   */
  if (dst != src)
    10c6:	683a      	ldr	r2, [r7, #0]
    10c8:	687b      	ldr	r3, [r7, #4]
    10ca:	429a      	cmp	r2, r3
    10cc:	d00c      	beq.n	10e8 <initial_setup+0x30>
    while (dst < &_edata) *(dst++) = *(src++);
    10ce:	e007      	b.n	10e0 <initial_setup+0x28>
    10d0:	687a      	ldr	r2, [r7, #4]
    10d2:	1c53      	adds	r3, r2, #1
    10d4:	607b      	str	r3, [r7, #4]
    10d6:	683b      	ldr	r3, [r7, #0]
    10d8:	1c59      	adds	r1, r3, #1
    10da:	6039      	str	r1, [r7, #0]
    10dc:	7812      	ldrb	r2, [r2, #0]
    10de:	701a      	strb	r2, [r3, #0]
    10e0:	683b      	ldr	r3, [r7, #0]
    10e2:	4a0d      	ldr	r2, [pc, #52]	; (1118 <initial_setup+0x60>)
    10e4:	4293      	cmp	r3, r2
    10e6:	d3f3      	bcc.n	10d0 <initial_setup+0x18>

  /* Clear .bss*/
  for (dst = &_bss; dst < &_ebss; dst++) *dst = 0;
    10e8:	4b0c      	ldr	r3, [pc, #48]	; (111c <initial_setup+0x64>)
    10ea:	603b      	str	r3, [r7, #0]
    10ec:	e005      	b.n	10fa <initial_setup+0x42>
    10ee:	683b      	ldr	r3, [r7, #0]
    10f0:	2200      	movs	r2, #0
    10f2:	701a      	strb	r2, [r3, #0]
    10f4:	683b      	ldr	r3, [r7, #0]
    10f6:	3301      	adds	r3, #1
    10f8:	603b      	str	r3, [r7, #0]
    10fa:	683b      	ldr	r3, [r7, #0]
    10fc:	4a08      	ldr	r2, [pc, #32]	; (1120 <initial_setup+0x68>)
    10fe:	4293      	cmp	r3, r2
    1100:	d3f5      	bcc.n	10ee <initial_setup+0x36>
   *   uart_init();
   *   set_read_char(uart_getchar);
   *   set_write_char(uart_putchar);
   * }
   */
  platform_init();
    1102:	f7ff fa39 	bl	578 <platform_init>
}
    1106:	bf00      	nop
    1108:	3708      	adds	r7, #8
    110a:	46bd      	mov	sp, r7
    110c:	bd80      	pop	{r7, pc}
    110e:	bf00      	nop
    1110:	000016f8 	strdeq	r1, [r0], -r8
    1114:	20000000 	andcs	r0, r0, r0
    1118:	20000001 	andcs	r0, r0, r1
    111c:	20000004 	andcs	r0, r0, r4
    1120:	20000080 	andcs	r0, r0, r0, lsl #1

00001124 <delete>:
static void delete(void) {
    1124:	b510      	push	{r4, lr}
  __write_char__(BACK_SPACE);
    1126:	4c05      	ldr	r4, [pc, #20]	; (113c <delete+0x18>)
    1128:	6823      	ldr	r3, [r4, #0]
    112a:	2008      	movs	r0, #8
    112c:	4798      	blx	r3
  __write_char__(SPACE);
    112e:	6823      	ldr	r3, [r4, #0]
    1130:	2020      	movs	r0, #32
    1132:	4798      	blx	r3
  __write_char__(BACK_SPACE);
    1134:	6823      	ldr	r3, [r4, #0]
    1136:	2008      	movs	r0, #8
    1138:	4798      	blx	r3
}
    113a:	bd10      	pop	{r4, pc}
    113c:	20000024 	andcs	r0, r0, r4, lsr #32

00001140 <clear_prompt>:
static void clear_prompt(int char_count) {
    1140:	b510      	push	{r4, lr}
    1142:	4604      	mov	r4, r0
  while (char_count) {
    1144:	e002      	b.n	114c <clear_prompt+0xc>
    delete ();
    1146:	f7ff ffed 	bl	1124 <delete>
    char_count--;
    114a:	3c01      	subs	r4, #1
  while (char_count) {
    114c:	2c00      	cmp	r4, #0
    114e:	d1fa      	bne.n	1146 <clear_prompt+0x6>
}
    1150:	bd10      	pop	{r4, pc}

00001152 <exec_auto_cmds>:
static void exec_auto_cmds(void) {
    1152:	b510      	push	{r4, lr}
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    1154:	2400      	movs	r4, #0
    1156:	e004      	b.n	1162 <exec_auto_cmds+0x10>
    auto_load[i].command(0, NULL);
    1158:	688b      	ldr	r3, [r1, #8]
    115a:	2100      	movs	r1, #0
    115c:	4608      	mov	r0, r1
    115e:	4798      	blx	r3
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    1160:	3401      	adds	r4, #1
    1162:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1166:	0093      	lsls	r3, r2, #2
    1168:	4a02      	ldr	r2, [pc, #8]	; (1174 <exec_auto_cmds+0x22>)
    116a:	1899      	adds	r1, r3, r2
    116c:	589b      	ldr	r3, [r3, r2]
    116e:	2b00      	cmp	r3, #0
    1170:	d1f2      	bne.n	1158 <exec_auto_cmds+0x6>
}
    1172:	bd10      	pop	{r4, pc}
    1174:	00001784 	andeq	r1, r0, r4, lsl #15

00001178 <show_history>:
static int show_history(int argc, char **argv) {
    1178:	b538      	push	{r3, r4, r5, lr}
  uint32_t end_index = total_num_commands-1;
    117a:	4b0c      	ldr	r3, [pc, #48]	; (11ac <show_history+0x34>)
    117c:	685d      	ldr	r5, [r3, #4]
    117e:	3d01      	subs	r5, #1
  if (total_num_commands > NUM_HISTORY_ENTRIES) {
    1180:	685b      	ldr	r3, [r3, #4]
    1182:	2b02      	cmp	r3, #2
    1184:	dd03      	ble.n	118e <show_history+0x16>
    beg_index = total_num_commands - NUM_HISTORY_ENTRIES;
    1186:	4b09      	ldr	r3, [pc, #36]	; (11ac <show_history+0x34>)
    1188:	685c      	ldr	r4, [r3, #4]
    118a:	3c02      	subs	r4, #2
    118c:	e00a      	b.n	11a4 <show_history+0x2c>
  uint32_t beg_index = 0;
    118e:	2400      	movs	r4, #0
    1190:	e008      	b.n	11a4 <show_history+0x2c>
    printf("%s\n", cmd_history[index % NUM_HISTORY_ENTRIES]);
    1192:	f004 0101 	and.w	r1, r4, #1
    1196:	4b06      	ldr	r3, [pc, #24]	; (11b0 <show_history+0x38>)
    1198:	eb03 1141 	add.w	r1, r3, r1, lsl #5
    119c:	4805      	ldr	r0, [pc, #20]	; (11b4 <show_history+0x3c>)
    119e:	f7ff fb0d 	bl	7bc <printf>
  for (uint32_t index = beg_index; index <= end_index; ++index) {
    11a2:	3401      	adds	r4, #1
    11a4:	42ac      	cmp	r4, r5
    11a6:	d9f4      	bls.n	1192 <show_history+0x1a>
}
    11a8:	2000      	movs	r0, #0
    11aa:	bd38      	pop	{r3, r4, r5, pc}
    11ac:	20000024 	andcs	r0, r0, r4, lsr #32
    11b0:	2000002c 	andcs	r0, r0, ip, lsr #32
    11b4:	00001d54 	andeq	r1, r0, r4, asr sp

000011b8 <cmd_exec_status>:
  }

  return 0;
}

int cmd_exec_status(int argc, char **argv) {
    11b8:	b508      	push	{r3, lr}
  printf("%d\n", __cmd_exec_status);
    11ba:	4b03      	ldr	r3, [pc, #12]	; (11c8 <cmd_exec_status+0x10>)
    11bc:	6c99      	ldr	r1, [r3, #72]	; 0x48
    11be:	4803      	ldr	r0, [pc, #12]	; (11cc <cmd_exec_status+0x14>)
    11c0:	f7ff fafc 	bl	7bc <printf>
  return 0;
}
    11c4:	2000      	movs	r0, #0
    11c6:	bd08      	pop	{r3, pc}
    11c8:	20000024 	andcs	r0, r0, r4, lsr #32
    11cc:	00001d58 	andeq	r1, r0, r8, asr sp

000011d0 <build_info>:
static int build_info(int argc, char **argv) {
    11d0:	b508      	push	{r3, lr}
  printf("Build: [" SHELL_VERSION ":" USER_REPO_VERSION "] - [" BUILD_USER
    11d2:	4802      	ldr	r0, [pc, #8]	; (11dc <build_info+0xc>)
    11d4:	f7ff faf2 	bl	7bc <printf>
}
    11d8:	2000      	movs	r0, #0
    11da:	bd08      	pop	{r3, pc}
    11dc:	00001d5c 	andeq	r1, r0, ip, asr sp

000011e0 <execute>:
static void execute(int argc, char **argv) {
    11e0:	e92d 4178 	stmdb	sp!, {r3, r4, r5, r6, r8, lr}
    11e4:	4680      	mov	r8, r0
    11e6:	460e      	mov	r6, r1
  for (int i = 0; table[i].command_name != NULL; i++) {
    11e8:	2500      	movs	r5, #0
    11ea:	e000      	b.n	11ee <execute+0xe>
    11ec:	3501      	adds	r5, #1
    11ee:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    11f2:	00a4      	lsls	r4, r4, #2
    11f4:	4b0d      	ldr	r3, [pc, #52]	; (122c <execute+0x4c>)
    11f6:	5919      	ldr	r1, [r3, r4]
    11f8:	b169      	cbz	r1, 1216 <execute+0x36>
    if (strcmp(argv[0], table[i].command_name) == 0) {
    11fa:	6830      	ldr	r0, [r6, #0]
    11fc:	f7ff ff34 	bl	1068 <strcmp>
    1200:	2800      	cmp	r0, #0
    1202:	d1f3      	bne.n	11ec <execute+0xc>
      __cmd_exec_status = table[i].command(argc, &argv[0]);
    1204:	4b09      	ldr	r3, [pc, #36]	; (122c <execute+0x4c>)
    1206:	441c      	add	r4, r3
    1208:	68a3      	ldr	r3, [r4, #8]
    120a:	4631      	mov	r1, r6
    120c:	4640      	mov	r0, r8
    120e:	4798      	blx	r3
    1210:	4b07      	ldr	r3, [pc, #28]	; (1230 <execute+0x50>)
    1212:	6498      	str	r0, [r3, #72]	; 0x48
  if (match_found == FALSE) {
    1214:	e007      	b.n	1226 <execute+0x46>
    printf("\"%s\": command not found. Use \"help\" to list all command.\n",
    1216:	6831      	ldr	r1, [r6, #0]
    1218:	4806      	ldr	r0, [pc, #24]	; (1234 <execute+0x54>)
    121a:	f7ff facf 	bl	7bc <printf>
    __cmd_exec_status = -1;
    121e:	4b04      	ldr	r3, [pc, #16]	; (1230 <execute+0x50>)
    1220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1224:	649a      	str	r2, [r3, #72]	; 0x48
}
    1226:	e8bd 8178 	ldmia.w	sp!, {r3, r4, r5, r6, r8, pc}
    122a:	bf00      	nop
    122c:	00001700 	andeq	r1, r0, r0, lsl #14
    1230:	20000024 	andcs	r0, r0, r4, lsr #32
    1234:	00001da0 	andeq	r1, r0, r0, lsr #27

00001238 <help>:
int help(int argc, char **argv) {
    1238:	b570      	push	{r4, r5, r6, lr}
  if (argc > 1 && (strcmp(argv[1], "-l")==0)) {
    123a:	2801      	cmp	r0, #1
    123c:	dd05      	ble.n	124a <help+0x12>
    123e:	460b      	mov	r3, r1
    1240:	4912      	ldr	r1, [pc, #72]	; (128c <help+0x54>)
    1242:	6858      	ldr	r0, [r3, #4]
    1244:	f7ff ff10 	bl	1068 <strcmp>
    1248:	b1e0      	cbz	r0, 1284 <help+0x4c>
    printf("use: help -l for list only.\n\n");
    124a:	4811      	ldr	r0, [pc, #68]	; (1290 <help+0x58>)
    124c:	f7ff fab6 	bl	7bc <printf>
  bool verbose = true;
    1250:	2601      	movs	r6, #1
    verbose = false;
    1252:	2500      	movs	r5, #0
    1254:	e003      	b.n	125e <help+0x26>
    printf("\n");
    1256:	480f      	ldr	r0, [pc, #60]	; (1294 <help+0x5c>)
    1258:	f7ff fab0 	bl	7bc <printf>
    i++;
    125c:	3501      	adds	r5, #1
  while (table[i].command_name != NULL) {
    125e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    1262:	00a4      	lsls	r4, r4, #2
    1264:	4b0c      	ldr	r3, [pc, #48]	; (1298 <help+0x60>)
    1266:	5918      	ldr	r0, [r3, r4]
    1268:	b170      	cbz	r0, 1288 <help+0x50>
    printf(table[i].command_name);
    126a:	f7ff faa7 	bl	7bc <printf>
    if (verbose) {
    126e:	2e00      	cmp	r6, #0
    1270:	d0f1      	beq.n	1256 <help+0x1e>
      printf("\n\t");
    1272:	480a      	ldr	r0, [pc, #40]	; (129c <help+0x64>)
    1274:	f7ff faa2 	bl	7bc <printf>
      printf(table[i].command_help);
    1278:	4b07      	ldr	r3, [pc, #28]	; (1298 <help+0x60>)
    127a:	441c      	add	r4, r3
    127c:	6860      	ldr	r0, [r4, #4]
    127e:	f7ff fa9d 	bl	7bc <printf>
    1282:	e7e8      	b.n	1256 <help+0x1e>
    verbose = false;
    1284:	2600      	movs	r6, #0
    1286:	e7e4      	b.n	1252 <help+0x1a>
}
    1288:	bd70      	pop	{r4, r5, r6, pc}
    128a:	bf00      	nop
    128c:	00001ddc 	ldrdeq	r1, [r0], -ip
    1290:	00001de0 	andeq	r1, r0, r0, ror #27
    1294:	00001e04 	andeq	r1, r0, r4, lsl #28
    1298:	00001700 	andeq	r1, r0, r0, lsl #14
    129c:	00001e00 	andeq	r1, r0, r0, lsl #28

000012a0 <add_command_to_history>:
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    12a0:	b1d8      	cbz	r0, 12da <add_command_to_history+0x3a>
static void add_command_to_history(const char *cmd_str) {
    12a2:	b538      	push	{r3, r4, r5, lr}
    12a4:	4605      	mov	r5, r0
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    12a6:	490d      	ldr	r1, [pc, #52]	; (12dc <add_command_to_history+0x3c>)
    12a8:	f7ff fede 	bl	1068 <strcmp>
    12ac:	b900      	cbnz	r0, 12b0 <add_command_to_history+0x10>
}
    12ae:	bd38      	pop	{r3, r4, r5, pc}
  int index = total_num_commands % NUM_HISTORY_ENTRIES;
    12b0:	4c0b      	ldr	r4, [pc, #44]	; (12e0 <add_command_to_history+0x40>)
    12b2:	6860      	ldr	r0, [r4, #4]
    12b4:	2800      	cmp	r0, #0
    12b6:	f000 0001 	and.w	r0, r0, #1
    12ba:	bfb8      	it	lt
    12bc:	4240      	neglt	r0, r0
  memcpy(&cmd_history[index], cmd_str, LINE_BUFF_SIZE);
    12be:	f104 0308 	add.w	r3, r4, #8
    12c2:	2220      	movs	r2, #32
    12c4:	4629      	mov	r1, r5
    12c6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    12ca:	f7ff fee2 	bl	1092 <memcpy>
  total_num_commands++;
    12ce:	6863      	ldr	r3, [r4, #4]
    12d0:	3301      	adds	r3, #1
    12d2:	6063      	str	r3, [r4, #4]
  curr_command_ptr = total_num_commands;
    12d4:	6863      	ldr	r3, [r4, #4]
    12d6:	64e3      	str	r3, [r4, #76]	; 0x4c
    12d8:	e7e9      	b.n	12ae <add_command_to_history+0xe>
    12da:	4770      	bx	lr
    12dc:	00001e08 	andeq	r1, r0, r8, lsl #28
    12e0:	20000024 	andcs	r0, r0, r4, lsr #32

000012e4 <parse_line>:
static int parse_line(char **argv, char *line_buff, int argument_size) {
    12e4:	b538      	push	{r3, r4, r5, lr}
    12e6:	4605      	mov	r5, r0
    12e8:	460c      	mov	r4, r1
  int length = strlen(line_buff);
    12ea:	4608      	mov	r0, r1
    12ec:	f7ff feb4 	bl	1058 <strlen>
    12f0:	4684      	mov	ip, r0
  int pos = 0;
    12f2:	2300      	movs	r3, #0
  int argc = 0;
    12f4:	4618      	mov	r0, r3
  while (pos <= length) {
    12f6:	e00f      	b.n	1318 <parse_line+0x34>
         pos++)
    12f8:	3301      	adds	r3, #1
    for (; line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    12fa:	18e1      	adds	r1, r4, r3
    12fc:	5ce2      	ldrb	r2, [r4, r3]
    12fe:	2a09      	cmp	r2, #9
    1300:	d003      	beq.n	130a <parse_line+0x26>
    1302:	2a20      	cmp	r2, #32
    1304:	d001      	beq.n	130a <parse_line+0x26>
    1306:	2a00      	cmp	r2, #0
    1308:	d1f6      	bne.n	12f8 <parse_line+0x14>
    if (line_buff[pos] == '\t' || line_buff[pos] == SPACE)
    130a:	2a09      	cmp	r2, #9
    130c:	d001      	beq.n	1312 <parse_line+0x2e>
    130e:	2a20      	cmp	r2, #32
    1310:	d101      	bne.n	1316 <parse_line+0x32>
      line_buff[pos] = END_OF_LINE;
    1312:	2200      	movs	r2, #0
    1314:	700a      	strb	r2, [r1, #0]
    pos++;
    1316:	3301      	adds	r3, #1
  while (pos <= length) {
    1318:	4563      	cmp	r3, ip
    131a:	dc0b      	bgt.n	1334 <parse_line+0x50>
    if (line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    131c:	18e1      	adds	r1, r4, r3
    131e:	5ce2      	ldrb	r2, [r4, r3]
    1320:	2a09      	cmp	r2, #9
    1322:	d0ea      	beq.n	12fa <parse_line+0x16>
    1324:	2a20      	cmp	r2, #32
    1326:	d0e8      	beq.n	12fa <parse_line+0x16>
    1328:	2a00      	cmp	r2, #0
    132a:	d0e6      	beq.n	12fa <parse_line+0x16>
      argv[argc++] = &line_buff[pos];
    132c:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
    1330:	3001      	adds	r0, #1
    1332:	e7e2      	b.n	12fa <parse_line+0x16>
}
    1334:	bd38      	pop	{r3, r4, r5, pc}

00001336 <prefix_match>:
  if (sub == NULL || str == NULL || len <= 0 || len > strlen(str)) {
    1336:	b1d0      	cbz	r0, 136e <prefix_match+0x38>
static int prefix_match(char *sub, int len, const char *str) {
    1338:	b570      	push	{r4, r5, r6, lr}
    133a:	460d      	mov	r5, r1
    133c:	4614      	mov	r4, r2
    133e:	4606      	mov	r6, r0
  if (sub == NULL || str == NULL || len <= 0 || len > strlen(str)) {
    1340:	b17a      	cbz	r2, 1362 <prefix_match+0x2c>
    1342:	2900      	cmp	r1, #0
    1344:	dd0d      	ble.n	1362 <prefix_match+0x2c>
    1346:	4610      	mov	r0, r2
    1348:	f7ff fe86 	bl	1058 <strlen>
    134c:	42a8      	cmp	r0, r5
    134e:	d308      	bcc.n	1362 <prefix_match+0x2c>
  for (int i = 0; i<len; ++i) {
    1350:	2300      	movs	r3, #0
    1352:	42ab      	cmp	r3, r5
    1354:	da07      	bge.n	1366 <prefix_match+0x30>
    if (sub[i] != str[i]) {
    1356:	5cf1      	ldrb	r1, [r6, r3]
    1358:	5ce2      	ldrb	r2, [r4, r3]
    135a:	4291      	cmp	r1, r2
    135c:	d105      	bne.n	136a <prefix_match+0x34>
  for (int i = 0; i<len; ++i) {
    135e:	3301      	adds	r3, #1
    1360:	e7f7      	b.n	1352 <prefix_match+0x1c>
    return FALSE;
    1362:	2000      	movs	r0, #0
}
    1364:	bd70      	pop	{r4, r5, r6, pc}
  return TRUE;
    1366:	2001      	movs	r0, #1
    1368:	e7fc      	b.n	1364 <prefix_match+0x2e>
      return FALSE;
    136a:	2000      	movs	r0, #0
    136c:	e7fa      	b.n	1364 <prefix_match+0x2e>
    return FALSE;
    136e:	2000      	movs	r0, #0
}
    1370:	4770      	bx	lr

00001372 <handle_up_arrow>:
static void handle_up_arrow(char *cmd_buff, int *char_count) {
    1372:	b538      	push	{r3, r4, r5, lr}
    1374:	4604      	mov	r4, r0
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    1376:	4a16      	ldr	r2, [pc, #88]	; (13d0 <handle_up_arrow+0x5e>)
    1378:	6853      	ldr	r3, [r2, #4]
    137a:	3b02      	subs	r3, #2
    137c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    137e:	4293      	cmp	r3, r2
    1380:	dc03      	bgt.n	138a <handle_up_arrow+0x18>
    1382:	460d      	mov	r5, r1
      curr_command_ptr == 0) {
    1384:	4b12      	ldr	r3, [pc, #72]	; (13d0 <handle_up_arrow+0x5e>)
    1386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    1388:	b923      	cbnz	r3, 1394 <handle_up_arrow+0x22>
    printf("%s", cmd_buff);
    138a:	4621      	mov	r1, r4
    138c:	4811      	ldr	r0, [pc, #68]	; (13d4 <handle_up_arrow+0x62>)
    138e:	f7ff fa15 	bl	7bc <printf>
}
    1392:	bd38      	pop	{r3, r4, r5, pc}
  memset(cmd_buff, 0, LINE_BUFF_SIZE);
    1394:	2220      	movs	r2, #32
    1396:	2100      	movs	r1, #0
    1398:	f7ff fe86 	bl	10a8 <memset>
  curr_command_ptr--;
    139c:	4b0c      	ldr	r3, [pc, #48]	; (13d0 <handle_up_arrow+0x5e>)
    139e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    13a0:	3a01      	subs	r2, #1
    13a2:	64da      	str	r2, [r3, #76]	; 0x4c
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    13a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    13a6:	2900      	cmp	r1, #0
    13a8:	f001 0101 	and.w	r1, r1, #1
    13ac:	bfb8      	it	lt
    13ae:	4249      	neglt	r1, r1
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    13b0:	3308      	adds	r3, #8
    13b2:	2220      	movs	r2, #32
    13b4:	eb03 1141 	add.w	r1, r3, r1, lsl #5
    13b8:	4620      	mov	r0, r4
    13ba:	f7ff fe6a 	bl	1092 <memcpy>
  *char_count = strlen(cmd_buff);
    13be:	4620      	mov	r0, r4
    13c0:	f7ff fe4a 	bl	1058 <strlen>
    13c4:	6028      	str	r0, [r5, #0]
  printf("%s", cmd_buff);
    13c6:	4621      	mov	r1, r4
    13c8:	4802      	ldr	r0, [pc, #8]	; (13d4 <handle_up_arrow+0x62>)
    13ca:	f7ff f9f7 	bl	7bc <printf>
    13ce:	e7e0      	b.n	1392 <handle_up_arrow+0x20>
    13d0:	20000024 	andcs	r0, r0, r4, lsr #32
    13d4:	00001e0c 	andeq	r1, r0, ip, lsl #28

000013d8 <handle_down_arrow>:
static void handle_down_arrow(char *cmd_buff, int *char_count) {
    13d8:	b538      	push	{r3, r4, r5, lr}
    13da:	4604      	mov	r4, r0
    13dc:	460d      	mov	r5, r1
  memset(cmd_buff, 0, LINE_BUFF_SIZE);
    13de:	2220      	movs	r2, #32
    13e0:	2100      	movs	r1, #0
    13e2:	f7ff fe61 	bl	10a8 <memset>
  *char_count = 0;
    13e6:	2300      	movs	r3, #0
    13e8:	602b      	str	r3, [r5, #0]
  if (curr_command_ptr == total_num_commands) return;
    13ea:	4b0f      	ldr	r3, [pc, #60]	; (1428 <handle_down_arrow+0x50>)
    13ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    13ee:	685b      	ldr	r3, [r3, #4]
    13f0:	429a      	cmp	r2, r3
    13f2:	d018      	beq.n	1426 <handle_down_arrow+0x4e>
  curr_command_ptr++;
    13f4:	490c      	ldr	r1, [pc, #48]	; (1428 <handle_down_arrow+0x50>)
    13f6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    13f8:	3301      	adds	r3, #1
    13fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    13fc:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    13fe:	2b00      	cmp	r3, #0
    1400:	f003 0301 	and.w	r3, r3, #1
    1404:	bfb8      	it	lt
    1406:	425b      	neglt	r3, r3
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    1408:	3108      	adds	r1, #8
    140a:	2220      	movs	r2, #32
    140c:	eb01 1143 	add.w	r1, r1, r3, lsl #5
    1410:	4620      	mov	r0, r4
    1412:	f7ff fe3e 	bl	1092 <memcpy>
  *char_count = strlen(cmd_buff);
    1416:	4620      	mov	r0, r4
    1418:	f7ff fe1e 	bl	1058 <strlen>
    141c:	6028      	str	r0, [r5, #0]
  printf("%s", cmd_buff);
    141e:	4621      	mov	r1, r4
    1420:	4802      	ldr	r0, [pc, #8]	; (142c <handle_down_arrow+0x54>)
    1422:	f7ff f9cb 	bl	7bc <printf>
}
    1426:	bd38      	pop	{r3, r4, r5, pc}
    1428:	20000024 	andcs	r0, r0, r4, lsr #32
    142c:	00001e0c 	andeq	r1, r0, ip, lsl #28

00001430 <set_read_char>:
void set_read_char(int (*func)(void)) { __read_char__ = func; }
    1430:	4b01      	ldr	r3, [pc, #4]	; (1438 <set_read_char+0x8>)
    1432:	6518      	str	r0, [r3, #80]	; 0x50
    1434:	4770      	bx	lr
    1436:	bf00      	nop
    1438:	20000024 	andcs	r0, r0, r4, lsr #32

0000143c <set_read_char2>:
void set_read_char2(int (*func)(void)) { __read_char2__ = func; }
    143c:	4b01      	ldr	r3, [pc, #4]	; (1444 <set_read_char2+0x8>)
    143e:	6558      	str	r0, [r3, #84]	; 0x54
    1440:	4770      	bx	lr
    1442:	bf00      	nop
    1444:	20000024 	andcs	r0, r0, r4, lsr #32

00001448 <set_write_char>:
void set_write_char(void (*func)(char)) { __write_char__ = func; }
    1448:	4b01      	ldr	r3, [pc, #4]	; (1450 <set_write_char+0x8>)
    144a:	6018      	str	r0, [r3, #0]
    144c:	4770      	bx	lr
    144e:	bf00      	nop
    1450:	20000024 	andcs	r0, r0, r4, lsr #32

00001454 <set_write_char2>:
void set_write_char2(void (*func)(char)) { __write_char2__ = func; }
    1454:	4b01      	ldr	r3, [pc, #4]	; (145c <set_write_char2+0x8>)
    1456:	6598      	str	r0, [r3, #88]	; 0x58
    1458:	4770      	bx	lr
    145a:	bf00      	nop
    145c:	20000024 	andcs	r0, r0, r4, lsr #32

00001460 <setup>:
}
    1460:	4770      	bx	lr

00001462 <loop>:
}
    1462:	4770      	bx	lr

00001464 <prepend_prompt>:
}
    1464:	4770      	bx	lr

00001466 <handle_tab>:
  if (cmd_buff == NULL || char_count <= 0) {
    1466:	2800      	cmp	r0, #0
    1468:	d046      	beq.n	14f8 <handle_tab+0x92>
static void handle_tab(char *cmd_buff, int *char_count) {
    146a:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
    146e:	460e      	mov	r6, r1
    1470:	4680      	mov	r8, r0
  if (cmd_buff == NULL || char_count <= 0) {
    1472:	b309      	cbz	r1, 14b8 <handle_tab+0x52>
  int last_match = -1;
    1474:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
  int match_count = 0;
    1478:	f04f 0900 	mov.w	r9, #0
  int i = 0;
    147c:	464d      	mov	r5, r9
    147e:	e000      	b.n	1482 <handle_tab+0x1c>
    i++;
    1480:	3501      	adds	r5, #1
  while (table[i].command_name != NULL) { //loop over all commands
    1482:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    1486:	00a4      	lsls	r4, r4, #2
    1488:	4b1c      	ldr	r3, [pc, #112]	; (14fc <handle_tab+0x96>)
    148a:	591a      	ldr	r2, [r3, r4]
    148c:	b172      	cbz	r2, 14ac <handle_tab+0x46>
    if (prefix_match(cmd_buff, *char_count, table[i].command_name)) {
    148e:	6831      	ldr	r1, [r6, #0]
    1490:	4640      	mov	r0, r8
    1492:	f7ff ff50 	bl	1336 <prefix_match>
    1496:	2800      	cmp	r0, #0
    1498:	d0f2      	beq.n	1480 <handle_tab+0x1a>
      match_count++;
    149a:	f109 0901 	add.w	r9, r9, #1
      printf("\n%s", table[i].command_name);
    149e:	4b17      	ldr	r3, [pc, #92]	; (14fc <handle_tab+0x96>)
    14a0:	5919      	ldr	r1, [r3, r4]
    14a2:	4817      	ldr	r0, [pc, #92]	; (1500 <handle_tab+0x9a>)
    14a4:	f7ff f98a 	bl	7bc <printf>
      last_match = i;
    14a8:	46aa      	mov	sl, r5
    14aa:	e7e9      	b.n	1480 <handle_tab+0x1a>
  if (match_count == 1) {
    14ac:	f1b9 0f01 	cmp.w	r9, #1
    14b0:	d004      	beq.n	14bc <handle_tab+0x56>
  if (match_count) {
    14b2:	f1b9 0f00 	cmp.w	r9, #0
    14b6:	d10e      	bne.n	14d6 <handle_tab+0x70>
}
    14b8:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
    memcpy(cmd_buff, table[last_match].command_name, LINE_BUFF_SIZE);
    14bc:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    14c0:	2220      	movs	r2, #32
    14c2:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
    14c6:	4640      	mov	r0, r8
    14c8:	f7ff fde3 	bl	1092 <memcpy>
    *char_count = strlen(cmd_buff);
    14cc:	4640      	mov	r0, r8
    14ce:	f7ff fdc3 	bl	1058 <strlen>
    14d2:	6030      	str	r0, [r6, #0]
    14d4:	e7ed      	b.n	14b2 <handle_tab+0x4c>
    printf("\n");
    14d6:	4c0b      	ldr	r4, [pc, #44]	; (1504 <handle_tab+0x9e>)
    14d8:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    14dc:	f7ff f96e 	bl	7bc <printf>
    prepend_prompt();
    14e0:	f7ff ffc0 	bl	1464 <prepend_prompt>
    printf(PROMPT);
    14e4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    14e8:	f7ff f968 	bl	7bc <printf>
    printf("%s", cmd_buff);
    14ec:	4641      	mov	r1, r8
    14ee:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    14f2:	f7ff f963 	bl	7bc <printf>
    14f6:	e7df      	b.n	14b8 <handle_tab+0x52>
    14f8:	4770      	bx	lr
    14fa:	bf00      	nop
    14fc:	00001700 	andeq	r1, r0, r0, lsl #14
    1500:	00001e10 	andeq	r1, r0, r0, lsl lr
    1504:	00001d54 	andeq	r1, r0, r4, asr sp

00001508 <active_prompt>:
__attribute__((weak)) int active_prompt() { return TRUE; }
    1508:	2001      	movs	r0, #1
    150a:	4770      	bx	lr

0000150c <shell>:
static void shell(void) {
    150c:	b530      	push	{r4, r5, lr}
    150e:	b09b      	sub	sp, #108	; 0x6c
  int count = 0;
    1510:	2300      	movs	r3, #0
    1512:	9319      	str	r3, [sp, #100]	; 0x64
  for (int i = 0; i < LINE_BUFF_SIZE; i++) line_buff[i] = 0;
    1514:	e006      	b.n	1524 <shell+0x18>
    1516:	f103 0268 	add.w	r2, r3, #104	; 0x68
    151a:	446a      	add	r2, sp
    151c:	2100      	movs	r1, #0
    151e:	f802 1c24 	strb.w	r1, [r2, #-36]
    1522:	3301      	adds	r3, #1
    1524:	2b1f      	cmp	r3, #31
    1526:	ddf6      	ble.n	1516 <shell+0xa>
  for (int i = 0; i < MAX_ARG_COUNT; i++) argv[i] = NULL;
    1528:	2300      	movs	r3, #0
    152a:	2b0f      	cmp	r3, #15
    152c:	dc07      	bgt.n	153e <shell+0x32>
    152e:	aa1a      	add	r2, sp, #104	; 0x68
    1530:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1534:	2100      	movs	r1, #0
    1536:	f842 1c64 	str.w	r1, [r2, #-100]
    153a:	3301      	adds	r3, #1
    153c:	e7f5      	b.n	152a <shell+0x1e>
  prepend_prompt();
    153e:	f7ff ff91 	bl	1464 <prepend_prompt>
  printf(PROMPT);
    1542:	484d      	ldr	r0, [pc, #308]	; (1678 <shell+0x16c>)
    1544:	f7ff f93a 	bl	7bc <printf>
  int special_key = 0;
    1548:	2500      	movs	r5, #0
    154a:	e061      	b.n	1610 <shell+0x104>
        special_key = 1;
    154c:	2501      	movs	r5, #1
    154e:	e05f      	b.n	1610 <shell+0x104>
    if (s == -1) { s = __read_char2__();}
    1550:	4b4a      	ldr	r3, [pc, #296]	; (167c <shell+0x170>)
    1552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    1554:	4798      	blx	r3
    1556:	e065      	b.n	1624 <shell+0x118>
        line_buff[count] = END_OF_LINE;
    1558:	9b19      	ldr	r3, [sp, #100]	; 0x64
    155a:	3368      	adds	r3, #104	; 0x68
    155c:	446b      	add	r3, sp
    155e:	2200      	movs	r2, #0
    1560:	f803 2c24 	strb.w	r2, [r3, #-36]
        __write_char__(NEW_LINE);
    1564:	4b45      	ldr	r3, [pc, #276]	; (167c <shell+0x170>)
    1566:	681b      	ldr	r3, [r3, #0]
    1568:	200a      	movs	r0, #10
    156a:	4798      	blx	r3
  add_command_to_history(line_buff);
    156c:	a811      	add	r0, sp, #68	; 0x44
    156e:	f7ff fe97 	bl	12a0 <add_command_to_history>
  argc = parse_line(argv, line_buff, MAX_ARG_COUNT);
    1572:	2210      	movs	r2, #16
    1574:	a911      	add	r1, sp, #68	; 0x44
    1576:	a801      	add	r0, sp, #4
    1578:	f7ff feb4 	bl	12e4 <parse_line>
  if (argc > 0) execute(argc, argv);
    157c:	2800      	cmp	r0, #0
    157e:	dc76      	bgt.n	166e <shell+0x162>
}
    1580:	b01b      	add	sp, #108	; 0x6c
    1582:	bd30      	pop	{r4, r5, pc}
        if (!__echo) {
    1584:	4b3e      	ldr	r3, [pc, #248]	; (1680 <shell+0x174>)
    1586:	781b      	ldrb	r3, [r3, #0]
    1588:	b1a3      	cbz	r3, 15b4 <shell+0xa8>
        if (count == 0) continue;
    158a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    158c:	2b00      	cmp	r3, #0
    158e:	d03f      	beq.n	1610 <shell+0x104>
        count--;
    1590:	3b01      	subs	r3, #1
    1592:	9319      	str	r3, [sp, #100]	; 0x64
        line_buff[count] = END_OF_LINE;
    1594:	3368      	adds	r3, #104	; 0x68
    1596:	446b      	add	r3, sp
    1598:	2200      	movs	r2, #0
    159a:	f803 2c24 	strb.w	r2, [r3, #-36]
        delete ();
    159e:	f7ff fdc1 	bl	1124 <delete>
      if (__echo) {
    15a2:	4b37      	ldr	r3, [pc, #220]	; (1680 <shell+0x174>)
    15a4:	781b      	ldrb	r3, [r3, #0]
    15a6:	2b00      	cmp	r3, #0
    15a8:	d032      	beq.n	1610 <shell+0x104>
        __write_char__(c);
    15aa:	4b34      	ldr	r3, [pc, #208]	; (167c <shell+0x170>)
    15ac:	681b      	ldr	r3, [r3, #0]
    15ae:	4620      	mov	r0, r4
    15b0:	4798      	blx	r3
    15b2:	e02d      	b.n	1610 <shell+0x104>
          delete ();
    15b4:	f7ff fdb6 	bl	1124 <delete>
          delete ();
    15b8:	f7ff fdb4 	bl	1124 <delete>
    15bc:	e7e5      	b.n	158a <shell+0x7e>
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    15be:	2d01      	cmp	r5, #1
    15c0:	d140      	bne.n	1644 <shell+0x138>
        special_key = 2;
    15c2:	2502      	movs	r5, #2
    15c4:	e024      	b.n	1610 <shell+0x104>
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    15c6:	2d00      	cmp	r5, #0
    15c8:	d041      	beq.n	164e <shell+0x142>
        special_key = 0;
    15ca:	2500      	movs	r5, #0
    15cc:	e020      	b.n	1610 <shell+0x104>
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    15ce:	2d02      	cmp	r5, #2
    15d0:	d142      	bne.n	1658 <shell+0x14c>
        if (!__echo) {
    15d2:	4b2b      	ldr	r3, [pc, #172]	; (1680 <shell+0x174>)
    15d4:	781b      	ldrb	r3, [r3, #0]
    15d6:	b95b      	cbnz	r3, 15f0 <shell+0xe4>
          clear_prompt(count + 4);
    15d8:	9819      	ldr	r0, [sp, #100]	; 0x64
    15da:	3004      	adds	r0, #4
    15dc:	f7ff fdb0 	bl	1140 <clear_prompt>
        if (c == 'A') {
    15e0:	2c41      	cmp	r4, #65	; 0x41
    15e2:	d009      	beq.n	15f8 <shell+0xec>
          handle_down_arrow(line_buff, &count);
    15e4:	a919      	add	r1, sp, #100	; 0x64
    15e6:	a811      	add	r0, sp, #68	; 0x44
    15e8:	f7ff fef6 	bl	13d8 <handle_down_arrow>
        special_key = 0;
    15ec:	2500      	movs	r5, #0
        continue;
    15ee:	e00f      	b.n	1610 <shell+0x104>
          clear_prompt(count);
    15f0:	9819      	ldr	r0, [sp, #100]	; 0x64
    15f2:	f7ff fda5 	bl	1140 <clear_prompt>
    15f6:	e7f3      	b.n	15e0 <shell+0xd4>
          handle_up_arrow(line_buff, &count);
    15f8:	a919      	add	r1, sp, #100	; 0x64
    15fa:	a811      	add	r0, sp, #68	; 0x44
    15fc:	f7ff feb9 	bl	1372 <handle_up_arrow>
    1600:	e7f4      	b.n	15ec <shell+0xe0>
        handle_tab(line_buff, &count);
    1602:	a919      	add	r1, sp, #100	; 0x64
    1604:	a811      	add	r0, sp, #68	; 0x44
    1606:	f7ff ff2e 	bl	1466 <handle_tab>
        continue;
    160a:	e001      	b.n	1610 <shell+0x104>
      loop();
    160c:	f7ff ff29 	bl	1462 <loop>
    if (!active_prompt()) {
    1610:	f7ff ff7a 	bl	1508 <active_prompt>
    1614:	2800      	cmp	r0, #0
    1616:	d0fb      	beq.n	1610 <shell+0x104>
    s = __read_char__();
    1618:	4b18      	ldr	r3, [pc, #96]	; (167c <shell+0x170>)
    161a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    161c:	4798      	blx	r3
    if (s == -1) { s = __read_char2__();}
    161e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1622:	d095      	beq.n	1550 <shell+0x44>
    if (s != -1) {
    1624:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1628:	d0f0      	beq.n	160c <shell+0x100>
      c = (char)s;
    162a:	b2c4      	uxtb	r4, r0
      if (c == CARRIAGE_RETURN || c == NEW_LINE) {
    162c:	2c0d      	cmp	r4, #13
    162e:	d093      	beq.n	1558 <shell+0x4c>
    1630:	2c0a      	cmp	r4, #10
    1632:	d091      	beq.n	1558 <shell+0x4c>
      if (c == DELETE || c == BACK_SPACE) {
    1634:	2c7f      	cmp	r4, #127	; 0x7f
    1636:	d0a5      	beq.n	1584 <shell+0x78>
    1638:	2c08      	cmp	r4, #8
    163a:	d0a3      	beq.n	1584 <shell+0x78>
      } else if (c == ESCAPE) {
    163c:	2c1b      	cmp	r4, #27
    163e:	d085      	beq.n	154c <shell+0x40>
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    1640:	2c5b      	cmp	r4, #91	; 0x5b
    1642:	d0bc      	beq.n	15be <shell+0xb2>
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    1644:	f1a4 0343 	sub.w	r3, r4, #67	; 0x43
    1648:	b2db      	uxtb	r3, r3
    164a:	2b01      	cmp	r3, #1
    164c:	d9bb      	bls.n	15c6 <shell+0xba>
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    164e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    1652:	b2db      	uxtb	r3, r3
    1654:	2b01      	cmp	r3, #1
    1656:	d9ba      	bls.n	15ce <shell+0xc2>
      else if (c == TAB) {
    1658:	2c09      	cmp	r4, #9
    165a:	d0d2      	beq.n	1602 <shell+0xf6>
        line_buff[count] = c;
    165c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    165e:	f103 0268 	add.w	r2, r3, #104	; 0x68
    1662:	446a      	add	r2, sp
    1664:	f802 4c24 	strb.w	r4, [r2, #-36]
        count++;
    1668:	3301      	adds	r3, #1
    166a:	9319      	str	r3, [sp, #100]	; 0x64
    166c:	e799      	b.n	15a2 <shell+0x96>
  if (argc > 0) execute(argc, argv);
    166e:	a901      	add	r1, sp, #4
    1670:	f7ff fdb6 	bl	11e0 <execute>
}
    1674:	e784      	b.n	1580 <shell+0x74>
    1676:	bf00      	nop
    1678:	00001e14 	andeq	r1, r0, r4, lsl lr
    167c:	20000024 	andcs	r0, r0, r4, lsr #32
    1680:	20000000 	andcs	r0, r0, r0

00001684 <prompt>:
void prompt() {
    1684:	b508      	push	{r3, lr}
  initial_setup();
    1686:	f7ff fd17 	bl	10b8 <initial_setup>
  exec_auto_cmds();
    168a:	f7ff fd62 	bl	1152 <exec_auto_cmds>
  setup();
    168e:	f7ff fee7 	bl	1460 <setup>
    shell();
    1692:	f7ff ff3b 	bl	150c <shell>
  while (TRUE) {
    1696:	e7fc      	b.n	1692 <prompt+0xe>

00001698 <exec>:
int exec(char *cmd_str) {
    1698:	b500      	push	{lr}
    169a:	b091      	sub	sp, #68	; 0x44
    169c:	4601      	mov	r1, r0
  argc = parse_line(argv, cmd_str, MAX_ARG_COUNT);
    169e:	2210      	movs	r2, #16
    16a0:	4668      	mov	r0, sp
    16a2:	f7ff fe1f 	bl	12e4 <parse_line>
  if (argc > 0) execute(argc, argv);
    16a6:	2800      	cmp	r0, #0
    16a8:	dc04      	bgt.n	16b4 <exec+0x1c>
  return __cmd_exec_status;
    16aa:	4b04      	ldr	r3, [pc, #16]	; (16bc <exec+0x24>)
    16ac:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    16ae:	b011      	add	sp, #68	; 0x44
    16b0:	f85d fb04 	ldr.w	pc, [sp], #4
  if (argc > 0) execute(argc, argv);
    16b4:	4669      	mov	r1, sp
    16b6:	f7ff fd93 	bl	11e0 <execute>
    16ba:	e7f6      	b.n	16aa <exec+0x12>
    16bc:	20000024 	andcs	r0, r0, r4, lsr #32

000016c0 <get_function_addr>:
cmd get_function_addr(char *cmd_str) {
    16c0:	b570      	push	{r4, r5, r6, lr}
    16c2:	4606      	mov	r6, r0
  for (int i = 0; table[i].command_name != NULL; i++) {
    16c4:	2500      	movs	r5, #0
    16c6:	e000      	b.n	16ca <get_function_addr+0xa>
    16c8:	3501      	adds	r5, #1
    16ca:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    16ce:	00a4      	lsls	r4, r4, #2
    16d0:	4b06      	ldr	r3, [pc, #24]	; (16ec <get_function_addr+0x2c>)
    16d2:	5919      	ldr	r1, [r3, r4]
    16d4:	b141      	cbz	r1, 16e8 <get_function_addr+0x28>
    if (strcmp(cmd_str, table[i].command_name) == 0) {
    16d6:	4630      	mov	r0, r6
    16d8:	f7ff fcc6 	bl	1068 <strcmp>
    16dc:	2800      	cmp	r0, #0
    16de:	d1f3      	bne.n	16c8 <get_function_addr+0x8>
      return table[i].command;
    16e0:	4b02      	ldr	r3, [pc, #8]	; (16ec <get_function_addr+0x2c>)
    16e2:	441c      	add	r4, r3
    16e4:	68a0      	ldr	r0, [r4, #8]
    16e6:	e000      	b.n	16ea <get_function_addr+0x2a>
  return NULL;
    16e8:	2000      	movs	r0, #0
}
    16ea:	bd70      	pop	{r4, r5, r6, pc}
    16ec:	00001700 	andeq	r1, r0, r0, lsl #14

000016f0 <reset_handler>:
    16f0:	f7ff ffc8 	bl	1684 <prompt>
    16f4:	f7ff fffe 	bl	16f4 <reset_handler+0x4>

Disassembly of section .rodata:

000016fc <_varcar_mesg-0x4>:
    16fc:	00000000 	andeq	r0, r0, r0

00001700 <_varcar_mesg>:
    1700:	000017f0 	strdeq	r1, [r0], -r0
    1704:	000017fc 	strdeq	r1, [r0], -ip
    1708:	000003c1 	andeq	r0, r0, r1, asr #7

0000170c <_varping>:

// ADD_CMD(keyword, description, function name);
ADD_CMD(ping, "Pings the other board", ping);
    170c:	00001844 	andeq	r1, r0, r4, asr #16
    1710:	0000184c 	andeq	r1, r0, ip, asr #16
    1714:	00000425 	andeq	r0, r0, r5, lsr #8

00001718 <_varpair>:

// ADD_CMD(keyword, description, function name);
ADD_CMD(pair, "Starts the pairing process with a car.", pair);
    1718:	00001890 	muleq	r0, r0, r8
    171c:	00001898 	muleq	r0, r8, r8
    1720:	00000441 	andeq	r0, r0, r1, asr #8

00001724 <_varread_mem>:
ADD_CMD(rb, "reads a bit from memory location", r32_bit);
#endif //SHELL_NO_BIT_UTILS

ADD_CMD(r32, "reads a 32 bit memory location", r32);
ADD_CMD(w32, "writes a 32 bit value to a memory location", w32);
ADD_CMD(read, "Reads number of bytes from memory", read_mem);
    1724:	00001c88 	andeq	r1, r0, r8, lsl #25
    1728:	00001c90 	muleq	r0, r0, ip
    172c:	00000f59 	andeq	r0, r0, r9, asr pc

00001730 <_varw32>:
ADD_CMD(w32, "writes a 32 bit value to a memory location", w32);
    1730:	00001cb4 			; <UNDEFINED> instruction: 0x00001cb4
    1734:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
    1738:	00000f29 	andeq	r0, r0, r9, lsr #30

0000173c <_varr32>:
ADD_CMD(r32, "reads a 32 bit memory location", r32);
    173c:	00001ce4 	andeq	r1, r0, r4, ror #25
    1740:	00001ce8 	andeq	r1, r0, r8, ror #25
    1744:	00000ef9 	strdeq	r0, [r0], -r9

00001748 <_varr32_bit>:
ADD_CMD(rb, "reads a bit from memory location", r32_bit);
    1748:	00001d08 	andeq	r1, r0, r8, lsl #26
    174c:	00001d0c 	andeq	r1, r0, ip, lsl #26
    1750:	00001009 	andeq	r1, r0, r9

00001754 <_varw32_bit>:
ADD_CMD(wb, "write a bit to memory location", w32_bit);
    1754:	00001d30 	andeq	r1, r0, r0, lsr sp
    1758:	00001d34 	andeq	r1, r0, r4, lsr sp
    175c:	00000fa1 	andeq	r0, r0, r1, lsr #31

00001760 <_varcmd_exec_status>:

// DO NOT REMOVE THESE
AUTO_CMD(version, "Prints details of the build", build_info);
ADD_CMD(help, "Prints all available commands", help);
ADD_CMD(status, "Returns exit status of last executed command",
    1760:	00001e18 	andeq	r1, r0, r8, lsl lr
    1764:	00001e20 	andeq	r1, r0, r0, lsr #28
    1768:	000011b9 			; <UNDEFINED> instruction: 0x000011b9

0000176c <_varhelp>:
ADD_CMD(help, "Prints all available commands", help);
    176c:	00001e50 	andeq	r1, r0, r0, asr lr
    1770:	00001e58 	andeq	r1, r0, r8, asr lr
    1774:	00001239 	andeq	r1, r0, r9, lsr r2

00001778 <_varshow_history>:
ADD_CMD(history, "Show command history", show_history);
    1778:	00001e9c 	muleq	r0, ip, lr
    177c:	00001ea4 	andeq	r1, r0, r4, lsr #29
    1780:	00001179 	andeq	r1, r0, r9, ror r1

00001784 <_varbuild_info>:
AUTO_CMD(version, "Prints details of the build", build_info);
    1784:	00001e78 	andeq	r1, r0, r8, ror lr
    1788:	00001e80 	andeq	r1, r0, r0, lsl #29
    178c:	000011d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>

00001790 <cmd_end_>:
	...
    179c:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    17a0:	64657669 	strbtvs	r7, [r5], #-1641	; 0xfffff997
    17a4:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
    17a8:	73656d20 	cmnvc	r5, #32, 26	; 0x800
    17ac:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    17b0:	0000003a 	andeq	r0, r0, sl, lsr r0
    17b4:	00732520 	rsbseq	r2, r3, r0, lsr #10
    17b8:	474e4950 	smlsldmi	r4, lr, r0, r9
    17bc:	5045525f 	subpl	r5, r5, pc, asr r2
    17c0:	0000594c 	andeq	r5, r0, ip, asr #18
    17c4:	20746f47 	rsbscs	r6, r4, r7, asr #30
    17c8:	69702061 	ldmdbvs	r0!, {r0, r5, r6, sp}^
    17cc:	7220676e 	eorvc	r6, r0, #28835840	; 0x1b80000
    17d0:	796c7065 	stmdbvc	ip!, {r0, r2, r5, r6, ip, sp, lr}^
    17d4:	00000a2e 	andeq	r0, r0, lr, lsr #20
    17d8:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
    17dc:	6420706d 	strtvs	r7, [r0], #-109	; 0xffffff93
    17e0:	276e6469 	strbcs	r6, [lr, -r9, ror #8]!
    17e4:	616d2074 	smcvs	53764	; 0xd204
    17e8:	20686374 	rsbcs	r6, r8, r4, ror r3
    17ec:	000a7325 	andeq	r7, sl, r5, lsr #6
    17f0:	5f524143 	svcpl	0x00524143
    17f4:	4753454d 	ldrbmi	r4, [r3, -sp, asr #10]
    17f8:	00000000 	andeq	r0, r0, r0
    17fc:	636f7250 	cmnvs	pc, #80, 4
    1800:	65737365 	ldrbvs	r7, [r3, #-869]!	; 0xfffffc9b
    1804:	20612073 	rsbcs	r2, r1, r3, ror r0
    1808:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
    180c:	20656761 	rsbcs	r6, r5, r1, ror #14
    1810:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 1680 <shell+0x174>
    1814:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
    1818:	72616320 	rsbvc	r6, r1, #32, 6	; 0x80000000
    181c:	00000000 	andeq	r0, r0, r0
    1820:	676e6950 			; <UNDEFINED> instruction: 0x676e6950
    1824:	20676e69 	rsbcs	r6, r7, r9, ror #28
    1828:	20656874 	rsbcs	r6, r5, r4, ror r8
    182c:	2e726163 	rpwcssz	f6, f2, f3
    1830:	0000000a 	andeq	r0, r0, sl
    1834:	5f424f46 	svcpl	0x00424f46
    1838:	4753454d 	ldrbmi	r4, [r3, -sp, asr #10]
    183c:	4e495020 	cdpmi	0, 4, cr5, cr9, cr0, {1}
    1840:	00000a47 	andeq	r0, r0, r7, asr #20
    1844:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
    1848:	00000000 	andeq	r0, r0, r0
    184c:	676e6950 			; <UNDEFINED> instruction: 0x676e6950
    1850:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
    1854:	746f2065 	strbtvc	r2, [pc], #-101	; 185c <cmd_end_+0xcc>
    1858:	20726568 	rsbscs	r6, r2, r8, ror #10
    185c:	72616f62 	rsbvc	r6, r1, #392	; 0x188
    1860:	00000064 	andeq	r0, r0, r4, rrx
    1864:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    1868:	20676e69 	rsbcs	r6, r7, r9, ror #28
    186c:	61702061 	cmnvs	r0, r1, rrx
    1870:	72207269 	eorvc	r7, r0, #-1879048186	; 0x90000006
    1874:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1878:	0a2e7473 	beq	b9ea4c <__ROM_SIZE__+0xb5ea4c>
    187c:	00000000 	andeq	r0, r0, r0
    1880:	5f424f46 	svcpl	0x00424f46
    1884:	4753454d 	ldrbmi	r4, [r3, -sp, asr #10]
    1888:	49415020 	stmdbmi	r1, {r5, ip, lr}^
    188c:	00000a52 	andeq	r0, r0, r2, asr sl
    1890:	72696170 	rsbvc	r6, r9, #112, 2
    1894:	00000000 	andeq	r0, r0, r0
    1898:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    189c:	74207374 	strtvc	r7, [r0], #-884	; 0xfffffc8c
    18a0:	70206568 	eorvc	r6, r0, r8, ror #10
    18a4:	69726961 	ldmdbvs	r2!, {r0, r5, r6, r8, fp, sp, lr}^
    18a8:	7020676e 	eorvc	r6, r0, lr, ror #14
    18ac:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
    18b0:	77207373 			; <UNDEFINED> instruction: 0x77207373
    18b4:	20687469 	rsbcs	r7, r8, r9, ror #8
    18b8:	61632061 	cmnvs	r3, r1, rrx
    18bc:	00002e72 	andeq	r2, r0, r2, ror lr
    18c0:	6972700a 	ldmdbvs	r2!, {r1, r3, ip, sp, lr}^
    18c4:	2d66746e 	cfstrdcs	mvd7, [r6, #-440]!	; 0xfffffe48
    18c8:	6f727265 	svcvs	0x00727265
    18cc:	00000a72 	andeq	r0, r0, r2, ror sl

000018d0 <hextable>:
static char hextable[] = {'0', '1', '2', '3', '4', '5', '6', '7',
    18d0:	33323130 	teqcc	r2, #48, 2
    18d4:	37363534 			; <UNDEFINED> instruction: 0x37363534
    18d8:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    18dc:	46454443 	strbmi	r4, [r5], -r3, asr #8

000018e0 <sbox>:
static const uint8_t sbox[256] = {
    18e0:	7b777c63 	blvc	1de0a74 <__ROM_SIZE__+0x1da0a74>
    18e4:	c56f6bf2 	strbgt	r6, [pc, #-3058]!	; cfa <Cipher+0x30>
    18e8:	2b670130 	blcs	19c1db0 <__ROM_SIZE__+0x1981db0>
    18ec:	76abd7fe 			; <UNDEFINED> instruction: 0x76abd7fe
    18f0:	7dc982ca 	sfmvc	f0, 3, [r9, #808]	; 0x328
    18f4:	f04759fa 			; <UNDEFINED> instruction: 0xf04759fa
    18f8:	afa2d4ad 	svcge	0x00a2d4ad
    18fc:	c072a49c 			; <UNDEFINED> instruction: 0xc072a49c
    1900:	2693fdb7 			; <UNDEFINED> instruction: 0x2693fdb7
    1904:	ccf73f36 	ldclgt	15, cr3, [r7], #216	; 0xd8
    1908:	f1e5a534 			; <UNDEFINED> instruction: 0xf1e5a534
    190c:	1531d871 	ldrne	sp, [r1, #-2161]!	; 0xfffff78f
    1910:	c323c704 			; <UNDEFINED> instruction: 0xc323c704
    1914:	9a059618 	bls	16717c <__ROM_SIZE__+0x12717c>
    1918:	e2801207 	add	r1, r0, #1879048192	; 0x70000000
    191c:	75b227eb 	ldrvc	r2, [r2, #2027]!	; 0x7eb
    1920:	1a2c8309 	bne	b2254c <__ROM_SIZE__+0xae254c>
    1924:	a05a6e1b 	subsge	r6, sl, fp, lsl lr
    1928:	b3d63b52 	bicslt	r3, r6, #83968	; 0x14800
    192c:	842fe329 	strthi	lr, [pc], #-809	; 1934 <sbox+0x54>
    1930:	ed00d153 	stfd	f5, [r0, #-332]	; 0xfffffeb4
    1934:	5bb1fc20 	blpl	fec809bc <_STACK_TOP_+0xdec789c0>
    1938:	39becb6a 	ldmibcc	lr!, {r1, r3, r5, r6, r8, r9, fp, lr, pc}
    193c:	cf584c4a 	svcgt	0x00584c4a
    1940:	fbaaefd0 	blx	feabd88a <_STACK_TOP_+0xdeab588e>
    1944:	85334d43 	ldrhi	r4, [r3, #-3395]!	; 0xfffff2bd
    1948:	7f02f945 	svcvc	0x0002f945
    194c:	a89f3c50 	ldmge	pc, {r4, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
    1950:	8f40a351 	svchi	0x0040a351
    1954:	f5389d92 			; <UNDEFINED> instruction: 0xf5389d92
    1958:	21dab6bc 	ldrhcs	fp, [sl, #108]	; 0x6c
    195c:	d2f3ff10 	rscsle	pc, r3, #16, 30	; 0x40
    1960:	ec130ccd 	ldc	12, cr0, [r3], {205}	; 0xcd
    1964:	1744975f 	smlsldne	r9, r4, pc, r7	; <UNPREDICTABLE>
    1968:	3d7ea7c4 	ldclcc	7, cr10, [lr, #-784]!	; 0xfffffcf0
    196c:	73195d64 	tstvc	r9, #100, 26	; 0x1900
    1970:	dc4f8160 	stflep	f0, [pc], {96}	; 0x60
    1974:	88902a22 	ldmhi	r0, {r1, r5, r9, fp, sp}
    1978:	14b8ee46 	ldrtne	lr, [r8], #3654	; 0xe46
    197c:	db0b5ede 	blle	2d94fc <__ROM_SIZE__+0x2994fc>
    1980:	0a3a32e0 	beq	e8e508 <__ROM_SIZE__+0xe4e508>
    1984:	5c240649 	stcpl	6, cr0, [r4], #-292	; 0xfffffedc
    1988:	62acd3c2 	adcvs	sp, ip, #134217731	; 0x8000003
    198c:	79e49591 	stmibvc	r4!, {r0, r4, r7, r8, sl, ip, pc}^
    1990:	6d37c8e7 	ldcvs	8, cr12, [r7, #-924]!	; 0xfffffc64
    1994:	a94ed58d 	stmdbge	lr, {r0, r2, r3, r7, r8, sl, ip, lr, pc}^
    1998:	eaf4566c 	b	ffd17350 <_STACK_TOP_+0xdfd0f354>
    199c:	08ae7a65 	stmiaeq	lr!, {r0, r2, r5, r6, r9, fp, ip, sp, lr}
    19a0:	2e2578ba 	mcrcs	8, 1, r7, cr5, cr10, {5}
    19a4:	c6b4a61c 	ssatgt	sl, #21, ip, lsl #12
    19a8:	1f74dde8 	svcne	0x0074dde8
    19ac:	8a8bbd4b 	bhi	fe2f0ee0 <_STACK_TOP_+0xde2e8ee4>
    19b0:	66b53e70 			; <UNDEFINED> instruction: 0x66b53e70
    19b4:	0ef60348 	cdpeq	3, 15, cr0, cr6, cr8, {2}
    19b8:	b9573561 	ldmdblt	r7, {r0, r5, r6, r8, sl, ip, sp}^
    19bc:	9e1dc186 	mnfls<illegal precision>	f4, f6
    19c0:	1198f8e1 	orrsne	pc, r8, r1, ror #17
    19c4:	948ed969 	strls	sp, [lr], #2409	; 0x969
    19c8:	e9871e9b 	stmib	r7, {r0, r1, r3, r4, r7, r9, sl, fp, ip}
    19cc:	df2855ce 	svcle	0x002855ce
    19d0:	0d89a18c 	stfeqd	f2, [r9, #560]	; 0x230
    19d4:	6842e6bf 	stmdavs	r2, {r0, r1, r2, r3, r4, r5, r7, r9, sl, sp, lr, pc}^
    19d8:	0f2d9941 	svceq	0x002d9941
    19dc:	16bb54b0 			; <UNDEFINED> instruction: 0x16bb54b0

000019e0 <Rcon>:
static const uint8_t Rcon[11] = {
    19e0:	0402018d 	streq	r0, [r2], #-397	; 0xfffffe73
    19e4:	40201008 	eormi	r1, r0, r8
    19e8:	00361b80 	eorseq	r1, r6, r0, lsl #23

000019ec <rsbox>:
static const uint8_t rsbox[256] = {
    19ec:	d56a0952 	strble	r0, [sl, #-2386]!	; 0xfffff6ae
    19f0:	38a53630 	stmiacc	r5!, {r4, r5, r9, sl, ip, sp}
    19f4:	9ea340bf 	mcrls	0, 5, r4, cr3, cr15, {5}
    19f8:	fbd7f381 	blx	ff5fe806 <_STACK_TOP_+0xdf5f680a>
    19fc:	8239e37c 	eorshi	lr, r9, #124, 6	; 0xf0000001
    1a00:	87ff2f9b 			; <UNDEFINED> instruction: 0x87ff2f9b
    1a04:	44438e34 	strbmi	r8, [r3], #-3636	; 0xfffff1cc
    1a08:	cbe9dec4 	blgt	ffa79520 <_STACK_TOP_+0xdfa71524>
    1a0c:	32947b54 	addscc	r7, r4, #84, 22	; 0x15000
    1a10:	3d23c2a6 	sfmcc	f4, 1, [r3, #-664]!	; 0xfffffd68
    1a14:	0b954cee 	bleq	fe554dd4 <_STACK_TOP_+0xde54cdd8>
    1a18:	4ec3fa42 			; <UNDEFINED> instruction: 0x4ec3fa42
    1a1c:	66a12e08 	strtvs	r2, [r1], r8, lsl #28
    1a20:	b224d928 	eorlt	sp, r4, #40, 18	; 0xa0000
    1a24:	49a25b76 	stmibmi	r2!, {r1, r2, r4, r5, r6, r8, r9, fp, ip, lr}
    1a28:	25d18b6d 	ldrbcs	r8, [r1, #2925]	; 0xb6d
    1a2c:	64f6f872 	ldrbtvs	pc, [r6], #2162	; 0x872	; <UNPREDICTABLE>
    1a30:	16986886 	ldrne	r6, [r8], r6, lsl #17
    1a34:	cc5ca4d4 	cfldrdgt	mvd10, [ip], {212}	; 0xd4
    1a38:	92b6655d 	adcsls	r6, r6, #390070272	; 0x17400000
    1a3c:	5048706c 	subpl	r7, r8, ip, rrx
    1a40:	dab9edfd 	ble	fee7d23c <_STACK_TOP_+0xdee75240>
    1a44:	5746155e 	smlsldpl	r1, r6, lr, r5
    1a48:	849d8da7 	ldrhi	r8, [sp], #3495	; 0xda7
    1a4c:	00abd890 	umlaleq	sp, fp, r0, r8
    1a50:	0ad3bc8c 	beq	ff4f0c88 <_STACK_TOP_+0xdf4e8c8c>
    1a54:	0558e4f7 	ldrbeq	lr, [r8, #-1271]	; 0xfffffb09
    1a58:	0645b3b8 			; <UNDEFINED> instruction: 0x0645b3b8
    1a5c:	8f1e2cd0 	svchi	0x001e2cd0
    1a60:	020f3fca 	andeq	r3, pc, #808	; 0x328
    1a64:	03bdafc1 			; <UNDEFINED> instruction: 0x03bdafc1
    1a68:	6b8a1301 	blvs	fe286674 <_STACK_TOP_+0xde27e678>
    1a6c:	4111913a 	tstmi	r1, sl, lsr r1
    1a70:	eadc674f 	b	ff71b7b4 <_STACK_TOP_+0xdf7137b8>
    1a74:	cecff297 	mcrgt	2, 6, pc, cr15, cr7, {4}	; <UNPREDICTABLE>
    1a78:	73e6b4f0 	mvnvc	fp, #240, 8	; 0xf0000000
    1a7c:	2274ac96 	rsbscs	sl, r4, #38400	; 0x9600
    1a80:	8535ade7 	ldrhi	sl, [r5, #-3559]!	; 0xfffff219
    1a84:	e837f9e2 	ldmda	r7!, {r1, r5, r6, r7, r8, fp, ip, sp, lr, pc}
    1a88:	6edf751c 	mrcvs	5, 6, r7, cr15, cr12, {0}
    1a8c:	711af147 	tstvc	sl, r7, asr #2	; <UNPREDICTABLE>
    1a90:	89c5291d 	stmibhi	r5, {r0, r2, r3, r4, r8, fp, sp}^
    1a94:	0e62b76f 	cdpeq	7, 6, cr11, cr2, cr15, {3}
    1a98:	1bbe18aa 	blne	fef87d48 <_STACK_TOP_+0xdef7fd4c>
    1a9c:	4b3e56fc 	blmi	f97694 <__ROM_SIZE__+0xf57694>
    1aa0:	2079d2c6 	rsbscs	sp, r9, r6, asr #5
    1aa4:	fec0db9a 	mcr2	11, 6, sp, cr0, cr10, {4}	; <UNPREDICTABLE>
    1aa8:	f45acd78 			; <UNDEFINED> instruction: 0xf45acd78
    1aac:	33a8dd1f 			; <UNDEFINED> instruction: 0x33a8dd1f
    1ab0:	31c70788 	biccc	r0, r7, r8, lsl #15
    1ab4:	591012b1 	ldmdbpl	r0, {r0, r4, r5, r7, r9, ip}
    1ab8:	5fec8027 	svcpl	0x00ec8027
    1abc:	a97f5160 	ldmdbge	pc!, {r5, r6, r8, ip, lr}^	; <UNPREDICTABLE>
    1ac0:	0d4ab519 	cfstr64eq	mvdx11, [sl, #-100]	; 0xffffff9c
    1ac4:	9f7ae52d 	svcls	0x007ae52d
    1ac8:	ef9cc993 	svc	0x009cc993
    1acc:	4d3be0a0 	ldcmi	0, cr14, [fp, #-640]!	; 0xfffffd80
    1ad0:	b0f52aae 	rscslt	r2, r5, lr, lsr #21
    1ad4:	3cbbebc8 	vldmiacc	fp!, {d14-<overflow reg d49>}
    1ad8:	61995383 	orrsvs	r5, r9, r3, lsl #7
    1adc:	7e042b17 	vmovvc.32	d4[0], r2
    1ae0:	26d677ba 			; <UNDEFINED> instruction: 0x26d677ba
    1ae4:	631469e1 	tstvs	r4, #3686400	; 0x384000
    1ae8:	7d0c2155 	stfvcs	f2, [ip, #-340]	; 0xfffffeac
    1aec:	67617355 			; <UNDEFINED> instruction: 0x67617355
    1af0:	25203a65 	strcs	r3, [r0, #-2661]!	; 0xfffff59b
    1af4:	613c2073 	teqvs	ip, r3, ror r0
    1af8:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1afc:	203e7373 	eorscs	r7, lr, r3, ror r3
    1b00:	206e6928 	rsbcs	r6, lr, r8, lsr #18
    1b04:	29786568 	ldmdbcs	r8!, {r3, r5, r6, r8, sl, sp, lr}^
    1b08:	0000000a 	andeq	r0, r0, sl
    1b0c:	78257830 	stmdavc	r5!, {r4, r5, fp, ip, sp, lr}
    1b10:	7830203a 	ldmdavc	r0!, {r1, r3, r4, r5, sp}
    1b14:	000a7825 	andeq	r7, sl, r5, lsr #16
    1b18:	67617355 			; <UNDEFINED> instruction: 0x67617355
    1b1c:	25203a65 	strcs	r3, [r0, #-2661]!	; 0xfffff59b
    1b20:	613c2073 	teqvs	ip, r3, ror r0
    1b24:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1b28:	203e7373 	eorscs	r7, lr, r3, ror r3
    1b2c:	206e6928 	rsbcs	r6, lr, r8, lsr #18
    1b30:	29786568 	ldmdbcs	r8!, {r3, r5, r6, r8, sl, sp, lr}^
    1b34:	61763c20 	cmnvs	r6, r0, lsr #24
    1b38:	3e65756c 	cdpcc	5, 6, cr7, cr5, cr12, {3}
    1b3c:	6e692820 	cdpvs	8, 6, cr2, cr9, cr0, {1}
    1b40:	78656820 	stmdavc	r5!, {r5, fp, sp, lr}^
    1b44:	00000a29 	andeq	r0, r0, r9, lsr #20
    1b48:	67617355 			; <UNDEFINED> instruction: 0x67617355
    1b4c:	25203a65 	strcs	r3, [r0, #-2661]!	; 0xfffff59b
    1b50:	613c2073 	teqvs	ip, r3, ror r0
    1b54:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1b58:	203e7373 	eorscs	r7, lr, r3, ror r3
    1b5c:	206e6928 	rsbcs	r6, lr, r8, lsr #18
    1b60:	29786568 	ldmdbcs	r8!, {r3, r5, r6, r8, sl, sp, lr}^
    1b64:	756e3c20 	strbvc	r3, [lr, #-3104]!	; 0xfffff3e0
    1b68:	6f775f6d 	svcvs	0x00775f6d
    1b6c:	3e736472 	mrccc	4, 3, r6, cr3, cr2, {3}
    1b70:	6e692820 	cdpvs	8, 6, cr2, cr9, cr0, {1}
    1b74:	63656420 	cmnvs	r5, #32, 8	; 0x20000000
    1b78:	6c616d69 	stclvs	13, cr6, [r1], #-420	; 0xfffffe5c
    1b7c:	00000a29 	andeq	r0, r0, r9, lsr #20
    1b80:	6f727245 	svcvs	0x00727245
    1b84:	49203a72 	stmdbmi	r0!, {r1, r4, r5, r6, r9, fp, ip, sp}
    1b88:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    1b8c:	62206469 	eorvs	r6, r0, #1761607680	; 0x69000000
    1b90:	6c207469 	cfstrsvs	mvf7, [r0], #-420	; 0xfffffe5c
    1b94:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    1b98:	206e6f69 	rsbcs	r6, lr, r9, ror #30
    1b9c:	75677261 	strbvc	r7, [r7, #-609]!	; 0xfffffd9f
    1ba0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1ba4:	0000000a 	andeq	r0, r0, sl
    1ba8:	6f727245 	svcvs	0x00727245
    1bac:	49203a72 	stmdbmi	r0!, {r1, r4, r5, r6, r9, fp, ip, sp}
    1bb0:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    1bb4:	62206469 	eorvs	r6, r0, #1761607680	; 0x69000000
    1bb8:	76207469 	strtvc	r7, [r0], -r9, ror #8
    1bbc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1bc0:	67726120 	ldrbvs	r6, [r2, -r0, lsr #2]!
    1bc4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1bc8:	00000a74 	andeq	r0, r0, r4, ror sl
    1bcc:	67617355 			; <UNDEFINED> instruction: 0x67617355
    1bd0:	25203a65 	strcs	r3, [r0, #-2661]!	; 0xfffff59b
    1bd4:	613c2073 	teqvs	ip, r3, ror r0
    1bd8:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1bdc:	695f7373 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1be0:	65685f6e 	strbvs	r5, [r8, #-3950]!	; 0xfffff092
    1be4:	32332878 	eorscc	r2, r3, #120, 16	; 0x780000
    1be8:	7469622d 	strbtvc	r6, [r9], #-557	; 0xfffffdd3
    1bec:	203e2973 	eorscs	r2, lr, r3, ror r9
    1bf0:	7469623c 	strbtvc	r6, [r9], #-572	; 0xfffffdc4
    1bf4:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    1bf8:	6f697461 	svcvs	0x00697461
    1bfc:	6e695f6e 	cdpvs	15, 6, cr5, cr9, cr14, {3}
    1c00:	6365645f 	cmnvs	r5, #1593835520	; 0x5f000000
    1c04:	6c616d69 	stclvs	13, cr6, [r1], #-420	; 0xfffffe5c
    1c08:	74203028 	strtvc	r3, [r0], #-40	; 0xffffffd8
    1c0c:	3133206f 	teqcc	r3, pc, rrx
    1c10:	3c203e29 	stccc	14, cr3, [r0], #-164	; 0xffffff5c
    1c14:	5f746962 	svcpl	0x00746962
    1c18:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    1c1c:	20302865 	eorscs	r2, r0, r5, ror #16
    1c20:	3120726f 			; <UNDEFINED> instruction: 0x3120726f
    1c24:	000a3e29 	andeq	r3, sl, r9, lsr #28
    1c28:	20746942 	rsbscs	r6, r4, r2, asr #18
    1c2c:	40207525 	eormi	r7, r0, r5, lsr #10
    1c30:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
    1c34:	3a783830 	bcc	1e0fcfc <__ROM_SIZE__+0x1dcfcfc>
    1c38:	0a752520 	beq	1d4b0c0 <__ROM_SIZE__+0x1d0b0c0>
    1c3c:	00000000 	andeq	r0, r0, r0
    1c40:	67617355 			; <UNDEFINED> instruction: 0x67617355
    1c44:	25203a65 	strcs	r3, [r0, #-2661]!	; 0xfffff59b
    1c48:	613c2073 	teqvs	ip, r3, ror r0
    1c4c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1c50:	695f7373 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1c54:	65685f6e 	strbvs	r5, [r8, #-3950]!	; 0xfffff092
    1c58:	32332878 	eorscc	r2, r3, #120, 16	; 0x780000
    1c5c:	7469622d 	strbtvc	r6, [r9], #-557	; 0xfffffdd3
    1c60:	203e2973 	eorscs	r2, lr, r3, ror r9
    1c64:	7469623c 	strbtvc	r6, [r9], #-572	; 0xfffffdc4
    1c68:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    1c6c:	6f697461 	svcvs	0x00697461
    1c70:	6e695f6e 	cdpvs	15, 6, cr5, cr9, cr14, {3}
    1c74:	6365645f 	cmnvs	r5, #1593835520	; 0x5f000000
    1c78:	6c616d69 	stclvs	13, cr6, [r1], #-420	; 0xfffffe5c
    1c7c:	74203028 	strtvc	r3, [r0], #-40	; 0xffffffd8
    1c80:	3133206f 	teqcc	r3, pc, rrx
    1c84:	00000a29 	andeq	r0, r0, r9, lsr #20
    1c88:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1c8c:	00000000 	andeq	r0, r0, r0
    1c90:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1c94:	756e2073 	strbvc	r2, [lr, #-115]!	; 0xffffff8d
    1c98:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    1c9c:	20666f20 	rsbcs	r6, r6, r0, lsr #30
    1ca0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    1ca4:	72662073 	rsbvc	r2, r6, #115	; 0x73
    1ca8:	6d206d6f 	stcvs	13, cr6, [r0, #-444]!	; 0xfffffe44
    1cac:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1cb0:	00000079 	andeq	r0, r0, r9, ror r0
    1cb4:	00323377 	eorseq	r3, r2, r7, ror r3
    1cb8:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1cbc:	61207365 			; <UNDEFINED> instruction: 0x61207365
    1cc0:	20323320 	eorscs	r3, r2, r0, lsr #6
    1cc4:	20746962 	rsbscs	r6, r4, r2, ror #18
    1cc8:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    1ccc:	6f742065 	svcvs	0x00742065
    1cd0:	6d206120 	stfvss	f6, [r0, #-128]!	; 0xffffff80
    1cd4:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1cd8:	6f6c2079 	svcvs	0x006c2079
    1cdc:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    1ce0:	00006e6f 	andeq	r6, r0, pc, ror #28
    1ce4:	00323372 	eorseq	r3, r2, r2, ror r3
    1ce8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1cec:	20612073 	rsbcs	r2, r1, r3, ror r0
    1cf0:	62203233 	eorvs	r3, r0, #805306371	; 0x30000003
    1cf4:	6d207469 	cfstrsvs	mvf7, [r0, #-420]!	; 0xfffffe5c
    1cf8:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1cfc:	6f6c2079 	svcvs	0x006c2079
    1d00:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    1d04:	00006e6f 	andeq	r6, r0, pc, ror #28
    1d08:	00006272 	andeq	r6, r0, r2, ror r2
    1d0c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1d10:	20612073 	rsbcs	r2, r1, r3, ror r0
    1d14:	20746962 	rsbscs	r6, r4, r2, ror #18
    1d18:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 1b88 <rsbox+0x19c>
    1d1c:	6d656d20 	stclvs	13, cr6, [r5, #-128]!	; 0xffffff80
    1d20:	2079726f 	rsbscs	r7, r9, pc, ror #4
    1d24:	61636f6c 	cmnvs	r3, ip, ror #30
    1d28:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1d2c:	00000000 	andeq	r0, r0, r0
    1d30:	00006277 	andeq	r6, r0, r7, ror r2
    1d34:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1d38:	20612065 	rsbcs	r2, r1, r5, rrx
    1d3c:	20746962 	rsbscs	r6, r4, r2, ror #18
    1d40:	6d206f74 	stcvs	15, cr6, [r0, #-464]!	; 0xfffffe30
    1d44:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1d48:	6f6c2079 	svcvs	0x006c2079
    1d4c:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    1d50:	00006e6f 	andeq	r6, r0, pc, ror #28
    1d54:	000a7325 	andeq	r7, sl, r5, lsr #6
    1d58:	000a6425 	andeq	r6, sl, r5, lsr #8
    1d5c:	6c697542 	cfstr64vs	mvdx7, [r9], #-264	; 0xfffffef8
    1d60:	5b203a64 	blpl	8106f8 <__ROM_SIZE__+0x7d06f8>
    1d64:	61343861 	teqvs	r4, r1, ror #16
    1d68:	3a643839 	bcc	190fe54 <__ROM_SIZE__+0x18cfe54>
    1d6c:	61343861 	teqvs	r4, r1, ror #16
    1d70:	5d643839 	stclpl	8, cr3, [r4, #-228]!	; 0xffffff1c
    1d74:	5b202d20 	blpl	80d1fc <__ROM_SIZE__+0x7cd1fc>
    1d78:	61647264 	cmnvs	r4, r4, ror #4
    1d7c:	65406576 	strbvs	r6, [r0, #-1398]	; 0xfffffa8a
    1d80:	5d6d7261 	sfmpl	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1d84:	41202d20 			; <UNDEFINED> instruction: 0x41202d20
    1d88:	31207270 			; <UNDEFINED> instruction: 0x31207270
    1d8c:	30322038 	eorscc	r2, r2, r8, lsr r0
    1d90:	2d203332 	stccs	3, cr3, [r0, #-200]!	; 0xffffff38
    1d94:	3a323020 	bcc	c8de1c <__ROM_SIZE__+0xc4de1c>
    1d98:	333a3935 	teqcc	sl, #868352	; 0xd4000
    1d9c:	00000a38 	andeq	r0, r0, r8, lsr sl
    1da0:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
    1da4:	6f63203a 	svcvs	0x0063203a
    1da8:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    1dac:	6f6e2064 	svcvs	0x006e2064
    1db0:	6f662074 	svcvs	0x00662074
    1db4:	2e646e75 	mcrcs	14, 3, r6, cr4, cr5, {3}
    1db8:	65735520 	ldrbvs	r5, [r3, #-1312]!	; 0xfffffae0
    1dbc:	65682220 	strbvs	r2, [r8, #-544]!	; 0xfffffde0
    1dc0:	2022706c 	eorcs	r7, r2, ip, rrx
    1dc4:	6c206f74 	stcvs	15, cr6, [r0], #-464	; 0xfffffe30
    1dc8:	20747369 	rsbscs	r7, r4, r9, ror #6
    1dcc:	206c6c61 	rsbcs	r6, ip, r1, ror #24
    1dd0:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    1dd4:	2e646e61 	cdpcs	14, 6, cr6, cr4, cr1, {3}
    1dd8:	0000000a 	andeq	r0, r0, sl
    1ddc:	00006c2d 	andeq	r6, r0, sp, lsr #24
    1de0:	3a657375 	bcc	195ebbc <__ROM_SIZE__+0x191ebbc>
    1de4:	6c656820 	stclvs	8, cr6, [r5], #-128	; 0xffffff80
    1de8:	6c2d2070 	stcvs	0, cr2, [sp], #-448	; 0xfffffe40
    1dec:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
    1df0:	73696c20 	cmnvc	r9, #32, 24	; 0x2000
    1df4:	6e6f2074 	mcrvs	0, 3, r2, cr15, cr4, {3}
    1df8:	0a2e796c 	beq	ba03b0 <__ROM_SIZE__+0xb603b0>
    1dfc:	0000000a 	andeq	r0, r0, sl
    1e00:	0000090a 	andeq	r0, r0, sl, lsl #18
    1e04:	0000000a 	andeq	r0, r0, sl
    1e08:	00000000 	andeq	r0, r0, r0
    1e0c:	00007325 	andeq	r7, r0, r5, lsr #6
    1e10:	0073250a 	rsbseq	r2, r3, sl, lsl #10
    1e14:	00002023 	andeq	r2, r0, r3, lsr #32
    1e18:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1e1c:	00007375 	andeq	r7, r0, r5, ror r3
    1e20:	75746552 	ldrbvc	r6, [r4, #-1362]!	; 0xfffffaae
    1e24:	20736e72 	rsbscs	r6, r3, r2, ror lr
    1e28:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
    1e2c:	61747320 	cmnvs	r4, r0, lsr #6
    1e30:	20737574 	rsbscs	r7, r3, r4, ror r5
    1e34:	6c20666f 	stcvs	6, cr6, [r0], #-444	; 0xfffffe44
    1e38:	20747361 	rsbscs	r7, r4, r1, ror #6
    1e3c:	63657865 	cmnvs	r5, #6619136	; 0x650000
    1e40:	64657475 	strbtvs	r7, [r5], #-1141	; 0xfffffb8b
    1e44:	6d6f6320 	stclvs	3, cr6, [pc, #-128]!	; 1dcc <rsbox+0x3e0>
    1e48:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
    1e4c:	00000000 	andeq	r0, r0, r0
    1e50:	706c6568 	rsbvc	r6, ip, r8, ror #10
    1e54:	00000000 	andeq	r0, r0, r0
    1e58:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
    1e5c:	61207374 			; <UNDEFINED> instruction: 0x61207374
    1e60:	61206c6c 			; <UNDEFINED> instruction: 0x61206c6c
    1e64:	6c696176 	stfvse	f6, [r9], #-472	; 0xfffffe28
    1e68:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1e6c:	6d6f6320 	stclvs	3, cr6, [pc, #-128]!	; 1df4 <rsbox+0x408>
    1e70:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
    1e74:	00000073 	andeq	r0, r0, r3, ror r0
    1e78:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1e7c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1e80:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
    1e84:	64207374 	strtvs	r7, [r0], #-884	; 0xfffffc8c
    1e88:	69617465 	stmdbvs	r1!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1e8c:	6f20736c 	svcvs	0x0020736c
    1e90:	68742066 	ldmdavs	r4!, {r1, r2, r5, r6, sp}^
    1e94:	75622065 	strbvc	r2, [r2, #-101]!	; 0xffffff9b
    1e98:	00646c69 	rsbeq	r6, r4, r9, ror #24
    1e9c:	74736968 	ldrbtvc	r6, [r3], #-2408	; 0xfffff698
    1ea0:	0079726f 	rsbseq	r7, r9, pc, ror #4
    1ea4:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
    1ea8:	6d6f6320 	stclvs	3, cr6, [pc, #-128]!	; 1e30 <rsbox+0x444>
    1eac:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
    1eb0:	73696820 	cmnvc	r9, #32, 16	; 0x200000
    1eb4:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000001f7 	strdeq	r0, [r0], -r7
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000005f 	andeq	r0, r0, pc, asr r0
      10:	00000d0c 	andeq	r0, r0, ip, lsl #26
      14:	00013e00 	andeq	r3, r1, r0, lsl #28
      18:	0003c000 	andeq	ip, r3, r0
      1c:	00006400 	andeq	r6, r0, r0, lsl #8
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000053 	andeq	r0, r0, r3, asr r0
      2c:	2f050202 	svccs	0x00050202
      30:	02000001 	andeq	r0, r0, #1
      34:	011f0504 	tsteq	pc, r4, lsl #10
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	00011a05 	andeq	r1, r1, r5, lsl #20
      40:	08010200 	stmdaeq	r1, {r9}
      44:	00000051 	andeq	r0, r0, r1, asr r0
      48:	e4070202 	str	r0, [r7], #-514	; 0xfffffdfe
      4c:	02000000 	andeq	r0, r0, #0
      50:	01030704 	tsteq	r3, r4, lsl #14
      54:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      58:	0000fe07 	andeq	pc, r0, r7, lsl #28
      5c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
      60:	00746e69 	rsbseq	r6, r4, r9, ror #28
      64:	08070402 	stmdaeq	r7, {r1, sl}
      68:	02000001 	andeq	r0, r0, #1
      6c:	015f0408 	cmpeq	pc, r8, lsl #8
      70:	63040000 	movwvs	r0, #16384	; 0x4000
      74:	0200646d 	andeq	r6, r0, #1828716544	; 0x6d000000
      78:	007e0f2b 	rsbseq	r0, lr, fp, lsr #30
      7c:	04050000 	streq	r0, [r5], #-0
      80:	00000084 	andeq	r0, r0, r4, lsl #1
      84:	00005d06 	andeq	r5, r0, r6, lsl #26
      88:	00009800 	andeq	r9, r0, r0, lsl #16
      8c:	005d0700 	subseq	r0, sp, r0, lsl #14
      90:	98070000 	stmdals	r7, {}	; <UNPREDICTABLE>
      94:	00000000 	andeq	r0, r0, r0
      98:	009e0405 	addseq	r0, lr, r5, lsl #8
      9c:	04050000 	streq	r0, [r5], #-0
      a0:	000000a4 	andeq	r0, r0, r4, lsr #1
      a4:	5a080102 	bpl	2004b4 <__ROM_SIZE__+0x1c04b4>
      a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      ac:	000000a4 	andeq	r0, r0, r4, lsr #1
      b0:	34020c09 	strcc	r0, [r2], #-3081	; 0xfffff3f7
      b4:	0000e109 	andeq	lr, r0, r9, lsl #2
      b8:	00370a00 	eorseq	r0, r7, r0, lsl #20
      bc:	35020000 	strcc	r0, [r2, #-0]
      c0:	0000e10f 	andeq	lr, r0, pc, lsl #2
      c4:	000a0000 	andeq	r0, sl, r0
      c8:	02000000 	andeq	r0, r0, #0
      cc:	00e10f36 	rsceq	r0, r1, r6, lsr pc
      d0:	0a040000 	beq	1000d8 <__ROM_SIZE__+0xc00d8>
      d4:	0000002f 	andeq	r0, r0, pc, lsr #32
      d8:	72073702 	andvc	r3, r7, #524288	; 0x80000
      dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      e0:	ab040500 	blge	1014e8 <__ROM_SIZE__+0xc14e8>
      e4:	0b000000 	bleq	ec <vector_table+0xec>
      e8:	00000159 	andeq	r0, r0, r9, asr r1
      ec:	b0033802 	andlt	r3, r3, r2, lsl #16
      f0:	0c000000 	stceq	0, cr0, [r0], {-0}
      f4:	00000044 	andeq	r0, r0, r4, asr #32
      f8:	e7011b01 	str	r1, [r1, -r1, lsl #22]
      fc:	05000000 	streq	r0, [r0, #-0]
     100:	00170003 	andseq	r0, r7, r3
     104:	00480d00 	subeq	r0, r8, r0, lsl #26
     108:	05010000 	streq	r0, [r1, #-0]
     10c:	00005d05 	andeq	r5, r0, r5, lsl #26
     110:	0003c000 	andeq	ip, r3, r0
     114:	00006400 	andeq	r6, r0, r0, lsl #8
     118:	e29c0100 	adds	r0, ip, #0, 2
     11c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     120:	00000115 	andeq	r0, r0, r5, lsl r1
     124:	5d120501 	cfldr32pl	mvfx0, [r2, #-4]
     128:	04000000 	streq	r0, [r0], #-0
     12c:	00000000 	andeq	r0, r0, r0
     130:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     134:	00000139 	andeq	r0, r0, r9, lsr r1
     138:	981f0501 	ldmdals	pc, {r0, r8, sl}	; <UNPREDICTABLE>
     13c:	26000000 	strcs	r0, [r0], -r0
     140:	22000000 	andcs	r0, r0, #0
     144:	0f000000 	svceq	0x00000000
     148:	00727463 	rsbseq	r7, r2, r3, ror #8
     14c:	5d090601 	stcpl	6, cr0, [r9, #-4]
     150:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     154:	44000000 	strmi	r0, [r0], #-0
     158:	10000000 	andne	r0, r0, r0
     15c:	000003cc 	andeq	r0, r0, ip, asr #7
     160:	000001e2 	andeq	r0, r0, r2, ror #3
     164:	00000172 	andeq	r0, r0, r2, ror r1
     168:	05500111 	ldrbeq	r0, [r0, #-273]	; 0xfffffeef
     16c:	00179c03 	andseq	r9, r7, r3, lsl #24
     170:	da100000 	ble	400178 <__ROM_SIZE__+0x3c0178>
     174:	e2000003 	and	r0, r0, #3
     178:	89000001 	stmdbhi	r0, {r0}
     17c:	11000001 	tstne	r0, r1
     180:	03055001 	movweq	r5, #20481	; 0x5001
     184:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
     188:	03e61000 	mvneq	r1, #0
     18c:	01e20000 	mvneq	r0, r0
     190:	01a00000 	moveq	r0, r0
     194:	01110000 	tsteq	r1, r0
     198:	08030550 	stmdaeq	r3, {r4, r6, r8, sl}
     19c:	0000001b 	andeq	r0, r0, fp, lsl r0
     1a0:	0003f610 	andeq	pc, r3, r0, lsl r6	; <UNPREDICTABLE>
     1a4:	0001ee00 	andeq	lr, r1, r0, lsl #28
     1a8:	0001b700 	andeq	fp, r1, r0, lsl #14
     1ac:	51011100 	mrspl	r1, (UNDEF: 17)
     1b0:	17b80305 	ldrne	r0, [r8, r5, lsl #6]!
     1b4:	10000000 	andne	r0, r0, r0
     1b8:	000003fe 	strdeq	r0, [r0], -lr
     1bc:	000001e2 	andeq	r0, r0, r2, ror #3
     1c0:	000001ce 	andeq	r0, r0, lr, asr #3
     1c4:	05500111 	ldrbeq	r0, [r0, #-273]	; 0xfffffeef
     1c8:	0017c403 	andseq	ip, r7, r3, lsl #8
     1cc:	08120000 	ldmdaeq	r2, {}	; <UNPREDICTABLE>
     1d0:	e2000004 	and	r0, r0, #4
     1d4:	11000001 	tstne	r0, r1
     1d8:	03055001 	movweq	r5, #20481	; 0x5001
     1dc:	000017d8 	ldrdeq	r1, [r0], -r8
     1e0:	28130000 	ldmdacs	r3, {}	; <UNPREDICTABLE>
     1e4:	28000001 	stmdacs	r0, {r0}
     1e8:	03000001 	movweq	r0, #1
     1ec:	f713052c 			; <UNDEFINED> instruction: 0xf713052c
     1f0:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
     1f4:	04000000 	streq	r0, [r0], #-0
     1f8:	87000527 	strhi	r0, [r0, -r7, lsr #10]
     1fc:	04000001 	streq	r0, [r0], #-1
     200:	00011a00 	andeq	r1, r1, r0, lsl #20
     204:	5f010400 	svcpl	0x00010400
     208:	0c000000 	stceq	0, cr0, [r0], {-0}
     20c:	0000017c 	andeq	r0, r0, ip, ror r1
     210:	0000013e 	andeq	r0, r0, lr, lsr r1
     214:	00000424 	andeq	r0, r0, r4, lsr #8
     218:	0000001c 	andeq	r0, r0, ip, lsl r0
     21c:	00000134 	andeq	r0, r0, r4, lsr r1
     220:	53060102 	movwpl	r0, #24834	; 0x6102
     224:	02000000 	andeq	r0, r0, #0
     228:	012f0502 			; <UNDEFINED> instruction: 0x012f0502
     22c:	04020000 	streq	r0, [r2], #-0
     230:	00011f05 	andeq	r1, r1, r5, lsl #30
     234:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     238:	0000011a 	andeq	r0, r0, sl, lsl r1
     23c:	51080102 	tstpl	r8, r2, lsl #2
     240:	02000000 	andeq	r0, r0, #0
     244:	00e40702 	rsceq	r0, r4, r2, lsl #14
     248:	04020000 	streq	r0, [r2], #-0
     24c:	00010307 	andeq	r0, r1, r7, lsl #6
     250:	07080200 	streq	r0, [r8, -r0, lsl #4]
     254:	000000fe 	strdeq	r0, [r0], -lr
     258:	69050403 	stmdbvs	r5, {r0, r1, sl}
     25c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     260:	01080704 	tsteq	r8, r4, lsl #14
     264:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     268:	00015f04 	andeq	r5, r1, r4, lsl #30
     26c:	6d630400 	cfstrdvs	mvd0, [r3, #-0]
     270:	2b020064 	blcs	80408 <__ROM_SIZE__+0x40408>
     274:	00007e0f 	andeq	r7, r0, pc, lsl #28
     278:	84040500 	strhi	r0, [r4], #-1280	; 0xfffffb00
     27c:	06000000 	streq	r0, [r0], -r0
     280:	0000005d 	andeq	r0, r0, sp, asr r0
     284:	00000098 	muleq	r0, r8, r0
     288:	00005d07 	andeq	r5, r0, r7, lsl #26
     28c:	00980700 	addseq	r0, r8, r0, lsl #14
     290:	05000000 	streq	r0, [r0, #-0]
     294:	00009e04 	andeq	r9, r0, r4, lsl #28
     298:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
     29c:	02000000 	andeq	r0, r0, #0
     2a0:	005a0801 	subseq	r0, sl, r1, lsl #16
     2a4:	a4080000 	strge	r0, [r8], #-0
     2a8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     2ac:	0934020c 	ldmdbeq	r4!, {r2, r3, r9}
     2b0:	000000e1 	andeq	r0, r0, r1, ror #1
     2b4:	0000370a 	andeq	r3, r0, sl, lsl #14
     2b8:	0f350200 	svceq	0x00350200
     2bc:	000000e1 	andeq	r0, r0, r1, ror #1
     2c0:	00000a00 	andeq	r0, r0, r0, lsl #20
     2c4:	36020000 	strcc	r0, [r2], -r0
     2c8:	0000e10f 	andeq	lr, r0, pc, lsl #2
     2cc:	2f0a0400 	svccs	0x000a0400
     2d0:	02000000 	andeq	r0, r0, #0
     2d4:	00720737 	rsbseq	r0, r2, r7, lsr r7
     2d8:	00080000 	andeq	r0, r8, r0
     2dc:	00ab0405 	adceq	r0, fp, r5, lsl #8
     2e0:	590b0000 	stmdbpl	fp, {}	; <UNPREDICTABLE>
     2e4:	02000001 	andeq	r0, r0, #1
     2e8:	00b00338 	adcseq	r0, r0, r8, lsr r3
     2ec:	6b0c0000 	blvs	3002f4 <__ROM_SIZE__+0x2c02f4>
     2f0:	01000001 	tsteq	r0, r1
     2f4:	00e7010c 	rsceq	r0, r7, ip, lsl #2
     2f8:	03050000 	movweq	r0, #20480	; 0x5000
     2fc:	0000170c 	andeq	r1, r0, ip, lsl #14
     300:	00016f0d 	andeq	r6, r1, sp, lsl #30
     304:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
     308:	0000005d 	andeq	r0, r0, sp, asr r0
     30c:	00000424 	andeq	r0, r0, r4, lsr #8
     310:	0000001c 	andeq	r0, r0, ip, lsl r0
     314:	01729c01 	cmneq	r2, r1, lsl #24
     318:	150e0000 	strne	r0, [lr, #-0]
     31c:	01000001 	tsteq	r0, r1
     320:	005d0e05 	subseq	r0, sp, r5, lsl #28
     324:	006b0000 	rsbeq	r0, fp, r0
     328:	00670000 	rsbeq	r0, r7, r0
     32c:	390e0000 	stmdbcc	lr, {}	; <UNPREDICTABLE>
     330:	01000001 	tsteq	r0, r1
     334:	00981b05 	addseq	r1, r8, r5, lsl #22
     338:	00900000 	addseq	r0, r0, r0
     33c:	008c0000 	addeq	r0, ip, r0
     340:	2c0f0000 	stccs	0, cr0, [pc], {-0}
     344:	72000004 	andvc	r0, r0, #4
     348:	5e000001 	cdppl	0, 0, cr0, cr0, cr1, {0}
     34c:	10000001 	andne	r0, r0, r1
     350:	03055001 	movweq	r5, #20481	; 0x5001
     354:	00001820 	andeq	r1, r0, r0, lsr #16
     358:	04321100 	ldrteq	r1, [r2], #-256	; 0xffffff00
     35c:	017e0000 	cmneq	lr, r0
     360:	01100000 	tsteq	r0, r0
     364:	34030550 	strcc	r0, [r3], #-1360	; 0xfffffab0
     368:	00000018 	andeq	r0, r0, r8, lsl r0
     36c:	01281200 			; <UNDEFINED> instruction: 0x01281200
     370:	01280000 			; <UNDEFINED> instruction: 0x01280000
     374:	2c030000 	stccs	0, cr0, [r3], {-0}
     378:	01741205 	cmneq	r4, r5, lsl #4
     37c:	01740000 	cmneq	r4, r0
     380:	2d030000 	stccs	0, cr0, [r3, #-0]
     384:	01870005 	orreq	r0, r7, r5
     388:	00040000 	andeq	r0, r4, r0
     38c:	00000220 	andeq	r0, r0, r0, lsr #4
     390:	005f0104 	subseq	r0, pc, r4, lsl #2
     394:	a70c0000 	strge	r0, [ip, -r0]
     398:	3e000001 	cdpcc	0, 0, cr0, cr0, cr1, {0}
     39c:	40000001 	andmi	r0, r0, r1
     3a0:	1c000004 	stcne	0, cr0, [r0], {4}
     3a4:	ec000000 	stc	0, cr0, [r0], {-0}
     3a8:	02000001 	andeq	r0, r0, #1
     3ac:	00530601 	subseq	r0, r3, r1, lsl #12
     3b0:	02020000 	andeq	r0, r2, #0
     3b4:	00012f05 	andeq	r2, r1, r5, lsl #30
     3b8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     3bc:	0000011f 	andeq	r0, r0, pc, lsl r1
int car_mesg(int argc, char** argv) {
     3c0:	1a050802 	bne	1423d0 <__ROM_SIZE__+0x1023d0>
     3c4:	02000001 	andeq	r0, r0, #1
    printf("Received the message:");
     3c8:	00510801 	subseq	r0, r1, r1, lsl #16
    for (ctr = 1; ctr < argc; ctr++) {
     3cc:	02020000 	andeq	r0, r2, #0
        printf(" %s", argv[ctr]);
     3d0:	0000e407 	andeq	lr, r0, r7, lsl #8
     3d4:	07040200 	streq	r0, [r4, -r0, lsl #4]
     3d8:	00000103 	andeq	r0, r0, r3, lsl #2
    for (ctr = 1; ctr < argc; ctr++) {
     3dc:	fe070802 	vcmla.f16	d0, d7, d2[0], #0
    printf("\n");
     3e0:	03000000 	movweq	r0, #0
     3e4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    if (argc > 0) {
     3e8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
}
     3ec:	00010807 	andeq	r0, r1, r7, lsl #16
        if (strcmp(argv[1], "PING_REPLY") == 0) {
     3f0:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
     3f4:	0000015f 	andeq	r0, r0, pc, asr r1
            printf("Got a ping reply.\n");
     3f8:	646d6304 	strbtvs	r6, [sp], #-772	; 0xfffffcfc
     3fc:	0f2b0200 	svceq	0x002b0200
            printf("strcmp didn't match %s\n", argv[1]);
     400:	0000007e 	andeq	r0, r0, lr, ror r0
     404:	00840405 	addeq	r0, r4, r5, lsl #8
     408:	5d060000 	stcpl	0, cr0, [r6, #-0]
     40c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     410:	07000000 	streq	r0, [r0, -r0]
     414:	0000005d 	andeq	r0, r0, sp, asr r0
     418:	00009807 	andeq	r9, r0, r7, lsl #16
     41c:	04050000 	streq	r0, [r5], #-0
     420:	0000009e 	muleq	r0, lr, r0
int ping(int argc, char** argv) {
     424:	00a40405 	adceq	r0, r4, r5, lsl #8
    printf("Pinging the car.\n");
     428:	01020000 	mrseq	r0, (UNDEF: 2)
    printf2("FOB_MESG PING\n");
     42c:	00005a08 	andeq	r5, r0, r8, lsl #20
     430:	00a40800 	adceq	r0, r4, r0, lsl #16
}
     434:	0c090000 	stceq	0, cr0, [r9], {-0}
     438:	e1093402 	tst	r9, r2, lsl #8
     43c:	0a000000 	beq	444 <pair+0x4>
int pair(int argc, char** argv) {
     440:	00000037 	andeq	r0, r0, r7, lsr r0
    printf("Sending a pair request.\n");
     444:	e10f3502 	tst	pc, r2, lsl #10
    printf2("FOB_MESG PAIR\n");
     448:	00000000 	andeq	r0, r0, r0
     44c:	0000000a 	andeq	r0, r0, sl
}
     450:	0f360200 	svceq	0x00360200
     454:	000000e1 	andeq	r0, r0, r1, ror #1
     458:	002f0a04 	eoreq	r0, pc, r4, lsl #20
void uputc(char c) {
     45c:	37020000 	strcc	r0, [r2, -r0]
  while ((UARTFR >> 5) & 1)
     460:	00007207 	andeq	r7, r0, r7, lsl #4
     464:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
  UART_DR = c;
     468:	0000ab04 	andeq	sl, r0, r4, lsl #22
  if (c == '\n')
     46c:	01590b00 	cmpeq	r9, r0, lsl #22
}
     470:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    uputc('\r');
     474:	0000b003 	andeq	fp, r0, r3
}
     478:	019e0c00 	orrseq	r0, lr, r0, lsl #24
     47c:	0c010000 	stceq	0, cr0, [r1], {-0}
  if (!((UARTFR >> 4) & 1)) return UART_DR;
     480:	0000e701 	andeq	lr, r0, r1, lsl #14
     484:	18030500 	stmdane	r3, {r8, sl}
     488:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
     48c:	000001a2 	andeq	r0, r0, r2, lsr #3
  return -1;
     490:	5d050501 	cfstr32pl	mvfx0, [r5, #-4]
}
     494:	40000000 	andmi	r0, r0, r0
     498:	1c000004 	stcne	0, cr0, [r0], {4}
  UARTCTL = 0;
     49c:	01000000 	mrseq	r0, (UNDEF: 0)
     4a0:	0001729c 	muleq	r1, ip, r2
  UARTIBRD = 8;
     4a4:	01150e00 	tsteq	r5, r0, lsl #28
  UARTFBRD = 44;
     4a8:	05010000 	streq	r0, [r1, #-0]
  UARTCC = 0;
     4ac:	00005d0e 	andeq	r5, r0, lr, lsl #26
  UARTLCRH = 0x60;
     4b0:	0000b500 	andeq	fp, r0, r0, lsl #10
  UARTCTL = 0x301;
     4b4:	0000b100 	andeq	fp, r0, r0, lsl #2
}
     4b8:	01390e00 	teqeq	r9, r0, lsl #28
     4bc:	05010000 	streq	r0, [r1, #-0]
void u2putc(char c) {
     4c0:	0000981b 	andeq	r9, r0, fp, lsl r8
  while ((UART2FR >> 5) & 1)
     4c4:	0000da00 	andeq	sp, r0, r0, lsl #20
     4c8:	0000d600 	andeq	sp, r0, r0, lsl #12
  UART2_DR = c;
     4cc:	04480f00 	strbeq	r0, [r8], #-3840	; 0xfffff100
  if (c == '\n')
     4d0:	01720000 	cmneq	r2, r0
}
     4d4:	015e0000 	cmpeq	lr, r0
    u2putc('\r');
     4d8:	01100000 	tsteq	r0, r0
}
     4dc:	64030550 	strvs	r0, [r3], #-1360	; 0xfffffab0
     4e0:	00000018 	andeq	r0, r0, r8, lsl r0
  if (!((UART2FR >> 4) & 1)) return UART2_DR;
     4e4:	00044e11 	andeq	r4, r4, r1, lsl lr
     4e8:	00017e00 	andeq	r7, r1, r0, lsl #28
     4ec:	50011000 	andpl	r1, r1, r0
     4f0:	18800305 	stmne	r0, {r0, r2, r8, r9}
  return -1;
     4f4:	00000000 	andeq	r0, r0, r0
}
     4f8:	00012812 	andeq	r2, r1, r2, lsl r8
     4fc:	00012800 	andeq	r2, r1, r0, lsl #16
  UART2CTL = 0;
     500:	052c0300 	streq	r0, [ip, #-768]!	; 0xfffffd00
     504:	00017412 	andeq	r7, r1, r2, lsl r4
  UART2IBRD = 8;
     508:	00017400 	andeq	r7, r1, r0, lsl #8
  UART2FBRD = 44;
     50c:	052d0300 	streq	r0, [sp, #-768]!	; 0xfffffd00
  UART2CC = 0;
     510:	00009000 	andeq	r9, r0, r0
  UART2LCRH = 0x60;
     514:	26000400 	strcs	r0, [r0], -r0, lsl #8
  UART2CTL = 0x301;
     518:	04000003 	streq	r0, [r0], #-3
}
     51c:	00005f01 	andeq	r5, r0, r1, lsl #30
     520:	01d30c00 	bicseq	r0, r3, r0, lsl #24
  RCGCUART |= 3;
     524:	013e0000 	teqeq	lr, r0
     528:	045c0000 	ldrbeq	r0, [ip], #-0
     52c:	00640000 	rsbeq	r0, r4, r0
     530:	02a40000 	adceq	r0, r4, #0
  RCGCGPIO |= 3;
     534:	c9020000 	stmdbgt	r2, {}	; <UNPREDICTABLE>
     538:	01000001 	tsteq	r0, r1
     53c:	049c0622 	ldreq	r0, [ip], #1570	; 0x622
  GPIODEN = 0x03;
     540:	00240000 	eoreq	r0, r4, r0
     544:	9c010000 	stcls	0, cr0, [r1], {-0}
  GPIOAFSEL = 0x03;
     548:	00020303 	andeq	r0, r2, r3, lsl #6
  GPIOPCTL |= 0x00000011;
     54c:	051c0100 	ldreq	r0, [ip, #-256]	; 0xffffff00
     550:	0000004d 	andeq	r0, r0, sp, asr #32
     554:	00000480 	andeq	r0, r0, r0, lsl #9
  GPIODEN2 = 0x03;
     558:	0000001c 	andeq	r0, r0, ip, lsl r0
     55c:	04049c01 	streq	r9, [r4], #-3073	; 0xfffff3ff
  GPIOAFSEL2 = 0x03;
     560:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
  GPIOPCTL2 |= 0x00000011;
     564:	02090500 	andeq	r0, r9, #0, 10
     568:	13010000 	movwne	r0, #4096	; 0x1000
     56c:	00045c06 	andeq	r5, r4, r6, lsl #24
}
     570:	00002400 	andeq	r2, r0, r0, lsl #8
     574:	8c9c0100 	ldfhis	f0, [ip], {0}
void platform_init() {
     578:	06000000 	streq	r0, [r0], -r0
    pin_setup();
     57c:	13010063 	movwne	r0, #4195	; 0x1063
    uart_init();
     580:	00008c11 	andeq	r8, r0, r1, lsl ip
    uart2_init();
     584:	00010300 	andeq	r0, r1, r0, lsl #6
    set_read_char(ugetc);
     588:	0000fb00 	andeq	pc, r0, r0, lsl #22
    set_read_char2(u2getc);
     58c:	04780700 	ldrbteq	r0, [r8], #-1792	; 0xfffff900
     590:	00540000 	subseq	r0, r4, r0
    set_write_char(uputc);
     594:	01080000 	mrseq	r0, (UNDEF: 8)
    set_write_char2(u2putc);
     598:	003d0150 	eorseq	r0, sp, r0, asr r1
     59c:	08010900 	stmdaeq	r1, {r8, fp}
}
     5a0:	0000005a 	andeq	r0, r0, sl, asr r0
     5a4:	00009000 	andeq	r9, r0, r0
     5a8:	cd000400 	cfstrsgt	mvf0, [r0, #-0]
     5ac:	04000003 	streq	r0, [r0], #-3
     5b0:	00005f01 	andeq	r5, r0, r1, lsl #30
  selected_mode = mode;
     5b4:	020f0c00 	andeq	r0, pc, #0, 24
  if (selected_mode == NONE) {
     5b8:	013e0000 	teqeq	lr, r0
  out_buf_rgn.addr = addr;
     5bc:	04c00000 	strbeq	r0, [r0], #0
  out_buf_rgn.size = size / 2;
     5c0:	00640000 	rsbeq	r0, r4, r0
  out_buf_rgn.curr_index = 0;
     5c4:	03a20000 			; <UNDEFINED> instruction: 0x03a20000
  inp_buf_rgn.addr = addr + size / 2;
     5c8:	40020000 	andmi	r0, r2, r0
  inp_buf_rgn.curr_index = 0;
     5cc:	01000002 	tsteq	r0, r2
  if (!(selected_mode & INP)) {
     5d0:	05000622 	streq	r0, [r0, #-1570]	; 0xfffff9de
    out_buf_rgn.size = size;
     5d4:	00240000 	eoreq	r0, r4, r0
  memset(addr, 0, size);
     5d8:	9c010000 	stcls	0, cr0, [r1], {-0}
     5dc:	00025203 	andeq	r5, r2, r3, lsl #4
  } else if (!(selected_mode & OUT)) {
     5e0:	051c0100 	ldreq	r0, [ip, #-256]	; 0xffffff00
     5e4:	0000004d 	andeq	r0, r0, sp, asr #32
    inp_buf_rgn.addr = addr;
     5e8:	000004e4 	andeq	r0, r0, r4, ror #9
    inp_buf_rgn.size = size;
     5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     5f0:	04049c01 	streq	r9, [r4], #-3073	; 0xfffff3ff
  if (!(selected_mode & INP)) {
     5f4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     5f8:	024b0500 	subeq	r0, fp, #0, 10
     5fc:	13010000 	movwne	r0, #4096	; 0x1000
  if (inp_buf_rgn.addr[inp_buf_rgn.curr_index] == 0) {
     600:	0004c006 	andeq	ip, r4, r6
     604:	00002400 	andeq	r2, r0, r0, lsl #8
  int val = inp_buf_rgn.addr[inp_buf_rgn.curr_index];
     608:	8c9c0100 	ldfhis	f0, [ip], {0}
  inp_buf_rgn.addr[inp_buf_rgn.curr_index] = 0;
     60c:	06000000 	streq	r0, [r0], -r0
  inp_buf_rgn.curr_index++;
     610:	13010063 	movwne	r0, #4195	; 0x1063
     614:	00008c12 	andeq	r8, r0, r2, lsl ip
  if (inp_buf_rgn.curr_index == inp_buf_rgn.size) {
     618:	00014500 	andeq	r4, r1, r0, lsl #10
}
     61c:	00013d00 	andeq	r3, r1, r0, lsl #26
    inp_buf_rgn.curr_index = 0;
     620:	04dc0700 	ldrbeq	r0, [ip], #1792	; 0x700
    return -1;
     624:	00540000 	subseq	r0, r4, r0
     628:	01080000 	mrseq	r0, (UNDEF: 8)
    return -1;
     62c:	003d0150 	eorseq	r0, sp, r0, asr r1
     630:	08010900 	stmdaeq	r1, {r8, fp}
  if (!(selected_mode & OUT) || c == 0) {
     634:	0000005a 	andeq	r0, r0, sl, asr r0
     638:	00012600 	andeq	r2, r1, r0, lsl #12
     63c:	74000400 	strvc	r0, [r0], #-1024	; 0xfffffc00
  out_buf_rgn.addr[out_buf_rgn.curr_index] = (uint8_t) c;
     640:	04000004 	streq	r0, [r0], #-4
     644:	00005f01 	andeq	r5, r0, r1, lsl #30
  out_buf_rgn.curr_index++;
     648:	02910c00 	addseq	r0, r1, #0, 24
  if (out_buf_rgn.curr_index == out_buf_rgn.size) {
     64c:	013e0000 	teqeq	lr, r0
     650:	05240000 	streq	r0, [r4, #-0]!
    out_buf_rgn.curr_index = 0;
     654:	008c0000 	addeq	r0, ip, r0
     658:	04a10000 	strteq	r0, [r1], #0
     65c:	01020000 	mrseq	r0, (UNDEF: 2)
static void outstr(const char *str) {
     660:	00005306 	andeq	r5, r0, r6, lsl #6
  while (*str != '\0') {
     664:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    __write_char__(*str);
     668:	0000012f 	andeq	r0, r0, pc, lsr #2
    str++;
     66c:	1f050402 	svcne	0x00050402
  while (*str != '\0') {
     670:	02000001 	andeq	r0, r0, #1
}
     674:	011a0508 	tsteq	sl, r8, lsl #10
     678:	01020000 	mrseq	r0, (UNDEF: 2)
static bool printf_numbers(const char fmt, va_list *args, int l_count) {
     67c:	00005108 	andeq	r5, r0, r8, lsl #2
     680:	07020200 	streq	r0, [r2, -r0, lsl #4]
  switch (fmt) {
     684:	000000e4 	andeq	r0, r0, r4, ror #1
     688:	03070402 	movweq	r0, #29698	; 0x7402
     68c:	02000001 	andeq	r0, r0, #1
      if (l_count == 0) {
     690:	00fe0708 	rscseq	r0, lr, r8, lsl #14
     694:	04030000 	streq	r0, [r3], #-0
        value = va_arg(*args, unsigned int);
     698:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     69c:	07040200 	streq	r0, [r4, -r0, lsl #4]
      if (fmt == 'u') {
     6a0:	00000108 	andeq	r0, r0, r8, lsl #2
        if (value == 0) {
     6a4:	5f040802 	svcpl	0x00040802
          __write_char__(hextable[0]);
     6a8:	02000001 	andeq	r0, r0, #1
     6ac:	005a0801 	subseq	r0, sl, r1, lsl #16
  return true;
     6b0:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
  switch (fmt) {
     6b4:	01000002 	tsteq	r0, r2
      outstr("\nprintf-error\n");
     6b8:	05780638 	ldrbeq	r0, [r8, #-1592]!	; 0xfffff9c8
      return false;
     6bc:	00380000 	eorseq	r0, r8, r0
}
     6c0:	9c010000 	stcls	0, cr0, [r1], {-0}
      if (l_count == 0) {
     6c4:	000000cf 	andeq	r0, r0, pc, asr #1
        value = va_arg(*args, int);
     6c8:	00057e05 	andeq	r7, r5, r5, lsl #28
     6cc:	0000cf00 	andeq	ip, r0, r0, lsl #30
      if (value < 0) {
     6d0:	05820500 	streq	r0, [r2, #1280]	; 0x500
        num[num_len++] = hextable[value % 10];
     6d4:	00e10000 	rsceq	r0, r1, r0
     6d8:	86050000 	strhi	r0, [r5], -r0
     6dc:	ed000005 	stc	0, cr0, [r0, #-20]	; 0xffffffec
     6e0:	05000000 	streq	r0, [r0, #-0]
     6e4:	0000058c 	andeq	r0, r0, ip, lsl #11
     6e8:	000000f9 	strdeq	r0, [r0], -r9
     6ec:	00059205 	andeq	r9, r5, r5, lsl #4
     6f0:	00010500 	andeq	r0, r1, r0, lsl #10
     6f4:	05980500 	ldreq	r0, [r8, #1280]	; 0x500
        value = value / 10;
     6f8:	01110000 	tsteq	r1, r0
      } while (value > 0);
     6fc:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
     700:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
        __write_char__('-');
     704:	00000001 	andeq	r0, r0, r1
     708:	00025906 	andeq	r5, r2, r6, lsl #18
        value = -value;
     70c:	06220100 	strteq	r0, [r2], -r0, lsl #2
        __write_char__(num[--num_len]);
     710:	00000524 	andeq	r0, r0, r4, lsr #10
     714:	00000054 	andeq	r0, r0, r4, asr r0
     718:	c9079c01 	stmdbgt	r7, {r0, sl, fp, ip, pc}
     71c:	c9000001 	stmdbgt	r0, {r0}
     720:	02000001 	andeq	r0, r0, #1
      while (num_len > 0) {
     724:	4007062f 	andmi	r0, r7, pc, lsr #12
  return true;
     728:	40000002 	andmi	r0, r0, r2
          num[num_len++] = hextable[value % 10];
     72c:	03000002 	movweq	r0, #2
     730:	c007062f 	andgt	r0, r7, pc, lsr #12
     734:	c0000002 	andgt	r0, r0, r2
     738:	04000002 	streq	r0, [r0], #-2
     73c:	73070666 	movwvc	r0, #30310	; 0x7666
     740:	73000002 	movwvc	r0, #2
     744:	04000002 	streq	r0, [r0], #-2
     748:	82070667 	andhi	r0, r7, #108003328	; 0x6700000
          value = value / 10;
     74c:	82000002 	andhi	r0, r0, #2
        } while (value > 0);
     750:	04000002 	streq	r0, [r0], #-2
        while (num_len > 0) {
     754:	63070673 	movwvs	r0, #30323	; 0x7673
          __write_char__(num[--num_len]);
     758:	63000002 	movwvs	r0, #2
     75c:	04000002 	streq	r0, [r0], #-2
     760:	b4000674 	strlt	r0, [r0], #-1652	; 0xfffff98c
     764:	04000000 	streq	r0, [r0], #-0
     768:	0004f000 	andeq	pc, r4, r0
     76c:	5f010400 	svcpl	0x00010400
  return true;
     770:	0c000000 	stceq	0, cr0, [r0], {-0}
              __write_char__(hextable[val]);
     774:	000002f8 	strdeq	r0, [r0], -r8
     778:	0000013e 	andeq	r0, r0, lr, lsr r1
              leading_zero_ignored = true;
     77c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
          while (start_bit >= 0) {
     780:	00000002 	andeq	r0, r0, r2
            int val = (value >> start_bit) & 0xF;
     784:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
            if (val || leading_zero_ignored) {
     788:	53060102 	movwpl	r0, #24834	; 0x6102
     78c:	02000000 	andeq	r0, r0, #0
     790:	012f0502 			; <UNDEFINED> instruction: 0x012f0502
          bool leading_zero_ignored = false;
     794:	04020000 	streq	r0, [r2], #-0
          int start_bit = LAST_NIBBLE_FIRST_BIT;
     798:	00011f05 	andeq	r1, r1, r5, lsl #30
  return true;
     79c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
        return false;
     7a0:	0000011a 	andeq	r0, r0, sl, lsl r1
        return false;
     7a4:	51080102 	tstpl	r8, r2, lsl #2
     7a8:	02000000 	andeq	r0, r0, #0
     7ac:	00e40702 	rsceq	r0, r4, r2, lsl #14
     7b0:	2b030000 	blcs	c07b8 <__ROM_SIZE__+0x807b8>
     7b4:	02000003 	andeq	r0, r0, #3
     7b8:	005b1934 	subseq	r1, fp, r4, lsr r9
int printf(const char *fmt, ...) {
     7bc:	04020000 	streq	r0, [r2], #-0
     7c0:	00010307 	andeq	r0, r1, r7, lsl #6
     7c4:	07080200 	streq	r0, [r8, -r0, lsl #4]
  va_start(args, fmt);
     7c8:	000000fe 	strdeq	r0, [r0], -lr
  while (*fmt) {
     7cc:	69050404 	stmdbvs	r5, {r2, sl}
        if (*fmt == '%') {
     7d0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
        __write_char__(*fmt);
     7d4:	01080704 	tsteq	r8, r4, lsl #14
        fmt++;
     7d8:	ec050000 	stc	0, cr0, [r5], {-0}
  while (*fmt) {
     7dc:	01000002 	tsteq	r0, r2
    switch (state) {
     7e0:	00690c14 	rsbeq	r0, r9, r4, lsl ip
     7e4:	4f060000 	svcmi	0x00060000
          fmt++;
     7e8:	93000000 	movwls	r0, #0
          continue;
     7ec:	07000000 	streq	r0, [r0, -r0]
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
     7f0:	00000070 	andeq	r0, r0, r0, ror r0
     7f4:	340800ef 	strcc	r0, [r8], #-239	; 0xffffff11
     7f8:	01000003 	tsteq	r0, r3
     7fc:	00830a1c 	addeq	r0, r3, ip, lsl sl
     800:	03050000 	movweq	r0, #20480	; 0x5000
        switch (*fmt) {
     804:	00000000 	andeq	r0, r0, r0
     808:	0002dc09 	andeq	sp, r2, r9, lsl #24
     80c:	06170100 	ldreq	r0, [r7], -r0, lsl #2
     810:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
            __write_char__(*fmt);
     814:	00000002 	andeq	r0, r0, r2
     818:	15009c01 	strne	r9, [r0, #-3073]	; 0xfffff3ff
            state = CHECK_CH;
     81c:	04000002 	streq	r0, [r0], #-2
            break;
     820:	00057b00 	andeq	r7, r5, r0, lsl #22
     824:	5f010400 	svcpl	0x00010400
            outstr(va_arg(args, const char *));
     828:	0c000000 	stceq	0, cr0, [r0], {-0}
     82c:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
     830:	0000013e 	andeq	r0, r0, lr, lsr r1
            fmt++;
     834:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
            break;
     838:	000000ac 	andeq	r0, r0, ip, lsr #1
            __write_char__(va_arg(args, int));
     83c:	0000066a 	andeq	r0, r0, sl, ror #12
     840:	53060102 	movwpl	r0, #24834	; 0x6102
     844:	02000000 	andeq	r0, r0, #0
            fmt++;
     848:	012f0502 			; <UNDEFINED> instruction: 0x012f0502
            break;
     84c:	04020000 	streq	r0, [r2], #-0
            if (*fmt == 'l') {
     850:	00011f05 	andeq	r1, r1, r5, lsl #30
     854:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
            if (printf_numbers(*fmt, &args, l_count)) {
     858:	0000011a 	andeq	r0, r0, sl, lsl r1
     85c:	00039e03 	andeq	r9, r3, r3, lsl #28
     860:	182e0200 	stmdane	lr!, {r9}
              state = CHECK_CH;
     864:	00000052 	andeq	r0, r0, r2, asr r0
              fmt++;
     868:	00004104 	andeq	r4, r0, r4, lsl #2
              l_count++;
     86c:	08010200 	stmdaeq	r1, {r9}
            if (printf_numbers(*fmt, &args, 0)) {
     870:	00000051 	andeq	r0, r0, r1, asr r0
     874:	e4070202 	str	r0, [r7], #-514	; 0xfffffdfe
              fmt++;
     878:	03000000 	movweq	r0, #0
              break;
     87c:	0000032b 	andeq	r0, r0, fp, lsr #6
            return -1;
     880:	6c193402 	cfldrsvs	mvf3, [r9], {2}
}
     884:	02000000 	andeq	r0, r0, #0
     888:	01030704 	tsteq	r3, r4, lsl #14
            return -1;
     88c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     890:	0000fe07 	andeq	pc, r0, r7, lsl #28
     894:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
int printf2(const char *fmt, ...) {
     898:	00746e69 	rsbseq	r6, r4, r9, ror #28
     89c:	08070402 	stmdaeq	r7, {r1, sl}
    __write_char2__(*fmt);
     8a0:	06000001 	streq	r0, [r0], -r1
     8a4:	00000376 	andeq	r0, r0, r6, ror r3
  while (*fmt != '\0') {
     8a8:	00520107 	subseq	r0, r2, r7, lsl #2
     8ac:	16030000 	strne	r0, [r3], -r0
     8b0:	0000b30e 	andeq	fp, r0, lr, lsl #6
     8b4:	034c0700 	movteq	r0, #50944	; 0xc700
     8b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
{
     8bc:	00504e49 	subseq	r4, r0, r9, asr #28
  for (i = 0; i < Nk; ++i)
     8c0:	554f0801 	strbpl	r0, [pc, #-2049]	; c7 <vector_table+0xc7>
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
     8c4:	07020054 	smlsdeq	r2, r4, r0, r0
     8c8:	000003ea 	andeq	r0, r0, sl, ror #7
     8cc:	f2030003 	vhadd.s8	d0, d3, d3
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
     8d0:	03000003 	movweq	r0, #3
     8d4:	0088031b 	addeq	r0, r8, fp, lsl r3
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
     8d8:	51090000 	mrspl	r0, (UNDEF: 9)
     8dc:	0c000003 	stceq	0, cr0, [r0], {3}
     8e0:	f4101d03 			; <UNDEFINED> instruction: 0xf4101d03
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
     8e4:	0a000000 	beq	8ec <KeyExpansion+0x30>
  for (i = 0; i < Nk; ++i)
     8e8:	00000936 	andeq	r0, r0, r6, lsr r9
     8ec:	f4151e03 			; <UNDEFINED> instruction: 0xf4151e03
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     8f0:	00000000 	andeq	r0, r0, r0
    j = i * 4; k=(i - Nk) * 4;
     8f4:	0009a30a 	andeq	sl, r9, sl, lsl #6
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
     8f8:	0c1f0300 	ldceq	3, cr0, [pc], {-0}
     8fc:	00000060 	andeq	r0, r0, r0, rrx
     900:	03870a04 	orreq	r0, r7, #4, 20	; 0x4000
     904:	21030000 	mrscs	r0, (UNDEF: 3)
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
     908:	00007a07 	andeq	r7, r0, r7, lsl #20
     90c:	0b000800 	bleq	2914 <rsbox+0xf28>
     910:	00004d04 	andeq	r4, r0, r4, lsl #26
     914:	03410300 	movteq	r0, #4864	; 0x1300
     918:	22030000 	andcs	r0, r3, #0
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
     91c:	0000bf03 	andeq	fp, r0, r3, lsl #30
     920:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
     924:	0000015f 	andeq	r0, r0, pc, asr r1
     928:	0003920c 	andeq	r9, r3, ip, lsl #4
     92c:	13140100 	tstne	r4, #0, 2
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
     930:	000000fa 	strdeq	r0, [r0], -sl
     934:	00180305 	andseq	r0, r8, r5, lsl #6
     938:	5a0c2000 	bpl	308940 <__ROM_SIZE__+0x2c8940>
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     93c:	01000003 	tsteq	r0, r3
      k = (i - 1) * 4;
     940:	00fa2014 	rscseq	r2, sl, r4, lsl r0
      tempa[0]=RoundKey[k + 0];
     944:	03050000 	movweq	r0, #20480	; 0x5000
     948:	2000000c 	andcs	r0, r0, ip
      tempa[1]=RoundKey[k + 1];
     94c:	00036d0c 	andeq	r6, r3, ip, lsl #26
     950:	0f150100 	svceq	0x00150100
      tempa[2]=RoundKey[k + 2];
     954:	000000b3 	strheq	r0, [r0], -r3
     958:	00080305 	andeq	r0, r8, r5, lsl #6
      tempa[3]=RoundKey[k + 3];
     95c:	7b0d2000 	blvc	348964 <__ROM_SIZE__+0x308964>
     960:	01000003 	tsteq	r0, r3
    if (i % Nk == 0)
     964:	06340648 	ldrteq	r0, [r4], -r8, asr #12
     968:	002c0000 	eoreq	r0, ip, r0
        tempa[0] = tempa[1];
     96c:	9c010000 	stcls	0, cr0, [r1], {-0}
        tempa[1] = tempa[2];
     970:	00000166 	andeq	r0, r0, r6, ror #2
        tempa[2] = tempa[3];
     974:	0100630e 	tsteq	r0, lr, lsl #6
        tempa[3] = u8tmp;
     978:	01661748 	cmneq	r6, r8, asr #14
        tempa[0] = getSBoxValue(tempa[0]);
     97c:	50010000 	andpl	r0, r1, r0
     980:	08010200 	stmdaeq	r1, {r9}
        tempa[1] = getSBoxValue(tempa[1]);
     984:	0000005a 	andeq	r0, r0, sl, asr r0
     988:	0003de0f 	andeq	sp, r3, pc, lsl #28
        tempa[2] = getSBoxValue(tempa[2]);
     98c:	05340100 	ldreq	r0, [r4, #-256]!	; 0xffffff00
     990:	0000007a 	andeq	r0, r0, sl, ror r0
        tempa[3] = getSBoxValue(tempa[3]);
     994:	000005f4 	strdeq	r0, [r0], -r4
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
     998:	00000040 	andeq	r0, r0, r0, asr #32
     99c:	019c9c01 	orrseq	r9, ip, r1, lsl #24
     9a0:	76100000 	ldrvc	r0, [r0], -r0
     9a4:	01006c61 	tsteq	r0, r1, ror #24
}
     9a8:	007a073d 	rsbseq	r0, sl, sp, lsr r7
     9ac:	01830000 	orreq	r0, r3, r0
{
     9b0:	017f0000 	cmneq	pc, r0
  for (i = 0; i < 4; ++i)
     9b4:	0d000000 	stceq	0, cr0, [r0, #-0]
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
     9b8:	000003a6 	andeq	r0, r0, r6, lsr #7
     9bc:	b4061701 	strlt	r1, [r6], #-1793	; 0xfffff8ff
     9c0:	40000005 	andmi	r0, r0, r5
     9c4:	01000000 	mrseq	r0, (UNDEF: 0)
     9c8:	0002069c 	muleq	r2, ip, r6
     9cc:	09361100 	ldmdbeq	r6!, {r8, ip}
     9d0:	17010000 	strne	r0, [r1, -r0]
    for (j = 0; j < 4; ++j)
     9d4:	0002061b 	andeq	r0, r2, fp, lsl r6
     9d8:	0001a700 	andeq	sl, r1, r0, lsl #14
  for (i = 0; i < 4; ++i)
     9dc:	0001a100 	andeq	sl, r1, r0, lsl #2
     9e0:	09a31100 	stmibeq	r3!, {r8, ip}
     9e4:	17010000 	strne	r0, [r1, -r0]
    for (j = 0; j < 4; ++j)
     9e8:	0000602a 	andeq	r6, r0, sl, lsr #32
}
     9ec:	0001db00 	andeq	sp, r1, r0, lsl #22
  for (i = 0; i < 4; ++i)
     9f0:	0001d300 	andeq	sp, r1, r0, lsl #6
    for (j = 0; j < 4; ++j)
     9f4:	03761100 	cmneq	r6, #0, 2
     9f8:	17010000 	strne	r0, [r1, -r0]
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
     9fc:	0000b337 	andeq	fp, r0, r7, lsr r3
     a00:	00021a00 	andeq	r1, r2, r0, lsl #20
     a04:	00021200 	andeq	r1, r2, r0, lsl #4
     a08:	05de1200 	ldrbeq	r1, [lr, #512]	; 0x200
     a0c:	020c0000 	andeq	r0, ip, #0
    for (j = 0; j < 4; ++j)
     a10:	01130000 	tsteq	r3, r0
     a14:	00750251 	rsbseq	r0, r5, r1, asr r2
  for (i = 0; i < 4; ++i)
     a18:	03520113 	cmpeq	r2, #-1073741820	; 0xc0000004
     a1c:	005101f3 	ldrsheq	r0, [r1], #-19	; 0xffffffed
    for (j = 0; j < 4; ++j)
     a20:	41040b00 	tstmi	r4, r0, lsl #22
}
     a24:	14000000 	strne	r0, [r0], #-0
  for (i = 0; i < 4; ++i)
     a28:	00000366 	andeq	r0, r0, r6, ror #6
     a2c:	00000366 	andeq	r0, r0, r6, ror #6
     a30:	00074104 	andeq	r4, r7, r4, lsl #2
  temp           = (*state)[0][1];
     a34:	00000379 	andeq	r0, r0, r9, ror r3
  (*state)[0][1] = (*state)[1][1];
     a38:	06bb0004 	ldrteq	r0, [fp], r4
  (*state)[1][1] = (*state)[2][1];
     a3c:	01040000 	mrseq	r0, (UNDEF: 4)
  (*state)[2][1] = (*state)[3][1];
     a40:	0000005f 	andeq	r0, r0, pc, asr r0
  temp           = (*state)[0][2];
     a44:	0004720c 	andeq	r7, r4, ip, lsl #4
  (*state)[0][2] = (*state)[2][2];
     a48:	00013e00 	andeq	r3, r1, r0, lsl #28
  temp           = (*state)[1][2];
     a4c:	00066000 	andeq	r6, r6, r0
  (*state)[1][2] = (*state)[3][2];
     a50:	00025c00 	andeq	r5, r2, r0, lsl #24
  temp           = (*state)[0][3];
     a54:	00084b00 	andeq	r4, r8, r0, lsl #22
  (*state)[0][3] = (*state)[3][3];
     a58:	04b70200 	ldrteq	r0, [r7], #512	; 0x200
  (*state)[3][3] = (*state)[2][3];
     a5c:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
  (*state)[2][3] = (*state)[1][3];
     a60:	0000311b 	andeq	r3, r0, fp, lsl r1
}
     a64:	04550300 	ldrbeq	r0, [r5], #-768	; 0xfffffd00
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
     a68:	03040000 	movweq	r0, #16384	; 0x4000
     a6c:	00004800 	andeq	r4, r0, r0, lsl #16
     a70:	04e00400 	strbteq	r0, [r0], #1024	; 0x400
}
     a74:	00480000 	subeq	r0, r8, r0
{
     a78:	00000000 	andeq	r0, r0, r0
     a7c:	57020405 	strpl	r0, [r2, -r5, lsl #8]
  for (i = 0; i < 4; ++i)
     a80:	02000004 	andeq	r0, r0, #4
    t   = (*state)[i][0];
     a84:	00251863 	eoreq	r1, r5, r3, ror #16
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
     a88:	04060000 	streq	r0, [r6], #-0
     a8c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     a90:	00680700 	rsbeq	r0, r8, r0, lsl #14
     a94:	68080000 	stmdavs	r8, {}	; <UNPREDICTABLE>
     a98:	00000000 	andeq	r0, r0, r0
     a9c:	5a080109 	bpl	200ec8 <__ROM_SIZE__+0x1c0ec8>
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
     aa0:	0a000000 	beq	aa8 <MixColumns+0x30>
     aa4:	00000068 	andeq	r0, r0, r8, rrx
     aa8:	00049e0b 	andeq	r9, r4, fp, lsl #28
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
     aac:	0f180100 	svceq	0x00180100
     ab0:	00000080 	andeq	r0, r0, r0, lsl #1
     ab4:	005d040c 	subseq	r0, sp, ip, lsl #8
     ab8:	1e0b0000 	cdpne	0, 0, cr0, cr11, cr0, {0}
     abc:	01000004 	tsteq	r0, r4
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
     ac0:	00800f19 	addeq	r0, r0, r9, lsl pc
     ac4:	070d0000 	streq	r0, [sp, -r0]
     ac8:	0000ad01 	andeq	sl, r0, r1, lsl #26
     acc:	0e230100 	sufeqs	f0, f3, f0
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
     ad0:	000000ad 	andeq	r0, r0, sp, lsr #1
     ad4:	0003f90e 	andeq	pc, r3, lr, lsl #18
     ad8:	3f0e0000 	svccc	0x000e0000
     adc:	01000004 	tsteq	r0, r4
  for (i = 0; i < 4; ++i)
     ae0:	08010900 	stmdaeq	r1, {r8, fp}
     ae4:	00000051 	andeq	r0, r0, r1, asr r0
}
     ae8:	00045f02 	andeq	r5, r4, r2, lsl #30
{
     aec:	03260100 			; <UNDEFINED> instruction: 0x03260100
     af0:	00000092 	muleq	r0, r2, r0
  for (i = 0; i < 4; ++i)
     af4:	0000680f 	andeq	r6, r0, pc, lsl #16
    a = (*state)[i][0];
     af8:	0000d000 	andeq	sp, r0, r0
     afc:	00d01000 	sbcseq	r1, r0, r0
    b = (*state)[i][1];
     b00:	000f0000 	andeq	r0, pc, r0
     b04:	08070409 	stmdaeq	r7, {r0, r3, sl}
    c = (*state)[i][2];
     b08:	11000001 	tstne	r0, r1
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
     b0c:	0000042e 	andeq	r0, r0, lr, lsr #8
     b10:	c00d2801 	andgt	r2, sp, r1, lsl #16
     b14:	05000000 	streq	r0, [r0, #-0]
     b18:	0018d003 	andseq	sp, r8, r3
     b1c:	01741200 	cmneq	r4, r0, lsl #4
     b20:	fd010000 	stc2	0, cr0, [r1, #-0]
     b24:	00005605 	andeq	r5, r0, r5, lsl #12
     b28:	00089800 	andeq	r9, r8, r0, lsl #16
     b2c:	00002400 	andeq	r2, r0, r0, lsl #8
     b30:	199c0100 	ldmibne	ip, {r8}
     b34:	13000001 	movwne	r0, #1
     b38:	00746d66 	rsbseq	r6, r4, r6, ror #26
     b3c:	1919fd01 	ldmdbne	r9, {r0, r8, sl, fp, ip, sp, lr, pc}
     b40:	59000001 	stmdbpl	r0, {r0}
     b44:	55000002 	strpl	r0, [r0, #-2]
     b48:	14000002 	strne	r0, [r0], #-2
     b4c:	6f040c00 	svcvs	0x00040c00
     b50:	12000000 	andne	r0, r0, #0
     b54:	00000128 	andeq	r0, r0, r8, lsr #2
     b58:	5605a901 	strpl	sl, [r5], -r1, lsl #18
     b5c:	bc000000 	stclt	0, cr0, [r0], {-0}
     b60:	dc000007 	stcle	0, cr0, [r0], {7}
     b64:	01000000 	mrseq	r0, (UNDEF: 0)
     b68:	0001c09c 	muleq	r1, ip, r0
     b6c:	6d661300 	stclvs	3, cr1, [r6, #-0]
     b70:	a9010074 	stmdbge	r1, {r2, r4, r5, r6}
     b74:	00011918 	andeq	r1, r1, r8, lsl r9
     b78:	00028800 	andeq	r8, r2, r0, lsl #16
     b7c:	00027800 	andeq	r7, r2, r0, lsl #16
     b80:	66151400 	ldrvs	r1, [r5], -r0, lsl #8
     b84:	01000004 	tsteq	r0, r4
     b88:	00b410aa 	adcseq	r1, r4, sl, lsr #1
     b8c:	03050000 	movweq	r0, #20480	; 0x5000
     b90:	02e90000 	rsceq	r0, r9, #0
     b94:	db110000 	blle	440b9c <__ROM_SIZE__+0x400b9c>
     b98:	01000004 	tsteq	r0, r4
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
     b9c:	004a0bab 	subeq	r0, sl, fp, lsr #23
     ba0:	91020000 	mrsls	r0, (UNDEF: 2)
     ba4:	0060165c 	rsbeq	r1, r0, ip, asr r6
     ba8:	01a00000 	moveq	r0, r0
     bac:	4d150000 	ldcmi	0, cr0, [r5, #-0]
     bb0:	01000004 	tsteq	r0, r4
     bb4:	005611d4 	ldrsbeq	r1, [r6], #-20	; 0xffffffec
     bb8:	03b60000 			; <UNDEFINED> instruction: 0x03b60000
     bbc:	03ae0000 			; <UNDEFINED> instruction: 0x03ae0000
     bc0:	60170000 	andsvs	r0, r7, r0
     bc4:	c0000008 	andgt	r0, r0, r8
     bc8:	18000001 	stmdane	r0, {r0}
     bcc:	91035101 	tstls	r3, r1, lsl #2
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
     bd0:	00007fbc 			; <UNDEFINED> instruction: 0x00007fbc
     bd4:	00083419 	andeq	r3, r8, r9, lsl r4
     bd8:	00035500 	andeq	r5, r3, r0, lsl #10
     bdc:	08761700 	ldmdaeq	r6!, {r8, r9, sl, ip}^
     be0:	01c00000 	biceq	r0, r0, r0
     be4:	01180000 	tsteq	r8, r0
     be8:	bc910351 	ldclt	3, cr0, [r1], {81}	; 0x51
     bec:	5201187f 	andpl	r1, r1, #8323072	; 0x7f0000
     bf0:	00003001 	andeq	r3, r0, r1
     bf4:	0004cc1a 	andeq	ip, r4, sl, lsl ip
     bf8:	0d320100 	ldfeqs	f0, [r2, #-0]
     bfc:	00000338 	andeq	r0, r0, r8, lsr r3
     c00:	0000067c 	andeq	r0, r0, ip, ror r6
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
     c04:	00000140 	andeq	r0, r0, r0, asr #2
     c08:	03389c01 	teqeq	r8, #256	; 0x100
     c0c:	66130000 	ldrvs	r0, [r3], -r0
     c10:	0100746d 	tsteq	r0, sp, ror #8
     c14:	006f2732 	rsbeq	r2, pc, r2, lsr r7	; <UNPREDICTABLE>
     c18:	04090000 	streq	r0, [r9], #-0
     c1c:	03ed0000 	mvneq	r0, #0
     c20:	db1b0000 	blle	6c0c28 <__ROM_SIZE__+0x680c28>
     c24:	01000004 	tsteq	r0, r4
     c28:	033f3532 	teqeq	pc, #209715200	; 0xc800000
     c2c:	04d60000 	ldrbeq	r0, [r6], #0
     c30:	04c00000 	strbeq	r0, [r0], #0
     c34:	4d1b0000 	ldcmi	0, cr0, [fp, #-0]
     c38:	01000004 	tsteq	r0, r4
     c3c:	00563f32 	subseq	r3, r6, r2, lsr pc
  for (i = 0; i < 4; ++i)
     c40:	05800000 	streq	r0, [r0]
     c44:	05660000 	strbeq	r0, [r6, #-0]!
     c48:	6e1c0000 	cdpvs	0, 1, cr0, cr12, cr0, {0}
}
     c4c:	01006d75 	tsteq	r0, r5, ror sp
  for (i = 0; i < 4; ++i)
     c50:	03450833 	movteq	r0, #22579	; 0x5833
     c54:	91020000 	mrsls	r0, (UNDEF: 2)
    for (j = 0; j < 4; ++j)
     c58:	04371564 	ldrteq	r1, [r7], #-1380	; 0xfffffa9c
{
     c5c:	34010000 	strcc	r0, [r1], #-0
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
     c60:	00005607 	andeq	r5, r0, r7, lsl #12
     c64:	00063500 	andeq	r3, r6, r0, lsl #10
     c68:	00062300 	andeq	r2, r6, r0, lsl #6
     c6c:	00481600 	subeq	r1, r8, r0, lsl #12
     c70:	027a0000 	rsbseq	r0, sl, #0
    for (j = 0; j < 4; ++j)
     c74:	c6150000 	ldrgt	r0, [r5], -r0
     c78:	01000004 	tsteq	r0, r4
  for (i = 0; i < 4; ++i)
     c7c:	00560b41 	subseq	r0, r6, r1, asr #22
     c80:	06b20000 	ldrteq	r0, [r2], r0
    for (j = 0; j < 4; ++j)
     c84:	06a80000 	strteq	r0, [r8], r0
}
     c88:	0a1d0000 	beq	740c90 <__ROM_SIZE__+0x700c90>
  for (i = 0; i < 4; ++i)
     c8c:	66000007 	strvs	r0, [r0], -r7
     c90:	18000002 	stmdane	r0, {r1}
     c94:	08025001 	stmdaeq	r2, {r0, ip, lr}
  temp = (*state)[3][1];
     c98:	221e002d 	andscs	r0, lr, #45	; 0x2d
  (*state)[3][1] = (*state)[2][1];
     c9c:	18000007 	stmdane	r0, {r0, r1, r2}
  (*state)[2][1] = (*state)[1][1];
     ca0:	91095001 	tstls	r9, r1
  (*state)[1][1] = (*state)[0][1];
     ca4:	22007400 	andcs	r7, r0, #0, 8
  temp = (*state)[0][2];
     ca8:	01941c4c 	orrseq	r1, r4, ip, asr #24
  (*state)[0][2] = (*state)[2][2];
     cac:	00160000 	andseq	r0, r6, r0
  temp = (*state)[1][2];
     cb0:	24000000 	strcs	r0, [r0], #-0
  (*state)[1][2] = (*state)[3][2];
     cb4:	15000003 	strne	r0, [r0, #-3]
  temp = (*state)[0][3];
     cb8:	000004c6 	andeq	r0, r0, r6, asr #9
  (*state)[0][3] = (*state)[1][3];
     cbc:	d0147101 	andsle	r7, r4, r1, lsl #2
  (*state)[1][3] = (*state)[2][3];
     cc0:	fd000000 	stc2	0, cr0, [r0, #-0]
  (*state)[2][3] = (*state)[3][3];
     cc4:	f3000006 	vhadd.u8	d0, d0, d6
}
     cc8:	1f000006 	svcne	0x00000006
{
     ccc:	00000772 	andeq	r0, r0, r2, ror r7
  AddRoundKey(0, state, RoundKey);
     cd0:	00000028 	andeq	r0, r0, r8, lsr #32
     cd4:	00000300 	andeq	r0, r0, r0, lsl #6
     cd8:	0004ad15 	andeq	sl, r4, r5, lsl sp
  for (round = 1; ; ++round)
     cdc:	0f930100 	svceq	0x00930100
    MixColumns(state);
     ce0:	00000056 	andeq	r0, r0, r6, asr r0
    AddRoundKey(round, state, RoundKey);
     ce4:	00000742 	andeq	r0, r0, r2, asr #14
     ce8:	0000073e 	andeq	r0, r0, lr, lsr r7
     cec:	00040915 	andeq	r0, r4, r5, lsl r9
  for (round = 1; ; ++round)
     cf0:	10940100 	addsne	r0, r4, r0, lsl #2
    SubBytes(state);
     cf4:	00000338 	andeq	r0, r0, r8, lsr r3
    ShiftRows(state);
     cf8:	00000768 	andeq	r0, r0, r8, ror #14
     cfc:	00000760 	andeq	r0, r0, r0, ror #14
    if (round == Nr) {
     d00:	00003020 	andeq	r3, r0, r0, lsr #32
  AddRoundKey(Nr, state, RoundKey);
     d04:	61762100 	cmnvs	r6, r0, lsl #2
     d08:	9701006c 	strls	r0, [r1, -ip, rrx]
}
     d0c:	00005611 	andeq	r5, r0, r1, lsl r6
{
     d10:	0007a500 	andeq	sl, r7, r0, lsl #10
  AddRoundKey(Nr, state, RoundKey);
     d14:	00079d00 	andeq	r9, r7, r0, lsl #26
     d18:	077c1e00 	ldrbeq	r1, [ip, -r0, lsl #28]!
     d1c:	01180000 	tsteq	r8, r0
  for (round = (Nr - 1); ; --round)
     d20:	00750f50 	rsbseq	r0, r5, r0, asr pc
    InvMixColumns(state);
     d24:	3f250074 	svccc	0x00250074
  for (round = (Nr - 1); ; --round)
     d28:	18d0031a 	ldmne	r0, {r1, r3, r4, r8, r9}^
    InvShiftRows(state);
     d2c:	94220000 	strtls	r0, [r2], #-0
     d30:	00000001 	andeq	r0, r0, r1
    InvSubBytes(state);
     d34:	0006ae1d 	andeq	sl, r6, sp, lsl lr
    AddRoundKey(round, state, RoundKey);
     d38:	00031000 	andeq	r1, r3, r0
     d3c:	50011800 	andpl	r1, r1, r0, lsl #16
     d40:	00300802 	eorseq	r0, r0, r2, lsl #16
    if (round == 0) {
     d44:	00076c1e 	andeq	r6, r7, lr, lsl ip
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
     d48:	50011800 	andpl	r1, r1, r0, lsl #16
    buf[i] ^= Iv[i];
     d4c:	74009109 	strvc	r9, [r0], #-265	; 0xfffffef7
     d50:	1c4c2200 	sfmne	f2, 2, [ip], {-0}
     d54:	00000194 	muleq	r0, r4, r1
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
     d58:	0006bc17 	andeq	fp, r6, r7, lsl ip
     d5c:	00035500 	andeq	r5, r3, r0, lsl #10
}
     d60:	50011800 	andpl	r1, r1, r0, lsl #16
  KeyExpansion(ctx->RoundKey, key);
     d64:	18c00305 	stmiane	r0, {r0, r2, r8, r9}^
}
     d68:	00000000 	andeq	r0, r0, r0
{
     d6c:	6c020109 	stfvss	f0, [r2], {9}
  KeyExpansion(ctx->RoundKey, key);
     d70:	0c000004 	stceq	0, cr0, [r0], {4}
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     d74:	00004a04 	andeq	r4, r0, r4, lsl #20
     d78:	00680f00 	rsbeq	r0, r8, r0, lsl #30
     d7c:	03550000 	cmpeq	r5, #0
}
     d80:	d0100000 	andsle	r0, r0, r0
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     d84:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     d88:	04022200 	streq	r2, [r2], #-512	; 0xfffffe00
}
     d8c:	2b010000 	blcs	40d94 <__ROM_SIZE__+0xd94>
{
     d90:	0006600d 	andeq	r6, r6, sp
  Cipher((state_t*)buf, ctx->RoundKey);
     d94:	00001c00 	andeq	r1, r0, r0, lsl #24
     d98:	139c0100 	orrsne	r0, ip, #0, 2
{
     d9c:	00727473 	rsbseq	r7, r2, r3, ror r4
  InvCipher((state_t*)buf, ctx->RoundKey);
     da0:	19202b01 	stmdbne	r0!, {r0, r8, r9, fp, sp}
     da4:	e8000001 	stmda	r0, {r0}
}
     da8:	e4000007 	str	r0, [r0], #-7
{
     dac:	00000007 	andeq	r0, r0, r7
     db0:	000c9300 	andeq	r9, ip, r0, lsl #6
  uint8_t *Iv = ctx->Iv;
     db4:	92000400 	andls	r0, r0, #0, 8
     db8:	04000008 	streq	r0, [r0], #-8
  for (i = 0; i < length; i += AES_BLOCKLEN)
     dbc:	00005f01 	andeq	r5, r0, r1, lsl #30
    XorWithIv(buf, Iv);
     dc0:	05ce0c00 	strbeq	r0, [lr, #3072]	; 0xc00
    Cipher((state_t*)buf, ctx->RoundKey);
     dc4:	013e0000 	teqeq	lr, r0
     dc8:	08bc0000 	ldmeq	ip!, {}	; <UNPREDICTABLE>
  for (i = 0; i < length; i += AES_BLOCKLEN)
     dcc:	05e00000 	strbeq	r0, [r0, #0]!
    buf += AES_BLOCKLEN;
     dd0:	0c010000 	stceq	0, cr0, [r1], {-0}
  for (i = 0; i < length; i += AES_BLOCKLEN)
     dd4:	04020000 	streq	r0, [r2], #-0
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
     dd8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     ddc:	06160300 	ldreq	r0, [r6], -r0, lsl #6
}
     de0:	d1020000 	mrsle	r0, (UNDEF: 2)
{
     de4:	00003817 	andeq	r3, r0, r7, lsl r8
     de8:	07040400 	streq	r0, [r4, -r0, lsl #8]
     dec:	00000108 	andeq	r0, r0, r8, lsl #2
  for (i = 0; i < length; i += AES_BLOCKLEN)
     df0:	1a050804 	bne	142e08 <__ROM_SIZE__+0x102e08>
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
     df4:	04000001 	streq	r0, [r0], #-1
     df8:	015f0408 	cmpeq	pc, r8, lsl #8
    InvCipher((state_t*)buf, ctx->RoundKey);
     dfc:	01040000 	mrseq	r0, (UNDEF: 4)
     e00:	00005306 	andeq	r5, r0, r6, lsl #6
    XorWithIv(buf, ctx->Iv);
     e04:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
     e08:	0000012f 	andeq	r0, r0, pc, lsr #2
     e0c:	1f050404 	svcne	0x00050404
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
     e10:	03000001 	movweq	r0, #1
     e14:	0000039e 	muleq	r0, lr, r3
     e18:	73182e03 	tstvc	r8, #3, 28	; 0x30
  for (i = 0; i < length; i += AES_BLOCKLEN)
     e1c:	05000000 	streq	r0, [r0, #-0]
     e20:	00000062 	andeq	r0, r0, r2, rrx
}
     e24:	51080104 	tstpl	r8, r4, lsl #2
{
     e28:	04000000 	streq	r0, [r0], #-0
     e2c:	00e40702 	rsceq	r0, r4, r2, lsl #14
     e30:	04040000 	streq	r0, [r4], #-0
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     e34:	00010307 	andeq	r0, r1, r7, lsl #6
          ctx->Iv[bi] = 0;
     e38:	07080400 	streq	r0, [r8, -r0, lsl #8]
     e3c:	000000fe 	strdeq	r0, [r0], -lr
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     e40:	0004f506 	andeq	pc, r4, r6, lsl #10
      bi = 0;
     e44:	2c04c000 	stccs	0, cr12, [r4], {-0}
    buf[i] = (buf[i] ^ buffer[bi]);
     e48:	0000b608 	andeq	fp, r0, r8, lsl #12
     e4c:	05950700 	ldreq	r0, [r5, #1792]	; 0x700
     e50:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
     e54:	0000bb0b 	andeq	fp, r0, fp, lsl #22
     e58:	49080000 	stmdbmi	r8, {}	; <UNPREDICTABLE>
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     e5c:	30040076 	andcc	r0, r4, r6, ror r0
     e60:	0000cb0b 	andeq	ip, r0, fp, lsl #22
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
     e64:	0500b000 	streq	fp, [r0, #-0]
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
     e68:	0000008f 	andeq	r0, r0, pc, lsl #1
     e6c:	00006209 	andeq	r6, r0, r9, lsl #4
     e70:	0000cb00 	andeq	ip, r0, r0, lsl #22
      Cipher((state_t*)buffer,ctx->RoundKey);
     e74:	00380a00 	eorseq	r0, r8, r0, lsl #20
     e78:	00af0000 	adceq	r0, pc, r0
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     e7c:	00006209 	andeq	r6, r0, r9, lsl #4
     e80:	0000db00 	andeq	sp, r0, r0, lsl #22
        if (ctx->Iv[bi] == 255)
     e84:	00380a00 	eorseq	r0, r8, r0, lsl #20
     e88:	000f0000 	andeq	r0, pc, r0
        ctx->Iv[bi] += 1;
     e8c:	00056503 	andeq	r6, r5, r3, lsl #10
     e90:	11480100 	mrsne	r0, (UNDEF: 88)
      bi = 0;
     e94:	000000e7 	andeq	r0, r0, r7, ror #1
}
     e98:	00006209 	andeq	r6, r0, r9, lsl #4
int atoi(const char* str) {
     e9c:	0000fd00 	andeq	pc, r0, r0, lsl #26
  int res = 0;
     ea0:	00380a00 	eorseq	r0, r8, r0, lsl #20
    res = res * 10 + str[i] - '0';
     ea4:	0a030000 	beq	c0eac <__ROM_SIZE__+0x80eac>
     ea8:	00000038 	andeq	r0, r0, r8, lsr r0
     eac:	6e090003 	cdpvs	0, 0, cr0, cr9, cr3, {0}
  for (int i = 0; str[i] != '\0'; ++i) {
     eb0:	0d000000 	stceq	0, cr0, [r0, #-0]
     eb4:	0a000001 	beq	ec0 <atoh+0x8>
uint32_t atoh(const char* str) {
     eb8:	00000038 	andeq	r0, r0, r8, lsr r0
  uint32_t hex = 0;
     ebc:	fd0500ff 	stc2	0, cr0, [r5, #-1020]	; 0xfffffc04
    } else if (str[i] >= 'a' && str[i] <= 'f') {
     ec0:	0b000000 	bleq	ec8 <atoh+0x10>
     ec4:	0000051b 	andeq	r0, r0, fp, lsl r5
     ec8:	0d164f01 	ldceq	15, cr4, [r6, #-4]
    hex |= value;
     ecc:	05000001 	streq	r0, [r0, #-1]
  for (uint32_t i = 0; str[i] != '\0'; i++) {
     ed0:	0018e003 	andseq	lr, r8, r3
     ed4:	051a0b00 	ldreq	r0, [sl, #-2816]	; 0xfffff500
    if (str[i] >= '0' && str[i] <= '9') {
     ed8:	63010000 	movwvs	r0, #4096	; 0x1000
     edc:	00010d16 	andeq	r0, r1, r6, lsl sp
     ee0:	ec030500 	cfstr32	mvfx0, [r3], {-0}
      value = str[i] - '0';
     ee4:	09000019 	stmdbeq	r0, {r0, r3, r4}
    } else if (str[i] >= 'A' && str[i] <= 'F') {
     ee8:	0000006e 	andeq	r0, r0, lr, rrx
     eec:	00000146 	andeq	r0, r0, r6, asr #2
      value = str[i] - 'A' + 10;
     ef0:	0000380a 	andeq	r3, r0, sl, lsl #16
}
     ef4:	05000a00 	streq	r0, [r0, #-2560]	; 0xfffff600
int r32(int argc, char *argv[]) {
     ef8:	00000136 	andeq	r0, r0, r6, lsr r1
  if (argc < 2) {
     efc:	0005ba0b 	andeq	fp, r5, fp, lsl #20
  uint32_t addr = atoh(argv[1]);
     f00:	16780100 	ldrbtne	r0, [r8], -r0, lsl #2
     f04:	00000146 	andeq	r0, r0, r6, asr #2
  printf("0x%x: 0x%x\n", addr, data);
     f08:	19e00305 	stmibne	r0!, {r0, r2, r8, r9}^
     f0c:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
}
     f10:	01000005 	tsteq	r0, r5
    printf("Usage: %s <address> (in hex)\n", argv[0]);
     f14:	2806021a 	stmdacs	r6, {r1, r3, r4, r9}
     f18:	7400000e 	strvc	r0, [r0], #-14
    return -1;
     f1c:	01000000 	mrseq	r0, (UNDEF: 0)
     f20:	0002219c 	muleq	r2, ip, r1
     f24:	74630d00 	strbtvc	r0, [r3], #-3328	; 0xfffff300
int w32(int argc, char *argv[]) {
     f28:	1a010078 	bne	41110 <__ROM_SIZE__+0x1110>
  if (argc < 3) {
     f2c:	02212c02 	eoreq	r2, r1, #512	; 0x200
  uint32_t addr = atoh(argv[1]);
     f30:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
     f34:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
  uint32_t data = atoh(argv[2]);
     f38:	620d0000 	andvs	r0, sp, #0
     f3c:	01006675 	tsteq	r0, r5, ror r6
  return 0;
     f40:	273a021a 			; <UNDEFINED> instruction: 0x273a021a
    printf("Usage: %s <address> (in hex) <value> (in hex)\n", argv[0]);
     f44:	2c000002 	stccs	0, cr0, [r0], {2}
     f48:	28000008 	stmdacs	r0, {r3}
    return -1;
     f4c:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
     f50:	0000055e 	andeq	r0, r0, lr, asr r5
     f54:	46021a01 	strmi	r1, [r2], -r1, lsl #20
int read_mem(int argc, char *argv[]) {
     f58:	0000002c 	andeq	r0, r0, ip, lsr #32
  if (argc < 3) {
     f5c:	0000084e 	andeq	r0, r0, lr, asr #16
  uint32_t addr = atoh(argv[1]);
     f60:	0000084a 	andeq	r0, r0, sl, asr #16
     f64:	00057d0f 	andeq	r7, r5, pc, lsl #26
  uint32_t length = atoi(argv[2]);
     f68:	021c0100 	andseq	r0, ip, #0, 2
     f6c:	0000cb0b 	andeq	ip, r0, fp, lsl #22
  for (uint32_t i = 0, data = 0; i < length; i++) {
     f70:	58910200 	ldmpl	r1, {r9}
    printf("Usage: %s <address> (in hex) <num_words> (in decimal)\n", argv[0]);
     f74:	01006910 	tsteq	r0, r0, lsl r9
     f78:	2c0a021e 	sfmcs	f0, 4, [sl], {30}
    return -1;
     f7c:	70000000 	andvc	r0, r0, r0
     f80:	6c000008 	stcvs	0, cr0, [r0], {8}
    printf("0x%x: 0x%x\n", addr, data);
     f84:	10000008 	andne	r0, r0, r8
     f88:	01006962 	tsteq	r0, r2, ror #18
    addr += 4;
     f8c:	2507021f 	strcs	r0, [r7, #-543]	; 0xfffffde1
  for (uint32_t i = 0, data = 0; i < length; i++) {
     f90:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
  return 0;
     f94:	8f000008 	svchi	0x00000008
}
     f98:	11000008 	tstne	r0, r8
     f9c:	00000e74 	andeq	r0, r0, r4, ror lr
{
     fa0:	00000c8a 	andeq	r0, r0, sl, lsl #25
  if (argc < 4) {
     fa4:	0000020a 	andeq	r0, r0, sl, lsl #4
  uint32_t addr = atoh(argv[1]);
     fa8:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
     fac:	0112007d 	tsteq	r2, sp, ror r0
  uint32_t bit_loc = atoi(argv[2]);
     fb0:	b0770351 	rsbslt	r0, r7, r1, asr r3
     fb4:	52011201 	andpl	r1, r1, #268435456	; 0x10000000
  uint32_t bit_val = atoi(argv[3]);
     fb8:	13004001 	movwne	r4, #1
     fbc:	00000e7c 	andeq	r0, r0, ip, ror lr
  if (bit_loc > 31) {
     fc0:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
  if (bit_val != 0 && bit_val != 1) {
     fc4:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
  uint32_t data = reg32(addr);
     fc8:	0112007d 	tsteq	r2, sp, ror r0
  data = data | (bit_val << bit_loc);
     fcc:	00770251 	rsbseq	r0, r7, r1, asr r2
  data = data & ~(!bit_val << bit_loc);
     fd0:	04140000 	ldreq	r0, [r4], #-0
     fd4:	0000008f 	andeq	r0, r0, pc, lsl #1
     fd8:	00620414 	rsbeq	r0, r2, r4, lsl r4
  return 0;
     fdc:	6d0c0000 	stcvs	0, cr0, [ip, #-0]
    printf("Error: Invalid bit location argument\n");
     fe0:	01000005 	tsteq	r0, r5
     fe4:	e2060204 	and	r0, r6, #4, 4	; 0x40000000
    printf("Error: Invalid bit value argument\n");
     fe8:	4600000d 	strmi	r0, [r0], -sp
     fec:	01000000 	mrseq	r0, (UNDEF: 0)
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)> <bit_value(0 or 1)>\n", argv[0]);
     ff0:	0003159c 	muleq	r3, ip, r5
     ff4:	74630d00 	strbtvc	r0, [r3], #-3328	; 0xfffff300
  return -1;
     ff8:	04010078 	streq	r0, [r1], #-120	; 0xffffff88
     ffc:	02212d02 	eoreq	r2, r1, #2, 26	; 0x80
    1000:	08de0000 	ldmeq	lr, {}^	; <UNPREDICTABLE>
    1004:	08da0000 	ldmeq	sl, {}^	; <UNPREDICTABLE>
{
    1008:	620d0000 	andvs	r0, sp, #0
  if (argc < 3) {
    100c:	01006675 	tsteq	r0, r5, ror r6
  uint32_t addr = atoh(argv[1]);
    1010:	273b0204 	ldrcs	r0, [fp, -r4, lsl #4]!
    1014:	00000002 	andeq	r0, r0, r2
  uint32_t bit_loc = atoi(argv[2]);
    1018:	fc000009 	stc2	0, cr0, [r0], {9}
    101c:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
  if (bit_loc > 31) {
    1020:	0000055e 	andeq	r0, r0, lr, asr r5
  uint32_t data = reg32(addr);
    1024:	47020401 	strmi	r0, [r2, -r1, lsl #8]
  printf("Bit %u @ 0x%08x: %u\n", bit_loc, addr, bit_val);
    1028:	0000002c 	andeq	r0, r0, ip, lsr #32
    102c:	00000922 	andeq	r0, r0, r2, lsr #18
    1030:	0000091e 	andeq	r0, r0, lr, lsl r9
  return 0;
    1034:	01006910 	tsteq	r0, r0, lsl r9
    printf("Error: Invalid bit location argument\n");
    1038:	2c0a0206 	sfmcs	f0, 4, [sl], {6}
    103c:	44000000 	strmi	r0, [r0], #-0
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)\n", argv[0]);
    1040:	40000009 	andmi	r0, r0, r9
    1044:	0f000009 	svceq	0x00000009
  return -1;
    1048:	0000050e 	andeq	r0, r0, lr, lsl #10
    104c:	0b020701 	bleq	82c58 <__ROM_SIZE__+0x42c58>
    1050:	000000cb 	andeq	r0, r0, fp, asr #1
    1054:	11589102 	cmpne	r8, r2, lsl #2
size_t strlen(const char *str) {
    1058:	00000dfc 	strdeq	r0, [r0], -ip
  while (str[len]) {
    105c:	00000c8a 	andeq	r0, r0, sl, lsl #25
    1060:	000002c5 	andeq	r0, r0, r5, asr #5
    1064:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
  while (*str1 && (*str1 == *str2)) {
    1068:	0112007d 	tsteq	r2, sp, ror r0
    str2++;
    106c:	00740251 	rsbseq	r0, r4, r1, asr r2
  while (*str1 && (*str1 == *str2)) {
    1070:	01520112 	cmpeq	r2, r2, lsl r1
    1074:	04110040 	ldreq	r0, [r1], #-64	; 0xffffffc0
  return *str1 - *str2;
    1078:	de00000e 	cdple	0, 0, cr0, cr0, cr14, {0}
}
    107c:	df000004 	svcle	0x00000004
    *(str1++) = *(str2++);
    1080:	12000002 	andne	r0, r0, #2
    1084:	74025001 	strvc	r5, [r2], #-1
  while (*str2) {
    1088:	51011200 	mrspl	r1, R9_usr
  *str1 = '\0';
    108c:	00007702 	andeq	r7, r0, r2, lsl #14
}
    1090:	000e1011 	andeq	r1, lr, r1, lsl r0
  for (i = 0; i < size; i++) {
    1094:	0003d600 	andeq	sp, r3, r0, lsl #12
    dest_char[i] = src_char[i];
    1098:	0002f900 	andeq	pc, r2, r0, lsl #18
    109c:	50011200 	andpl	r1, r1, r0, lsl #4
  for (i = 0; i < size; i++) {
    10a0:	12007402 	andne	r7, r0, #33554432	; 0x2000000
}
    10a4:	76025101 	strvc	r5, [r2], -r1, lsl #2
  for (i = 0; i < size; i++) {
    10a8:	1a130000 	bne	4c10b0 <__ROM_SIZE__+0x4810b0>
    dest_char[i] = val;
    10ac:	8a00000e 	bhi	10ec <initial_setup+0x34>
  for (i = 0; i < size; i++) {
    10b0:	1200000c 	andne	r0, r0, #12
}
    10b4:	76025001 	strvc	r5, [r2], -r1
void __attribute__((optimize("O0"), weak)) initial_setup(void) {
    10b8:	51011200 	mrspl	r1, R9_usr
    10bc:	12007d02 	andne	r7, r0, #2, 26	; 0x80
  char *src = &_etext, *dst = &_data;
    10c0:	40015201 	andmi	r5, r1, r1, lsl #4
    10c4:	200c0000 	andcs	r0, ip, r0
  if (dst != src)
    10c8:	01000005 	tsteq	r0, r5
    10cc:	aa0601f5 	bge	1818a8 <__ROM_SIZE__+0x1418a8>
    while (dst < &_edata) *(dst++) = *(src++);
    10d0:	3800000d 	stmdacc	r0, {r0, r2, r3}
    10d4:	01000000 	mrseq	r0, (UNDEF: 0)
    10d8:	0003d69c 	muleq	r3, ip, r6
    10dc:	74630d00 	strbtvc	r0, [r3], #-3328	; 0xfffff300
    10e0:	f5010078 			; <UNDEFINED> instruction: 0xf5010078
    10e4:	02212d01 	eoreq	r2, r1, #1, 26	; 0x40
  for (dst = &_bss; dst < &_ebss; dst++) *dst = 0;
    10e8:	09670000 	stmdbeq	r7!, {}^	; <UNPREDICTABLE>
    10ec:	09630000 	stmdbeq	r3!, {}^	; <UNPREDICTABLE>
    10f0:	620d0000 	andvs	r0, sp, #0
    10f4:	01006675 	tsteq	r0, r5, ror r6
    10f8:	273b01f5 			; <UNDEFINED> instruction: 0x273b01f5
    10fc:	8d000002 	stchi	0, cr0, [r0, #-8]
    1100:	85000009 	strhi	r0, [r0, #-9]
  platform_init();
    1104:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
}
    1108:	0000055e 	andeq	r0, r0, lr, asr r5
    110c:	4701f501 	strmi	pc, [r1, -r1, lsl #10]
    1110:	0000002c 	andeq	r0, r0, ip, lsr #32
    1114:	000009c7 	andeq	r0, r0, r7, asr #19
    1118:	000009c3 	andeq	r0, r0, r3, asr #19
    111c:	01006910 	tsteq	r0, r0, lsl r9
    1120:	2c0a01f7 	stfcss	f0, [sl], {247}	; 0xf7
static void delete(void) {
    1124:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
  __write_char__(BACK_SPACE);
    1128:	e5000009 	str	r0, [r0, #-9]
    112c:	10000009 	andne	r0, r0, r9
  __write_char__(SPACE);
    1130:	01007649 	tsteq	r0, r9, asr #12
  __write_char__(BACK_SPACE);
    1134:	270c01f8 			; <UNDEFINED> instruction: 0x270c01f8
    1138:	10000002 	andne	r0, r0, r2
}
    113c:	0800000a 	stmdaeq	r0, {r1, r3}
static void clear_prompt(int char_count) {
    1140:	1100000a 	tstne	r0, sl
  while (char_count) {
    1144:	00000dc4 	andeq	r0, r0, r4, asr #27
    delete ();
    1148:	000003d6 	ldrdeq	r0, [r0], -r6
  while (char_count) {
    114c:	000003a6 	andeq	r0, r0, r6, lsr #7
}
    1150:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    1154:	11000074 	tstne	r0, r4, ror r0
    auto_load[i].command(0, NULL);
    1158:	00000dcc 	andeq	r0, r0, ip, asr #27
    115c:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    1160:	000003c0 	andeq	r0, r0, r0, asr #7
    1164:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
    1168:	01120074 	tsteq	r2, r4, ror r0
    116c:	00760251 	rsbseq	r0, r6, r1, asr r2
    1170:	0dde1300 	ldcleq	3, cr1, [lr]
}
    1174:	0c8a0000 	stceq	0, cr0, [sl], {0}
static int show_history(int argc, char **argv) {
    1178:	01120000 	tsteq	r2, r0
  uint32_t end_index = total_num_commands-1;
    117c:	00780250 	rsbseq	r0, r8, r0, asr r2
  if (total_num_commands > NUM_HISTORY_ENTRIES) {
    1180:	01520112 	cmpeq	r2, r2, lsl r1
    1184:	15000040 	strne	r0, [r0, #-64]	; 0xffffffc0
    beg_index = total_num_commands - NUM_HISTORY_ENTRIES;
    1188:	00000643 	andeq	r0, r0, r3, asr #12
    118c:	0d01ec01 	stceq	12, cr14, [r1, #-4]
  uint32_t beg_index = 0;
    1190:	00000d48 	andeq	r0, r0, r8, asr #26
    printf("%s\n", cmd_history[index % NUM_HISTORY_ENTRIES]);
    1194:	0000001a 	andeq	r0, r0, sl, lsl r0
    1198:	041e9c01 	ldreq	r9, [lr], #-3073	; 0xfffff3ff
    119c:	62160000 	andsvs	r0, r6, #0
    11a0:	01006675 	tsteq	r0, r5, ror r6
  for (uint32_t index = beg_index; index <= end_index; ++index) {
    11a4:	272001ec 	strcs	r0, [r0, -ip, ror #3]!
}
    11a8:	01000002 	tsteq	r0, r2
    11ac:	76491650 			; <UNDEFINED> instruction: 0x76491650
    11b0:	01ec0100 	mvneq	r0, r0, lsl #2
    11b4:	00041e34 	andeq	r1, r4, r4, lsr lr
int cmd_exec_status(int argc, char **argv) {
    11b8:	10510100 	subsne	r0, r1, r0, lsl #2
  printf("%d\n", __cmd_exec_status);
    11bc:	ee010069 	cdp	0, 0, cr0, cr1, cr9, {3}
    11c0:	00620b01 	rsbeq	r0, r2, r1, lsl #22
}
    11c4:	0a4a0000 	beq	12811cc <__ROM_SIZE__+0x12411cc>
    11c8:	0a440000 	beq	11011d0 <__ROM_SIZE__+0x10c11d0>
    11cc:	14000000 	strne	r0, [r0], #-0
static int build_info(int argc, char **argv) {
    11d0:	00006e04 	andeq	r6, r0, r4, lsl #28
  printf("Build: [" SHELL_VERSION ":" USER_REPO_VERSION "] - [" BUILD_USER
    11d4:	05370c00 	ldreq	r0, [r7, #-3072]!	; 0xfffff400
}
    11d8:	dc010000 	stcle	0, cr0, [r1], {-0}
    11dc:	0d9c0601 	ldceq	6, cr0, [ip, #4]
static void execute(int argc, char **argv) {
    11e0:	000e0000 	andeq	r0, lr, r0
    11e4:	9c010000 	stcls	0, cr0, [r1], {-0}
  for (int i = 0; table[i].command_name != NULL; i++) {
    11e8:	0000047e 	andeq	r0, r0, lr, ror r4
    11ec:	7874630d 	ldmdavc	r4!, {r0, r2, r3, r8, r9, sp, lr}^
    11f0:	01dc0100 	bicseq	r0, ip, r0, lsl #2
    11f4:	00047e2c 	andeq	r7, r4, ip, lsr #28
    11f8:	000a7a00 	andeq	r7, sl, r0, lsl #20
    if (strcmp(argv[0], table[i].command_name) == 0) {
    11fc:	000a7400 	andeq	r7, sl, r0, lsl #8
    1200:	75620d00 	strbvc	r0, [r2, #-3328]!	; 0xfffff300
      __cmd_exec_status = table[i].command(argc, &argv[0]);
    1204:	dc010066 	stcle	0, cr0, [r1], {102}	; 0x66
    1208:	02273a01 	eoreq	r3, r7, #4096	; 0x1000
    120c:	0aac0000 	beq	feb01214 <_STACK_TOP_+0xdeaf9218>
    1210:	0aa60000 	beq	fe981218 <_STACK_TOP_+0xde97921c>
  if (match_found == FALSE) {
    1214:	a8130000 	ldmdage	r3, {}	; <UNPREDICTABLE>
    printf("\"%s\": command not found. Use \"help\" to list all command.\n",
    1218:	de00000d 	cdple	0, 0, cr0, cr0, cr13, {0}
    121c:	12000004 	andne	r0, r0, #4
    __cmd_exec_status = -1;
    1220:	f3035001 	vhadd.u8	d5, d3, d1
    1224:	01125101 	tsteq	r2, r1, lsl #2
}
    1228:	01f30351 	mvnseq	r0, r1, asr r3
    122c:	14000050 	strne	r0, [r0], #-80	; 0xffffffb0
    1230:	0000b604 	andeq	fp, r0, r4, lsl #12
    1234:	05f90c00 	ldrbeq	r0, [r9, #3072]!	; 0xc00
int help(int argc, char **argv) {
    1238:	d6010000 	strle	r0, [r1], -r0
  if (argc > 1 && (strcmp(argv[1], "-l")==0)) {
    123c:	0d8e0601 	stceq	6, cr0, [lr, #4]
    1240:	000e0000 	andeq	r0, lr, r0
    1244:	9c010000 	stcls	0, cr0, [r1], {-0}
    1248:	000004de 	ldrdeq	r0, [r0], -lr
    printf("use: help -l for list only.\n\n");
    124c:	7874630d 	ldmdavc	r4!, {r0, r2, r3, r8, r9, sp, lr}^
  bool verbose = true;
    1250:	01d60100 	bicseq	r0, r6, r0, lsl #2
    verbose = false;
    1254:	00047e2c 	andeq	r7, r4, ip, lsr #28
    printf("\n");
    1258:	000ade00 	andeq	sp, sl, r0, lsl #28
    i++;
    125c:	000ad800 	andeq	sp, sl, r0, lsl #16
  while (table[i].command_name != NULL) {
    1260:	75620d00 	strbvc	r0, [r2, #-3328]!	; 0xfffff300
    1264:	d6010066 	strle	r0, [r1], -r6, rrx
    1268:	02273a01 	eoreq	r3, r7, #4096	; 0x1000
    printf(table[i].command_name);
    126c:	0b100000 	bleq	401274 <__ROM_SIZE__+0x3c1274>
    if (verbose) {
    1270:	0b0a0000 	bleq	281278 <__ROM_SIZE__+0x241278>
      printf("\n\t");
    1274:	9a130000 	bls	4c127c <__ROM_SIZE__+0x48127c>
      printf(table[i].command_help);
    1278:	b200000d 	andlt	r0, r0, #13
    127c:	12000005 	andne	r0, r0, #5
    1280:	f3035001 	vhadd.u8	d5, d3, d1
    verbose = false;
    1284:	01125101 	tsteq	r2, r1, lsl #2
}
    1288:	01f30351 	mvnseq	r0, r1, asr r3
    128c:	15000050 	strne	r0, [r0, #-80]	; 0xffffffb0
    1290:	0000054e 	andeq	r0, r0, lr, asr #10
    1294:	0d01b701 	stceq	7, cr11, [r1, #-4]
    1298:	00000d0e 	andeq	r0, r0, lr, lsl #26
    129c:	0000003a 	andeq	r0, r0, sl, lsr r0
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    12a0:	05ac9c01 	streq	r9, [ip, #3073]!	; 0xc01
static void add_command_to_history(const char *cmd_str) {
    12a4:	660e0000 	strvs	r0, [lr], -r0
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    12a8:	01000004 	tsteq	r0, r4
    12ac:	ac2001b7 	stfges	f0, [r0], #-732	; 0xfffffd24
  int index = total_num_commands % NUM_HISTORY_ENTRIES;
    12b0:	42000005 	andmi	r0, r0, #5
    12b4:	3c00000b 	stccc	0, cr0, [r0], {11}
    12b8:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    12bc:	00000595 	muleq	r0, r5, r5
  memcpy(&cmd_history[index], cmd_str, LINE_BUFF_SIZE);
    12c0:	3601b701 	strcc	fp, [r1], -r1, lsl #14
    12c4:	0000041e 	andeq	r0, r0, lr, lsl r4
    12c8:	00000b71 	andeq	r0, r0, r1, ror fp
    12cc:	00000b6b 	andeq	r0, r0, fp, ror #22
  total_num_commands++;
    12d0:	0005b417 	andeq	fp, r5, r7, lsl r4
  curr_command_ptr = total_num_commands;
    12d4:	01b90100 			; <UNDEFINED> instruction: 0x01b90100
    12d8:	0000620b 	andeq	r6, r0, fp, lsl #4
    12dc:	000ba200 	andeq	sl, fp, r0, lsl #4
    12e0:	000b9a00 	andeq	r9, fp, r0, lsl #20
static int parse_line(char **argv, char *line_buff, int argument_size) {
    12e4:	0d1e1100 	ldfeqs	f1, [lr, #-0]
    12e8:	0a3b0000 	beq	ec12f0 <__ROM_SIZE__+0xe812f0>
  int length = strlen(line_buff);
    12ec:	05530000 	ldrbeq	r0, [r3, #-0]
    12f0:	01120000 	tsteq	r2, r0
  int argc = 0;
    12f4:	123a0150 	eorsne	r0, sl, #80, 2
         pos++)
    12f8:	75025101 	strvc	r5, [r2, #-257]	; 0xfffffeff
    for (; line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    12fc:	52011200 	andpl	r1, r1, #0, 4
    1300:	00007602 	andeq	r7, r0, r2, lsl #12
    1304:	000d2811 	andeq	r2, sp, r1, lsl r8
    1308:	00072800 	andeq	r2, r7, r0, lsl #16
    if (line_buff[pos] == '\t' || line_buff[pos] == SPACE)
    130c:	00056700 	andeq	r6, r5, r0, lsl #14
    1310:	50011200 	andpl	r1, r1, r0, lsl #4
      line_buff[pos] = END_OF_LINE;
    1314:	00007502 	andeq	r7, r0, r2, lsl #10
  while (pos <= length) {
    1318:	000d3211 	andeq	r3, sp, r1, lsl r2
    if (line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    131c:	00069f00 	andeq	r9, r6, r0, lsl #30
    1320:	00057b00 	andeq	r7, r5, r0, lsl #22
    1324:	50011200 	andpl	r1, r1, r0, lsl #4
    1328:	00007502 	andeq	r7, r0, r2, lsl #10
      argv[argc++] = &line_buff[pos];
    132c:	000d3811 	andeq	r3, sp, r1, lsl r8
    1330:	0006db00 	andeq	sp, r6, r0, lsl #22
}
    1334:	00058f00 	andeq	r8, r5, r0, lsl #30
static int prefix_match(char *sub, int len, const char *str) {
    1338:	50011200 	andpl	r1, r1, r0, lsl #4
    133c:	00007502 	andeq	r7, r0, r2, lsl #10
  if (sub == NULL || str == NULL || len <= 0 || len > strlen(str)) {
    1340:	000d4213 	andeq	r4, sp, r3, lsl r2
    1344:	000a3b00 	andeq	r3, sl, r0, lsl #22
    1348:	50011200 	andpl	r1, r1, r0, lsl #4
    134c:	12007402 	andne	r7, r0, #33554432	; 0x2000000
  for (int i = 0; i<len; ++i) {
    1350:	75025101 	strvc	r5, [r2, #-257]	; 0xfffffeff
    1354:	52011200 	andpl	r1, r1, #0, 4
    if (sub[i] != str[i]) {
    1358:	00007602 	andeq	r7, r0, r2, lsl #12
    135c:	db041400 	blle	106364 <__ROM_SIZE__+0xc6364>
  for (int i = 0; i<len; ++i) {
    1360:	15000000 	strne	r0, [r0, #-0]
}
    1364:	00000551 	andeq	r0, r0, r1, asr r5
  return TRUE;
    1368:	0d019d01 	stceq	13, cr9, [r1, #-4]
      return FALSE;
    136c:	00000cca 	andeq	r0, r0, sl, asr #25
}
    1370:	00000044 	andeq	r0, r0, r4, asr #32
static void handle_up_arrow(char *cmd_buff, int *char_count) {
    1374:	069f9c01 	ldreq	r9, [pc], r1, lsl #24
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    1378:	660e0000 	strvs	r0, [lr], -r0
    137c:	01000004 	tsteq	r0, r4
    1380:	ac1d019d 	ldfges	f0, [sp], {157}	; 0x9d
      curr_command_ptr == 0) {
    1384:	de000005 	cdple	0, 0, cr0, cr0, cr5, {0}
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    1388:	d800000b 	stmdale	r0, {r0, r1, r3}
    printf("%s", cmd_buff);
    138c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1390:	00000595 	muleq	r0, r5, r5
  memset(cmd_buff, 0, LINE_BUFF_SIZE);
    1394:	33019d01 	movwcc	r9, #7425	; 0x1d01
    1398:	0000041e 	andeq	r0, r0, lr, lsl r4
  curr_command_ptr--;
    139c:	00000c0d 	andeq	r0, r0, sp, lsl #24
    13a0:	00000c07 	andeq	r0, r0, r7, lsl #24
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    13a4:	0005b417 	andeq	fp, r5, r7, lsl r4
    13a8:	019f0100 	orrseq	r0, pc, r0, lsl #2
    13ac:	0000620b 	andeq	r6, r0, fp, lsl #4
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    13b0:	000c3e00 	andeq	r3, ip, r0, lsl #28
    13b4:	000c3600 	andeq	r3, ip, r0, lsl #12
    13b8:	0cda1100 	ldfeqe	f1, [sl], {0}
    13bc:	0a3b0000 	beq	ec13c4 <__ROM_SIZE__+0xe813c4>
  *char_count = strlen(cmd_buff);
    13c0:	06270000 	strteq	r0, [r7], -r0
    13c4:	01120000 	tsteq	r2, r0
  printf("%s", cmd_buff);
    13c8:	12300150 	eorsne	r0, r0, #80, 2
    13cc:	75025101 	strvc	r5, [r2, #-257]	; 0xfffffeff
    13d0:	52011200 	andpl	r1, r1, #0, 4
    13d4:	00007602 	andeq	r7, r0, r2, lsl #12
static void handle_down_arrow(char *cmd_buff, int *char_count) {
    13d8:	000ce411 	andeq	lr, ip, r1, lsl r4
    13dc:	0008b300 	andeq	fp, r8, r0, lsl #6
  memset(cmd_buff, 0, LINE_BUFF_SIZE);
    13e0:	00063b00 	andeq	r3, r6, r0, lsl #22
    13e4:	50011200 	andpl	r1, r1, r0, lsl #4
  *char_count = 0;
    13e8:	00007502 	andeq	r7, r0, r2, lsl #10
  if (curr_command_ptr == total_num_commands) return;
    13ec:	000cee11 	andeq	lr, ip, r1, lsl lr
    13f0:	000a3b00 	andeq	r3, sl, r0, lsl #22
  curr_command_ptr++;
    13f4:	00065b00 	andeq	r5, r6, r0, lsl #22
    13f8:	50011200 	andpl	r1, r1, r0, lsl #4
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    13fc:	12007402 	andne	r7, r0, #33554432	; 0x2000000
    1400:	75025101 	strvc	r5, [r2, #-257]	; 0xfffffeff
    1404:	52011200 	andpl	r1, r1, #0, 4
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    1408:	00007602 	andeq	r7, r0, r2, lsl #12
    140c:	000cf811 	andeq	pc, ip, r1, lsl r8	; <UNPREDICTABLE>
    1410:	0009f200 	andeq	pc, r9, r0, lsl #4
    1414:	00066f00 	andeq	r6, r6, r0, lsl #30
  *char_count = strlen(cmd_buff);
    1418:	50011200 	andpl	r1, r1, r0, lsl #4
    141c:	00007502 	andeq	r7, r0, r2, lsl #10
  printf("%s", cmd_buff);
    1420:	000cfe11 	andeq	pc, ip, r1, lsl lr	; <UNPREDICTABLE>
    1424:	0009b600 	andeq	fp, r9, r0, lsl #12
}
    1428:	00068300 	andeq	r8, r6, r0, lsl #6
    142c:	50011200 	andpl	r1, r1, r0, lsl #4
void set_read_char(int (*func)(void)) { __read_char__ = func; }
    1430:	00007502 	andeq	r7, r0, r2, lsl #10
    1434:	000d0c13 	andeq	r0, sp, r3, lsl ip
    1438:	000a3b00 	andeq	r3, sl, r0, lsl #22
void set_read_char2(int (*func)(void)) { __read_char2__ = func; }
    143c:	50011200 	andpl	r1, r1, r0, lsl #4
    1440:	01123a01 	tsteq	r2, r1, lsl #20
    1444:	00750251 	rsbseq	r0, r5, r1, asr r2
void set_write_char(void (*func)(char)) { __write_char__ = func; }
    1448:	02520112 	subseq	r0, r2, #-2147483644	; 0x80000004
    144c:	00000076 	andeq	r0, r0, r6, ror r0
    1450:	00060915 	andeq	r0, r6, r5, lsl r9
void set_write_char2(void (*func)(char)) { __write_char2__ = func; }
    1454:	017f0100 	cmneq	pc, r0, lsl #2
    1458:	000c980d 	andeq	r9, ip, sp, lsl #16
    145c:	00003200 	andeq	r3, r0, r0, lsl #4
}
    1460:	db9c0100 	blle	fe701868 <_STACK_TOP_+0xde6f986c>
}
    1464:	18000006 	stmdane	r0, {r1, r2}
  if (cmd_buff == NULL || char_count <= 0) {
    1468:	00000466 	andeq	r0, r0, r6, ror #8
static void handle_tab(char *cmd_buff, int *char_count) {
    146c:	23017f01 	movwcs	r7, #7937	; 0x1f01
    1470:	000005ac 	andeq	r0, r0, ip, lsr #11
  int last_match = -1;
    1474:	09175001 	ldmdbeq	r7, {r0, ip, lr}
  int match_count = 0;
    1478:	01000005 	tsteq	r0, r5
  int i = 0;
    147c:	620b0181 	andvs	r0, fp, #1073741856	; 0x40000020
    i++;
    1480:	76000000 	strvc	r0, [r0], -r0
  while (table[i].command_name != NULL) { //loop over all commands
    1484:	7400000c 	strvc	r0, [r0], #-12
    1488:	0000000c 	andeq	r0, r0, ip
    148c:	00062a15 	andeq	r2, r6, r5, lsl sl
    if (prefix_match(cmd_buff, *char_count, table[i].command_name)) {
    1490:	01730100 	cmneq	r3, r0, lsl #2
    1494:	000c500d 	andeq	r5, ip, sp
    1498:	00004800 	andeq	r4, r0, r0, lsl #16
      match_count++;
    149c:	289c0100 	ldmcs	ip, {r8}
      printf("\n%s", table[i].command_name);
    14a0:	18000007 	stmdane	r0, {r0, r1, r2}
    14a4:	00000466 	andeq	r0, r0, r6, ror #8
      last_match = i;
    14a8:	22017301 	andcs	r7, r1, #67108864	; 0x4000000
  if (match_count == 1) {
    14ac:	000005ac 	andeq	r0, r0, ip, lsr #11
    14b0:	69105001 	ldmdbvs	r0, {r0, ip, lr}
  if (match_count) {
    14b4:	01750100 	cmneq	r5, r0, lsl #2
}
    14b8:	0000620b 	andeq	r6, r0, fp, lsl #4
    memcpy(cmd_buff, table[last_match].command_name, LINE_BUFF_SIZE);
    14bc:	000c9100 	andeq	r9, ip, r0, lsl #2
    14c0:	000c8900 	andeq	r8, ip, r0, lsl #18
    14c4:	006a1000 	rsbeq	r1, sl, r0
    14c8:	0e017501 	cfsh32eq	mvfx7, mvfx1, #1
    *char_count = strlen(cmd_buff);
    14cc:	00000062 	andeq	r0, r0, r2, rrx
    14d0:	00000ccc 	andeq	r0, r0, ip, asr #25
    14d4:	00000cc6 	andeq	r0, r0, r6, asr #25
    printf("\n");
    14d8:	05841500 	streq	r1, [r4, #1280]	; 0x500
    14dc:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    prepend_prompt();
    14e0:	0aea0d01 	beq	ffa848ec <_STACK_TOP_+0xdfa7c8f0>
    printf(PROMPT);
    14e4:	01660000 	cmneq	r6, r0
    14e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    printf("%s", cmd_buff);
    14ec:	000008b3 			; <UNDEFINED> instruction: 0x000008b3
    14f0:	0004660e 	andeq	r6, r4, lr, lsl #12
    14f4:	015e0100 	cmpeq	lr, r0, lsl #2
    14f8:	0005ac24 	andeq	sl, r5, r4, lsr #24
    14fc:	000cfb00 	andeq	pc, ip, r0, lsl #22
    1500:	000cf500 	andeq	pc, ip, r0, lsl #10
    1504:	00691000 	rsbeq	r1, r9, r0
__attribute__((weak)) int active_prompt() { return TRUE; }
    1508:	07016001 	streq	r6, [r1, -r1]
static void shell(void) {
    150c:	00000025 	andeq	r0, r0, r5, lsr #32
  int count = 0;
    1510:	00000d2b 	andeq	r0, r0, fp, lsr #26
  for (int i = 0; i < LINE_BUFF_SIZE; i++) line_buff[i] = 0;
    1514:	00000d27 	andeq	r0, r0, r7, lsr #26
    1518:	01006110 	tsteq	r0, r0, lsl r1
    151c:	620b0161 	andvs	r0, fp, #1073741848	; 0x40000018
    1520:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1524:	4a00000d 	bmi	1560 <shell+0x54>
  for (int i = 0; i < MAX_ARG_COUNT; i++) argv[i] = NULL;
    1528:	1000000d 	andne	r0, r0, sp
    152c:	61010062 	tstvs	r1, r2, rrx
    1530:	00620e01 	rsbeq	r0, r2, r1, lsl #28
    1534:	0d610000 	stcleq	0, cr0, [r1, #-0]
    1538:	0d5f0000 	ldcleq	0, cr0, [pc, #-0]	; 1540 <shell+0x34>
    153c:	63100000 	tstvs	r0, #0
  prepend_prompt();
    1540:	01610100 	cmneq	r1, r0, lsl #2
  printf(PROMPT);
    1544:	00006211 	andeq	r6, r0, r1, lsl r2
  int special_key = 0;
    1548:	000d7600 	andeq	r7, sp, r0, lsl #12
        special_key = 1;
    154c:	000d7400 	andeq	r7, sp, r0, lsl #8
    if (s == -1) { s = __read_char2__();}
    1550:	00641000 	rsbeq	r1, r4, r0
    1554:	14016101 	strne	r6, [r1], #-257	; 0xfffffeff
        line_buff[count] = END_OF_LINE;
    1558:	00000062 	andeq	r0, r0, r2, rrx
    155c:	00000d8b 	andeq	r0, r0, fp, lsl #27
    1560:	00000d89 	andeq	r0, r0, r9, lsl #27
        __write_char__(NEW_LINE);
    1564:	000b1211 	andeq	r1, fp, r1, lsl r2
    1568:	00098700 	andeq	r8, r9, r0, lsl #14
  add_command_to_history(line_buff);
    156c:	0007c700 	andeq	ip, r7, r0, lsl #14
    1570:	50011200 	andpl	r1, r1, r0, lsl #4
  argc = parse_line(argv, line_buff, MAX_ARG_COUNT);
    1574:	00007b02 	andeq	r7, r0, r2, lsl #22
    1578:	000b1811 	andeq	r1, fp, r1, lsl r8
  if (argc > 0) execute(argc, argv);
    157c:	00098700 	andeq	r8, r9, r0, lsl #14
}
    1580:	0007dd00 	andeq	sp, r7, r0, lsl #26
        if (!__echo) {
    1584:	50011200 	andpl	r1, r1, r0, lsl #4
    1588:	94489104 	strbls	r9, [r8], #-260	; 0xfffffefc
        if (count == 0) continue;
    158c:	1e110001 	cdpne	0, 1, cr0, cr1, cr1, {0}
        count--;
    1590:	8700000b 	strhi	r0, [r0, -fp]
        line_buff[count] = END_OF_LINE;
    1594:	f4000009 	vst4.8	{d0-d3}, [r0], r9
    1598:	12000007 	andne	r0, r0, #7
    159c:	91055001 	tstls	r5, r1
        delete ();
    15a0:	01947fb4 			; <UNDEFINED> instruction: 0x01947fb4
      if (__echo) {
    15a4:	0b261100 	bleq	9859ac <__ROM_SIZE__+0x9459ac>
    15a8:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
        __write_char__(c);
    15ac:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    15b0:	01120000 	tsteq	r2, r0
          delete ();
    15b4:	007a0250 	rsbseq	r0, sl, r0, asr r2
          delete ();
    15b8:	0b2c1100 	bleq	b059c0 <__ROM_SIZE__+0xac59c0>
    15bc:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    15c0:	081f0000 	ldmdaeq	pc, {}	; <UNPREDICTABLE>
        special_key = 2;
    15c4:	01120000 	tsteq	r2, r0
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    15c8:	b8910550 	ldmlt	r1, {r4, r6, r8, sl}
        special_key = 0;
    15cc:	0001947f 	andeq	r9, r1, pc, ror r4
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    15d0:	000b3211 	andeq	r3, fp, r1, lsl r2
        if (!__echo) {
    15d4:	00098700 	andeq	r8, r9, r0, lsl #14
          clear_prompt(count + 4);
    15d8:	00083600 	andeq	r3, r8, r0, lsl #12
    15dc:	50011200 	andpl	r1, r1, r0, lsl #4
        if (c == 'A') {
    15e0:	7fbc9105 	svcvc	0x00bc9105
          handle_down_arrow(line_buff, &count);
    15e4:	11000194 			; <UNDEFINED> instruction: 0x11000194
    15e8:	00000b3a 	andeq	r0, r0, sl, lsr fp
        special_key = 0;
    15ec:	00000987 	andeq	r0, r0, r7, lsl #19
          clear_prompt(count);
    15f0:	0000084a 	andeq	r0, r0, sl, asr #16
    15f4:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
          handle_up_arrow(line_buff, &count);
    15f8:	11000078 	tstne	r0, r8, ror r0
    15fc:	00000b40 	andeq	r0, r0, r0, asr #22
    1600:	00000987 	andeq	r0, r0, r7, lsl #19
        handle_tab(line_buff, &count);
    1604:	00000860 	andeq	r0, r0, r0, ror #16
    1608:	04500112 	ldrbeq	r0, [r0], #-274	; 0xfffffeee
      loop();
    160c:	01945091 			; <UNDEFINED> instruction: 0x01945091
    if (!active_prompt()) {
    1610:	0b461100 	bleq	1185a18 <__ROM_SIZE__+0x1145a18>
    1614:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
    s = __read_char__();
    1618:	08760000 	ldmdaeq	r6!, {}^	; <UNPREDICTABLE>
    161c:	01120000 	tsteq	r2, r0
    if (s == -1) { s = __read_char2__();}
    1620:	40910450 	addsmi	r0, r1, r0, asr r4
    if (s != -1) {
    1624:	11000194 			; <UNDEFINED> instruction: 0x11000194
    1628:	00000b4e 	andeq	r0, r0, lr, asr #22
      if (c == CARRIAGE_RETURN || c == NEW_LINE) {
    162c:	00000987 	andeq	r0, r0, r7, lsl #19
    1630:	0000088a 	andeq	r0, r0, sl, lsl #17
      if (c == DELETE || c == BACK_SPACE) {
    1634:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
    1638:	11000074 	tstne	r0, r4, ror r0
      } else if (c == ESCAPE) {
    163c:	00000b54 	andeq	r0, r0, r4, asr fp
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    1640:	00000987 	andeq	r0, r0, r7, lsl #19
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    1644:	000008a0 	andeq	r0, r0, r0, lsr #17
    1648:	04500112 	ldrbeq	r0, [r0], #-274	; 0xfffffeee
    164c:	01945491 			; <UNDEFINED> instruction: 0x01945491
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    1650:	0b5a1300 	bleq	1686258 <__ROM_SIZE__+0x1646258>
    1654:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
      else if (c == TAB) {
    1658:	01120000 	tsteq	r2, r0
        line_buff[count] = c;
    165c:	44910450 	ldrmi	r0, [r1], #1104	; 0x450
    1660:	00000194 	muleq	r0, r4, r1
    1664:	00058715 	andeq	r8, r5, r5, lsl r7
        count++;
    1668:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    166c:	000a780d 	andeq	r7, sl, sp, lsl #16
  if (argc > 0) execute(argc, argv);
    1670:	00007200 	andeq	r7, r0, r0, lsl #4
}
    1674:	879c0100 	ldrhi	r0, [ip, r0, lsl #2]
    1678:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    167c:	00000466 	andeq	r0, r0, r6, ror #8
    1680:	21012c01 	tstcs	r1, r1, lsl #24
void prompt() {
    1684:	000005ac 	andeq	r0, r0, ip, lsr #11
  initial_setup();
    1688:	00000da2 	andeq	r0, r0, r2, lsr #27
  exec_auto_cmds();
    168c:	00000d9e 	muleq	r0, lr, sp
  setup();
    1690:	01006910 	tsteq	r0, r0, lsl r9
    shell();
    1694:	620b012e 	andvs	r0, fp, #-2147483637	; 0x8000000b
int exec(char *cmd_str) {
    1698:	c6000000 	strgt	r0, [r0], -r0
    169c:	c000000d 	andgt	r0, r0, sp
  argc = parse_line(argv, cmd_str, MAX_ARG_COUNT);
    16a0:	1000000d 	andne	r0, r0, sp
    16a4:	00706d54 	rsbseq	r6, r0, r4, asr sp
  if (argc > 0) execute(argc, argv);
    16a8:	0b012f01 	bleq	4d2b4 <__ROM_SIZE__+0xd2b4>
  return __cmd_exec_status;
    16ac:	00000062 	andeq	r0, r0, r2, rrx
}
    16b0:	00000df2 	strdeq	r0, [r0], -r2
  if (argc > 0) execute(argc, argv);
    16b4:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    16b8:	006d5410 	rsbeq	r5, sp, r0, lsl r4
    16bc:	10012f01 	andne	r2, r1, r1, lsl #30
cmd get_function_addr(char *cmd_str) {
    16c0:	00000062 	andeq	r0, r0, r2, rrx
  for (int i = 0; table[i].command_name != NULL; i++) {
    16c4:	00000e23 	andeq	r0, r0, r3, lsr #28
    16c8:	00000e05 	andeq	r0, r0, r5, lsl #28
    16cc:	01007410 	tsteq	r0, r0, lsl r4
    16d0:	6214012f 	andsvs	r0, r4, #-1073741813	; 0xc000000b
    16d4:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    if (strcmp(cmd_str, table[i].command_name) == 0) {
    16d8:	f300000e 	vhadd.u8	d0, d0, d14
    16dc:	1100000e 	tstne	r0, lr
      return table[i].command;
    16e0:	00000aa2 	andeq	r0, r0, r2, lsr #21
    16e4:	00000987 	andeq	r0, r0, r7, lsl #19
  return NULL;
    16e8:	00000945 	andeq	r0, r0, r5, asr #18
}
    16ec:	05500112 	ldrbeq	r0, [r0, #-274]	; 0xfffffeee
    16f0:	007a007b 	rsbseq	r0, sl, fp, ror r0
    16f4:	b4110027 	ldrlt	r0, [r1], #-39	; 0xffffffd9
    16f8:	8700000a 	strhi	r0, [r0, -sl]
    16fc:	5c000009 	stcpl	0, cr0, [r0], {9}
    1700:	12000009 	andne	r0, r0, #9
    1704:	7b055001 	blvc	155710 <__ROM_SIZE__+0x115710>
    1708:	27007800 	strcs	r7, [r0, -r0, lsl #16]
    170c:	0ac61100 	beq	ff185b14 <_STACK_TOP_+0xdf17db18>
    1710:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
    1714:	09730000 	ldmdbeq	r3!, {}^	; <UNPREDICTABLE>
    1718:	01120000 	tsteq	r2, r0
    171c:	00780550 	rsbseq	r0, r8, r0, asr r5
    1720:	00270077 	eoreq	r0, r7, r7, ror r0
    1724:	000ad813 	andeq	sp, sl, r3, lsl r8
    1728:	00098700 	andeq	r8, r9, r0, lsl #14
    172c:	50011200 	andpl	r1, r1, r0, lsl #4
    1730:	7a007705 	bvc	1f34c <__RAM_SIZE__+0x1734c>
    1734:	00002700 	andeq	r2, r0, r0, lsl #14
    1738:	0004fd19 	andeq	pc, r4, r9, lsl sp	; <UNPREDICTABLE>
    173c:	01260100 			; <UNDEFINED> instruction: 0x01260100
    1740:	00006210 	andeq	r6, r0, r0, lsl r2
    1744:	000a6600 	andeq	r6, sl, r0, lsl #12
    1748:	00001200 	andeq	r1, r0, r0, lsl #4
    174c:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    1750:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    1754:	26010078 			; <UNDEFINED> instruction: 0x26010078
    1758:	00621e01 	rsbeq	r1, r2, r1, lsl #28
    175c:	0f0c0000 	svceq	0x000c0000
    1760:	0f080000 	svceq	0x00080000
    1764:	15000000 	strne	r0, [r0, #-0]
    1768:	0000060c 	andeq	r0, r0, ip, lsl #12
    176c:	0d010a01 	vstreq	s0, [r1, #-4]
    1770:	00000a34 	andeq	r0, r0, r4, lsr sl
    1774:	00000032 	andeq	r0, r0, r2, lsr r0
    1778:	09f29c01 	ldmibeq	r2!, {r0, sl, fp, ip, pc}^
    177c:	66180000 	ldrvs	r0, [r8], -r0
    1780:	01000004 	tsteq	r0, r4
    1784:	ac20010a 	stfges	f0, [r0], #-40	; 0xffffffd8
    1788:	01000005 	tsteq	r0, r5
    178c:	05091750 	streq	r1, [r9, #-1872]	; 0xfffff8b0
    1790:	0c010000 	stceq	0, cr0, [r1], {-0}
    1794:	00620b01 	rsbeq	r0, r2, r1, lsl #22
    1798:	0f2f0000 	svceq	0x002f0000
    179c:	0f2d0000 	svceq	0x002d0000
    17a0:	1a000000 	bne	17a8 <cmd_end_+0x18>
    17a4:	0000062d 	andeq	r0, r0, sp, lsr #12
    17a8:	ee0dfb01 	vmla.f64	d15, d13, d1
    17ac:	46000009 	strmi	r0, [r0], -r9
    17b0:	01000000 	mrseq	r0, (UNDEF: 0)
    17b4:	000a3b9c 	muleq	sl, ip, fp
    17b8:	04661b00 	strbteq	r1, [r6], #-2816	; 0xfffff500
    17bc:	fb010000 	blx	417c6 <__ROM_SIZE__+0x17c6>
    17c0:	0005ac1f 	andeq	sl, r5, pc, lsl ip
    17c4:	1c500100 	ldfnee	f0, [r0], {-0}
    17c8:	fd010069 	stc2	0, cr0, [r1, #-420]	; 0xfffffe5c
    17cc:	0000620b 	andeq	r6, r0, fp, lsl #4
    17d0:	000f4a00 	andeq	r4, pc, r0, lsl #20
    17d4:	000f4200 	andeq	r4, pc, r0, lsl #4
    17d8:	006a1c00 	rsbeq	r1, sl, r0, lsl #24
    17dc:	620efd01 	andvs	pc, lr, #1, 26	; 0x40
    17e0:	85000000 	strhi	r0, [r0, #-0]
    17e4:	7f00000f 	svcvc	0x0000000f
    17e8:	0000000f 	andeq	r0, r0, pc
    17ec:	0005921a 	andeq	r9, r5, sl, lsl r2
    17f0:	0ded0100 	stfeqe	f0, [sp]
    17f4:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    17f8:	0000003e 	andeq	r0, r0, lr, lsr r0
    17fc:	0aa09c01 	beq	fe828808 <_STACK_TOP_+0xde82080c>
    1800:	b41b0000 	ldrlt	r0, [fp], #-0
    1804:	01000005 	tsteq	r0, r5
    1808:	006221ed 	rsbeq	r2, r2, sp, ror #3
    180c:	50010000 	andpl	r0, r1, r0
    1810:	0004661b 	andeq	r6, r4, fp, lsl r6
    1814:	31ed0100 	mvncc	r0, r0, lsl #2
    1818:	000005ac 	andeq	r0, r0, ip, lsr #11
    181c:	951b5101 	ldrls	r5, [fp, #-257]	; 0xfffffeff
    1820:	01000005 	tsteq	r0, r5
    1824:	041e47ed 	ldreq	r4, [lr], #-2029	; 0xfffff813
    1828:	52010000 	andpl	r0, r1, #0
    182c:	0100691c 	tsteq	r0, ip, lsl r9
    1830:	00620bef 	rsbeq	r0, r2, pc, ror #23
    1834:	0fb40000 	svceq	0x00b40000
    1838:	0fae0000 	svceq	0x00ae0000
    183c:	6a1c0000 	bvs	701844 <__ROM_SIZE__+0x6c1844>
    1840:	0def0100 	stfeqe	f0, [pc]	; 1848 <cmd_end_+0xb8>
    1844:	00000062 	andeq	r0, r0, r2, rrx
    1848:	00000fe2 	andeq	r0, r0, r2, ror #31
    184c:	00000fde 	ldrdeq	r0, [r0], -lr
    1850:	05bf1d00 	ldreq	r1, [pc, #3328]!	; 2558 <rsbox+0xb6c>
    1854:	e5010000 	str	r0, [r1, #-0]
    1858:	000d8206 	andeq	r8, sp, r6, lsl #4
    185c:	00000c00 	andeq	r0, r0, r0, lsl #24
    1860:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
    1864:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    1868:	00787463 	rsbseq	r7, r8, r3, ror #8
    186c:	2125e501 			; <UNDEFINED> instruction: 0x2125e501
    1870:	06000002 	streq	r0, [r0], -r2
    1874:	00000010 	andeq	r0, r0, r0, lsl r0
    1878:	1e000010 	mcrne	0, 0, r0, cr0, cr0, {0}
    187c:	01007669 	tsteq	r0, r9, ror #12
    1880:	041e39e5 	ldreq	r3, [lr], #-2533	; 0xfffff61b
    1884:	10390000 	eorsne	r0, r9, r0
    1888:	10350000 	eorsne	r0, r5, r0
    188c:	8c130000 	ldchi	0, cr0, [r3], {-0}
    1890:	8a00000d 	bhi	18cc <cmd_end_+0x13c>
    1894:	1200000c 	andne	r0, r0, #12
    1898:	f3065001 	vhadd.u8	d5, d6, d1
    189c:	b0235001 	eorlt	r5, r3, r1
    18a0:	51011201 	tstpl	r1, r1, lsl #4
    18a4:	5101f303 	tstpl	r1, r3, lsl #6	; <UNPREDICTABLE>
    18a8:	01520112 	cmpeq	r2, r2, lsl r1
    18ac:	1d000040 	stcne	0, cr0, [r0, #-256]	; 0xffffff00
    18b0:	000004e5 	andeq	r0, r0, r5, ror #9
    18b4:	6a06e001 	bvs	1b98c0 <__ROM_SIZE__+0x1798c0>
    18b8:	1800000d 	stmdane	r0, {r0, r2, r3}
    18bc:	01000000 	mrseq	r0, (UNDEF: 0)
    18c0:	000b879c 	muleq	fp, ip, r7
    18c4:	74631e00 	strbtvc	r1, [r3], #-3584	; 0xfffff200
    18c8:	e0010078 	and	r0, r1, r8, ror r0
    18cc:	00022126 	andeq	r2, r2, r6, lsr #2
    18d0:	00105e00 	andseq	r5, r0, r0, lsl #28
    18d4:	00105a00 	andseq	r5, r0, r0, lsl #20
    18d8:	656b1e00 	strbvs	r1, [fp, #-3584]!	; 0xfffff200
    18dc:	e0010079 	and	r0, r1, r9, ror r0
    18e0:	00041e3a 	andeq	r1, r4, sl, lsr lr
    18e4:	00108000 	andseq	r8, r0, r0
    18e8:	00107c00 	andseq	r7, r0, r0, lsl #24
    18ec:	76691e00 	strbtvc	r1, [r9], -r0, lsl #28
    18f0:	4ee00100 	cdpmi	1, 14, cr0, cr0, cr0, {0}
    18f4:	0000041e 	andeq	r0, r0, lr, lsl r4
    18f8:	000010a5 	andeq	r1, r0, r5, lsr #1
    18fc:	000010a1 	andeq	r1, r0, r1, lsr #1
    1900:	000d7411 	andeq	r7, sp, r1, lsl r4
    1904:	000bde00 	andeq	sp, fp, r0, lsl #28
    1908:	000b6a00 	andeq	r6, fp, r0, lsl #20
    190c:	50011200 	andpl	r1, r1, r0, lsl #4
    1910:	12007402 	andne	r7, r0, #33554432	; 0x2000000
    1914:	f3035101 	vrhadd.u8	d5, d3, d1
    1918:	13005101 	movwne	r5, #257	; 0x101
    191c:	00000d80 	andeq	r0, r0, r0, lsl #27
    1920:	00000c8a 	andeq	r0, r0, sl, lsl #25
    1924:	03500112 	cmpeq	r0, #-2147483644	; 0x80000004
    1928:	1201b074 	andne	fp, r1, #116	; 0x74
    192c:	75025101 	strvc	r5, [r2, #-257]	; 0xfffffeff
    1930:	52011200 	andpl	r1, r1, #0, 4
    1934:	00004001 	andeq	r4, r0, r1
    1938:	0006361d 	andeq	r3, r6, sp, lsl r6
    193c:	06db0100 	ldrbeq	r0, [fp], r0, lsl #2
    1940:	00000d62 	andeq	r0, r0, r2, ror #26
    1944:	00000008 	andeq	r0, r0, r8
    1948:	0bde9c01 	bleq	ff7a8954 <_STACK_TOP_+0xdf7a0958>
    194c:	631e0000 	tstvs	lr, #0
    1950:	01007874 	tsteq	r0, r4, ror r8
    1954:	022123db 	eoreq	r2, r1, #1811939331	; 0x6c000003
    1958:	10c70000 	sbcne	r0, r7, r0
    195c:	10c30000 	sbcne	r0, r3, r0
    1960:	6b1e0000 	blvs	781968 <__ROM_SIZE__+0x741968>
    1964:	01007965 	tsteq	r0, r5, ror #18
    1968:	041e37db 	ldreq	r3, [lr], #-2011	; 0xfffff825
    196c:	10ec0000 	rscne	r0, ip, r0
    1970:	10e80000 	rscne	r0, r8, r0
    1974:	68130000 	ldmdavs	r3, {}	; <UNPREDICTABLE>
    1978:	de00000d 	cdple	0, 0, cr0, cr0, cr13, {0}
    197c:	1200000b 	andne	r0, r0, #11
    1980:	f3035001 	vhadd.u8	d5, d3, d1
    1984:	01125001 	tsteq	r2, r1
    1988:	01f30351 	mvnseq	r0, r1, asr r3
    198c:	1a000051 	bne	1ad8 <rsbox+0xec>
    1990:	0000061d 	andeq	r0, r0, sp, lsl r6
    1994:	bc0d9201 	sfmlt	f1, 1, [sp], {1}
    1998:	f4000008 	vst4.8	{d0-d3}, [r0], r8
    199c:	01000000 	mrseq	r0, (UNDEF: 0)
    19a0:	000c7a9c 	muleq	ip, ip, sl
    19a4:	05951b00 	ldreq	r1, [r5, #2816]	; 0xb00
    19a8:	92010000 	andls	r0, r1, #0
    19ac:	00022723 	andeq	r2, r2, r3, lsr #14
    19b0:	1e500100 	rdfnes	f0, f0, f0
    19b4:	0079654b 	rsbseq	r6, r9, fp, asr #10
    19b8:	1e3c9201 	cdpne	2, 3, cr9, cr12, cr1, {0}
    19bc:	11000004 	tstne	r0, r4
    19c0:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    19c4:	1c000011 	stcne	0, cr0, [r0], {17}
    19c8:	94010069 	strls	r0, [r1], #-105	; 0xffffff97
    19cc:	0000380c 	andeq	r3, r0, ip, lsl #16
    19d0:	00113800 	andseq	r3, r1, r0, lsl #16
    19d4:	00113200 	andseq	r3, r1, r0, lsl #4
    19d8:	006a1c00 	rsbeq	r1, sl, r0, lsl #24
    19dc:	380f9401 	stmdacc	pc, {r0, sl, ip, pc}	; <UNPREDICTABLE>
    19e0:	66000000 	strvs	r0, [r0], -r0
    19e4:	62000011 	andvs	r0, r0, #17
    19e8:	1c000011 	stcne	0, cr0, [r0], {17}
    19ec:	9401006b 	strls	r0, [r1], #-107	; 0xffffff95
    19f0:	00003812 	andeq	r3, r0, r2, lsl r8
    19f4:	00119000 	andseq	r9, r1, r0
    19f8:	00118600 	andseq	r8, r1, r0, lsl #12
    19fc:	05030b00 	streq	r0, [r3, #-2816]	; 0xfffff500
    1a00:	95010000 	strls	r0, [r1, #-0]
    1a04:	000c7a0b 	andeq	r7, ip, fp, lsl #20
    1a08:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a0c:	00096a1f 	andeq	r6, r9, pc, lsl sl
    1a10:	00001000 	andeq	r1, r0, r0
    1a14:	05582000 	ldrbeq	r2, [r8, #-0]
    1a18:	b3010000 	movwlt	r0, #4096	; 0x1000
    1a1c:	00006e17 	andeq	r6, r0, r7, lsl lr
    1a20:	0011e900 	andseq	lr, r1, r0, lsl #18
    1a24:	0011e300 	andseq	lr, r1, r0, lsl #6
    1a28:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1a2c:	00000062 	andeq	r0, r0, r2, rrx
    1a30:	00000c8a 	andeq	r0, r0, sl, lsl #25
    1a34:	0000380a 	andeq	r3, r0, sl, lsl #16
    1a38:	21000300 	mrscs	r0, LR_irq
    1a3c:	00000547 	andeq	r0, r0, r7, asr #10
    1a40:	00000547 	andeq	r0, r0, r7, asr #10
    1a44:	00073805 	andeq	r3, r7, r5, lsl #16
    1a48:	0000014c 	andeq	r0, r0, ip, asr #2
    1a4c:	0ac90004 	beq	ff241a64 <_STACK_TOP_+0xdf239a68>
    1a50:	01040000 	mrseq	r0, (UNDEF: 4)
    1a54:	0000005f 	andeq	r0, r0, pc, asr r0
    1a58:	00064d0c 	andeq	r4, r6, ip, lsl #26
    1a5c:	00013e00 	andeq	r3, r1, r0, lsl #28
    1a60:	000e9c00 	andeq	r9, lr, r0, lsl #24
    1a64:	00005a00 	andeq	r5, r0, r0, lsl #20
    1a68:	00172400 	andseq	r2, r7, r0, lsl #8
    1a6c:	06010200 	streq	r0, [r1], -r0, lsl #4
    1a70:	00000053 	andeq	r0, r0, r3, asr r0
    1a74:	2f050202 	svccs	0x00050202
    1a78:	02000001 	andeq	r0, r0, #1
    1a7c:	011f0504 	tsteq	pc, r4, lsl #10
    1a80:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1a84:	00011a05 	andeq	r1, r1, r5, lsl #20
    1a88:	08010200 	stmdaeq	r1, {r9}
    1a8c:	00000051 	andeq	r0, r0, r1, asr r0
    1a90:	e4070202 	str	r0, [r7], #-514	; 0xfffffdfe
    1a94:	03000000 	movweq	r0, #0
    1a98:	0000032b 	andeq	r0, r0, fp, lsr #6
    1a9c:	5b193402 	blpl	64eaac <__ROM_SIZE__+0x60eaac>
    1aa0:	02000000 	andeq	r0, r0, #0
    1aa4:	01030704 	tsteq	r3, r4, lsl #14
    1aa8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1aac:	0000fe07 	andeq	pc, r0, r7, lsl #28
    1ab0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1ab4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1ab8:	08070402 	stmdaeq	r7, {r1, sl}
    1abc:	05000001 	streq	r0, [r0, #-1]
    1ac0:	00000673 	andeq	r0, r0, r3, ror r6
    1ac4:	4f0a1b01 	svcmi	0x000a1b01
    1ac8:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    1acc:	3e00000e 	cdpcc	0, 0, cr0, cr0, cr14, {0}
    1ad0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ad4:	0000e69c 	muleq	r0, ip, r6
    1ad8:	74730600 	ldrbtvc	r0, [r3], #-1536	; 0xfffffa00
    1adc:	1b010072 	blne	41cac <__ROM_SIZE__+0x1cac>
    1ae0:	0000e61b 	andeq	lr, r0, fp, lsl r6
    1ae4:	00121d00 	andseq	r1, r2, r0, lsl #26
    1ae8:	00121900 	andseq	r1, r2, r0, lsl #18
    1aec:	65680700 	strbvs	r0, [r8, #-1792]!	; 0xfffff900
    1af0:	1c010078 	stcne	0, cr0, [r1], {120}	; 0x78
    1af4:	00004f0c 	andeq	r4, r0, ip, lsl #30
    1af8:	00124300 	andseq	r4, r2, r0, lsl #6
    1afc:	00123b00 	andseq	r3, r2, r0, lsl #22
    1b00:	04c60800 	strbeq	r0, [r6], #2048	; 0x800
    1b04:	1d010000 	stcne	0, cr0, [r1, #-0]
    1b08:	00004f0c 	andeq	r4, r0, ip, lsl #30
    1b0c:	00128400 	andseq	r8, r2, r0, lsl #8
    1b10:	00127c00 	andseq	r7, r2, r0, lsl #24
    1b14:	00900900 	addseq	r0, r0, r0, lsl #18
    1b18:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
    1b1c:	111f0100 	tstne	pc, r0, lsl #2
    1b20:	0000004f 	andeq	r0, r0, pc, asr #32
    1b24:	000012bd 			; <UNDEFINED> instruction: 0x000012bd
    1b28:	000012b9 			; <UNDEFINED> instruction: 0x000012b9
    1b2c:	040a0000 	streq	r0, [sl], #-0
    1b30:	000000f3 	strdeq	r0, [r0], -r3
    1b34:	5a080102 	bpl	201f44 <__ROM_SIZE__+0x1c1f44>
    1b38:	0b000000 	bleq	1b40 <rsbox+0x154>
    1b3c:	000000ec 	andeq	r0, r0, ip, ror #1
    1b40:	0006780c 	andeq	r7, r6, ip, lsl #16
    1b44:	05130100 	ldreq	r0, [r3, #-256]	; 0xffffff00
    1b48:	00000069 	andeq	r0, r0, r9, rrx
    1b4c:	00000e9c 	muleq	r0, ip, lr
    1b50:	0000001c 	andeq	r0, r0, ip, lsl r0
    1b54:	73069c01 	movwvc	r9, #27649	; 0x6c01
    1b58:	01007274 	tsteq	r0, r4, ror r2
    1b5c:	00e61613 	rsceq	r1, r6, r3, lsl r6
    1b60:	12e00000 	rscne	r0, r0, #0
    1b64:	12dc0000 	sbcsne	r0, ip, #0
    1b68:	72070000 	andvc	r0, r7, #0
    1b6c:	01007365 	tsteq	r0, r5, ror #6
    1b70:	00690714 	rsbeq	r0, r9, r4, lsl r7
    1b74:	13040000 	movwne	r0, #16384	; 0x4000
    1b78:	12fe0000 	rscsne	r0, lr, #0
    1b7c:	78090000 	stmdavc	r9, {}	; <UNPREDICTABLE>
    1b80:	07000000 	streq	r0, [r0, -r0]
    1b84:	15010069 	strne	r0, [r1, #-105]	; 0xffffff97
    1b88:	0000690c 	andeq	r6, r0, ip, lsl #18
    1b8c:	00133200 	andseq	r3, r3, r0, lsl #4
    1b90:	00132e00 	andseq	r2, r3, r0, lsl #28
    1b94:	00000000 	andeq	r0, r0, r0
    1b98:	00000580 	andeq	r0, r0, r0, lsl #11
    1b9c:	0b8f0004 	bleq	fe3c1bb4 <_STACK_TOP_+0xde3b9bb8>
    1ba0:	01040000 	mrseq	r0, (UNDEF: 4)
    1ba4:	0000005f 	andeq	r0, r0, pc, asr r0
    1ba8:	0006b80c 	andeq	fp, r6, ip, lsl #16
    1bac:	00013e00 	andeq	r3, r1, r0, lsl #28
    1bb0:	000ef800 	andeq	pc, lr, r0, lsl #16
    1bb4:	00016000 	andeq	r6, r1, r0
    1bb8:	00189800 	andseq	r9, r8, r0, lsl #16
    1bbc:	06010200 	streq	r0, [r1], -r0, lsl #4
    1bc0:	00000053 	andeq	r0, r0, r3, asr r0
    1bc4:	2f050202 	svccs	0x00050202
    1bc8:	02000001 	andeq	r0, r0, #1
    1bcc:	011f0504 	tsteq	pc, r4, lsl #10
    1bd0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1bd4:	00011a05 	andeq	r1, r1, r5, lsl #20
    1bd8:	08010200 	stmdaeq	r1, {r9}
    1bdc:	00000051 	andeq	r0, r0, r1, asr r0
    1be0:	e4070202 	str	r0, [r7], #-514	; 0xfffffdfe
    1be4:	03000000 	movweq	r0, #0
    1be8:	0000032b 	andeq	r0, r0, fp, lsr #6
    1bec:	5b193402 	blpl	64ebfc <__ROM_SIZE__+0x60ebfc>
    1bf0:	02000000 	andeq	r0, r0, #0
    1bf4:	01030704 	tsteq	r3, r4, lsl #14
    1bf8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1bfc:	0000fe07 	andeq	pc, r0, r7, lsl #28
    1c00:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1c04:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1c08:	08070402 	stmdaeq	r7, {r1, sl}
    1c0c:	03000001 	movweq	r0, #1
    1c10:	00000689 	andeq	r0, r0, r9, lsl #13
    1c14:	701a5602 	andsvc	r5, sl, r2, lsl #12
    1c18:	02000000 	andeq	r0, r0, #0
    1c1c:	015f0408 	cmpeq	pc, r8, lsl #8
    1c20:	63050000 	movwvs	r0, #20480	; 0x5000
    1c24:	0300646d 	movweq	r6, #1133	; 0x46d
    1c28:	00960f2b 	addseq	r0, r6, fp, lsr #30
    1c2c:	04060000 	streq	r0, [r6], #-0
    1c30:	0000009c 	muleq	r0, ip, r0
    1c34:	00006907 	andeq	r6, r0, r7, lsl #18
    1c38:	0000b000 	andeq	fp, r0, r0
    1c3c:	00690800 	rsbeq	r0, r9, r0, lsl #16
    1c40:	b0080000 	andlt	r0, r8, r0
    1c44:	00000000 	andeq	r0, r0, r0
    1c48:	00b60406 	adcseq	r0, r6, r6, lsl #8
    1c4c:	04060000 	streq	r0, [r6], #-0
    1c50:	000000bc 	strheq	r0, [r0], -ip
    1c54:	5a080102 	bpl	202064 <__ROM_SIZE__+0x1c2064>
    1c58:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1c5c:	000000bc 	strheq	r0, [r0], -ip
    1c60:	34030c0a 	strcc	r0, [r3], #-3082	; 0xfffff3f6
    1c64:	0000f909 	andeq	pc, r0, r9, lsl #18
    1c68:	00370b00 	eorseq	r0, r7, r0, lsl #22
    1c6c:	35030000 	strcc	r0, [r3, #-0]
    1c70:	0000f90f 	andeq	pc, r0, pc, lsl #18
    1c74:	000b0000 	andeq	r0, fp, r0
    1c78:	03000000 	movweq	r0, #0
    1c7c:	00f90f36 	rscseq	r0, r9, r6, lsr pc
    1c80:	0b040000 	bleq	101c88 <__ROM_SIZE__+0xc1c88>
    1c84:	0000002f 	andeq	r0, r0, pc, lsr #32
    1c88:	8a073703 	bhi	1cf89c <__ROM_SIZE__+0x18f89c>
    1c8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1c90:	c3040600 	movwgt	r0, #17920	; 0x4600
    1c94:	03000000 	movweq	r0, #0
    1c98:	00000159 	andeq	r0, r0, r9, asr r1
    1c9c:	c8033803 	stmdagt	r3, {r0, r1, fp, ip, sp}
    1ca0:	0c000000 	stceq	0, cr0, [r0], {-0}
    1ca4:	0000067d 	andeq	r0, r0, sp, ror r6
    1ca8:	ff017f01 			; <UNDEFINED> instruction: 0xff017f01
    1cac:	05000000 	streq	r0, [r0, #-0]
    1cb0:	00175403 	andseq	r5, r7, r3, lsl #8
    1cb4:	06f00c00 	ldrbteq	r0, [r0], r0, lsl #24
    1cb8:	80010000 	andhi	r0, r1, r0
    1cbc:	0000ff01 	andeq	pc, r0, r1, lsl #30
    1cc0:	48030500 	stmdami	r3, {r8, sl}
    1cc4:	0c000017 	stceq	0, cr0, [r0], {23}
    1cc8:	000006e8 	andeq	r0, r0, r8, ror #13
    1ccc:	ff018301 			; <UNDEFINED> instruction: 0xff018301
    1cd0:	05000000 	streq	r0, [r0, #-0]
    1cd4:	00173c03 	andseq	r3, r7, r3, lsl #24
    1cd8:	06a00c00 	strteq	r0, [r0], r0, lsl #24
    1cdc:	84010000 	strhi	r0, [r1], #-0
    1ce0:	0000ff01 	andeq	pc, r0, r1, lsl #30
    1ce4:	30030500 	andcc	r0, r3, r0, lsl #10
    1ce8:	0c000017 	stceq	0, cr0, [r0], {23}
    1cec:	00000693 	muleq	r0, r3, r6
    1cf0:	ff018501 			; <UNDEFINED> instruction: 0xff018501
    1cf4:	05000000 	streq	r0, [r0, #-0]
    1cf8:	00172403 	andseq	r2, r7, r3, lsl #8
    1cfc:	06f40d00 	ldrbteq	r0, [r4], r0, lsl #26
    1d00:	67010000 	strvs	r0, [r1, -r0]
    1d04:	00006905 	andeq	r6, r0, r5, lsl #18
    1d08:	00100800 	andseq	r0, r0, r0, lsl #16
    1d0c:	00005000 	andeq	r5, r0, r0
    1d10:	5d9c0100 	ldfpls	f0, [ip]
    1d14:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1d18:	00000115 	andeq	r0, r0, r5, lsl r1
    1d1c:	69116701 	ldmdbvs	r1, {r0, r8, r9, sl, sp, lr}
    1d20:	55000000 	strpl	r0, [r0, #-0]
    1d24:	51000013 	tstpl	r0, r3, lsl r0
    1d28:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1d2c:	00000139 	andeq	r0, r0, r9, lsr r1
    1d30:	b01d6701 	andslt	r6, sp, r1, lsl #14
    1d34:	7a000000 	bvc	1d3c <rsbox+0x350>
    1d38:	76000013 			; <UNDEFINED> instruction: 0x76000013
    1d3c:	0f000013 	svceq	0x00000013
    1d40:	000006e2 	andeq	r0, r0, r2, ror #13
    1d44:	3e017a01 	vmlacc.f32	s14, s2, s2
    1d48:	10000010 	andne	r0, r0, r0, lsl r0
    1d4c:	00000936 	andeq	r0, r0, r6, lsr r9
    1d50:	4f0c6d01 	svcmi	0x000c6d01
    1d54:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    1d58:	98000013 	stmdals	r0, {r0, r1, r4}
    1d5c:	10000013 	andne	r0, r0, r3, lsl r0
    1d60:	000006a8 	andeq	r0, r0, r8, lsr #13
    1d64:	4f0c6e01 	svcmi	0x000c6e01
    1d68:	cf000000 	svcgt	0x00000000
    1d6c:	c7000013 	smladgt	r0, r3, r0, r0
    1d70:	10000013 	andne	r0, r0, r3, lsl r0
    1d74:	00000872 	andeq	r0, r0, r2, ror r8
    1d78:	4f0c7501 	svcmi	0x000c7501
    1d7c:	05000000 	streq	r0, [r0, #-0]
    1d80:	03000014 	movweq	r0, #20
    1d84:	10000014 	andne	r0, r0, r4, lsl r0
    1d88:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    1d8c:	4f0c7601 	svcmi	0x000c7601
    1d90:	1c000000 	stcne	0, cr0, [r0], {-0}
    1d94:	18000014 	stmdane	r0, {r2, r4}
    1d98:	11000014 	tstne	r0, r4, lsl r0
    1d9c:	00001016 	andeq	r1, r0, r6, lsl r0
    1da0:	0000055f 	andeq	r0, r0, pc, asr r5
    1da4:	00101e11 	andseq	r1, r0, r1, lsl lr
    1da8:	00056b00 	andeq	r6, r5, r0, lsl #22
    1dac:	10341200 	eorsne	r1, r4, r0, lsl #4
    1db0:	05770000 	ldrbeq	r0, [r7, #-0]!
    1db4:	02320000 	eorseq	r0, r2, #0
    1db8:	01130000 	tsteq	r3, r0
    1dbc:	28030550 	stmdacs	r3, {r4, r6, r8, sl}
    1dc0:	1300001c 	movwne	r0, #28
    1dc4:	75025201 	strvc	r5, [r2, #-513]	; 0xfffffdff
    1dc8:	3e120000 	cdpcc	0, 1, cr0, cr2, cr0, {0}
    1dcc:	77000010 	smladvc	r0, r0, r0, r0
    1dd0:	49000005 	stmdbmi	r0, {r0, r2}
    1dd4:	13000002 	movwne	r0, #2
    1dd8:	03055001 	movweq	r5, #20481	; 0x5001
    1ddc:	00001b80 	andeq	r1, r0, r0, lsl #23
    1de0:	10461400 	subne	r1, r6, r0, lsl #8
    1de4:	05770000 	ldrbeq	r0, [r7, #-0]!
    1de8:	01130000 	tsteq	r3, r0
    1dec:	40030550 	andmi	r0, r3, r0, asr r5
    1df0:	0000001c 	andeq	r0, r0, ip, lsl r0
    1df4:	06810d00 	streq	r0, [r1], r0, lsl #26
    1df8:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    1dfc:	00006905 	andeq	r6, r0, r5, lsl #18
    1e00:	000fa000 	andeq	sl, pc, r0
    1e04:	00006800 	andeq	r6, r0, r0, lsl #16
    1e08:	589c0100 	ldmpl	ip, {r8}
    1e0c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    1e10:	00000115 	andeq	r0, r0, r5, lsl r1
    1e14:	69114801 	ldmdbvs	r1, {r0, fp, lr}
    1e18:	42000000 	andmi	r0, r0, #0
    1e1c:	3e000014 	mcrcc	0, 0, r0, cr0, cr4, {0}
    1e20:	0e000014 	mcreq	0, 0, r0, cr0, cr4, {0}
    1e24:	00000139 	andeq	r0, r0, r9, lsr r1
    1e28:	b01d4801 	andslt	r4, sp, r1, lsl #16
    1e2c:	67000000 	strvs	r0, [r0, -r0]
    1e30:	63000014 	movwvs	r0, #20
    1e34:	0f000014 	svceq	0x00000014
    1e38:	000006e2 	andeq	r0, r0, r2, ror #13
    1e3c:	ee016201 	cdp	2, 0, cr6, cr1, cr1, {0}
    1e40:	1000000f 	andne	r0, r0, pc
    1e44:	00000936 	andeq	r0, r0, r6, lsr r9
    1e48:	4f0c4e01 	svcmi	0x000c4e01
    1e4c:	8b000000 	blhi	1e54 <rsbox+0x468>
    1e50:	85000014 	strhi	r0, [r0, #-20]	; 0xffffffec
    1e54:	10000014 	andne	r0, r0, r4, lsl r0
    1e58:	000006a8 	andeq	r0, r0, r8, lsr #13
    1e5c:	4f0c4f01 	svcmi	0x000c4f01
    1e60:	ba000000 	blt	1e68 <rsbox+0x47c>
    1e64:	b4000014 	strlt	r0, [r0], #-20	; 0xffffffec
    1e68:	10000014 	andne	r0, r0, r4, lsl r0
    1e6c:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    1e70:	4f0c5001 	svcmi	0x000c5001
    1e74:	ef000000 	svc	0x00000000
    1e78:	e3000014 	movw	r0, #20
    1e7c:	10000014 	andne	r0, r0, r4, lsl r0
    1e80:	00000872 	andeq	r0, r0, r2, ror r8
    1e84:	4f0c5c01 	svcmi	0x000c5c01
    1e88:	3f000000 	svccc	0x00000000
    1e8c:	39000015 	stmdbcc	r0, {r0, r2, r4}
    1e90:	11000015 	tstne	r0, r5, lsl r0
    1e94:	00000fae 	andeq	r0, r0, lr, lsr #31
    1e98:	0000055f 	andeq	r0, r0, pc, asr r5
    1e9c:	000fb611 	andeq	fp, pc, r1, lsl r6	; <UNPREDICTABLE>
    1ea0:	00056b00 	andeq	r6, r5, r0, lsl #22
    1ea4:	0fbe1100 	svceq	0x00be1100
    1ea8:	056b0000 	strbeq	r0, [fp, #-0]!
    1eac:	e6120000 	ldr	r0, [r2], -r0
    1eb0:	7700000f 	strvc	r0, [r0, -pc]
    1eb4:	2d000005 	stccs	0, cr0, [r0, #-20]	; 0xffffffec
    1eb8:	13000003 	movwne	r0, #3
    1ebc:	03055001 	movweq	r5, #20481	; 0x5001
    1ec0:	00001b80 	andeq	r1, r0, r0, lsl #23
    1ec4:	0fee1200 	svceq	0x00ee1200
    1ec8:	05770000 	ldrbeq	r0, [r7, #-0]!
    1ecc:	03440000 	movteq	r0, #16384	; 0x4000
    1ed0:	01130000 	tsteq	r3, r0
    1ed4:	a8030550 	stmdage	r3, {r4, r6, r8, sl}
    1ed8:	0000001b 	andeq	r0, r0, fp, lsl r0
    1edc:	000ff614 	andeq	pc, pc, r4, lsl r6	; <UNPREDICTABLE>
    1ee0:	00057700 	andeq	r7, r5, r0, lsl #14
    1ee4:	50011300 	andpl	r1, r1, r0, lsl #6
    1ee8:	1bcc0305 	blne	ff302b04 <_STACK_TOP_+0xdf2fab08>
    1eec:	00000000 	andeq	r0, r0, r0
    1ef0:	0006970d 	andeq	r9, r6, sp, lsl #14
    1ef4:	05340100 	ldreq	r0, [r4, #-256]!	; 0xffffff00
    1ef8:	00000069 	andeq	r0, r0, r9, rrx
    1efc:	00000f58 	andeq	r0, r0, r8, asr pc
    1f00:	00000048 	andeq	r0, r0, r8, asr #32
    1f04:	04319c01 	ldrteq	r9, [r1], #-3073	; 0xfffff3ff
    1f08:	150e0000 	strne	r0, [lr, #-0]
    1f0c:	01000001 	tsteq	r0, r1
    1f10:	00691234 	rsbeq	r1, r9, r4, lsr r2
    1f14:	15700000 	ldrbne	r0, [r0, #-0]!
    1f18:	15680000 	strbne	r0, [r8, #-0]!
    1f1c:	390e0000 	stmdbcc	lr, {}	; <UNPREDICTABLE>
    1f20:	01000001 	tsteq	r0, r1
    1f24:	00b01e34 	adcseq	r1, r0, r4, lsr lr
    1f28:	15b60000 	ldrne	r0, [r6, #0]!
    1f2c:	15aa0000 	strne	r0, [sl, #0]!
    1f30:	36100000 	ldrcc	r0, [r0], -r0
    1f34:	01000009 	tsteq	r0, r9
    1f38:	004f0c3a 	subeq	r0, pc, sl, lsr ip	; <UNPREDICTABLE>
    1f3c:	160c0000 	strne	r0, [ip], -r0
    1f40:	16060000 	strne	r0, [r6], -r0
    1f44:	5e100000 	cdppl	0, 1, cr0, cr0, cr0, {0}
    1f48:	01000005 	tsteq	r0, r5
    1f4c:	004f0c3b 	subeq	r0, pc, fp, lsr ip	; <UNPREDICTABLE>
    1f50:	16390000 	ldrtne	r0, [r9], -r0
    1f54:	16350000 	ldrtne	r0, [r5], -r0
    1f58:	a8150000 	ldmdage	r5, {}	; <UNPREDICTABLE>
    1f5c:	0b000000 	bleq	1f64 <rsbox+0x578>
    1f60:	16000004 	strne	r0, [r0], -r4
    1f64:	3d010069 	stccc	0, cr0, [r1, #-420]	; 0xfffffe5c
    1f68:	00004f11 	andeq	r4, r0, r1, lsl pc
    1f6c:	00165b00 	andseq	r5, r6, r0, lsl #22
    1f70:	00165700 	andseq	r5, r6, r0, lsl #14
    1f74:	08721000 	ldmdaeq	r2!, {ip}^
    1f78:	3d010000 	stccc	0, cr0, [r1, #-0]
    1f7c:	00004f18 	andeq	r4, r0, r8, lsl pc
    1f80:	00167e00 	andseq	r7, r6, r0, lsl #28
    1f84:	00167a00 	andseq	r7, r6, r0, lsl #20
    1f88:	0f8c1400 	svceq	0x008c1400
    1f8c:	05770000 	ldrbeq	r0, [r7, #-0]!
    1f90:	01130000 	tsteq	r3, r0
    1f94:	0c030550 	cfstr32eq	mvfx0, [r3], {80}	; 0x50
    1f98:	1300001b 	movwne	r0, #27
    1f9c:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
    1fa0:	11000000 	mrsne	r0, (UNDEF: 0)
    1fa4:	00000f66 	andeq	r0, r0, r6, ror #30
    1fa8:	0000055f 	andeq	r0, r0, pc, asr r5
    1fac:	000f6e11 	andeq	r6, pc, r1, lsl lr	; <UNPREDICTABLE>
    1fb0:	00056b00 	andeq	r6, r5, r0, lsl #22
    1fb4:	0f7c1400 	svceq	0x007c1400
    1fb8:	05770000 	ldrbeq	r0, [r7, #-0]!
    1fbc:	01130000 	tsteq	r3, r0
    1fc0:	48030550 	stmdami	r3, {r4, r6, r8, sl}
    1fc4:	0000001b 	andeq	r0, r0, fp, lsl r0
    1fc8:	33771700 	cmncc	r7, #0, 14
    1fcc:	28010032 	stmdacs	r1, {r1, r4, r5}
    1fd0:	00006905 	andeq	r6, r0, r5, lsl #18
    1fd4:	000f2800 	andeq	r2, pc, r0, lsl #16
    1fd8:	00003000 	andeq	r3, r0, r0
    1fdc:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    1fe0:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    1fe4:	00000115 	andeq	r0, r0, r5, lsl r1
    1fe8:	690d2801 	stmdbvs	sp, {r0, fp, sp}
    1fec:	a5000000 	strge	r0, [r0, #-0]
    1ff0:	9d000016 	stcls	0, cr0, [r0, #-88]	; 0xffffffa8
    1ff4:	0e000016 	mcreq	0, 0, r0, cr0, cr6, {0}
    1ff8:	00000139 	andeq	r0, r0, r9, lsr r1
    1ffc:	b0192801 	andslt	r2, r9, r1, lsl #16
    2000:	e7000000 	str	r0, [r0, -r0]
    2004:	df000016 	svcle	0x00000016
    2008:	10000016 	andne	r0, r0, r6, lsl r0
    200c:	00000936 	andeq	r0, r0, r6, lsr r9
    2010:	4f0c2d01 	svcmi	0x000c2d01
    2014:	1f000000 	svcne	0x00000000
    2018:	1b000017 	blne	207c <rsbox+0x690>
    201c:	10000017 	andne	r0, r0, r7, lsl r0
    2020:	00000872 	andeq	r0, r0, r2, ror r8
    2024:	4f0c2e01 	svcmi	0x000c2e01
    2028:	3f000000 	svccc	0x00000000
    202c:	3d000017 	stccc	0, cr0, [r0, #-92]	; 0xffffffa4
    2030:	11000017 	tstne	r0, r7, lsl r0
    2034:	00000f36 	andeq	r0, r0, r6, lsr pc
    2038:	0000055f 	andeq	r0, r0, pc, asr r5
    203c:	000f3e11 	andeq	r3, pc, r1, lsl lr	; <UNPREDICTABLE>
    2040:	00055f00 	andeq	r5, r5, r0, lsl #30
    2044:	0f4c1400 	svceq	0x004c1400
    2048:	05770000 	ldrbeq	r0, [r7, #-0]!
    204c:	01130000 	tsteq	r3, r0
    2050:	18030550 	stmdane	r3, {r4, r6, r8, sl}
    2054:	0000001b 	andeq	r0, r0, fp, lsl r0
    2058:	33721700 	cmncc	r2, #0, 14
    205c:	19010032 	stmdbne	r1, {r1, r4, r5}
    2060:	00006905 	andeq	r6, r0, r5, lsl #18
    2064:	000ef800 	andeq	pc, lr, r0, lsl #16
    2068:	00003000 	andeq	r3, r0, r0
    206c:	5f9c0100 	svcpl	0x009c0100
    2070:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    2074:	00000115 	andeq	r0, r0, r5, lsl r1
    2078:	690d1901 	stmdbvs	sp, {r0, r8, fp, ip}
    207c:	5a000000 	bpl	2084 <rsbox+0x698>
    2080:	52000017 	andpl	r0, r0, #23
    2084:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
    2088:	00000139 	andeq	r0, r0, r9, lsr r1
    208c:	b0191901 	andslt	r1, r9, r1, lsl #18
    2090:	9c000000 	stcls	0, cr0, [r0], {-0}
    2094:	94000017 	strls	r0, [r0], #-23	; 0xffffffe9
    2098:	10000017 	andne	r0, r0, r7, lsl r0
    209c:	00000936 	andeq	r0, r0, r6, lsr r9
    20a0:	4f0c1f01 	svcmi	0x000c1f01
    20a4:	da000000 	ble	20ac <rsbox+0x6c0>
    20a8:	d6000017 			; <UNDEFINED> instruction: 0xd6000017
    20ac:	10000017 	andne	r0, r0, r7, lsl r0
    20b0:	00000872 	andeq	r0, r0, r2, ror r8
    20b4:	4f0c2001 	svcmi	0x000c2001
    20b8:	fa000000 	blx	20c0 <rsbox+0x6d4>
    20bc:	f8000017 			; <UNDEFINED> instruction: 0xf8000017
    20c0:	11000017 	tstne	r0, r7, lsl r0
    20c4:	00000f04 	andeq	r0, r0, r4, lsl #30
    20c8:	0000055f 	andeq	r0, r0, pc, asr r5
    20cc:	000f0e12 	andeq	r0, pc, r2, lsl lr	; <UNPREDICTABLE>
    20d0:	00057700 	andeq	r7, r5, r0, lsl #14
    20d4:	00054b00 	andeq	r4, r5, r0, lsl #22
    20d8:	50011300 	andpl	r1, r1, r0, lsl #6
    20dc:	1b0c0305 	blne	302cf8 <__ROM_SIZE__+0x2c2cf8>
    20e0:	14000000 	strne	r0, [r0], #-0
    20e4:	00000f1a 	andeq	r0, r0, sl, lsl pc
    20e8:	00000577 	andeq	r0, r0, r7, ror r5
    20ec:	05500113 	ldrbeq	r0, [r0, #-275]	; 0xfffffeed
    20f0:	001aec03 	andseq	lr, sl, r3, lsl #24
    20f4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    20f8:	00000673 	andeq	r0, r0, r3, ror r6
    20fc:	00000673 	andeq	r0, r0, r3, ror r6
    2100:	180a2604 	stmdane	sl, {r2, r9, sl, sp}
    2104:	00000678 	andeq	r0, r0, r8, ror r6
    2108:	00000678 	andeq	r0, r0, r8, ror r6
    210c:	18051f04 	stmdane	r5, {r2, r8, r9, sl, fp, ip}
    2110:	00000128 	andeq	r0, r0, r8, lsr #2
    2114:	00000128 	andeq	r0, r0, r8, lsr #2
    2118:	00052c05 	andeq	r2, r5, r5, lsl #24
    211c:	00000226 	andeq	r0, r0, r6, lsr #4
    2120:	0cfe0004 	ldcleq	0, cr0, [lr], #16
    2124:	01040000 	mrseq	r0, (UNDEF: 4)
    2128:	0000005f 	andeq	r0, r0, pc, asr r0
    212c:	0007270c 	andeq	r2, r7, ip, lsl #14
    2130:	00013e00 	andeq	r3, r1, r0, lsl #28
    2134:	00105800 	andseq	r5, r0, r0, lsl #16
    2138:	00006000 	andeq	r6, r0, r0
    213c:	001b9e00 	andseq	r9, fp, r0, lsl #28
    2140:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    2144:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2148:	00061603 	andeq	r1, r6, r3, lsl #12
    214c:	17d10200 	ldrbne	r0, [r1, r0, lsl #4]
    2150:	00000038 	andeq	r0, r0, r8, lsr r0
    2154:	08070404 	stmdaeq	r7, {r2, sl}
    2158:	04000001 	streq	r0, [r0], #-1
    215c:	011a0508 	tsteq	sl, r8, lsl #10
    2160:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    2164:	00015f04 	andeq	r5, r1, r4, lsl #30
    2168:	03660500 	cmneq	r6, #0, 10
    216c:	35010000 	strcc	r0, [r1, #-0]
    2170:	0000be07 	andeq	fp, r0, r7, lsl #28
    2174:	0010a800 	andseq	sl, r0, r0, lsl #16
    2178:	00001000 	andeq	r1, r0, r0
    217c:	be9c0100 	fmllte	f0, f4, f0
    2180:	06000000 	streq	r0, [r0], -r0
    2184:	000006fc 	strdeq	r0, [r0], -ip
    2188:	be143501 	cfmul32lt	mvfx3, mvfx4, mvfx1
    218c:	11000000 	mrsne	r0, (UNDEF: 0)
    2190:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
    2194:	07000018 	smladeq	r0, r8, r0, r0
    2198:	006c6176 	rsbeq	r6, ip, r6, ror r1
    219c:	251e3501 	ldrcs	r3, [lr, #-1281]	; 0xfffffaff
    21a0:	01000000 	mrseq	r0, (UNDEF: 0)
    21a4:	09a30851 	stmibeq	r3!, {r0, r4, r6, fp}
    21a8:	35010000 	strcc	r0, [r1, #-0]
    21ac:	00002c2a 	andeq	r2, r0, sl, lsr #24
    21b0:	09520100 	ldmdbeq	r2, {r8}^
    21b4:	36010069 	strcc	r0, [r1], -r9, rrx
    21b8:	00002c0a 	andeq	r2, r0, sl, lsl #24
    21bc:	00183600 	andseq	r3, r8, r0, lsl #12
    21c0:	00183200 	andseq	r3, r8, r0, lsl #4
    21c4:	070d0a00 	streq	r0, [sp, -r0, lsl #20]
    21c8:	37010000 	strcc	r0, [r1, -r0]
    21cc:	0000c009 	andeq	ip, r0, r9
    21d0:	00185900 	andseq	r5, r8, r0, lsl #18
    21d4:	00185500 	andseq	r5, r8, r0, lsl #10
    21d8:	040b0000 	streq	r0, [fp], #-0
    21dc:	00c6040c 	sbceq	r0, r6, ip, lsl #8
    21e0:	01040000 	mrseq	r0, (UNDEF: 4)
    21e4:	00005a08 	andeq	r5, r0, r8, lsl #20
    21e8:	00c60d00 	sbceq	r0, r6, r0, lsl #26
    21ec:	47050000 	strmi	r0, [r5, -r0]
    21f0:	01000005 	tsteq	r0, r5
    21f4:	00be072b 	adcseq	r0, lr, fp, lsr #14
    21f8:	10920000 	addsne	r0, r2, r0
    21fc:	00160000 	andseq	r0, r6, r0
    2200:	9c010000 	stcls	0, cr0, [r1], {-0}
    2204:	00000157 	andeq	r0, r0, r7, asr r1
    2208:	0006fc06 	andeq	pc, r6, r6, lsl #24
    220c:	142b0100 	strtne	r0, [fp], #-256	; 0xffffff00
    2210:	000000be 	strheq	r0, [r0], -lr
    2214:	0000187e 	andeq	r1, r0, lr, ror r8
    2218:	0000187a 	andeq	r1, r0, sl, ror r8
    221c:	63727307 	cmnvs	r2, #469762048	; 0x1c000000
    2220:	262b0100 	strtcs	r0, [fp], -r0, lsl #2
    2224:	00000157 	andeq	r0, r0, r7, asr r1
    2228:	a3085101 	movwge	r5, #33025	; 0x8101
    222c:	01000009 	tsteq	r0, r9
    2230:	002c322b 	eoreq	r3, ip, fp, lsr #4
    2234:	52010000 	andpl	r0, r1, #0
    2238:	01006909 	tsteq	r0, r9, lsl #18
    223c:	002c0a2c 	eoreq	r0, ip, ip, lsr #20
    2240:	18a30000 	stmiane	r3!, {}	; <UNPREDICTABLE>
    2244:	189f0000 	ldmne	pc, {}	; <UNPREDICTABLE>
    2248:	170a0000 	strne	r0, [sl, -r0]
    224c:	01000007 	tsteq	r0, r7
    2250:	00c0092d 	sbceq	r0, r0, sp, lsr #18
    2254:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    2258:	18c20000 	stmiane	r2, {}^	; <UNPREDICTABLE>
    225c:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    2260:	01000007 	tsteq	r0, r7
    2264:	00c0092e 	sbceq	r0, r0, lr, lsr #18
    2268:	18db0000 	ldmne	fp, {}^	; <UNPREDICTABLE>
    226c:	18d70000 	ldmne	r7, {}^	; <UNPREDICTABLE>
    2270:	0c000000 	stceq	0, cr0, [r0], {-0}
    2274:	00015d04 	andeq	r5, r1, r4, lsl #26
    2278:	01050e00 	tsteq	r5, r0, lsl #28
    227c:	01000007 	tsteq	r0, r7
    2280:	00c00723 	sbceq	r0, r0, r3, lsr #14
    2284:	107e0000 	rsbsne	r0, lr, r0
    2288:	00140000 	andseq	r0, r4, r0
    228c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2290:	000001a1 	andeq	r0, r0, r1, lsr #3
    2294:	00070806 	andeq	r0, r7, r6, lsl #16
    2298:	14230100 	strtne	r0, [r3], #-256	; 0xffffff00
    229c:	000000c0 	andeq	r0, r0, r0, asr #1
    22a0:	00001902 	andeq	r1, r0, r2, lsl #18
    22a4:	000018fc 	strdeq	r1, [r0], -ip
    22a8:	00075306 	andeq	r5, r7, r6, lsl #6
    22ac:	26230100 	strtcs	r0, [r3], -r0, lsl #2
    22b0:	000001a1 	andeq	r0, r0, r1, lsr #3
    22b4:	00001931 	andeq	r1, r0, r1, lsr r9
    22b8:	0000192d 	andeq	r1, r0, sp, lsr #18
    22bc:	cd040c00 	stcgt	12, cr0, [r4, #-0]
    22c0:	05000000 	streq	r0, [r0, #-0]
    22c4:	000000f7 	strdeq	r0, [r0], -r7
    22c8:	25051b01 	strcs	r1, [r5, #-2817]	; 0xfffff4ff
    22cc:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    22d0:	16000010 			; <UNDEFINED> instruction: 0x16000010
    22d4:	01000000 	mrseq	r0, (UNDEF: 0)
    22d8:	0001ea9c 	muleq	r1, ip, sl
    22dc:	07080600 	streq	r0, [r8, -r0, lsl #12]
    22e0:	1b010000 	blne	422e8 <__ROM_SIZE__+0x22e8>
    22e4:	0001a118 	andeq	sl, r1, r8, lsl r1
    22e8:	00195300 	andseq	r5, r9, r0, lsl #6
    22ec:	00194f00 	andseq	r4, r9, r0, lsl #30
    22f0:	07530600 	ldrbeq	r0, [r3, -r0, lsl #12]
    22f4:	1b010000 	blne	422fc <__ROM_SIZE__+0x22fc>
    22f8:	0001a12a 	andeq	sl, r1, sl, lsr #2
    22fc:	00197500 	andseq	r7, r9, r0, lsl #10
    2300:	00197100 	andseq	r7, r9, r0, lsl #2
    2304:	200f0000 	andcs	r0, pc, r0
    2308:	01000007 	tsteq	r0, r7
    230c:	002c0813 	eoreq	r0, ip, r3, lsl r8
    2310:	10580000 	subsne	r0, r8, r0
    2314:	00100000 	andseq	r0, r0, r0
    2318:	9c010000 	stcls	0, cr0, [r1], {-0}
    231c:	72747310 	rsbsvc	r7, r4, #16, 6	; 0x40000000
    2320:	1b130100 	blne	4c2728 <__ROM_SIZE__+0x482728>
    2324:	000001a1 	andeq	r0, r0, r1, lsr #3
    2328:	00001997 	muleq	r0, r7, r9
    232c:	00001993 	muleq	r0, r3, r9
    2330:	6e656c09 	cdpvs	12, 6, cr6, cr5, cr9, {0}
    2334:	0a140100 	beq	50273c <__ROM_SIZE__+0x4c273c>
    2338:	0000002c 	andeq	r0, r0, ip, lsr #32
    233c:	000019b9 			; <UNDEFINED> instruction: 0x000019b9
    2340:	000019b5 			; <UNDEFINED> instruction: 0x000019b5
    2344:	0f2f0000 	svceq	0x002f0000
    2348:	00040000 	andeq	r0, r4, r0
    234c:	00000dff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2350:	005f0104 	subseq	r0, pc, r4, lsl #2
    2354:	ae0c0000 	cdpge	0, 0, cr0, cr12, cr0, {0}
    2358:	3e000007 	cdpcc	0, 0, cr0, cr0, cr7, {0}
    235c:	b8000001 	stmdalt	r0, {r0}
    2360:	38000010 	stmdacc	r0, {r4}
    2364:	5f000006 	svcpl	0x00000006
    2368:	0200001d 	andeq	r0, r0, #29
    236c:	00530601 	subseq	r0, r3, r1, lsl #12
    2370:	02020000 	andeq	r0, r2, #0
    2374:	00012f05 	andeq	r2, r1, r5, lsl #30
    2378:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    237c:	0000011f 	andeq	r0, r0, pc, lsl r1
    2380:	1a050802 	bne	144390 <__ROM_SIZE__+0x104390>
    2384:	02000001 	andeq	r0, r0, #1
    2388:	00510801 	subseq	r0, r1, r1, lsl #16
    238c:	02020000 	andeq	r0, r2, #0
    2390:	0000e407 	andeq	lr, r0, r7, lsl #8
    2394:	032b0300 			; <UNDEFINED> instruction: 0x032b0300
    2398:	34030000 	strcc	r0, [r3], #-0
    239c:	00005b19 	andeq	r5, r0, r9, lsl fp
    23a0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    23a4:	00000103 	andeq	r0, r0, r3, lsl #2
    23a8:	fe070802 	vcmla.f16	d0, d7, d2[0], #0
    23ac:	04000000 	streq	r0, [r0], #-0
    23b0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    23b4:	69050074 	stmdbvs	r5, {r2, r4, r5, r6}
    23b8:	02000000 	andeq	r0, r0, #0
    23bc:	01080704 	tsteq	r8, r4, lsl #14
    23c0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    23c4:	00015f04 	andeq	r5, r1, r4, lsl #30
    23c8:	6d630600 	stclvs	6, cr0, [r3, #-0]
    23cc:	2b020064 	blcs	82564 <__ROM_SIZE__+0x42564>
    23d0:	00008f0f 	andeq	r8, r0, pc, lsl #30
    23d4:	95040700 	strls	r0, [r4, #-1792]	; 0xfffff900
    23d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    23dc:	00000069 	andeq	r0, r0, r9, rrx
    23e0:	000000a9 	andeq	r0, r0, r9, lsr #1
    23e4:	00006909 	andeq	r6, r0, r9, lsl #18
    23e8:	00a90900 	adceq	r0, r9, r0, lsl #18
    23ec:	07000000 	streq	r0, [r0, -r0]
    23f0:	0000af04 	andeq	sl, r0, r4, lsl #30
    23f4:	b5040700 	strlt	r0, [r4, #-1792]	; 0xfffff900
    23f8:	02000000 	andeq	r0, r0, #0
    23fc:	005a0801 	subseq	r0, sl, r1, lsl #16
    2400:	b50a0000 	strlt	r0, [sl, #-0]
    2404:	0b000000 	bleq	240c <rsbox+0xa20>
    2408:	0934020c 	ldmdbeq	r4!, {r2, r3, r9}
    240c:	000000f2 	strdeq	r0, [r0], -r2
    2410:	0000370c 	andeq	r3, r0, ip, lsl #14
    2414:	0f350200 	svceq	0x00350200
    2418:	000000f2 	strdeq	r0, [r0], -r2
    241c:	00000c00 	andeq	r0, r0, r0, lsl #24
    2420:	36020000 	strcc	r0, [r2], -r0
    2424:	0000f20f 	andeq	pc, r0, pc, lsl #4
    2428:	2f0c0400 	svccs	0x000c0400
    242c:	02000000 	andeq	r0, r0, #0
    2430:	00830737 	addeq	r0, r3, r7, lsr r7
    2434:	00080000 	andeq	r0, r8, r0
    2438:	00bc0407 	adcseq	r0, ip, r7, lsl #8
    243c:	59030000 	stmdbpl	r3, {}	; <UNPREDICTABLE>
    2440:	02000001 	andeq	r0, r0, #1
    2444:	00c10338 	sbceq	r0, r1, r8, lsr r3
    2448:	f80a0000 			; <UNDEFINED> instruction: 0xf80a0000
    244c:	05000000 	streq	r0, [r0, #-0]
    2450:	000000f8 	strdeq	r0, [r0], -r8
    2454:	0000690d 	andeq	r6, r0, sp, lsl #18
    2458:	07e80e00 	strbeq	r0, [r8, r0, lsl #28]!
    245c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    2460:	00012507 	andeq	r2, r1, r7, lsl #10
    2464:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
    2468:	07200000 	streq	r0, [r0, -r0]!
    246c:	00010e04 	andeq	r0, r1, r4, lsl #28
    2470:	09b90e00 	ldmibeq	r9!, {r9, sl, fp}
    2474:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    2478:	00012507 	andeq	r2, r1, r7, lsl #10
    247c:	78030500 	stmdavc	r3, {r8, sl}
    2480:	0f200000 	svceq	0x00200000
    2484:	00000148 	andeq	r0, r0, r8, asr #2
    2488:	0000b509 	andeq	fp, r0, r9, lsl #10
    248c:	9e0e0000 	cdpls	0, 0, cr0, cr14, cr0, {0}
    2490:	01000004 	tsteq	r0, r4
    2494:	015a081a 	cmpeq	sl, sl, lsl r8
    2498:	03050000 	movweq	r0, #20480	; 0x5000
    249c:	20000024 	andcs	r0, r0, r4, lsr #32
    24a0:	013d0407 	teqeq	sp, r7, lsl #8
    24a4:	1e0e0000 	cdpne	0, 0, cr0, cr14, cr0, {0}
    24a8:	01000004 	tsteq	r0, r4
    24ac:	015a081b 	cmpeq	sl, fp, lsl r8
    24b0:	03050000 	movweq	r0, #20480	; 0x5000
    24b4:	2000007c 	andcs	r0, r0, ip, ror r0
    24b8:	00085310 	andeq	r5, r8, r0, lsl r3
    24bc:	1a1d0100 	bne	7428c4 <__ROM_SIZE__+0x7028c4>
    24c0:	0000005b 	andeq	r0, r0, fp, asr r0
    24c4:	0008b010 	andeq	fp, r8, r0, lsl r0
    24c8:	1a1e0100 	bne	7828d0 <__ROM_SIZE__+0x7428d0>
    24cc:	0000005b 	andeq	r0, r0, fp, asr r0
    24d0:	00033b11 	andeq	r3, r3, r1, lsl fp
    24d4:	15200100 	strne	r0, [r0, #-256]!	; 0xffffff00
    24d8:	00000196 	muleq	r0, r6, r1
    24dc:	01040407 	tsteq	r4, r7, lsl #8
    24e0:	18110000 	ldmdane	r1, {}	; <UNPREDICTABLE>
    24e4:	01000008 	tsteq	r0, r8
    24e8:	01961521 	orrseq	r1, r6, r1, lsr #10
    24ec:	8d120000 	ldchi	0, cr0, [r2, #-0]
    24f0:	01000007 	tsteq	r0, r7
    24f4:	00701522 	rsbseq	r1, r0, r2, lsr #10
    24f8:	03050000 	movweq	r0, #20480	; 0x5000
    24fc:	2000006c 	andcs	r0, r0, ip, rrx
    2500:	00089412 	andeq	r9, r8, r2, lsl r4
    2504:	152a0100 	strne	r0, [sl, #-256]!	; 0xffffff00
    2508:	00000070 	andeq	r0, r0, r0, ror r0
    250c:	00280305 	eoreq	r0, r8, r5, lsl #6
    2510:	62122000 	andsvs	r2, r2, #0
    2514:	01000009 	tsteq	r0, r9
    2518:	0070152b 	rsbseq	r1, r0, fp, lsr #10
    251c:	03050000 	movweq	r0, #20480	; 0x5000
    2520:	20000070 	andcs	r0, r0, r0, ror r0
    2524:	0000b513 	andeq	fp, r0, r3, lsl r5
    2528:	0001f400 	andeq	pc, r1, r0, lsl #8
    252c:	00751400 	rsbseq	r1, r5, r0, lsl #8
    2530:	14010000 	strne	r0, [r1], #-0
    2534:	00000075 	andeq	r0, r0, r5, ror r0
    2538:	2f12001f 	svccs	0x0012001f
    253c:	01000008 	tsteq	r0, r8
    2540:	01de0d2c 	bicseq	r0, lr, ip, lsr #26
    2544:	03050000 	movweq	r0, #20480	; 0x5000
    2548:	2000002c 	andcs	r0, r0, ip, lsr #32
    254c:	0009a812 	andeq	sl, r9, r2, lsl r8
    2550:	162f0100 	strtne	r0, [pc], -r0, lsl #2
    2554:	0000021f 	andeq	r0, r0, pc, lsl r2
    2558:	00000305 	andeq	r0, r0, r5, lsl #6
    255c:	01022000 	mrseq	r2, (UNDEF: 2)
    2560:	00046c02 	andeq	r6, r4, r2, lsl #24
    2564:	02180500 	andseq	r0, r8, #0, 10
    2568:	6e0e0000 	cdpvs	0, 0, cr0, cr14, cr0, {0}
    256c:	01000007 	tsteq	r0, r7
    2570:	00f80192 	smlalseq	r0, r8, r2, r1
    2574:	03050000 	movweq	r0, #20480	; 0x5000
    2578:	00001778 	andeq	r1, r0, r8, ror r7
    257c:	0008da15 	andeq	sp, r8, r5, lsl sl
    2580:	01e50100 	mvneq	r0, r0, lsl #2
    2584:	0000f801 	andeq	pc, r0, r1, lsl #16
    2588:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
    258c:	15000017 	strne	r0, [r0, #-23]	; 0xffffffe9
    2590:	00000804 	andeq	r0, r0, r4, lsl #16
    2594:	0101e601 	tsteq	r1, r1, lsl #12
    2598:	000000f8 	strdeq	r0, [r0], -r8
    259c:	176c0305 	strbne	r0, [ip, -r5, lsl #6]!
    25a0:	d4150000 	ldrle	r0, [r5], #-0
    25a4:	01000007 	tsteq	r0, r7
    25a8:	f80101e7 			; <UNDEFINED> instruction: 0xf80101e7
    25ac:	05000000 	streq	r0, [r0, #-0]
    25b0:	00176003 	andseq	r6, r7, r3
    25b4:	08a71600 	stmiaeq	r7!, {r9, sl, ip}
    25b8:	eb010000 	bl	425c0 <__ROM_SIZE__+0x25c0>
    25bc:	01093c01 	tsteq	r9, r1, lsl #24
    25c0:	03050000 	movweq	r0, #20480	; 0x5000
    25c4:	00001790 	muleq	r0, r0, r7
    25c8:	00078f17 	andeq	r8, r7, r7, lsl pc
    25cc:	01df0100 	bicseq	r0, pc, r0, lsl #2
    25d0:	00006905 	andeq	r6, r0, r5, lsl #18
    25d4:	0011b800 	andseq	fp, r1, r0, lsl #16
    25d8:	00001800 	andeq	r1, r0, r0, lsl #16
    25dc:	db9c0100 	blle	fe7029e4 <_STACK_TOP_+0xde6fa9e8>
    25e0:	18000002 	stmdane	r0, {r1}
    25e4:	00000115 	andeq	r0, r0, r5, lsl r1
    25e8:	1901df01 	stmdbne	r1, {r0, r8, r9, sl, fp, ip, lr, pc}
    25ec:	00000069 	andeq	r0, r0, r9, rrx
    25f0:	000019dc 	ldrdeq	r1, [r0], -ip
    25f4:	000019d8 	ldrdeq	r1, [r0], -r8
    25f8:	00013918 	andeq	r3, r1, r8, lsl r9
    25fc:	01df0100 	bicseq	r0, pc, r0, lsl #2
    2600:	0000a926 	andeq	sl, r0, r6, lsr #18
    2604:	001a0100 	andseq	r0, sl, r0, lsl #2
    2608:	0019fd00 	andseq	pc, r9, r0, lsl #26
    260c:	11c41900 	bicne	r1, r4, r0, lsl #18
    2610:	0eea0000 	cdpeq	0, 14, cr0, cr10, cr0, {0}
    2614:	011a0000 	tsteq	sl, r0
    2618:	58030550 	stmdapl	r3, {r4, r6, r8, sl}
    261c:	0000001d 	andeq	r0, r0, sp, lsl r0
    2620:	00081700 	andeq	r1, r8, r0, lsl #14
    2624:	c5010000 	strgt	r0, [r1, #-0]
    2628:	00690501 	rsbeq	r0, r9, r1, lsl #10
    262c:	12380000 	eorsne	r0, r8, #0
    2630:	00680000 	rsbeq	r0, r8, r0
    2634:	9c010000 	stcls	0, cr0, [r1], {-0}
    2638:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    263c:	00011518 	andeq	r1, r1, r8, lsl r5
    2640:	01c50100 	biceq	r0, r5, r0, lsl #2
    2644:	0000690e 	andeq	r6, r0, lr, lsl #18
    2648:	001a2600 	andseq	r2, sl, r0, lsl #12
    264c:	001a2200 	andseq	r2, sl, r0, lsl #4
    2650:	01391800 	teqeq	r9, r0, lsl #16
    2654:	c5010000 	strgt	r0, [r1, #-0]
    2658:	00a91b01 	adceq	r1, r9, r1, lsl #22
    265c:	1a4d0000 	bne	1342664 <__ROM_SIZE__+0x1302664>
    2660:	1a470000 	bne	11c2668 <__ROM_SIZE__+0x1182668>
    2664:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    2668:	01c60100 	biceq	r0, r6, r0, lsl #2
    266c:	00006907 	andeq	r6, r0, r7, lsl #18
    2670:	001a8100 	andseq	r8, sl, r0, lsl #2
    2674:	001a7900 	andseq	r7, sl, r0, lsl #18
    2678:	079f1c00 	ldreq	r1, [pc, r0, lsl #24]
    267c:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    2680:	02180801 	andseq	r0, r8, #65536	; 0x10000
    2684:	1abf0000 	bne	fefc268c <_STACK_TOP_+0xdefba690>
    2688:	1ab70000 	bne	fedc2690 <_STACK_TOP_+0xdedba694>
    268c:	481d0000 	ldmdami	sp, {}	; <UNPREDICTABLE>
    2690:	f6000012 			; <UNDEFINED> instruction: 0xf6000012
    2694:	5f00000e 	svcpl	0x0000000e
    2698:	1a000003 	bne	26ac <rsbox+0xcc0>
    269c:	03055101 	movweq	r5, #20737	; 0x5101
    26a0:	00001ddc 	ldrdeq	r1, [r0], -ip
    26a4:	12501d00 	subsne	r1, r0, #0, 26
    26a8:	0eea0000 	cdpeq	0, 14, cr0, cr10, cr0, {0}
    26ac:	03760000 	cmneq	r6, #0
    26b0:	011a0000 	tsteq	sl, r0
    26b4:	e0030550 	and	r0, r3, r0, asr r5
    26b8:	0000001d 	andeq	r0, r0, sp, lsl r0
    26bc:	00125c1d 	andseq	r5, r2, sp, lsl ip
    26c0:	000eea00 	andeq	lr, lr, r0, lsl #20
    26c4:	00038d00 	andeq	r8, r3, r0, lsl #26
    26c8:	50011a00 	andpl	r1, r1, r0, lsl #20
    26cc:	1e040305 	cdpne	3, 0, cr0, cr4, cr5, {0}
    26d0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    26d4:	0000126e 	andeq	r1, r0, lr, ror #4
    26d8:	00000eea 	andeq	r0, r0, sl, ror #29
    26dc:	0012781d 	andseq	r7, r2, sp, lsl r8
    26e0:	000eea00 	andeq	lr, lr, r0, lsl #20
    26e4:	0003ad00 	andeq	sl, r3, r0, lsl #26
    26e8:	50011a00 	andpl	r1, r1, r0, lsl #20
    26ec:	1e000305 	cdpne	3, 0, cr0, cr0, cr5, {0}
    26f0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    26f4:	00001282 	andeq	r1, r0, r2, lsl #5
    26f8:	00000eea 	andeq	r0, r0, sl, ror #29
    26fc:	09291700 	stmdbeq	r9!, {r8, r9, sl, ip}
    2700:	bc010000 	stclt	0, cr0, [r1], {-0}
    2704:	00830501 	addeq	r0, r3, r1, lsl #10
    2708:	16c00000 	strbne	r0, [r0], r0
    270c:	00300000 	eorseq	r0, r0, r0
    2710:	9c010000 	stcls	0, cr0, [r1], {-0}
    2714:	00000415 	andeq	r0, r0, r5, lsl r4
    2718:	00083b18 	andeq	r3, r8, r8, lsl fp
    271c:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    2720:	0000af1d 	andeq	sl, r0, sp, lsl pc
    2724:	001afb00 	andseq	pc, sl, r0, lsl #22
    2728:	001af500 	andseq	pc, sl, r0, lsl #10
    272c:	16c41f00 	strbne	r1, [r4], r0, lsl #30
    2730:	00240000 	eoreq	r0, r4, r0
    2734:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    2738:	01bd0100 			; <UNDEFINED> instruction: 0x01bd0100
    273c:	0000690c 	andeq	r6, r0, ip, lsl #18
    2740:	001b2b00 	andseq	r2, fp, r0, lsl #22
    2744:	001b2700 	andseq	r2, fp, r0, lsl #14
    2748:	16dc1900 	ldrbne	r1, [ip], r0, lsl #18
    274c:	0ef60000 	cdpeq	0, 15, cr0, cr6, cr0, {0}
    2750:	011a0000 	tsteq	sl, r0
    2754:	00760250 	rsbseq	r0, r6, r0, asr r2
    2758:	17000000 	strne	r0, [r0, -r0]
    275c:	00000843 	andeq	r0, r0, r3, asr #16
    2760:	0501ad01 	streq	sl, [r1, #-3329]	; 0xfffff2ff
    2764:	00000069 	andeq	r0, r0, r9, rrx
    2768:	00001698 	muleq	r0, r8, r6
    276c:	00000028 	andeq	r0, r0, r8, lsr #32
    2770:	049c9c01 	ldreq	r9, [ip], #3073	; 0xc01
    2774:	3b180000 	blcc	60277c <__ROM_SIZE__+0x5c277c>
    2778:	01000008 	tsteq	r0, r8
    277c:	af1001ad 	svcge	0x001001ad
    2780:	50000000 	andpl	r0, r0, r0
    2784:	4a00001b 	bmi	27f8 <rsbox+0xe0c>
    2788:	1c00001b 	stcne	0, cr0, [r0], {27}
    278c:	00000115 	andeq	r0, r0, r5, lsl r1
    2790:	0701ae01 	streq	sl, [r1, -r1, lsl #28]
    2794:	00000069 	andeq	r0, r0, r9, rrx
    2798:	00001b80 	andeq	r1, r0, r0, lsl #23
    279c:	00001b7c 	andeq	r1, r0, ip, ror fp
    27a0:	00013916 	andeq	r3, r1, r6, lsl r9
    27a4:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    27a8:	00049c09 	andeq	r9, r4, r9, lsl #24
    27ac:	b8910300 	ldmlt	r1, {r8, r9}
    27b0:	16a61d7f 			; <UNDEFINED> instruction: 0x16a61d7f
    27b4:	08a60000 	stmiaeq	r6!, {}	; <UNPREDICTABLE>
    27b8:	048b0000 	streq	r0, [fp], #0
    27bc:	011a0000 	tsteq	sl, r0
    27c0:	007d0250 	rsbseq	r0, sp, r0, asr r2
    27c4:	0351011a 	cmpeq	r1, #-2147483642	; 0x80000006
    27c8:	1a5001f3 	bne	1402f9c <__ROM_SIZE__+0x13c2f9c>
    27cc:	40015201 	andmi	r5, r1, r1, lsl #4
    27d0:	16ba1900 	ldrtne	r1, [sl], r0, lsl #18
    27d4:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    27d8:	011a0000 	tsteq	sl, r0
    27dc:	007d0251 	rsbseq	r0, sp, r1, asr r2
    27e0:	af130000 	svcge	0x00130000
    27e4:	ac000000 	stcge	0, cr0, [r0], {-0}
    27e8:	14000004 	strne	r0, [r0], #-4
    27ec:	00000075 	andeq	r0, r0, r5, ror r0
    27f0:	0920000f 	stmdbeq	r0!, {r0, r1, r2, r3}
    27f4:	01000009 	tsteq	r0, r9
    27f8:	840601a3 	strhi	r0, [r6], #-419	; 0xfffffe5d
    27fc:	14000016 	strne	r0, [r0], #-22	; 0xffffffea
    2800:	01000000 	mrseq	r0, (UNDEF: 0)
    2804:	0004e89c 	muleq	r4, ip, r8
    2808:	168a1e00 	strne	r1, [sl], r0, lsl #28
    280c:	04e80000 	strbteq	r0, [r8], #0
    2810:	8e1e0000 	cdphi	0, 1, cr0, cr14, cr0, {0}
    2814:	cd000016 	stcgt	0, cr0, [r0, #-88]	; 0xffffffa8
    2818:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    281c:	00001692 	muleq	r0, r2, r6
    2820:	00000e44 	andeq	r0, r0, r4, asr #28
    2824:	0016961e 	andseq	r9, r6, lr, lsl r6
    2828:	00061200 	andeq	r1, r6, r0, lsl #4
    282c:	f6210000 			; <UNDEFINED> instruction: 0xf6210000
    2830:	01000007 	tsteq	r0, r7
    2834:	b82c0175 	stmdalt	ip!, {r0, r2, r4, r5, r6, r8}
    2838:	6c000010 	stcvs	0, cr0, [r0], {16}
    283c:	01000000 	mrseq	r0, (UNDEF: 0)
    2840:	0005749c 	muleq	r5, ip, r4
    2844:	09c82200 	stmibeq	r8, {r9, sp}^
    2848:	80010000 	andhi	r0, r1, r0
    284c:	00b50f01 	adcseq	r0, r5, r1, lsl #30
    2850:	71220000 			; <UNDEFINED> instruction: 0x71220000
    2854:	01000008 	tsteq	r0, r8
    2858:	b5170180 	ldrlt	r0, [r7, #-384]	; 0xfffffe80
    285c:	22000000 	andcs	r0, r0, #0
    2860:	000007a7 	andeq	r0, r0, r7, lsr #15
    2864:	1e018001 	cdpne	0, 0, cr8, cr1, cr1, {0}
    2868:	000000b5 	strheq	r0, [r0], -r5
    286c:	0009cf22 	andeq	ip, r9, r2, lsr #30
    2870:	01800100 	orreq	r0, r0, r0, lsl #2
    2874:	0000b526 	andeq	fp, r0, r6, lsr #10
    2878:	084d2200 	stmdaeq	sp, {r9, sp}^
    287c:	80010000 	andhi	r0, r1, r0
    2880:	00b52c01 	adcseq	r2, r5, r1, lsl #24
    2884:	731b0000 	tstvc	fp, #0
    2888:	01006372 	tsteq	r0, r2, ror r3
    288c:	af090181 	svcge	0x00090181
    2890:	a6000000 	strge	r0, [r0], -r0
    2894:	9e00001b 	mcrls	0, 0, r0, cr0, cr11, {0}
    2898:	1b00001b 	blne	290c <rsbox+0xf20>
    289c:	00747364 	rsbseq	r7, r4, r4, ror #6
    28a0:	19018101 	stmdbne	r1, {r0, r8, pc}
    28a4:	000000af 	andeq	r0, r0, pc, lsr #1
    28a8:	00001bf0 	strdeq	r1, [r0], -r0
    28ac:	00001bdc 	ldrdeq	r1, [r0], -ip
    28b0:	0011061e 	andseq	r0, r1, lr, lsl r6
    28b4:	000f0200 	andeq	r0, pc, r0, lsl #4
    28b8:	de230000 	cdple	0, 2, cr0, cr3, cr0, {0}
    28bc:	01000008 	tsteq	r0, r8
    28c0:	690c016e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8}
    28c4:	d0000000 	andle	r0, r0, r0
    28c8:	10000011 	andne	r0, r0, r1, lsl r0
    28cc:	01000000 	mrseq	r0, (UNDEF: 0)
    28d0:	0005cd9c 	muleq	r5, ip, sp
    28d4:	01151800 	tsteq	r5, r0, lsl #16
    28d8:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    28dc:	00691b01 	rsbeq	r1, r9, r1, lsl #22
    28e0:	1c6f0000 	stclne	0, cr0, [pc], #-0	; 28e8 <rsbox+0xefc>
    28e4:	1c6b0000 	stclne	0, cr0, [fp], #-0
    28e8:	39180000 	ldmdbcc	r8, {}	; <UNPREDICTABLE>
    28ec:	01000001 	tsteq	r0, r1
    28f0:	a928016e 	stmdbge	r8!, {r1, r2, r3, r5, r6, r8}
    28f4:	94000000 	strls	r0, [r0], #-0
    28f8:	9000001c 	andls	r0, r0, ip, lsl r0
    28fc:	1900001c 	stmdbne	r0, {r2, r3, r4}
    2900:	000011d8 	ldrdeq	r1, [r0], -r8
    2904:	00000eea 	andeq	r0, r0, sl, ror #29
    2908:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0xfffffee6
    290c:	001d5c03 	andseq	r5, sp, r3, lsl #24
    2910:	24000000 	strcs	r0, [r0], #-0
    2914:	00000953 	andeq	r0, r0, r3, asr r9
    2918:	0d016801 	stceq	8, cr6, [r1, #-4]
    291c:	00001152 	andeq	r1, r0, r2, asr r1
    2920:	00000026 	andeq	r0, r0, r6, lsr #32
    2924:	06129c01 	ldreq	r9, [r2], -r1, lsl #24
    2928:	541f0000 	ldrpl	r0, [pc], #-0	; 2930 <rsbox+0xf44>
    292c:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
    2930:	1b000000 	blne	2938 <rsbox+0xf4c>
    2934:	69010069 	stmdbvs	r1, {r0, r3, r5, r6}
    2938:	00690c01 	rsbeq	r0, r9, r1, lsl #24
    293c:	1cb90000 	ldcne	0, cr0, [r9]
    2940:	1cb50000 	ldcne	0, cr0, [r5]
    2944:	60250000 	eorvs	r0, r5, r0
    2948:	1a000011 	bne	2994 <rsbox+0xfa8>
    294c:	30015001 	andcc	r5, r1, r1
    2950:	0151011a 	cmpeq	r1, sl, lsl r1
    2954:	00000030 	andeq	r0, r0, r0, lsr r0
    2958:	00087726 	andeq	r7, r8, r6, lsr #14
    295c:	0df50100 	ldfeqe	f0, [r5]
    2960:	0000150c 	andeq	r1, r0, ip, lsl #10
    2964:	00000178 	andeq	r0, r0, r8, ror r1
    2968:	07f59c01 	ldrbeq	r9, [r5, r1, lsl #24]!
    296c:	73270000 			; <UNDEFINED> instruction: 0x73270000
    2970:	07f60100 	ldrbeq	r0, [r6, r0, lsl #2]!
    2974:	00000069 	andeq	r0, r0, r9, rrx
    2978:	00001cea 	andeq	r1, r0, sl, ror #25
    297c:	00001cd8 	ldrdeq	r1, [r0], -r8
    2980:	00011528 	andeq	r1, r1, r8, lsr #10
    2984:	0af60100 	beq	ffd82d8c <_STACK_TOP_+0xdfd7ad90>
    2988:	00000069 	andeq	r0, r0, r9, rrx
    298c:	00001d59 	andeq	r1, r0, r9, asr sp
    2990:	00001d55 	andeq	r1, r0, r5, asr sp
    2994:	00094d12 	andeq	r4, r9, r2, lsl sp
    2998:	07f70100 	ldrbeq	r0, [r7, r0, lsl #2]!
    299c:	00000069 	andeq	r0, r0, r9, rrx
    29a0:	286c9102 	stmdacs	ip!, {r1, r8, ip, pc}^
    29a4:	000008c5 	andeq	r0, r0, r5, asr #17
    29a8:	6907f801 	stmdbvs	r7, {r0, fp, ip, sp, lr, pc}
    29ac:	85000000 	strhi	r0, [r0, #-0]
    29b0:	7700001d 	smladvc	r0, sp, r0, r0
    29b4:	2700001d 	smladcs	r0, sp, r0, r0
    29b8:	f9010063 			; <UNDEFINED> instruction: 0xf9010063
    29bc:	0000b508 	andeq	fp, r0, r8, lsl #10
    29c0:	001de200 	andseq	lr, sp, r0, lsl #4
    29c4:	001ddc00 	andseq	sp, sp, r0, lsl #24
    29c8:	08671200 	stmdaeq	r7!, {r9, ip}^
    29cc:	fb010000 	blx	429d6 <__ROM_SIZE__+0x29d6>
    29d0:	0007f508 	andeq	pc, r7, r8, lsl #10
    29d4:	4c910200 	lfmmi	f0, 4, [r1], {0}
    29d8:	00013912 	andeq	r3, r1, r2, lsl r9
    29dc:	09fc0100 	ldmibeq	ip!, {r8}^
    29e0:	0000049c 	muleq	r0, ip, r4
    29e4:	7f8c9103 	svcvc	0x008c9103
    29e8:	00151429 	andseq	r1, r5, r9, lsr #8
    29ec:	00001400 	andeq	r1, r0, r0, lsl #8
    29f0:	0006c200 	andeq	ip, r6, r0, lsl #4
    29f4:	00692700 	rsbeq	r2, r9, r0, lsl #14
    29f8:	690cfe01 	stmdbvs	ip, {r0, r9, sl, fp, ip, sp, lr, pc}
    29fc:	0f000000 	svceq	0x00000000
    2a00:	0b00001e 	bleq	2a80 <rsbox+0x1094>
    2a04:	0000001e 	andeq	r0, r0, lr, lsl r0
    2a08:	00152829 	andseq	r2, r5, r9, lsr #16
    2a0c:	00001600 	andeq	r1, r0, r0, lsl #12
    2a10:	0006e300 	andeq	lr, r6, r0, lsl #6
    2a14:	00691b00 	rsbeq	r1, r9, r0, lsl #22
    2a18:	0c010001 	stceq	0, cr0, [r1], {1}
    2a1c:	00000069 	andeq	r0, r0, r9, rrx
    2a20:	00001e30 	andeq	r1, r0, r0, lsr lr
    2a24:	00001e2e 	andeq	r1, r0, lr, lsr #28
    2a28:	15421e00 	strbne	r1, [r2, #-3584]	; 0xfffff200
    2a2c:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    2a30:	481d0000 	ldmdami	sp, {}	; <UNPREDICTABLE>
    2a34:	ea000015 	b	2a90 <rsbox+0x10a4>
    2a38:	0300000e 	movweq	r0, #14
    2a3c:	1a000007 	bne	2a60 <rsbox+0x1074>
    2a40:	03055001 	movweq	r5, #20481	; 0x5001
    2a44:	00001e14 	andeq	r1, r0, r4, lsl lr
    2a48:	156c2a00 	strbne	r2, [ip, #-2560]!	; 0xfffff600
    2a4c:	07120000 	ldreq	r0, [r2, -r0]
    2a50:	011a0000 	tsteq	sl, r0
    2a54:	003a0150 	eorseq	r0, sl, r0, asr r1
    2a58:	0015721d 	andseq	r7, r5, sp, lsl r2
    2a5c:	000b9a00 	andeq	r9, fp, r0, lsl #20
    2a60:	00072600 	andeq	r2, r7, r0, lsl #12
    2a64:	50011a00 	andpl	r1, r1, r0, lsl #20
    2a68:	004c9102 	subeq	r9, ip, r2, lsl #2
    2a6c:	00157c1d 	andseq	r7, r5, sp, lsl ip
    2a70:	0008a600 	andeq	sl, r8, r0, lsl #12
    2a74:	00074600 	andeq	r4, r7, r0, lsl #12
    2a78:	50011a00 	andpl	r1, r1, r0, lsl #20
    2a7c:	7f8c9103 	svcvc	0x008c9103
    2a80:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    2a84:	011a4c91 			; <UNDEFINED> instruction: 0x011a4c91
    2a88:	00400152 	subeq	r0, r0, r2, asr r1
    2a8c:	0015a21e 	andseq	sl, r5, lr, lsl r2
    2a90:	000dc900 	andeq	ip, sp, r0, lsl #18
    2a94:	15b22a00 	ldrne	r2, [r2, #2560]!	; 0xa00
    2a98:	075f0000 	ldrbeq	r0, [pc, -r0]
    2a9c:	011a0000 	tsteq	sl, r0
    2aa0:	00740250 	rsbseq	r0, r4, r0, asr r2
    2aa4:	15b81e00 	ldrne	r1, [r8, #3584]!	; 0xe00
    2aa8:	0dc90000 	stcleq	0, cr0, [r9]
    2aac:	bc1e0000 	ldclt	0, cr0, [lr], {-0}
    2ab0:	c9000015 	stmdbgt	r0, {r0, r2, r4}
    2ab4:	1e00000d 	cdpne	0, 0, cr0, cr0, cr13, {0}
    2ab8:	000015e0 	andeq	r1, r0, r0, ror #11
    2abc:	00000d95 	muleq	r0, r5, sp
    2ac0:	0015ec1d 	andseq	lr, r5, sp, lsl ip
    2ac4:	000c0c00 	andeq	r0, ip, r0, lsl #24
    2ac8:	00079400 	andeq	r9, r7, r0, lsl #8
    2acc:	50011a00 	andpl	r1, r1, r0, lsl #20
    2ad0:	1a4c9102 	bne	1326ee0 <__ROM_SIZE__+0x12e6ee0>
    2ad4:	91025101 	tstls	r2, r1, lsl #2
    2ad8:	f61e006c 			; <UNDEFINED> instruction: 0xf61e006c
    2adc:	95000015 	strls	r0, [r0, #-21]	; 0xffffffeb
    2ae0:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    2ae4:	00001600 	andeq	r1, r0, r0, lsl #12
    2ae8:	00000cc5 	andeq	r0, r0, r5, asr #25
    2aec:	000007b7 			; <UNDEFINED> instruction: 0x000007b7
    2af0:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    2af4:	011a4c91 			; <UNDEFINED> instruction: 0x011a4c91
    2af8:	6c910251 	lfmvs	f0, 4, [r1], {81}	; 0x51
    2afc:	160a1d00 	strne	r1, [sl], -r0, lsl #26
    2b00:	09490000 	stmdbeq	r9, {}^	; <UNPREDICTABLE>
    2b04:	07d10000 	ldrbeq	r0, [r1, r0]
    2b08:	011a0000 	tsteq	sl, r0
    2b0c:	4c910250 	lfmmi	f0, 4, [r1], {80}	; 0x50
    2b10:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    2b14:	1e006c91 	mcrne	12, 0, r6, cr0, cr1, {4}
    2b18:	00001610 	andeq	r1, r0, r0, lsl r6
    2b1c:	00000e32 	andeq	r0, r0, r2, lsr lr
    2b20:	0016141e 	andseq	r1, r6, lr, lsl r4
    2b24:	000e0a00 	andeq	r0, lr, r0, lsl #20
    2b28:	16741900 	ldrbtne	r1, [r4], -r0, lsl #18
    2b2c:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    2b30:	011a0000 	tsteq	sl, r0
    2b34:	8c910351 	ldchi	3, cr0, [r1], {81}	; 0x51
    2b38:	1300007f 	movwne	r0, #127	; 0x7f
    2b3c:	000000b5 	strheq	r0, [r0], -r5
    2b40:	00000805 	andeq	r0, r0, r5, lsl #16
    2b44:	00007514 	andeq	r7, r0, r4, lsl r5
    2b48:	2b001f00 	blcs	a750 <__RAM_SIZE__+0x2750>
    2b4c:	00000992 	muleq	r0, r2, r9
    2b50:	e00de301 	and	lr, sp, r1, lsl #6
    2b54:	58000011 	stmdapl	r0, {r0, r4}
    2b58:	01000000 	mrseq	r0, (UNDEF: 0)
    2b5c:	0008a69c 	muleq	r8, ip, r6
    2b60:	01152c00 	tsteq	r5, r0, lsl #24
    2b64:	e3010000 	movw	r0, #4096	; 0x1000
    2b68:	00006919 	andeq	r6, r0, r9, lsl r9
    2b6c:	001e4900 	andseq	r4, lr, r0, lsl #18
    2b70:	001e4300 	andseq	r4, lr, r0, lsl #6
    2b74:	01392c00 	teqeq	r9, r0, lsl #24
    2b78:	e3010000 	movw	r0, #4096	; 0x1000
    2b7c:	0000a926 	andeq	sl, r0, r6, lsr #18
    2b80:	001e7b00 	andseq	r7, lr, r0, lsl #22
    2b84:	001e7500 	andseq	r7, lr, r0, lsl #10
    2b88:	093b2800 	ldmdbeq	fp!, {fp, sp}
    2b8c:	e4010000 	str	r0, [r1], #-0
    2b90:	00006907 	andeq	r6, r0, r7, lsl #18
    2b94:	001ead00 	andseq	sl, lr, r0, lsl #26
    2b98:	001ea700 	andseq	sl, lr, r0, lsl #14
    2b9c:	11e82900 	mvnne	r2, r0, lsl #18
    2ba0:	002c0000 	eoreq	r0, ip, r0
    2ba4:	08920000 	ldmeq	r2, {}	; <UNPREDICTABLE>
    2ba8:	69270000 	stmdbvs	r7!, {}	; <UNPREDICTABLE>
    2bac:	0ce60100 	stfeqe	f0, [r6]
    2bb0:	00000069 	andeq	r0, r0, r9, rrx
    2bb4:	00001edd 	ldrdeq	r1, [r0], -sp
    2bb8:	00001ed9 	ldrdeq	r1, [r0], -r9
    2bbc:	0012001e 	andseq	r0, r2, lr, lsl r0
    2bc0:	000ef600 	andeq	pc, lr, r0, lsl #12
    2bc4:	12102500 	andsne	r2, r0, #0, 10
    2bc8:	011a0000 	tsteq	sl, r0
    2bcc:	00780250 	rsbseq	r0, r8, r0, asr r2
    2bd0:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    2bd4:	00000076 	andeq	r0, r0, r6, ror r0
    2bd8:	00121e19 	andseq	r1, r2, r9, lsl lr
    2bdc:	000eea00 	andeq	lr, lr, r0, lsl #20
    2be0:	50011a00 	andpl	r1, r1, r0, lsl #20
    2be4:	1da00305 	stcne	3, cr0, [r0, #20]!
    2be8:	00000000 	andeq	r0, r0, r0
    2bec:	0007582d 	andeq	r5, r7, sp, lsr #16
    2bf0:	0ccb0100 	stfeqe	f0, [fp], {0}
    2bf4:	00000069 	andeq	r0, r0, r9, rrx
    2bf8:	000012e4 	andeq	r1, r0, r4, ror #5
    2bfc:	00000052 	andeq	r0, r0, r2, asr r0
    2c00:	09499c01 	stmdbeq	r9, {r0, sl, fp, ip, pc}^
    2c04:	392c0000 	stmdbcc	ip!, {}	; <UNPREDICTABLE>
    2c08:	01000001 	tsteq	r0, r1
    2c0c:	00a91ecb 	adceq	r1, r9, fp, asr #29
    2c10:	1f000000 	svcne	0x00000000
    2c14:	1efc0000 	cdpne	0, 15, cr0, cr12, cr0, {0}
    2c18:	672c0000 	strvs	r0, [ip, -r0]!
    2c1c:	01000008 	tsteq	r0, r8
    2c20:	00af2acb 	adceq	r2, pc, fp, asr #21
    2c24:	1f220000 	svcne	0x00220000
    2c28:	1f1e0000 	svcne	0x001e0000
    2c2c:	9a2c0000 	bls	b02c34 <__ROM_SIZE__+0xac2c34>
    2c30:	01000009 	tsteq	r0, r9
    2c34:	006939cb 	rsbeq	r3, r9, fp, asr #19
    2c38:	1f440000 	svcne	0x00440000
    2c3c:	1f400000 	svcne	0x00400000
    2c40:	15280000 	strne	r0, [r8, #-0]!
    2c44:	01000001 	tsteq	r0, r1
    2c48:	006907cc 	rsbeq	r0, r9, ip, asr #15
    2c4c:	1f6d0000 	svcne	0x006d0000
    2c50:	1f650000 	svcne	0x00650000
    2c54:	70270000 	eorvc	r0, r7, r0
    2c58:	0100736f 	tsteq	r0, pc, ror #6
    2c5c:	006907cd 	rsbeq	r0, r9, sp, asr #15
    2c60:	1fa80000 	svcne	0x00a80000
    2c64:	1fa40000 	svcne	0x00a40000
    2c68:	5e280000 	cdppl	0, 2, cr0, cr8, cr0, {0}
    2c6c:	01000005 	tsteq	r0, r5
    2c70:	006907ce 	rsbeq	r0, r9, lr, asr #15
    2c74:	1fcb0000 	svcne	0x00cb0000
    2c78:	1fc70000 	svcne	0x00c70000
    2c7c:	f0190000 			; <UNDEFINED> instruction: 0xf0190000
    2c80:	0e000012 	mcreq	0, 0, r0, cr0, cr2, {0}
    2c84:	1a00000f 	bne	2cc8 <rsbox+0x12dc>
    2c88:	74025001 	strvc	r5, [r2], #-1
    2c8c:	2b000000 	blcs	2c94 <rsbox+0x12a8>
    2c90:	0000080d 	andeq	r0, r0, sp, lsl #16
    2c94:	660da601 	strvs	sl, [sp], -r1, lsl #12
    2c98:	a2000014 	andge	r0, r0, #20
    2c9c:	01000000 	mrseq	r0, (UNDEF: 0)
    2ca0:	000a659c 	muleq	sl, ip, r5
    2ca4:	08d12c00 	ldmeq	r1, {sl, fp, sp}^
    2ca8:	a6010000 	strge	r0, [r1], -r0
    2cac:	0000af1e 	andeq	sl, r0, lr, lsl pc
    2cb0:	001fef00 	andseq	lr, pc, r0, lsl #30
    2cb4:	001fe900 	andseq	lr, pc, r0, lsl #18
    2cb8:	07632c00 	strbeq	r2, [r3, -r0, lsl #24]!
    2cbc:	a6010000 	strge	r0, [r1], -r0
    2cc0:	000a652d 	andeq	r6, sl, sp, lsr #10
    2cc4:	00201e00 	eoreq	r1, r0, r0, lsl #28
    2cc8:	00201800 	eoreq	r1, r0, r0, lsl #16
    2ccc:	00692700 	rsbeq	r2, r9, r0, lsl #14
    2cd0:	6907ab01 	stmdbvs	r7, {r0, r8, r9, fp, sp, pc}
    2cd4:	4b000000 	blmi	2cdc <rsbox+0x12f0>
    2cd8:	47000020 	strmi	r0, [r0, -r0, lsr #32]
    2cdc:	28000020 	stmdacs	r0, {r5}
    2ce0:	00000947 	andeq	r0, r0, r7, asr #18
    2ce4:	6907ac01 	stmdbvs	r7, {r0, sl, fp, sp, pc}
    2ce8:	6d000000 	stcvs	0, cr0, [r0, #-0]
    2cec:	69000020 	stmdbvs	r0, {r5}
    2cf0:	28000020 	stmdacs	r0, {r5}
    2cf4:	000008f6 	strdeq	r0, [r0], -r6
    2cf8:	6907ad01 	stmdbvs	r7, {r0, r8, sl, fp, sp, pc}
    2cfc:	93000000 	movwls	r0, #0
    2d00:	8b000020 	blhi	2d88 <rsbox+0x139c>
    2d04:	1d000020 	stcne	0, cr0, [r0, #-128]	; 0xffffff80
    2d08:	00001496 	muleq	r0, r6, r4
    2d0c:	00000a6b 	andeq	r0, r0, fp, ror #20
    2d10:	000009d5 	ldrdeq	r0, [r0], -r5
    2d14:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    2d18:	1d000078 	stcne	0, cr0, [r0, #-480]	; 0xfffffe20
    2d1c:	000014a8 	andeq	r1, r0, r8, lsr #9
    2d20:	00000eea 	andeq	r0, r0, sl, ror #29
    2d24:	000009ec 	andeq	r0, r0, ip, ror #19
    2d28:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0xfffffee6
    2d2c:	001e1003 	andseq	r1, lr, r3
    2d30:	cc1d0000 	ldcgt	0, cr0, [sp], {-0}
    2d34:	1a000014 	bne	2d8c <rsbox+0x13a0>
    2d38:	0600000f 	streq	r0, [r0], -pc
    2d3c:	1a00000a 	bne	2d6c <rsbox+0x1380>
    2d40:	78025001 	stmdavc	r2, {r0, ip, lr}
    2d44:	52011a00 	andpl	r1, r1, #0, 20
    2d48:	00200802 	eoreq	r0, r0, r2, lsl #16
    2d4c:	0014d21d 	andseq	sp, r4, sp, lsl r2
    2d50:	000f0e00 	andeq	r0, pc, r0, lsl #28
    2d54:	000a1a00 	andeq	r1, sl, r0, lsl #20
    2d58:	50011a00 	andpl	r1, r1, r0, lsl #20
    2d5c:	00007802 	andeq	r7, r0, r2, lsl #16
    2d60:	0014e01d 	andseq	lr, r4, sp, lsl r0
    2d64:	000eea00 	andeq	lr, lr, r0, lsl #20
    2d68:	000a2f00 	andeq	r2, sl, r0, lsl #30
    2d6c:	50011a00 	andpl	r1, r1, r0, lsl #20
    2d70:	01b07403 	lslseq	r7, r3, #8
    2d74:	14e41e00 	strbtne	r1, [r4], #3584	; 0xe00
    2d78:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    2d7c:	ec1d0000 	ldc	0, cr0, [sp], {-0}
    2d80:	ea000014 	b	2dd8 <rsbox+0x13ec>
    2d84:	4d00000e 	stcmi	0, cr0, [r0, #-56]	; 0xffffffc8
    2d88:	1a00000a 	bne	2db8 <rsbox+0x13cc>
    2d8c:	74035001 	strvc	r5, [r3], #-1
    2d90:	190001c0 	stmdbne	r0, {r6, r7, r8}
    2d94:	000014f6 	strdeq	r1, [r0], -r6
    2d98:	00000eea 	andeq	r0, r0, sl, ror #29
    2d9c:	0350011a 	cmpeq	r0, #-2147483642	; 0x80000006
    2da0:	1a01b874 	bne	70f78 <__ROM_SIZE__+0x30f78>
    2da4:	78025101 	stmdavc	r2, {r0, r8, ip, lr}
    2da8:	07000000 	streq	r0, [r0, -r0]
    2dac:	00006904 	andeq	r6, r0, r4, lsl #18
    2db0:	08e92d00 	stmiaeq	r9!, {r8, sl, fp, sp}^
    2db4:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    2db8:	0000690c 	andeq	r6, r0, ip, lsl #18
    2dbc:	00133600 	andseq	r3, r3, r0, lsl #12
    2dc0:	00003c00 	andeq	r3, r0, r0, lsl #24
    2dc4:	ee9c0100 	fmle	f0, f4, f0
    2dc8:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
    2dcc:	00627573 	rsbeq	r7, r2, r3, ror r5
    2dd0:	af1f9901 	svcge	0x001f9901
    2dd4:	cf000000 	svcgt	0x00000000
    2dd8:	c7000020 	strgt	r0, [r0, -r0, lsr #32]
    2ddc:	2e000020 	cdpcs	0, 0, cr0, cr0, cr0, {1}
    2de0:	006e656c 	rsbeq	r6, lr, ip, ror #10
    2de4:	69289901 	stmdbvs	r8!, {r0, r8, fp, ip, pc}
    2de8:	0c000000 	stceq	0, cr0, [r0], {-0}
    2dec:	06000021 	streq	r0, [r0], -r1, lsr #32
    2df0:	2e000021 	cdpcs	0, 0, cr0, cr0, cr1, {1}
    2df4:	00727473 	rsbseq	r7, r2, r3, ror r4
    2df8:	f2399901 	vmla.i<illegal width 64>	d9, d9, d1
    2dfc:	3b000000 	blcc	2e04 <rsbox+0x1418>
    2e00:	35000021 	strcc	r0, [r0, #-33]	; 0xffffffdf
    2e04:	2f000021 	svccs	0x00000021
    2e08:	000000c0 	andeq	r0, r0, r0, asr #1
    2e0c:	00000add 	ldrdeq	r0, [r0], -sp
    2e10:	01006927 	tsteq	r0, r7, lsr #18
    2e14:	00690c9e 	mlseq	r9, lr, ip, r0
    2e18:	21680000 	cmncs	r8, r0
    2e1c:	21640000 	cmncs	r4, r0
    2e20:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2e24:	0000134c 	andeq	r1, r0, ip, asr #6
    2e28:	00000f0e 	andeq	r0, r0, lr, lsl #30
    2e2c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    2e30:	00000074 	andeq	r0, r0, r4, ror r0
    2e34:	0007722d 	andeq	r7, r7, sp, lsr #4
    2e38:	0c850100 	stfeqs	f0, [r5], {0}
    2e3c:	00000069 	andeq	r0, r0, r9, rrx
    2e40:	00001178 	andeq	r1, r0, r8, ror r1
    2e44:	00000040 	andeq	r0, r0, r0, asr #32
    2e48:	0b9a9c01 	bleq	fe6a9e54 <_STACK_TOP_+0xde6a1e58>
    2e4c:	152c0000 	strne	r0, [ip, #-0]!
    2e50:	01000001 	tsteq	r0, r1
    2e54:	00691d85 	rsbeq	r1, r9, r5, lsl #27
    2e58:	218a0000 	orrcs	r0, sl, r0
    2e5c:	21860000 	orrcs	r0, r6, r0
    2e60:	392c0000 	stmdbcc	ip!, {}	; <UNPREDICTABLE>
    2e64:	01000001 	tsteq	r0, r1
    2e68:	00a92a85 	adceq	r2, r9, r5, lsl #21
    2e6c:	21af0000 			; <UNDEFINED> instruction: 0x21af0000
    2e70:	21ab0000 			; <UNDEFINED> instruction: 0x21ab0000
    2e74:	73280000 			; <UNDEFINED> instruction: 0x73280000
    2e78:	01000009 	tsteq	r0, r9
    2e7c:	004f0c86 	subeq	r0, pc, r6, lsl #25
    2e80:	21d20000 	bicscs	r0, r2, r0
    2e84:	21d00000 	bicscs	r0, r0, r0
    2e88:	af280000 	svcge	0x00280000
    2e8c:	01000009 	tsteq	r0, r9
    2e90:	004f0c87 	subeq	r0, pc, r7, lsl #25
    2e94:	21eb0000 	mvncs	r0, r0
    2e98:	21e50000 	mvncs	r0, r0
    2e9c:	921f0000 	andsls	r0, pc, #0
    2ea0:	16000011 			; <UNDEFINED> instruction: 0x16000011
    2ea4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    2ea8:	00000977 	andeq	r0, r0, r7, ror r9
    2eac:	4f118b01 	svcmi	0x00118b01
    2eb0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2eb4:	16000022 	strne	r0, [r0], -r2, lsr #32
    2eb8:	19000022 	stmdbne	r0, {r1, r5}
    2ebc:	000011a2 	andeq	r1, r0, r2, lsr #3
    2ec0:	00000eea 	andeq	r0, r0, sl, ror #29
    2ec4:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0xfffffee6
    2ec8:	001d5403 	andseq	r5, sp, r3, lsl #8
    2ecc:	51011a00 	tstpl	r1, r0, lsl #20
    2ed0:	3100740c 	tstcc	r0, ip, lsl #8
    2ed4:	0324351a 			; <UNDEFINED> instruction: 0x0324351a
    2ed8:	2000002c 	andcs	r0, r0, ip, lsr #32
    2edc:	00000022 	andeq	r0, r0, r2, lsr #32
    2ee0:	00087d2b 	andeq	r7, r8, fp, lsr #26
    2ee4:	0d790100 	ldfeqe	f0, [r9, #-0]
    2ee8:	000012a0 	andeq	r1, r0, r0, lsr #5
    2eec:	00000044 	andeq	r0, r0, r4, asr #32
    2ef0:	0c0c9c01 	stceq	12, cr9, [ip], {1}
    2ef4:	3b2c0000 	blcc	b02efc <__ROM_SIZE__+0xac2efc>
    2ef8:	01000008 	tsteq	r0, r8
    2efc:	00f23079 	rscseq	r3, r2, r9, ror r0
    2f00:	22310000 	eorscs	r0, r1, #0
    2f04:	222b0000 	eorcs	r0, fp, #0
    2f08:	77280000 	strvc	r0, [r8, -r0]!
    2f0c:	01000009 	tsteq	r0, r9
    2f10:	0069077f 	rsbeq	r0, r9, pc, ror r7
    2f14:	225c0000 	subscs	r0, ip, #0
    2f18:	225a0000 	subscs	r0, sl, #0
    2f1c:	ac1d0000 	ldcge	0, cr0, [sp], {-0}
    2f20:	f6000012 			; <UNDEFINED> instruction: 0xf6000012
    2f24:	f500000e 			; <UNDEFINED> instruction: 0xf500000e
    2f28:	1a00000b 	bne	2f5c <rsbox+0x1570>
    2f2c:	75025001 	strvc	r5, [r2, #-1]
    2f30:	51011a00 	tstpl	r1, r0, lsl #20
    2f34:	1e080305 	cdpne	3, 0, cr0, cr8, cr5, {0}
    2f38:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2f3c:	000012ce 	andeq	r1, r0, lr, asr #5
    2f40:	00000f1a 	andeq	r0, r0, sl, lsl pc
    2f44:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    2f48:	011a0075 	tsteq	sl, r5, ror r0
    2f4c:	20080252 	andcs	r0, r8, r2, asr r2
    2f50:	172b0000 	strne	r0, [fp, -r0]!
    2f54:	01000009 	tsteq	r0, r9
    2f58:	13d80d6c 	bicsne	r0, r8, #108, 26	; 0x1b00
    2f5c:	00580000 	subseq	r0, r8, r0
    2f60:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f64:	00000cc5 	andeq	r0, r0, r5, asr #25
    2f68:	0008d12c 	andeq	sp, r8, ip, lsr #2
    2f6c:	256c0100 	strbcs	r0, [ip, #-256]!	; 0xffffff00
    2f70:	000000af 	andeq	r0, r0, pc, lsr #1
    2f74:	00002275 	andeq	r2, r0, r5, ror r2
    2f78:	0000226f 	andeq	r2, r0, pc, ror #4
    2f7c:	0007632c 	andeq	r6, r7, ip, lsr #6
    2f80:	346c0100 	strbtcc	r0, [ip], #-256	; 0xffffff00
    2f84:	00000a65 	andeq	r0, r0, r5, ror #20
    2f88:	000022a7 	andeq	r2, r0, r7, lsr #5
    2f8c:	000022a1 	andeq	r2, r0, r1, lsr #5
    2f90:	00097728 	andeq	r7, r9, r8, lsr #14
    2f94:	07720100 	ldrbeq	r0, [r2, -r0, lsl #2]!
    2f98:	00000069 	andeq	r0, r0, r9, rrx
    2f9c:	000022d5 	ldrdeq	r2, [r0], -r5
    2fa0:	000022d3 	ldrdeq	r2, [r0], -r3
    2fa4:	0013e61d 	andseq	lr, r3, sp, lsl r6
    2fa8:	000f2600 	andeq	r2, pc, r0, lsl #12
    2fac:	000c7d00 	andeq	r7, ip, r0, lsl #26
    2fb0:	50011a00 	andpl	r1, r1, r0, lsl #20
    2fb4:	1a007402 	bne	1ffc4 <__RAM_SIZE__+0x17fc4>
    2fb8:	30015101 	andcc	r5, r1, r1, lsl #2
    2fbc:	0252011a 	subseq	r0, r2, #-2147483642	; 0x80000006
    2fc0:	1d002008 	stcne	0, cr2, [r0, #-32]	; 0xffffffe0
    2fc4:	00001416 	andeq	r1, r0, r6, lsl r4
    2fc8:	00000f1a 	andeq	r0, r0, sl, lsl pc
    2fcc:	00000c97 	muleq	r0, r7, ip
    2fd0:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    2fd4:	011a0074 	tsteq	sl, r4, ror r0
    2fd8:	20080252 	andcs	r0, r8, r2, asr r2
    2fdc:	141c1d00 	ldrne	r1, [ip], #-3328	; 0xfffff300
    2fe0:	0f0e0000 	svceq	0x000e0000
    2fe4:	0cab0000 	stceq	0, cr0, [fp]
    2fe8:	011a0000 	tsteq	sl, r0
    2fec:	00740250 	rsbseq	r0, r4, r0, asr r2
    2ff0:	14261900 	strtne	r1, [r6], #-2304	; 0xfffff700
    2ff4:	0eea0000 	cdpeq	0, 14, cr0, cr10, cr0, {0}
    2ff8:	011a0000 	tsteq	sl, r0
    2ffc:	0c030550 	cfstr32eq	mvfx0, [r3], {80}	; 0x50
    3000:	1a00001e 	bne	3080 <rsbox+0x1694>
    3004:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
    3008:	2b000000 	blcs	3010 <rsbox+0x1624>
    300c:	0000097d 	andeq	r0, r0, sp, ror r9
    3010:	720d5b01 	andvc	r5, sp, #1024	; 0x400
    3014:	66000013 			; <UNDEFINED> instruction: 0x66000013
    3018:	01000000 	mrseq	r0, (UNDEF: 0)
    301c:	000d959c 	muleq	sp, ip, r5
    3020:	08d12c00 	ldmeq	r1, {sl, fp, sp}^
    3024:	5b010000 	blpl	4302c <__ROM_SIZE__+0x302c>
    3028:	0000af23 	andeq	sl, r0, r3, lsr #30
    302c:	0022f000 	eoreq	pc, r2, r0
    3030:	0022e800 	eoreq	lr, r2, r0, lsl #16
    3034:	07632c00 	strbeq	r2, [r3, -r0, lsl #24]!
    3038:	5b010000 	blpl	43040 <__ROM_SIZE__+0x3040>
    303c:	000a6532 	andeq	r6, sl, r2, lsr r5
    3040:	00232c00 	eoreq	r2, r3, r0, lsl #24
    3044:	00232400 	eoreq	r2, r3, r0, lsl #8
    3048:	09772800 	ldmdbeq	r7!, {fp, sp}^
    304c:	65010000 	strvs	r0, [r1, #-0]
    3050:	00006907 	andeq	r6, r0, r7, lsl #18
    3054:	00236500 	eoreq	r6, r3, r0, lsl #10
    3058:	00236300 	eoreq	r6, r3, r0, lsl #6
    305c:	13921d00 	orrsne	r1, r2, #0, 26
    3060:	0eea0000 	cdpeq	0, 14, cr0, cr10, cr0, {0}
    3064:	0d340000 	ldceq	0, cr0, [r4, #-0]
    3068:	011a0000 	tsteq	sl, r0
    306c:	0c030550 	cfstr32eq	mvfx0, [r3], {80}	; 0x50
    3070:	1a00001e 	bne	30f0 <rsbox+0x1704>
    3074:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
    3078:	9c1d0000 	ldcls	0, cr0, [sp], {-0}
    307c:	26000013 			; <UNDEFINED> instruction: 0x26000013
    3080:	4d00000f 	stcmi	0, cr0, [r0, #-60]	; 0xffffffc4
    3084:	1a00000d 	bne	30c0 <rsbox+0x16d4>
    3088:	30015101 	andcc	r5, r1, r1, lsl #2
    308c:	0252011a 	subseq	r0, r2, #-2147483642	; 0x80000006
    3090:	1d002008 	stcne	0, cr2, [r0, #-32]	; 0xffffffe0
    3094:	000013be 			; <UNDEFINED> instruction: 0x000013be
    3098:	00000f1a 	andeq	r0, r0, sl, lsl pc
    309c:	00000d67 	andeq	r0, r0, r7, ror #26
    30a0:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    30a4:	011a0074 	tsteq	sl, r4, ror r0
    30a8:	20080252 	andcs	r0, r8, r2, asr r2
    30ac:	13c41d00 	bicne	r1, r4, #0, 26
    30b0:	0f0e0000 	svceq	0x000e0000
    30b4:	0d7b0000 	ldcleq	0, cr0, [fp, #-0]
    30b8:	011a0000 	tsteq	sl, r0
    30bc:	00740250 	rsbseq	r0, r4, r0, asr r2
    30c0:	13ce1900 	bicne	r1, lr, #0, 18
    30c4:	0eea0000 	cdpeq	0, 14, cr0, cr10, cr0, {0}
    30c8:	011a0000 	tsteq	sl, r0
    30cc:	0c030550 	cfstr32eq	mvfx0, [r3], {80}	; 0x50
    30d0:	1a00001e 	bne	3150 <rsbox+0x1764>
    30d4:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
    30d8:	2b000000 	blcs	30e0 <rsbox+0x16f4>
    30dc:	00000822 	andeq	r0, r0, r2, lsr #16
    30e0:	400d4e01 	andmi	r4, sp, r1, lsl #28
    30e4:	12000011 	andne	r0, r0, #17
    30e8:	01000000 	mrseq	r0, (UNDEF: 0)
    30ec:	000dc99c 	muleq	sp, ip, r9
    30f0:	07632c00 	strbeq	r2, [r3, -r0, lsl #24]!
    30f4:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    30f8:	0000691e 	andeq	r6, r0, lr, lsl r9
    30fc:	00237c00 	eoreq	r7, r3, r0, lsl #24
    3100:	00237800 	eoreq	r7, r3, r0, lsl #16
    3104:	114a1e00 	cmpne	sl, r0, lsl #28
    3108:	0dc90000 	stcleq	0, cr0, [r9]
    310c:	2b000000 	blcs	3114 <rsbox+0x1728>
    3110:	00000910 	andeq	r0, r0, r0, lsl r9
    3114:	240d4801 	strcs	r4, [sp], #-2049	; 0xfffff7ff
    3118:	1c000011 	stcne	0, cr0, [r0], {17}
    311c:	01000000 	mrseq	r0, (UNDEF: 0)
    3120:	000e0a9c 	muleq	lr, ip, sl
    3124:	112e2a00 			; <UNDEFINED> instruction: 0x112e2a00
    3128:	0dee0000 	stcleq	0, cr0, [lr]
    312c:	011a0000 	tsteq	sl, r0
    3130:	00380150 	eorseq	r0, r8, r0, asr r1
    3134:	0011342a 	andseq	r3, r1, sl, lsr #8
    3138:	000dfe00 	andeq	pc, sp, r0, lsl #28
    313c:	50011a00 	andpl	r1, r1, r0, lsl #20
    3140:	00200802 	eoreq	r0, r0, r2, lsl #16
    3144:	00113a25 	andseq	r3, r1, r5, lsr #20
    3148:	50011a00 	andpl	r1, r1, r0, lsl #20
    314c:	00003801 	andeq	r3, r0, r1, lsl #16
    3150:	00077f30 	andeq	r7, r7, r0, lsr pc
    3154:	1b460100 	blne	118355c <__ROM_SIZE__+0x114355c>
    3158:	00000069 	andeq	r0, r0, r9, rrx
    315c:	00001508 	andeq	r1, r0, r8, lsl #10
    3160:	00000004 	andeq	r0, r0, r4
    3164:	01319c01 	teqeq	r1, r1, lsl #24
    3168:	01000009 	tsteq	r0, r9
    316c:	14641c40 	strbtne	r1, [r4], #-3136	; 0xfffff3c0
    3170:	00020000 	andeq	r0, r2, r0
    3174:	9c010000 	stcls	0, cr0, [r1], {-0}
    3178:	00098d32 	andeq	r8, r9, r2, lsr sp
    317c:	1c3b0100 	ldfnes	f0, [fp], #-0
    3180:	00001462 	andeq	r1, r0, r2, ror #8
    3184:	00000002 	andeq	r0, r0, r2
    3188:	fe329c01 	cdp2	12, 3, cr9, cr2, cr1, {0}
    318c:	01000007 	tsteq	r0, r7
    3190:	14601c37 	strbtne	r1, [r0], #-3127	; 0xfffff3c9
    3194:	00020000 	andeq	r0, r2, r0
    3198:	9c010000 	stcls	0, cr0, [r1], {-0}
    319c:	00026333 	andeq	r6, r2, r3, lsr r3
    31a0:	06350100 	ldrteq	r0, [r5], -r0, lsl #2
    31a4:	00001454 	andeq	r1, r0, r4, asr r4
    31a8:	0000000c 	andeq	r0, r0, ip
    31ac:	0e7b9c01 	cdpeq	12, 7, cr9, cr11, cr1, {0}
    31b0:	48340000 	ldmdami	r4!, {}	; <UNPREDICTABLE>
    31b4:	01000008 	tsteq	r0, r8
    31b8:	015a1d35 	cmpeq	sl, r5, lsr sp
    31bc:	50010000 	andpl	r0, r1, r0
    31c0:	02823300 	addeq	r3, r2, #0, 6
    31c4:	34010000 	strcc	r0, [r1], #-0
    31c8:	00144806 	andseq	r4, r4, r6, lsl #16
    31cc:	00000c00 	andeq	r0, r0, r0, lsl #24
    31d0:	a09c0100 	addsge	r0, ip, r0, lsl #2
    31d4:	3400000e 	strcc	r0, [r0], #-14
    31d8:	00000848 	andeq	r0, r0, r8, asr #16
    31dc:	5a1c3401 	bpl	7101e8 <__ROM_SIZE__+0x6d01e8>
    31e0:	01000001 	tsteq	r0, r1
    31e4:	73330050 	teqvc	r3, #80	; 0x50
    31e8:	01000002 	tsteq	r0, r2
    31ec:	143c0632 	ldrtne	r0, [ip], #-1586	; 0xfffff9ce
    31f0:	000c0000 	andeq	r0, ip, r0
    31f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    31f8:	00000ec5 	andeq	r0, r0, r5, asr #29
    31fc:	00084834 	andeq	r4, r8, r4, lsr r8
    3200:	1b320100 	blne	c83608 <__ROM_SIZE__+0xc43608>
    3204:	00000125 	andeq	r0, r0, r5, lsr #2
    3208:	33005001 	movwcc	r5, #1
    320c:	000002c0 	andeq	r0, r0, r0, asr #5
    3210:	30063101 	andcc	r3, r6, r1, lsl #2
    3214:	0c000014 	stceq	0, cr0, [r0], {20}
    3218:	01000000 	mrseq	r0, (UNDEF: 0)
    321c:	000eea9c 	muleq	lr, ip, sl
    3220:	08483400 	stmdaeq	r8, {sl, ip, sp}^
    3224:	31010000 	mrscc	r0, (UNDEF: 1)
    3228:	0001251a 	andeq	r2, r1, sl, lsl r5
    322c:	00500100 	subseq	r0, r0, r0, lsl #2
    3230:	00012835 	andeq	r2, r1, r5, lsr r8
    3234:	00012800 	andeq	r2, r1, r0, lsl #16
    3238:	052c0400 	streq	r0, [ip, #-1024]!	; 0xfffffc00
    323c:	0000f735 	andeq	pc, r0, r5, lsr r7	; <UNPREDICTABLE>
    3240:	0000f700 	andeq	pc, r0, r0, lsl #14
    3244:	05270500 	streq	r0, [r7, #-1280]!	; 0xfffffb00
    3248:	0002ce35 	andeq	ip, r2, r5, lsr lr
    324c:	0002ce00 	andeq	ip, r2, r0, lsl #28
    3250:	06860200 	streq	r0, [r6], r0, lsl #4
    3254:	00072035 	andeq	r2, r7, r5, lsr r0
    3258:	00072000 	andeq	r2, r7, r0
    325c:	081f0500 	ldmdaeq	pc, {r8, sl}	; <UNPREDICTABLE>
    3260:	00054735 	andeq	r4, r5, r5, lsr r7
    3264:	00054700 	andeq	r4, r5, r0, lsl #14
    3268:	07380500 	ldreq	r0, [r8, -r0, lsl #10]!
    326c:	00036635 	andeq	r6, r3, r5, lsr r6
    3270:	00036600 	andeq	r6, r3, r0, lsl #12
    3274:	07410500 	strbeq	r0, [r1, -r0, lsl #10]
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__ROM_SIZE__+0x2800ac>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	0008030b 	andeq	r0, r8, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0803 	bleq	e82040 <__ROM_SIZE__+0xe42040>
      30:	0b390b3b 	bleq	e42d24 <__ROM_SIZE__+0xe02d24>
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	0b000f05 	bleq	3c54 <rsbox+0x2268>
      3c:	0013490b 	andseq	r4, r3, fp, lsl #18
      40:	01150600 	tsteq	r5, r0, lsl #12
      44:	13491927 	movtne	r1, #39207	; 0x9927
      48:	00001301 	andeq	r1, r0, r1, lsl #6
      4c:	49000507 	stmdbmi	r0, {r0, r1, r2, r8, sl}
      50:	08000013 	stmdaeq	r0, {r0, r1, r4}
      54:	13490026 	movtne	r0, #36902	; 0x9026
      58:	13090000 	movwne	r0, #36864	; 0x9000
      5c:	3a0b0b01 	bcc	2c2c68 <__ROM_SIZE__+0x282c68>
      60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      64:	0013010b 	andseq	r0, r3, fp, lsl #2
      68:	000d0a00 	andeq	r0, sp, r0, lsl #20
      6c:	0b3a0e03 	bleq	e83880 <__ROM_SIZE__+0xe43880>
      70:	0b390b3b 	bleq	e42d64 <__ROM_SIZE__+0xe02d64>
      74:	0b381349 	bleq	e04da0 <__ROM_SIZE__+0xdc4da0>
      78:	160b0000 	strne	r0, [fp], -r0
      7c:	3a0e0300 	bcc	380c84 <__ROM_SIZE__+0x340c84>
      80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      84:	0013490b 	andseq	r4, r3, fp, lsl #18
      88:	00340c00 	eorseq	r0, r4, r0, lsl #24
      8c:	0b3a0e03 	bleq	e838a0 <__ROM_SIZE__+0xe438a0>
      90:	0b390b3b 	bleq	e42d84 <__ROM_SIZE__+0xe02d84>
      94:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
      98:	00001802 	andeq	r1, r0, r2, lsl #16
      9c:	3f012e0d 	svccc	0x00012e0d
      a0:	3a0e0319 	bcc	380d0c <__ROM_SIZE__+0x340d0c>
      a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      a8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
      ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
      b0:	97184006 	ldrls	r4, [r8, -r6]
      b4:	13011942 	movwne	r1, #6466	; 0x1942
      b8:	050e0000 	streq	r0, [lr, #-0]
      bc:	3a0e0300 	bcc	380cc4 <__ROM_SIZE__+0x340cc4>
      c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
      c8:	1742b717 	smlaldne	fp, r2, r7, r7
      cc:	340f0000 	strcc	r0, [pc], #-0	; d4 <vector_table+0xd4>
      d0:	3a080300 	bcc	200cd8 <__ROM_SIZE__+0x1c0cd8>
      d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
      dc:	1742b717 	smlaldne	fp, r2, r7, r7
      e0:	89100000 	ldmdbhi	r0, {}	; <UNPREDICTABLE>
      e4:	11010182 	smlabbne	r1, r2, r1, r0
      e8:	01133101 	tsteq	r3, r1, lsl #2
      ec:	11000013 	tstne	r0, r3, lsl r0
      f0:	0001828a 	andeq	r8, r1, sl, lsl #5
      f4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
      f8:	12000018 	andne	r0, r0, #24
      fc:	01018289 	smlabbeq	r1, r9, r2, r8
     100:	13310111 	teqne	r1, #1073741828	; 0x40000004
     104:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     108:	3c193f00 	ldccc	15, cr3, [r9], {-0}
     10c:	030e6e19 	movweq	r6, #60953	; 0xee19
     110:	3b0b3a0e 	blcc	2ce950 <__ROM_SIZE__+0x28e950>
     114:	000b390b 	andeq	r3, fp, fp, lsl #18
     118:	11010000 	mrsne	r0, (UNDEF: 1)
     11c:	130e2501 	movwne	r2, #58625	; 0xe501
     120:	1b0e030b 	blne	380d54 <__ROM_SIZE__+0x340d54>
     124:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     128:	00171006 	andseq	r1, r7, r6
     12c:	00240200 	eoreq	r0, r4, r0, lsl #4
     130:	0b3e0b0b 	bleq	f82d64 <__ROM_SIZE__+0xf42d64>
     134:	00000e03 	andeq	r0, r0, r3, lsl #28
     138:	0b002403 	bleq	914c <__RAM_SIZE__+0x114c>
     13c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     140:	04000008 	streq	r0, [r0], #-8
     144:	08030016 	stmdaeq	r3, {r1, r2, r4}
     148:	0b3b0b3a 	bleq	ec2e38 <__ROM_SIZE__+0xe82e38>
     14c:	13490b39 	movtne	r0, #39737	; 0x9b39
     150:	0f050000 	svceq	0x00050000
     154:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     158:	06000013 			; <UNDEFINED> instruction: 0x06000013
     15c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     160:	13011349 	movwne	r1, #4937	; 0x1349
     164:	05070000 	streq	r0, [r7, #-0]
     168:	00134900 	andseq	r4, r3, r0, lsl #18
     16c:	00260800 	eoreq	r0, r6, r0, lsl #16
     170:	00001349 	andeq	r1, r0, r9, asr #6
     174:	0b011309 	bleq	44da0 <__ROM_SIZE__+0x4da0>
     178:	3b0b3a0b 	blcc	2ce9ac <__ROM_SIZE__+0x28e9ac>
     17c:	010b390b 	tsteq	fp, fp, lsl #18
     180:	0a000013 	beq	1d4 <vector_table+0x1d4>
     184:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     188:	0b3b0b3a 	bleq	ec2e78 <__ROM_SIZE__+0xe82e78>
     18c:	13490b39 	movtne	r0, #39737	; 0x9b39
     190:	00000b38 	andeq	r0, r0, r8, lsr fp
     194:	0300160b 	movweq	r1, #1547	; 0x60b
     198:	3b0b3a0e 	blcc	2ce9d8 <__ROM_SIZE__+0x28e9d8>
     19c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     1a0:	0c000013 	stceq	0, cr0, [r0], {19}
     1a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     1a8:	0b3b0b3a 	bleq	ec2e98 <__ROM_SIZE__+0xe82e98>
     1ac:	13490b39 	movtne	r0, #39737	; 0x9b39
     1b0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     1b4:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     1b8:	03193f01 	tsteq	r9, #1, 30
     1bc:	3b0b3a0e 	blcc	2ce9fc <__ROM_SIZE__+0x28e9fc>
     1c0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     1c4:	11134919 	tstne	r3, r9, lsl r9
     1c8:	40061201 	andmi	r1, r6, r1, lsl #4
     1cc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     1d0:	00001301 	andeq	r1, r0, r1, lsl #6
     1d4:	0300050e 	movweq	r0, #1294	; 0x50e
     1d8:	3b0b3a0e 	blcc	2cea18 <__ROM_SIZE__+0x28ea18>
     1dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     1e0:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
     1e4:	00001742 	andeq	r1, r0, r2, asr #14
     1e8:	0182890f 	orreq	r8, r2, pc, lsl #18
     1ec:	31011101 	tstcc	r1, r1, lsl #2
     1f0:	00130113 	andseq	r0, r3, r3, lsl r1
     1f4:	828a1000 	addhi	r1, sl, #0
     1f8:	18020001 	stmdane	r2, {r0}
     1fc:	00184291 	mulseq	r8, r1, r2
     200:	82891100 	addhi	r1, r9, #0, 2
     204:	01110101 	tsteq	r1, r1, lsl #2
     208:	00001331 	andeq	r1, r0, r1, lsr r3
     20c:	3f002e12 	svccc	0x00002e12
     210:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
     214:	3a0e030e 	bcc	380e54 <__ROM_SIZE__+0x340e54>
     218:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     21c:	0000000b 	andeq	r0, r0, fp
     220:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     224:	030b130e 	movweq	r1, #45838	; 0xb30e
     228:	110e1b0e 	tstne	lr, lr, lsl #22
     22c:	10061201 	andne	r1, r6, r1, lsl #4
     230:	02000017 	andeq	r0, r0, #23
     234:	0b0b0024 	bleq	2c02cc <__ROM_SIZE__+0x2802cc>
     238:	0e030b3e 	vmoveq.16	d3[0], r0
     23c:	24030000 	strcs	r0, [r3], #-0
     240:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     244:	0008030b 	andeq	r0, r8, fp, lsl #6
     248:	00160400 	andseq	r0, r6, r0, lsl #8
     24c:	0b3a0803 	bleq	e82260 <__ROM_SIZE__+0xe42260>
     250:	0b390b3b 	bleq	e42f44 <__ROM_SIZE__+0xe02f44>
     254:	00001349 	andeq	r1, r0, r9, asr #6
     258:	0b000f05 	bleq	3e74 <rsbox+0x2488>
     25c:	0013490b 	andseq	r4, r3, fp, lsl #18
     260:	01150600 	tsteq	r5, r0, lsl #12
     264:	13491927 	movtne	r1, #39207	; 0x9927
     268:	00001301 	andeq	r1, r0, r1, lsl #6
     26c:	49000507 	stmdbmi	r0, {r0, r1, r2, r8, sl}
     270:	08000013 	stmdaeq	r0, {r0, r1, r4}
     274:	13490026 	movtne	r0, #36902	; 0x9026
     278:	13090000 	movwne	r0, #36864	; 0x9000
     27c:	3a0b0b01 	bcc	2c2e88 <__ROM_SIZE__+0x282e88>
     280:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     284:	0013010b 	andseq	r0, r3, fp, lsl #2
     288:	000d0a00 	andeq	r0, sp, r0, lsl #20
     28c:	0b3a0e03 	bleq	e83aa0 <__ROM_SIZE__+0xe43aa0>
     290:	0b390b3b 	bleq	e42f84 <__ROM_SIZE__+0xe02f84>
     294:	0b381349 	bleq	e04fc0 <__ROM_SIZE__+0xdc4fc0>
     298:	160b0000 	strne	r0, [fp], -r0
     29c:	3a0e0300 	bcc	380ea4 <__ROM_SIZE__+0x340ea4>
     2a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2a4:	0013490b 	andseq	r4, r3, fp, lsl #18
     2a8:	00340c00 	eorseq	r0, r4, r0, lsl #24
     2ac:	0b3a0e03 	bleq	e83ac0 <__ROM_SIZE__+0xe43ac0>
     2b0:	0b390b3b 	bleq	e42fa4 <__ROM_SIZE__+0xe02fa4>
     2b4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     2b8:	00001802 	andeq	r1, r0, r2, lsl #16
     2bc:	3f012e0d 	svccc	0x00012e0d
     2c0:	3a0e0319 	bcc	380f2c <__ROM_SIZE__+0x340f2c>
     2c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2c8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     2cc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     2d0:	97184006 	ldrls	r4, [r8, -r6]
     2d4:	13011942 	movwne	r1, #6466	; 0x1942
     2d8:	050e0000 	streq	r0, [lr, #-0]
     2dc:	3a0e0300 	bcc	380ee4 <__ROM_SIZE__+0x340ee4>
     2e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     2e8:	1742b717 	smlaldne	fp, r2, r7, r7
     2ec:	890f0000 	stmdbhi	pc, {}	; <UNPREDICTABLE>
     2f0:	11010182 	smlabbne	r1, r2, r1, r0
     2f4:	01133101 	tsteq	r3, r1, lsl #2
     2f8:	10000013 	andne	r0, r0, r3, lsl r0
     2fc:	0001828a 	andeq	r8, r1, sl, lsl #5
     300:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     304:	11000018 	tstne	r0, r8, lsl r0
     308:	01018289 	smlabbeq	r1, r9, r2, r8
     30c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     310:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     314:	3c193f00 	ldccc	15, cr3, [r9], {-0}
     318:	030e6e19 	movweq	r6, #60953	; 0xee19
     31c:	3b0b3a0e 	blcc	2ceb5c <__ROM_SIZE__+0x28eb5c>
     320:	000b390b 	andeq	r3, fp, fp, lsl #18
     324:	11010000 	mrsne	r0, (UNDEF: 1)
     328:	130e2501 	movwne	r2, #58625	; 0xe501
     32c:	1b0e030b 	blne	380f60 <__ROM_SIZE__+0x340f60>
     330:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     334:	00171006 	andseq	r1, r7, r6
     338:	002e0200 	eoreq	r0, lr, r0, lsl #4
     33c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     340:	0b3b0b3a 	bleq	ec3030 <__ROM_SIZE__+0xe83030>
     344:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     348:	06120111 			; <UNDEFINED> instruction: 0x06120111
     34c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     350:	03000019 	movweq	r0, #25
     354:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     358:	0b3a0e03 	bleq	e83b6c <__ROM_SIZE__+0xe43b6c>
     35c:	0b390b3b 	bleq	e43050 <__ROM_SIZE__+0xe03050>
     360:	13491927 	movtne	r1, #39207	; 0x9927
     364:	06120111 			; <UNDEFINED> instruction: 0x06120111
     368:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     36c:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
     370:	0b0b0024 	bleq	2c0408 <__ROM_SIZE__+0x280408>
     374:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     378:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
     37c:	03193f01 	tsteq	r9, #1, 30
     380:	3b0b3a0e 	blcc	2cebc0 <__ROM_SIZE__+0x28ebc0>
     384:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     388:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     38c:	97184006 	ldrls	r4, [r8, -r6]
     390:	13011942 	movwne	r1, #6466	; 0x1942
     394:	05060000 	streq	r0, [r6, #-0]
     398:	3a080300 	bcc	200fa0 <__ROM_SIZE__+0x1c0fa0>
     39c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     3a4:	1742b717 	smlaldne	fp, r2, r7, r7
     3a8:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     3ac:	11010182 	smlabbne	r1, r2, r1, r0
     3b0:	00133101 	andseq	r3, r3, r1, lsl #2
     3b4:	828a0800 	addhi	r0, sl, #0, 16
     3b8:	18020001 	stmdane	r2, {r0}
     3bc:	00184291 	mulseq	r8, r1, r2
int car_mesg(int argc, char** argv) {
     3c0:	00240900 	eoreq	r0, r4, r0, lsl #18
     3c4:	0b3e0b0b 	bleq	f82ff8 <__ROM_SIZE__+0xf42ff8>
    printf("Received the message:");
     3c8:	00000e03 	andeq	r0, r0, r3, lsl #28
    for (ctr = 1; ctr < argc; ctr++) {
     3cc:	01110100 	tsteq	r1, r0, lsl #2
        printf(" %s", argv[ctr]);
     3d0:	0b130e25 	bleq	4c3c6c <__ROM_SIZE__+0x483c6c>
     3d4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     3d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    for (ctr = 1; ctr < argc; ctr++) {
     3dc:	00001710 	andeq	r1, r0, r0, lsl r7
    printf("\n");
     3e0:	3f002e02 	svccc	0x00002e02
     3e4:	3a0e0319 	bcc	381050 <__ROM_SIZE__+0x341050>
    if (argc > 0) {
     3e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     3ec:	1119270b 	tstne	r9, fp, lsl #14
        if (strcmp(argv[1], "PING_REPLY") == 0) {
     3f0:	40061201 	andmi	r1, r6, r1, lsl #4
     3f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
            printf("Got a ping reply.\n");
     3f8:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
     3fc:	03193f00 	tsteq	r9, #0, 30
            printf("strcmp didn't match %s\n", argv[1]);
     400:	3b0b3a0e 	blcc	2cec40 <__ROM_SIZE__+0x28ec40>
     404:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     408:	11134919 	tstne	r3, r9, lsl r9
     40c:	40061201 	andmi	r1, r6, r1, lsl #4
     410:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     414:	24040000 	strcs	r0, [r4], #-0
     418:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     41c:	0008030b 	andeq	r0, r8, fp, lsl #6
     420:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
int ping(int argc, char** argv) {
     424:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    printf("Pinging the car.\n");
     428:	0b3b0b3a 	bleq	ec3118 <__ROM_SIZE__+0xe83118>
    printf2("FOB_MESG PING\n");
     42c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     430:	06120111 			; <UNDEFINED> instruction: 0x06120111
}
     434:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     438:	00130119 	andseq	r0, r3, r9, lsl r1
     43c:	00050600 	andeq	r0, r5, r0, lsl #12
int pair(int argc, char** argv) {
     440:	0b3a0803 	bleq	e82454 <__ROM_SIZE__+0xe42454>
    printf("Sending a pair request.\n");
     444:	0b390b3b 	bleq	e43138 <__ROM_SIZE__+0xe03138>
    printf2("FOB_MESG PAIR\n");
     448:	17021349 	strne	r1, [r2, -r9, asr #6]
     44c:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
}
     450:	82890700 	addhi	r0, r9, #0, 14
     454:	01110101 	tsteq	r1, r1, lsl #2
     458:	00001331 	andeq	r1, r0, r1, lsr r3
void uputc(char c) {
     45c:	01828a08 	orreq	r8, r2, r8, lsl #20
  while ((UARTFR >> 5) & 1)
     460:	91180200 	tstls	r8, r0, lsl #4
     464:	00001842 	andeq	r1, r0, r2, asr #16
  UART_DR = c;
     468:	0b002409 	bleq	9494 <__RAM_SIZE__+0x1494>
  if (c == '\n')
     46c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
}
     470:	0000000e 	andeq	r0, r0, lr
    uputc('\r');
     474:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
}
     478:	030b130e 	movweq	r1, #45838	; 0xb30e
     47c:	110e1b0e 	tstne	lr, lr, lsl #22
  if (!((UARTFR >> 4) & 1)) return UART_DR;
     480:	10061201 	andne	r1, r6, r1, lsl #4
     484:	02000017 	andeq	r0, r0, #23
     488:	0b0b0024 	bleq	2c0520 <__ROM_SIZE__+0x280520>
     48c:	0e030b3e 	vmoveq.16	d3[0], r0
  return -1;
     490:	24030000 	strcs	r0, [r3], #-0
}
     494:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     498:	0008030b 	andeq	r0, r8, fp, lsl #6
  UARTCTL = 0;
     49c:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
     4a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  UARTIBRD = 8;
     4a4:	0b3b0b3a 	bleq	ec3194 <__ROM_SIZE__+0xe83194>
  UARTFBRD = 44;
     4a8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  UARTCC = 0;
     4ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
  UARTLCRH = 0x60;
     4b0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  UARTCTL = 0x301;
     4b4:	00130119 	andseq	r0, r3, r9, lsl r1
}
     4b8:	82890500 	addhi	r0, r9, #0, 10
     4bc:	01110001 	tsteq	r1, r1
void u2putc(char c) {
     4c0:	00001331 	andeq	r1, r0, r1, lsr r3
  while ((UART2FR >> 5) & 1)
     4c4:	3f002e06 	svccc	0x00002e06
     4c8:	3a0e0319 	bcc	381134 <__ROM_SIZE__+0x341134>
  UART2_DR = c;
     4cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  if (c == '\n')
     4d0:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
}
     4d4:	97184006 	ldrls	r4, [r8, -r6]
    u2putc('\r');
     4d8:	00001942 	andeq	r1, r0, r2, asr #18
}
     4dc:	3f002e07 	svccc	0x00002e07
     4e0:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
  if (!((UART2FR >> 4) & 1)) return UART2_DR;
     4e4:	3a0e030e 	bcc	381124 <__ROM_SIZE__+0x341124>
     4e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4ec:	0000000b 	andeq	r0, r0, fp
     4f0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  return -1;
     4f4:	030b130e 	movweq	r1, #45838	; 0xb30e
}
     4f8:	110e1b0e 	tstne	lr, lr, lsl #22
     4fc:	10061201 	andne	r1, r6, r1, lsl #4
  UART2CTL = 0;
     500:	02000017 	andeq	r0, r0, #23
     504:	0b0b0024 	bleq	2c059c <__ROM_SIZE__+0x28059c>
  UART2IBRD = 8;
     508:	0e030b3e 	vmoveq.16	d3[0], r0
  UART2FBRD = 44;
     50c:	16030000 	strne	r0, [r3], -r0
  UART2CC = 0;
     510:	3a0e0300 	bcc	381118 <__ROM_SIZE__+0x341118>
  UART2LCRH = 0x60;
     514:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  UART2CTL = 0x301;
     518:	0013490b 	andseq	r4, r3, fp, lsl #18
}
     51c:	00240400 	eoreq	r0, r4, r0, lsl #8
     520:	0b3e0b0b 	bleq	f83154 <__ROM_SIZE__+0xf43154>
  RCGCUART |= 3;
     524:	00000803 	andeq	r0, r0, r3, lsl #16
     528:	03003405 	movweq	r3, #1029	; 0x405
     52c:	3b0b3a0e 	blcc	2ced6c <__ROM_SIZE__+0x28ed6c>
     530:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  RCGCGPIO |= 3;
     534:	3c193f13 	ldccc	15, cr3, [r9], {19}
     538:	06000019 			; <UNDEFINED> instruction: 0x06000019
     53c:	13490101 	movtne	r0, #37121	; 0x9101
  GPIODEN = 0x03;
     540:	00001301 	andeq	r1, r0, r1, lsl #6
     544:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
  GPIOAFSEL = 0x03;
     548:	000b2f13 	andeq	r2, fp, r3, lsl pc
  GPIOPCTL |= 0x00000011;
     54c:	00340800 	eorseq	r0, r4, r0, lsl #16
     550:	0b3a0e03 	bleq	e83d64 <__ROM_SIZE__+0xe43d64>
     554:	0b390b3b 	bleq	e43248 <__ROM_SIZE__+0xe03248>
  GPIODEN2 = 0x03;
     558:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     55c:	00001802 	andeq	r1, r0, r2, lsl #16
  GPIOAFSEL2 = 0x03;
     560:	3f002e09 	svccc	0x00002e09
  GPIOPCTL2 |= 0x00000011;
     564:	3a0e0319 	bcc	3811d0 <__ROM_SIZE__+0x3411d0>
     568:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     56c:	1119270b 	tstne	r9, fp, lsl #14
}
     570:	40061201 	andmi	r1, r6, r1, lsl #4
     574:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
void platform_init() {
     578:	01000000 	mrseq	r0, (UNDEF: 0)
    pin_setup();
     57c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    uart_init();
     580:	0e030b13 	vmoveq.32	d3[0], r0
    uart2_init();
     584:	01110e1b 	tsteq	r1, fp, lsl lr
    set_read_char(ugetc);
     588:	17100612 			; <UNDEFINED> instruction: 0x17100612
    set_read_char2(u2getc);
     58c:	24020000 	strcs	r0, [r2], #-0
     590:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    set_write_char(uputc);
     594:	000e030b 	andeq	r0, lr, fp, lsl #6
    set_write_char2(u2putc);
     598:	00160300 	andseq	r0, r6, r0, lsl #6
     59c:	0b3a0e03 	bleq	e83db0 <__ROM_SIZE__+0xe43db0>
}
     5a0:	0b390b3b 	bleq	e43294 <__ROM_SIZE__+0xe03294>
     5a4:	00001349 	andeq	r1, r0, r9, asr #6
     5a8:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
     5ac:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     5b0:	0b0b0024 	bleq	2c0648 <__ROM_SIZE__+0x280648>
  selected_mode = mode;
     5b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  if (selected_mode == NONE) {
     5b8:	04060000 	streq	r0, [r6], #-0
  out_buf_rgn.addr = addr;
     5bc:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
  out_buf_rgn.size = size / 2;
     5c0:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
  out_buf_rgn.curr_index = 0;
     5c4:	3b0b3a13 	blcc	2cee18 <__ROM_SIZE__+0x28ee18>
  inp_buf_rgn.addr = addr + size / 2;
     5c8:	010b390b 	tsteq	fp, fp, lsl #18
  inp_buf_rgn.curr_index = 0;
     5cc:	07000013 	smladeq	r0, r3, r0, r0
  if (!(selected_mode & INP)) {
     5d0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    out_buf_rgn.size = size;
     5d4:	00000b1c 	andeq	r0, r0, ip, lsl fp
  memset(addr, 0, size);
     5d8:	03002808 	movweq	r2, #2056	; 0x808
     5dc:	000b1c08 	andeq	r1, fp, r8, lsl #24
  } else if (!(selected_mode & OUT)) {
     5e0:	01130900 	tsteq	r3, r0, lsl #18
     5e4:	0b0b0e03 	bleq	2c3df8 <__ROM_SIZE__+0x283df8>
    inp_buf_rgn.addr = addr;
     5e8:	0b3b0b3a 	bleq	ec32d8 <__ROM_SIZE__+0xe832d8>
    inp_buf_rgn.size = size;
     5ec:	13010b39 	movwne	r0, #6969	; 0x1b39
     5f0:	0d0a0000 	stceq	0, cr0, [sl, #-0]
  if (!(selected_mode & INP)) {
     5f4:	3a0e0300 	bcc	3811fc <__ROM_SIZE__+0x3411fc>
     5f8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5fc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  if (inp_buf_rgn.addr[inp_buf_rgn.curr_index] == 0) {
     600:	0b00000b 	bleq	634 <memlog_putc>
     604:	0b0b000f 	bleq	2c0648 <__ROM_SIZE__+0x280648>
  int val = inp_buf_rgn.addr[inp_buf_rgn.curr_index];
     608:	00001349 	andeq	r1, r0, r9, asr #6
  inp_buf_rgn.addr[inp_buf_rgn.curr_index] = 0;
     60c:	0300340c 	movweq	r3, #1036	; 0x40c
  inp_buf_rgn.curr_index++;
     610:	3b0b3a0e 	blcc	2cee50 <__ROM_SIZE__+0x28ee50>
     614:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  if (inp_buf_rgn.curr_index == inp_buf_rgn.size) {
     618:	00180213 	andseq	r0, r8, r3, lsl r2
}
     61c:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    inp_buf_rgn.curr_index = 0;
     620:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    return -1;
     624:	0b3b0b3a 	bleq	ec3314 <__ROM_SIZE__+0xe83314>
     628:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    return -1;
     62c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     630:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  if (!(selected_mode & OUT) || c == 0) {
     634:	00130119 	andseq	r0, r3, r9, lsl r1
     638:	00050e00 	andeq	r0, r5, r0, lsl #28
     63c:	0b3a0803 	bleq	e82650 <__ROM_SIZE__+0xe42650>
  out_buf_rgn.addr[out_buf_rgn.curr_index] = (uint8_t) c;
     640:	0b390b3b 	bleq	e43334 <__ROM_SIZE__+0xe03334>
     644:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  out_buf_rgn.curr_index++;
     648:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  if (out_buf_rgn.curr_index == out_buf_rgn.size) {
     64c:	03193f01 	tsteq	r9, #1, 30
     650:	3b0b3a0e 	blcc	2cee90 <__ROM_SIZE__+0x28ee90>
    out_buf_rgn.curr_index = 0;
     654:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     658:	11134919 	tstne	r3, r9, lsl r9
     65c:	40061201 	andmi	r1, r6, r1, lsl #4
static void outstr(const char *str) {
     660:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  while (*str != '\0') {
     664:	00001301 	andeq	r1, r0, r1, lsl #6
    __write_char__(*str);
     668:	03003410 	movweq	r3, #1040	; 0x410
    str++;
     66c:	3b0b3a08 	blcc	2cee94 <__ROM_SIZE__+0x28ee94>
  while (*str != '\0') {
     670:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
     674:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
     678:	00001742 	andeq	r1, r0, r2, asr #14
static bool printf_numbers(const char fmt, va_list *args, int l_count) {
     67c:	03000511 	movweq	r0, #1297	; 0x511
     680:	3b0b3a0e 	blcc	2ceec0 <__ROM_SIZE__+0x28eec0>
  switch (fmt) {
     684:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     688:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
     68c:	00001742 	andeq	r1, r0, r2, asr #14
      if (l_count == 0) {
     690:	01828912 	orreq	r8, r2, r2, lsl r9
     694:	31011101 	tstcc	r1, r1, lsl #2
        value = va_arg(*args, unsigned int);
     698:	13000013 	movwne	r0, #19
     69c:	0001828a 	andeq	r8, r1, sl, lsl #5
      if (fmt == 'u') {
     6a0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
        if (value == 0) {
     6a4:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
          __write_char__(hextable[0]);
     6a8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     6ac:	0e6e193c 			; <UNDEFINED> instruction: 0x0e6e193c
  return true;
     6b0:	0b3a0e03 	bleq	e83ec4 <__ROM_SIZE__+0xe43ec4>
  switch (fmt) {
     6b4:	0b390b3b 	bleq	e433a8 <__ROM_SIZE__+0xe033a8>
      outstr("\nprintf-error\n");
     6b8:	01000000 	mrseq	r0, (UNDEF: 0)
      return false;
     6bc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
}
     6c0:	0e030b13 	vmoveq.32	d3[0], r0
      if (l_count == 0) {
     6c4:	01110e1b 	tsteq	r1, fp, lsl lr
        value = va_arg(*args, int);
     6c8:	17100612 			; <UNDEFINED> instruction: 0x17100612
     6cc:	16020000 	strne	r0, [r2], -r0
      if (value < 0) {
     6d0:	3a0e0300 	bcc	3812d8 <__ROM_SIZE__+0x3412d8>
        num[num_len++] = hextable[value % 10];
     6d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6d8:	0013490b 	andseq	r4, r3, fp, lsl #18
     6dc:	01130300 	tsteq	r3, r0, lsl #6
     6e0:	0b0b0e03 	bleq	2c3ef4 <__ROM_SIZE__+0x283ef4>
     6e4:	0b3b0b3a 	bleq	ec33d4 <__ROM_SIZE__+0xe833d4>
     6e8:	00001301 	andeq	r1, r0, r1, lsl #6
     6ec:	03000d04 	movweq	r0, #3332	; 0xd04
     6f0:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
     6f4:	0019340b 	andseq	r3, r9, fp, lsl #8
        value = value / 10;
     6f8:	000f0500 	andeq	r0, pc, r0, lsl #10
      } while (value > 0);
     6fc:	00000b0b 	andeq	r0, r0, fp, lsl #22
     700:	0b002406 	bleq	9720 <__RAM_SIZE__+0x1720>
        __write_char__('-');
     704:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     708:	07000008 	streq	r0, [r0, -r8]
        value = -value;
     70c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
        __write_char__(num[--num_len]);
     710:	00001301 	andeq	r1, r0, r1, lsl #6
     714:	49000508 	stmdbmi	r0, {r3, r8, sl}
     718:	09000013 	stmdbeq	r0, {r0, r1, r4}
     71c:	0b0b0024 	bleq	2c07b4 <__ROM_SIZE__+0x2807b4>
     720:	0e030b3e 	vmoveq.16	d3[0], r0
      while (num_len > 0) {
     724:	260a0000 	strcs	r0, [sl], -r0
  return true;
     728:	00134900 	andseq	r4, r3, r0, lsl #18
          num[num_len++] = hextable[value % 10];
     72c:	00340b00 	eorseq	r0, r4, r0, lsl #22
     730:	0b3a0e03 	bleq	e83f44 <__ROM_SIZE__+0xe43f44>
     734:	0b390b3b 	bleq	e43428 <__ROM_SIZE__+0xe03428>
     738:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     73c:	0000193c 	andeq	r1, r0, ip, lsr r9
     740:	0b000f0c 	bleq	4378 <rsbox+0x298c>
     744:	0013490b 	andseq	r4, r3, fp, lsl #18
     748:	01040d00 	tsteq	r4, r0, lsl #26
          value = value / 10;
     74c:	0b0b0b3e 	bleq	2c344c <__ROM_SIZE__+0x28344c>
        } while (value > 0);
     750:	0b3a1349 	bleq	e8547c <__ROM_SIZE__+0xe4547c>
        while (num_len > 0) {
     754:	0b390b3b 	bleq	e43448 <__ROM_SIZE__+0xe03448>
          __write_char__(num[--num_len]);
     758:	00001301 	andeq	r1, r0, r1, lsl #6
     75c:	0300280e 	movweq	r2, #2062	; 0x80e
     760:	000b1c0e 	andeq	r1, fp, lr, lsl #24
     764:	01010f00 	tsteq	r1, r0, lsl #30
     768:	13011349 	movwne	r1, #4937	; 0x1349
     76c:	21100000 	tstcs	r0, r0
  return true;
     770:	2f134900 	svccs	0x00134900
              __write_char__(hextable[val]);
     774:	1100000b 	tstne	r0, fp
     778:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
              leading_zero_ignored = true;
     77c:	0b3b0b3a 	bleq	ec346c <__ROM_SIZE__+0xe8346c>
          while (start_bit >= 0) {
     780:	13490b39 	movtne	r0, #39737	; 0x9b39
            int val = (value >> start_bit) & 0xF;
     784:	00001802 	andeq	r1, r0, r2, lsl #16
            if (val || leading_zero_ignored) {
     788:	3f012e12 	svccc	0x00012e12
     78c:	3a0e0319 	bcc	3813f8 <__ROM_SIZE__+0x3413f8>
     790:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
          bool leading_zero_ignored = false;
     794:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
          int start_bit = LAST_NIBBLE_FIRST_BIT;
     798:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  return true;
     79c:	96184006 	ldrls	r4, [r8], -r6
        return false;
     7a0:	13011942 	movwne	r1, #6466	; 0x1942
        return false;
     7a4:	05130000 	ldreq	r0, [r3, #-0]
     7a8:	3a080300 	bcc	2013b0 <__ROM_SIZE__+0x1c13b0>
     7ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     7b4:	1742b717 	smlaldne	fp, r2, r7, r7
     7b8:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
int printf(const char *fmt, ...) {
     7bc:	15000000 	strne	r0, [r0, #-0]
     7c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     7c4:	0b3b0b3a 	bleq	ec34b4 <__ROM_SIZE__+0xe834b4>
  va_start(args, fmt);
     7c8:	13490b39 	movtne	r0, #39737	; 0x9b39
  while (*fmt) {
     7cc:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
        if (*fmt == '%') {
     7d0:	16000017 			; <UNDEFINED> instruction: 0x16000017
        __write_char__(*fmt);
     7d4:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
        fmt++;
     7d8:	00001301 	andeq	r1, r0, r1, lsl #6
  while (*fmt) {
     7dc:	01828917 	orreq	r8, r2, r7, lsl r9
    switch (state) {
     7e0:	31011101 	tstcc	r1, r1, lsl #2
     7e4:	18000013 	stmdane	r0, {r0, r1, r4}
          fmt++;
     7e8:	0001828a 	andeq	r8, r1, sl, lsl #5
          continue;
     7ec:	42911802 	addsmi	r1, r1, #131072	; 0x20000
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
     7f0:	19000018 	stmdbne	r0, {r3, r4}
     7f4:	00018289 	andeq	r8, r1, r9, lsl #5
     7f8:	13310111 	teqne	r1, #1073741828	; 0x40000004
     7fc:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
     800:	3a0e0301 	bcc	38140c <__ROM_SIZE__+0x34140c>
        switch (*fmt) {
     804:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     808:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     80c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     810:	97184006 	ldrls	r4, [r8, -r6]
            __write_char__(*fmt);
     814:	13011942 	movwne	r1, #6466	; 0x1942
     818:	051b0000 	ldreq	r0, [fp, #-0]
            state = CHECK_CH;
     81c:	3a0e0300 	bcc	381424 <__ROM_SIZE__+0x341424>
            break;
     820:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     824:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
            outstr(va_arg(args, const char *));
     828:	1742b717 	smlaldne	fp, r2, r7, r7
     82c:	341c0000 	ldrcc	r0, [ip], #-0
     830:	3a080300 	bcc	201438 <__ROM_SIZE__+0x1c1438>
            fmt++;
     834:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
            break;
     838:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
            __write_char__(va_arg(args, int));
     83c:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
     840:	01018289 	smlabbeq	r1, r9, r2, r8
     844:	13010111 	movwne	r0, #4369	; 0x1111
            fmt++;
     848:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
            break;
     84c:	11010182 	smlabbne	r1, r2, r1, r0
            if (*fmt == 'l') {
     850:	1f000001 	svcne	0x00000001
     854:	0111010b 	tsteq	r1, fp, lsl #2
            if (printf_numbers(*fmt, &args, l_count)) {
     858:	13010612 	movwne	r0, #5650	; 0x1612
     85c:	0b200000 	bleq	800864 <__ROM_SIZE__+0x7c0864>
     860:	00175501 	andseq	r5, r7, r1, lsl #10
              state = CHECK_CH;
     864:	00342100 	eorseq	r2, r4, r0, lsl #2
              fmt++;
     868:	0b3a0803 	bleq	e8287c <__ROM_SIZE__+0xe4287c>
              l_count++;
     86c:	0b390b3b 	bleq	e43560 <__ROM_SIZE__+0xe03560>
            if (printf_numbers(*fmt, &args, 0)) {
     870:	17021349 	strne	r1, [r2, -r9, asr #6]
     874:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
              fmt++;
     878:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
              break;
     87c:	0b3a0e03 	bleq	e84090 <__ROM_SIZE__+0xe44090>
            return -1;
     880:	0b390b3b 	bleq	e43574 <__ROM_SIZE__+0xe03574>
}
     884:	01111927 	tsteq	r1, r7, lsr #18
     888:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
            return -1;
     88c:	00194296 	mulseq	r9, r6, r2
     890:	11010000 	mrsne	r0, (UNDEF: 1)
     894:	130e2501 	movwne	r2, #58625	; 0xe501
int printf2(const char *fmt, ...) {
     898:	1b0e030b 	blne	3814cc <__ROM_SIZE__+0x3414cc>
     89c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    __write_char2__(*fmt);
     8a0:	00171006 	andseq	r1, r7, r6
     8a4:	00240200 	eoreq	r0, r4, r0, lsl #4
  while (*fmt != '\0') {
     8a8:	0b3e0b0b 	bleq	f834dc <__ROM_SIZE__+0xf434dc>
     8ac:	00000803 	andeq	r0, r0, r3, lsl #16
     8b0:	03001603 	movweq	r1, #1539	; 0x603
     8b4:	3b0b3a0e 	blcc	2cf0f4 <__ROM_SIZE__+0x28f0f4>
     8b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
{
     8bc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  for (i = 0; i < Nk; ++i)
     8c0:	0b0b0024 	bleq	2c0958 <__ROM_SIZE__+0x280958>
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
     8c4:	0e030b3e 	vmoveq.16	d3[0], r0
     8c8:	26050000 	strcs	r0, [r5], -r0
     8cc:	00134900 	andseq	r4, r3, r0, lsl #18
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
     8d0:	01130600 	tsteq	r3, r0, lsl #12
     8d4:	0b0b0e03 	bleq	2c40e8 <__ROM_SIZE__+0x2840e8>
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
     8d8:	0b3b0b3a 	bleq	ec35c8 <__ROM_SIZE__+0xe835c8>
     8dc:	13010b39 	movwne	r0, #6969	; 0x1b39
     8e0:	0d070000 	stceq	0, cr0, [r7, #-0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
     8e4:	3a0e0300 	bcc	3814ec <__ROM_SIZE__+0x3414ec>
  for (i = 0; i < Nk; ++i)
     8e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8ec:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     8f0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    j = i * 4; k=(i - Nk) * 4;
     8f4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
     8f8:	0b3b0b3a 	bleq	ec35e8 <__ROM_SIZE__+0xe835e8>
     8fc:	13490b39 	movtne	r0, #39737	; 0x9b39
     900:	00000b38 	andeq	r0, r0, r8, lsr fp
     904:	49010109 	stmdbmi	r1, {r0, r3, r8}
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
     908:	00130113 	andseq	r0, r3, r3, lsl r1
     90c:	00210a00 	eoreq	r0, r1, r0, lsl #20
     910:	0b2f1349 	bleq	bc563c <__ROM_SIZE__+0xb8563c>
     914:	340b0000 	strcc	r0, [fp], #-0
     918:	3a0e0300 	bcc	381520 <__ROM_SIZE__+0x341520>
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
     91c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     920:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     924:	0c000018 	stceq	0, cr0, [r0], {24}
     928:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     92c:	0b3a0e03 	bleq	e84140 <__ROM_SIZE__+0xe44140>
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
     930:	0b39053b 	bleq	e41e24 <__ROM_SIZE__+0xe01e24>
     934:	01111927 	tsteq	r1, r7, lsr #18
     938:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     93c:	01194297 			; <UNDEFINED> instruction: 0x01194297
      k = (i - 1) * 4;
     940:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
      tempa[0]=RoundKey[k + 0];
     944:	08030005 	stmdaeq	r3, {r0, r2}
     948:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      tempa[1]=RoundKey[k + 1];
     94c:	13490b39 	movtne	r0, #39737	; 0x9b39
     950:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
      tempa[2]=RoundKey[k + 2];
     954:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
     958:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
      tempa[3]=RoundKey[k + 3];
     95c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     960:	13490b39 	movtne	r0, #39737	; 0x9b39
    if (i % Nk == 0)
     964:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
     968:	0f000017 	svceq	0x00000017
        tempa[0] = tempa[1];
     96c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
        tempa[1] = tempa[2];
     970:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
        tempa[2] = tempa[3];
     974:	13490b39 	movtne	r0, #39737	; 0x9b39
        tempa[3] = u8tmp;
     978:	00001802 	andeq	r1, r0, r2, lsl #16
        tempa[0] = getSBoxValue(tempa[0]);
     97c:	03003410 	movweq	r3, #1040	; 0x410
     980:	3b0b3a08 	blcc	2cf1a8 <__ROM_SIZE__+0x28f1a8>
        tempa[1] = getSBoxValue(tempa[1]);
     984:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     988:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
        tempa[2] = getSBoxValue(tempa[2]);
     98c:	00001742 	andeq	r1, r0, r2, asr #14
     990:	01828911 	orreq	r8, r2, r1, lsl r9
        tempa[3] = getSBoxValue(tempa[3]);
     994:	31011101 	tstcc	r1, r1, lsl #2
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
     998:	00130113 	andseq	r0, r3, r3, lsl r1
     99c:	828a1200 	addhi	r1, sl, #0, 4
     9a0:	18020001 	stmdane	r2, {r0}
     9a4:	00184291 	mulseq	r8, r1, r2
}
     9a8:	82891300 	addhi	r1, r9, #0, 6
     9ac:	01110101 	tsteq	r1, r1, lsl #2
{
     9b0:	00001331 	andeq	r1, r0, r1, lsr r3
  for (i = 0; i < 4; ++i)
     9b4:	0b000f14 	bleq	460c <rsbox+0x2c20>
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
     9b8:	0013490b 	andseq	r4, r3, fp, lsl #18
     9bc:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
     9c0:	0b3a0e03 	bleq	e841d4 <__ROM_SIZE__+0xe441d4>
     9c4:	0b39053b 	bleq	e41eb8 <__ROM_SIZE__+0xe01eb8>
     9c8:	01111927 	tsteq	r1, r7, lsr #18
     9cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     9d0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    for (j = 0; j < 4; ++j)
     9d4:	16000013 			; <UNDEFINED> instruction: 0x16000013
     9d8:	08030005 	stmdaeq	r3, {r0, r2}
  for (i = 0; i < 4; ++i)
     9dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9e0:	13490b39 	movtne	r0, #39737	; 0x9b39
     9e4:	00001802 	andeq	r1, r0, r2, lsl #16
    for (j = 0; j < 4; ++j)
     9e8:	03003417 	movweq	r3, #1047	; 0x417
}
     9ec:	3b0b3a0e 	blcc	2cf22c <__ROM_SIZE__+0x28f22c>
  for (i = 0; i < 4; ++i)
     9f0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    for (j = 0; j < 4; ++j)
     9f4:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
     9f8:	00001742 	andeq	r1, r0, r2, asr #14
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
     9fc:	03000518 	movweq	r0, #1304	; 0x518
     a00:	3b0b3a0e 	blcc	2cf240 <__ROM_SIZE__+0x28f240>
     a04:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     a08:	00180213 	andseq	r0, r8, r3, lsl r2
     a0c:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    for (j = 0; j < 4; ++j)
     a10:	0b3a0e03 	bleq	e84224 <__ROM_SIZE__+0xe44224>
     a14:	0b39053b 	bleq	e41f08 <__ROM_SIZE__+0xe01f08>
  for (i = 0; i < 4; ++i)
     a18:	13491927 	movtne	r1, #39207	; 0x9927
     a1c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    for (j = 0; j < 4; ++j)
     a20:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
}
     a24:	00130119 	andseq	r0, r3, r9, lsl r1
  for (i = 0; i < 4; ++i)
     a28:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
     a2c:	0b3a0e03 	bleq	e84240 <__ROM_SIZE__+0xe44240>
     a30:	0b390b3b 	bleq	e43724 <__ROM_SIZE__+0xe03724>
  temp           = (*state)[0][1];
     a34:	01111927 	tsteq	r1, r7, lsr #18
  (*state)[0][1] = (*state)[1][1];
     a38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  (*state)[1][1] = (*state)[2][1];
     a3c:	01194297 			; <UNDEFINED> instruction: 0x01194297
  (*state)[2][1] = (*state)[3][1];
     a40:	1b000013 	blne	a94 <MixColumns+0x1c>
  temp           = (*state)[0][2];
     a44:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  (*state)[0][2] = (*state)[2][2];
     a48:	0b3b0b3a 	bleq	ec3738 <__ROM_SIZE__+0xe83738>
  temp           = (*state)[1][2];
     a4c:	13490b39 	movtne	r0, #39737	; 0x9b39
  (*state)[1][2] = (*state)[3][2];
     a50:	00001802 	andeq	r1, r0, r2, lsl #16
  temp           = (*state)[0][3];
     a54:	0300341c 	movweq	r3, #1052	; 0x41c
  (*state)[0][3] = (*state)[3][3];
     a58:	3b0b3a08 	blcc	2cf280 <__ROM_SIZE__+0x28f280>
  (*state)[3][3] = (*state)[2][3];
     a5c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  (*state)[2][3] = (*state)[1][3];
     a60:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
}
     a64:	00001742 	andeq	r1, r0, r2, asr #14
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
     a68:	3f012e1d 	svccc	0x00012e1d
     a6c:	3a0e0319 	bcc	3816d8 <__ROM_SIZE__+0x3416d8>
     a70:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     a74:	1119270b 	tstne	r9, fp, lsl #14
{
     a78:	40061201 	andmi	r1, r6, r1, lsl #4
     a7c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  for (i = 0; i < 4; ++i)
     a80:	00001301 	andeq	r1, r0, r1, lsl #6
    t   = (*state)[i][0];
     a84:	0300051e 	movweq	r0, #1310	; 0x51e
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
     a88:	3b0b3a08 	blcc	2cf2b0 <__ROM_SIZE__+0x28f2b0>
     a8c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     a90:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
     a94:	00001742 	andeq	r1, r0, r2, asr #14
     a98:	11010b1f 	tstne	r1, pc, lsl fp
     a9c:	00061201 	andeq	r1, r6, r1, lsl #4
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
     aa0:	00342000 	eorseq	r2, r4, r0
     aa4:	0b3a0e03 	bleq	e842b8 <__ROM_SIZE__+0xe442b8>
     aa8:	0b390b3b 	bleq	e4379c <__ROM_SIZE__+0xe0379c>
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
     aac:	17021349 	strne	r1, [r2, -r9, asr #6]
     ab0:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
     ab4:	002e2100 	eoreq	r2, lr, r0, lsl #2
     ab8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     abc:	0e030e6e 	cdpeq	14, 0, cr0, cr3, cr14, {3}
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
     ac0:	0b3b0b3a 	bleq	ec37b0 <__ROM_SIZE__+0xe837b0>
     ac4:	00000b39 	andeq	r0, r0, r9, lsr fp
     ac8:	01110100 	tsteq	r1, r0, lsl #2
     acc:	0b130e25 	bleq	4c4368 <__ROM_SIZE__+0x484368>
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
     ad0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     ad4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ad8:	00001710 	andeq	r1, r0, r0, lsl r7
     adc:	0b002402 	bleq	9aec <__RAM_SIZE__+0x1aec>
  for (i = 0; i < 4; ++i)
     ae0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ae4:	0300000e 	movweq	r0, #14
}
     ae8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
{
     aec:	0b3b0b3a 	bleq	ec37dc <__ROM_SIZE__+0xe837dc>
     af0:	13490b39 	movtne	r0, #39737	; 0x9b39
  for (i = 0; i < 4; ++i)
     af4:	24040000 	strcs	r0, [r4], #-0
    a = (*state)[i][0];
     af8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     afc:	0008030b 	andeq	r0, r8, fp, lsl #6
    b = (*state)[i][1];
     b00:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
     b04:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    c = (*state)[i][2];
     b08:	0b3b0b3a 	bleq	ec37f8 <__ROM_SIZE__+0xe837f8>
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
     b0c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     b10:	01111349 	tsteq	r1, r9, asr #6
     b14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b18:	01194297 			; <UNDEFINED> instruction: 0x01194297
     b1c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     b20:	08030005 	stmdaeq	r3, {r0, r2}
     b24:	0b3b0b3a 	bleq	ec3814 <__ROM_SIZE__+0xe83814>
     b28:	13490b39 	movtne	r0, #39737	; 0x9b39
     b2c:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
     b30:	07000017 	smladeq	r0, r7, r0, r0
     b34:	08030034 	stmdaeq	r3, {r2, r4, r5}
     b38:	0b3b0b3a 	bleq	ec3828 <__ROM_SIZE__+0xe83828>
     b3c:	13490b39 	movtne	r0, #39737	; 0x9b39
     b40:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
     b44:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
     b48:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b4c:	0b3b0b3a 	bleq	ec383c <__ROM_SIZE__+0xe8383c>
     b50:	13490b39 	movtne	r0, #39737	; 0x9b39
     b54:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
     b58:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
     b5c:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     b60:	0f0a0000 	svceq	0x000a0000
     b64:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     b68:	0b000013 	bleq	bbc <InvMixColumns+0xd2>
     b6c:	13490026 	movtne	r0, #36902	; 0x9026
     b70:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
     b74:	03193f01 	tsteq	r9, #1, 30
     b78:	3b0b3a0e 	blcc	2cf3b8 <__ROM_SIZE__+0x28f3b8>
     b7c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     b80:	11134919 	tstne	r3, r9, lsl r9
     b84:	40061201 	andmi	r1, r6, r1, lsl #4
     b88:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b8c:	01000000 	mrseq	r0, (UNDEF: 0)
     b90:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     b94:	0e030b13 	vmoveq.32	d3[0], r0
     b98:	01110e1b 	tsteq	r1, fp, lsl lr
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
     b9c:	17100612 			; <UNDEFINED> instruction: 0x17100612
     ba0:	24020000 	strcs	r0, [r2], #-0
     ba4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ba8:	000e030b 	andeq	r0, lr, fp, lsl #6
     bac:	00160300 	andseq	r0, r6, r0, lsl #6
     bb0:	0b3a0e03 	bleq	e843c4 <__ROM_SIZE__+0xe443c4>
     bb4:	0b390b3b 	bleq	e438a8 <__ROM_SIZE__+0xe038a8>
     bb8:	00001349 	andeq	r1, r0, r9, asr #6
     bbc:	0b002404 	bleq	9bd4 <__RAM_SIZE__+0x1bd4>
     bc0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     bc4:	05000008 	streq	r0, [r0, #-8]
     bc8:	08030016 	stmdaeq	r3, {r1, r2, r4}
     bcc:	0b3b0b3a 	bleq	ec38bc <__ROM_SIZE__+0xe838bc>
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
     bd0:	13490b39 	movtne	r0, #39737	; 0x9b39
     bd4:	0f060000 	svceq	0x00060000
     bd8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     bdc:	07000013 	smladeq	r0, r3, r0, r0
     be0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     be4:	13011349 	movwne	r1, #4937	; 0x1349
     be8:	05080000 	streq	r0, [r8, #-0]
     bec:	00134900 	andseq	r4, r3, r0, lsl #18
     bf0:	00260900 	eoreq	r0, r6, r0, lsl #18
     bf4:	00001349 	andeq	r1, r0, r9, asr #6
     bf8:	0b01130a 	bleq	45828 <__ROM_SIZE__+0x5828>
     bfc:	3b0b3a0b 	blcc	2cf430 <__ROM_SIZE__+0x28f430>
     c00:	010b390b 	tsteq	fp, fp, lsl #18
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
     c04:	0b000013 	bleq	c58 <InvSubBytes+0x8>
     c08:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     c0c:	0b3b0b3a 	bleq	ec38fc <__ROM_SIZE__+0xe838fc>
     c10:	13490b39 	movtne	r0, #39737	; 0x9b39
     c14:	00000b38 	andeq	r0, r0, r8, lsr fp
     c18:	0300340c 	movweq	r3, #1036	; 0x40c
     c1c:	3b0b3a0e 	blcc	2cf45c <__ROM_SIZE__+0x28f45c>
     c20:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     c24:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     c28:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
     c2c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c30:	0b3a0e03 	bleq	e84444 <__ROM_SIZE__+0xe44444>
     c34:	0b390b3b 	bleq	e43928 <__ROM_SIZE__+0xe03928>
     c38:	13491927 	movtne	r1, #39207	; 0x9927
     c3c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  for (i = 0; i < 4; ++i)
     c40:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c44:	00130119 	andseq	r0, r3, r9, lsl r1
     c48:	00050e00 	andeq	r0, r5, r0, lsl #28
}
     c4c:	0b3a0e03 	bleq	e84460 <__ROM_SIZE__+0xe44460>
  for (i = 0; i < 4; ++i)
     c50:	0b390b3b 	bleq	e43944 <__ROM_SIZE__+0xe03944>
     c54:	17021349 	strne	r1, [r2, -r9, asr #6]
    for (j = 0; j < 4; ++j)
     c58:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
{
     c5c:	000a0f00 	andeq	r0, sl, r0, lsl #30
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
     c60:	0b3a0e03 	bleq	e84474 <__ROM_SIZE__+0xe44474>
     c64:	0b390b3b 	bleq	e43958 <__ROM_SIZE__+0xe03958>
     c68:	00000111 	andeq	r0, r0, r1, lsl r1
     c6c:	03003410 	movweq	r3, #1040	; 0x410
     c70:	3b0b3a0e 	blcc	2cf4b0 <__ROM_SIZE__+0x28f4b0>
    for (j = 0; j < 4; ++j)
     c74:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     c78:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
  for (i = 0; i < 4; ++i)
     c7c:	00001742 	andeq	r1, r0, r2, asr #14
     c80:	01828911 	orreq	r8, r2, r1, lsl r9
    for (j = 0; j < 4; ++j)
     c84:	31011100 	mrscc	r1, (UNDEF: 17)
}
     c88:	12000013 	andne	r0, r0, #19
  for (i = 0; i < 4; ++i)
     c8c:	01018289 	smlabbeq	r1, r9, r2, r8
     c90:	13310111 	teqne	r1, #1073741828	; 0x40000004
     c94:	00001301 	andeq	r1, r0, r1, lsl #6
  temp = (*state)[3][1];
     c98:	01828a13 	orreq	r8, r2, r3, lsl sl
  (*state)[3][1] = (*state)[2][1];
     c9c:	91180200 	tstls	r8, r0, lsl #4
  (*state)[2][1] = (*state)[1][1];
     ca0:	00001842 	andeq	r1, r0, r2, asr #16
  (*state)[1][1] = (*state)[0][1];
     ca4:	01828914 	orreq	r8, r2, r4, lsl r9
  temp = (*state)[0][2];
     ca8:	31011101 	tstcc	r1, r1, lsl #2
  (*state)[0][2] = (*state)[2][2];
     cac:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
  temp = (*state)[1][2];
     cb0:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
  (*state)[1][2] = (*state)[3][2];
     cb4:	00001301 	andeq	r1, r0, r1, lsl #6
  temp = (*state)[0][3];
     cb8:	03003416 	movweq	r3, #1046	; 0x416
  (*state)[0][3] = (*state)[1][3];
     cbc:	3b0b3a08 	blcc	2cf4e4 <__ROM_SIZE__+0x28f4e4>
  (*state)[1][3] = (*state)[2][3];
     cc0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  (*state)[2][3] = (*state)[3][3];
     cc4:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
}
     cc8:	00001742 	andeq	r1, r0, r2, asr #14
{
     ccc:	3f012e17 	svccc	0x00012e17
  AddRoundKey(0, state, RoundKey);
     cd0:	3a080319 	bcc	20193c <__ROM_SIZE__+0x1c193c>
     cd4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cd8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
  for (round = 1; ; ++round)
     cdc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    MixColumns(state);
     ce0:	97184006 	ldrls	r4, [r8, -r6]
    AddRoundKey(round, state, RoundKey);
     ce4:	13011942 	movwne	r1, #6466	; 0x1942
     ce8:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     cec:	3c193f00 	ldccc	15, cr3, [r9], {-0}
  for (round = 1; ; ++round)
     cf0:	030e6e19 	movweq	r6, #60953	; 0xee19
    SubBytes(state);
     cf4:	3b0b3a0e 	blcc	2cf534 <__ROM_SIZE__+0x28f534>
    ShiftRows(state);
     cf8:	000b390b 	andeq	r3, fp, fp, lsl #18
     cfc:	11010000 	mrsne	r0, (UNDEF: 1)
    if (round == Nr) {
     d00:	130e2501 	movwne	r2, #58625	; 0xe501
  AddRoundKey(Nr, state, RoundKey);
     d04:	1b0e030b 	blne	381938 <__ROM_SIZE__+0x341938>
     d08:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
}
     d0c:	00171006 	andseq	r1, r7, r6
{
     d10:	00240200 	eoreq	r0, r4, r0, lsl #4
  AddRoundKey(Nr, state, RoundKey);
     d14:	0b3e0b0b 	bleq	f83948 <__ROM_SIZE__+0xf43948>
     d18:	00000803 	andeq	r0, r0, r3, lsl #16
     d1c:	03001603 	movweq	r1, #1539	; 0x603
  for (round = (Nr - 1); ; --round)
     d20:	3b0b3a0e 	blcc	2cf560 <__ROM_SIZE__+0x28f560>
    InvMixColumns(state);
     d24:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  for (round = (Nr - 1); ; --round)
     d28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    InvShiftRows(state);
     d2c:	0b0b0024 	bleq	2c0dc4 <__ROM_SIZE__+0x280dc4>
     d30:	0e030b3e 	vmoveq.16	d3[0], r0
    InvSubBytes(state);
     d34:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    AddRoundKey(round, state, RoundKey);
     d38:	03193f01 	tsteq	r9, #1, 30
     d3c:	3b0b3a0e 	blcc	2cf57c <__ROM_SIZE__+0x28f57c>
     d40:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    if (round == 0) {
     d44:	11134919 	tstne	r3, r9, lsl r9
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
     d48:	40061201 	andmi	r1, r6, r1, lsl #4
    buf[i] ^= Iv[i];
     d4c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d50:	00001301 	andeq	r1, r0, r1, lsl #6
     d54:	03000506 	movweq	r0, #1286	; 0x506
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
     d58:	3b0b3a0e 	blcc	2cf598 <__ROM_SIZE__+0x28f598>
     d5c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
     d60:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
  KeyExpansion(ctx->RoundKey, key);
     d64:	00001742 	andeq	r1, r0, r2, asr #14
}
     d68:	03000507 	movweq	r0, #1287	; 0x507
{
     d6c:	3b0b3a08 	blcc	2cf594 <__ROM_SIZE__+0x28f594>
  KeyExpansion(ctx->RoundKey, key);
     d70:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     d74:	00180213 	andseq	r0, r8, r3, lsl r2
     d78:	00050800 	andeq	r0, r5, r0, lsl #16
     d7c:	0b3a0e03 	bleq	e84590 <__ROM_SIZE__+0xe44590>
}
     d80:	0b390b3b 	bleq	e43a74 <__ROM_SIZE__+0xe03a74>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     d84:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     d88:	34090000 	strcc	r0, [r9], #-0
}
     d8c:	3a080300 	bcc	201994 <__ROM_SIZE__+0x1c1994>
{
     d90:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  Cipher((state_t*)buf, ctx->RoundKey);
     d94:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d98:	1742b717 	smlaldne	fp, r2, r7, r7
{
     d9c:	340a0000 	strcc	r0, [sl], #-0
  InvCipher((state_t*)buf, ctx->RoundKey);
     da0:	3a0e0300 	bcc	3819a8 <__ROM_SIZE__+0x3419a8>
     da4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     da8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
{
     dac:	1742b717 	smlaldne	fp, r2, r7, r7
     db0:	0f0b0000 	svceq	0x000b0000
  uint8_t *Iv = ctx->Iv;
     db4:	000b0b00 	andeq	r0, fp, r0, lsl #22
     db8:	000f0c00 	andeq	r0, pc, r0, lsl #24
  for (i = 0; i < length; i += AES_BLOCKLEN)
     dbc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    XorWithIv(buf, Iv);
     dc0:	260d0000 	strcs	r0, [sp], -r0
    Cipher((state_t*)buf, ctx->RoundKey);
     dc4:	00134900 	andseq	r4, r3, r0, lsl #18
     dc8:	00260e00 	eoreq	r0, r6, r0, lsl #28
  for (i = 0; i < length; i += AES_BLOCKLEN)
     dcc:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    buf += AES_BLOCKLEN;
     dd0:	03193f01 	tsteq	r9, #1, 30
  for (i = 0; i < length; i += AES_BLOCKLEN)
     dd4:	3b0b3a0e 	blcc	2cf614 <__ROM_SIZE__+0x28f614>
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
     dd8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     ddc:	11134919 	tstne	r3, r9, lsl r9
}
     de0:	40061201 	andmi	r1, r6, r1, lsl #4
{
     de4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     de8:	05100000 	ldreq	r0, [r0, #-0]
     dec:	3a080300 	bcc	2019f4 <__ROM_SIZE__+0x1c19f4>
  for (i = 0; i < length; i += AES_BLOCKLEN)
     df0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
     df4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     df8:	1742b717 	smlaldne	fp, r2, r7, r7
    InvCipher((state_t*)buf, ctx->RoundKey);
     dfc:	01000000 	mrseq	r0, (UNDEF: 0)
     e00:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    XorWithIv(buf, ctx->Iv);
     e04:	0e030b13 	vmoveq.32	d3[0], r0
     e08:	01110e1b 	tsteq	r1, fp, lsl lr
     e0c:	17100612 			; <UNDEFINED> instruction: 0x17100612
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
     e10:	24020000 	strcs	r0, [r2], #-0
     e14:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     e18:	000e030b 	andeq	r0, lr, fp, lsl #6
  for (i = 0; i < length; i += AES_BLOCKLEN)
     e1c:	00160300 	andseq	r0, r6, r0, lsl #6
     e20:	0b3a0e03 	bleq	e84634 <__ROM_SIZE__+0xe44634>
}
     e24:	0b390b3b 	bleq	e43b18 <__ROM_SIZE__+0xe03b18>
{
     e28:	00001349 	andeq	r1, r0, r9, asr #6
     e2c:	0b002404 	bleq	9e44 <__RAM_SIZE__+0x1e44>
     e30:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     e34:	05000008 	streq	r0, [r0, #-8]
          ctx->Iv[bi] = 0;
     e38:	13490035 	movtne	r0, #36917	; 0x9035
     e3c:	16060000 	strne	r0, [r6], -r0
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     e40:	3a080300 	bcc	201a48 <__ROM_SIZE__+0x1c1a48>
      bi = 0;
     e44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    buf[i] = (buf[i] ^ buffer[bi]);
     e48:	0013490b 	andseq	r4, r3, fp, lsl #18
     e4c:	000f0700 	andeq	r0, pc, r0, lsl #14
     e50:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     e54:	15080000 	strne	r0, [r8, #-0]
     e58:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     e5c:	00130113 	andseq	r0, r3, r3, lsl r1
     e60:	00050900 	andeq	r0, r5, r0, lsl #18
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
     e64:	00001349 	andeq	r1, r0, r9, asr #6
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
     e68:	4900260a 	stmdbmi	r0, {r1, r3, r9, sl, sp}
     e6c:	0b000013 	bleq	ec0 <atoh+0x8>
     e70:	0b0b0113 	bleq	2c12c4 <__ROM_SIZE__+0x2812c4>
      Cipher((state_t*)buffer,ctx->RoundKey);
     e74:	0b3b0b3a 	bleq	ec3b64 <__ROM_SIZE__+0xe83b64>
     e78:	13010b39 	movwne	r0, #6969	; 0x1b39
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     e7c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     e80:	3a0e0300 	bcc	381a88 <__ROM_SIZE__+0x341a88>
        if (ctx->Iv[bi] == 255)
     e84:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e88:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
        ctx->Iv[bi] += 1;
     e8c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     e90:	19270015 	stmdbne	r7!, {r0, r2, r4}
      bi = 0;
     e94:	00001349 	andeq	r1, r0, r9, asr #6
}
     e98:	0300340e 	movweq	r3, #1038	; 0x40e
int atoi(const char* str) {
     e9c:	3b0b3a0e 	blcc	2cf6dc <__ROM_SIZE__+0x28f6dc>
  int res = 0;
     ea0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    res = res * 10 + str[i] - '0';
     ea4:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     ea8:	0f000018 	svceq	0x00000018
     eac:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  for (int i = 0; str[i] != '\0'; ++i) {
     eb0:	00001301 	andeq	r1, r0, r1, lsl #6
     eb4:	03003410 	movweq	r3, #1040	; 0x410
uint32_t atoh(const char* str) {
     eb8:	3b0b3a0e 	blcc	2cf6f8 <__ROM_SIZE__+0x28f6f8>
  uint32_t hex = 0;
     ebc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    } else if (str[i] >= 'a' && str[i] <= 'f') {
     ec0:	3c193f13 	ldccc	15, cr3, [r9], {19}
     ec4:	11000019 	tstne	r0, r9, lsl r0
     ec8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    hex |= value;
     ecc:	0b3b0b3a 	bleq	ec3bbc <__ROM_SIZE__+0xe83bbc>
  for (uint32_t i = 0; str[i] != '\0'; i++) {
     ed0:	13490b39 	movtne	r0, #39737	; 0x9b39
     ed4:	34120000 	ldrcc	r0, [r2], #-0
    if (str[i] >= '0' && str[i] <= '9') {
     ed8:	3a0e0300 	bcc	381ae0 <__ROM_SIZE__+0x341ae0>
     edc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ee0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
      value = str[i] - '0';
     ee4:	13000018 	movwne	r0, #24
    } else if (str[i] >= 'A' && str[i] <= 'F') {
     ee8:	13490101 	movtne	r0, #37121	; 0x9101
     eec:	00001301 	andeq	r1, r0, r1, lsl #6
      value = str[i] - 'A' + 10;
     ef0:	49002114 	stmdbmi	r0, {r2, r4, r8, sp}
}
     ef4:	000b2f13 	andeq	r2, fp, r3, lsl pc
int r32(int argc, char *argv[]) {
     ef8:	00341500 	eorseq	r1, r4, r0, lsl #10
  if (argc < 2) {
     efc:	0b3a0e03 	bleq	e84710 <__ROM_SIZE__+0xe44710>
  uint32_t addr = atoh(argv[1]);
     f00:	0b39053b 	bleq	e423f4 <__ROM_SIZE__+0xe023f4>
     f04:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  printf("0x%x: 0x%x\n", addr, data);
     f08:	00001802 	andeq	r1, r0, r2, lsl #16
     f0c:	03003416 	movweq	r3, #1046	; 0x416
}
     f10:	3b0b3a0e 	blcc	2cf750 <__ROM_SIZE__+0x28f750>
    printf("Usage: %s <address> (in hex)\n", argv[0]);
     f14:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     f18:	00180213 	andseq	r0, r8, r3, lsl r2
    return -1;
     f1c:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
     f20:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     f24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
int w32(int argc, char *argv[]) {
     f28:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  if (argc < 3) {
     f2c:	01111349 	tsteq	r1, r9, asr #6
  uint32_t addr = atoh(argv[1]);
     f30:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f34:	01194297 			; <UNDEFINED> instruction: 0x01194297
  uint32_t data = atoh(argv[2]);
     f38:	18000013 	stmdane	r0, {r0, r1, r4}
     f3c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  return 0;
     f40:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    printf("Usage: %s <address> (in hex) <value> (in hex)\n", argv[0]);
     f44:	13490b39 	movtne	r0, #39737	; 0x9b39
     f48:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    return -1;
     f4c:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
     f50:	01018289 	smlabbeq	r1, r9, r2, r8
     f54:	13310111 	teqne	r1, #1073741828	; 0x40000004
int read_mem(int argc, char *argv[]) {
     f58:	8a1a0000 	bhi	680f60 <__ROM_SIZE__+0x640f60>
  if (argc < 3) {
     f5c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
  uint32_t addr = atoh(argv[1]);
     f60:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     f64:	341b0000 	ldrcc	r0, [fp], #-0
  uint32_t length = atoi(argv[2]);
     f68:	3a080300 	bcc	201b70 <__ROM_SIZE__+0x1c1b70>
     f6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  for (uint32_t i = 0, data = 0; i < length; i++) {
     f70:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    printf("Usage: %s <address> (in hex) <num_words> (in decimal)\n", argv[0]);
     f74:	1742b717 	smlaldne	fp, r2, r7, r7
     f78:	341c0000 	ldrcc	r0, [ip], #-0
    return -1;
     f7c:	3a0e0300 	bcc	381b84 <__ROM_SIZE__+0x341b84>
     f80:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    printf("0x%x: 0x%x\n", addr, data);
     f84:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f88:	1742b717 	smlaldne	fp, r2, r7, r7
    addr += 4;
     f8c:	891d0000 	ldmdbhi	sp, {}	; <UNPREDICTABLE>
  for (uint32_t i = 0, data = 0; i < length; i++) {
     f90:	11010182 	smlabbne	r1, r2, r1, r0
  return 0;
     f94:	01133101 	tsteq	r3, r1, lsl #2
}
     f98:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     f9c:	00018289 	andeq	r8, r1, r9, lsl #5
{
     fa0:	13310111 	teqne	r1, #1073741828	; 0x40000004
  if (argc < 4) {
     fa4:	0b1f0000 	bleq	7c0fac <__ROM_SIZE__+0x780fac>
  uint32_t addr = atoh(argv[1]);
     fa8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     fac:	20000006 	andcs	r0, r0, r6
  uint32_t bit_loc = atoi(argv[2]);
     fb0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     fb4:	0b3a0e03 	bleq	e847c8 <__ROM_SIZE__+0xe447c8>
  uint32_t bit_val = atoi(argv[3]);
     fb8:	0b39053b 	bleq	e424ac <__ROM_SIZE__+0xe024ac>
     fbc:	06120111 			; <UNDEFINED> instruction: 0x06120111
  if (bit_loc > 31) {
     fc0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  if (bit_val != 0 && bit_val != 1) {
     fc4:	00130119 	andseq	r0, r3, r9, lsl r1
  uint32_t data = reg32(addr);
     fc8:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
  data = data | (bit_val << bit_loc);
     fcc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  data = data & ~(!bit_val << bit_loc);
     fd0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     fd4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     fd8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  return 0;
     fdc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    printf("Error: Invalid bit location argument\n");
     fe0:	00130119 	andseq	r0, r3, r9, lsl r1
     fe4:	00342200 	eorseq	r2, r4, r0, lsl #4
    printf("Error: Invalid bit value argument\n");
     fe8:	0b3a0e03 	bleq	e847fc <__ROM_SIZE__+0xe447fc>
     fec:	0b39053b 	bleq	e424e0 <__ROM_SIZE__+0xe024e0>
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)> <bit_value(0 or 1)>\n", argv[0]);
     ff0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     ff4:	0000193c 	andeq	r1, r0, ip, lsr r9
  return -1;
     ff8:	03012e23 	movweq	r2, #7715	; 0x1e23
     ffc:	3b0b3a0e 	blcc	2cf83c <__ROM_SIZE__+0x28f83c>
    1000:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    1004:	11134919 	tstne	r3, r9, lsl r9
{
    1008:	40061201 	andmi	r1, r6, r1, lsl #4
  if (argc < 3) {
    100c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  uint32_t addr = atoh(argv[1]);
    1010:	00001301 	andeq	r1, r0, r1, lsl #6
    1014:	03012e24 	movweq	r2, #7716	; 0x1e24
  uint32_t bit_loc = atoi(argv[2]);
    1018:	3b0b3a0e 	blcc	2cf858 <__ROM_SIZE__+0x28f858>
    101c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
  if (bit_loc > 31) {
    1020:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  uint32_t data = reg32(addr);
    1024:	97184006 	ldrls	r4, [r8, -r6]
  printf("Bit %u @ 0x%08x: %u\n", bit_loc, addr, bit_val);
    1028:	13011942 	movwne	r1, #6466	; 0x1942
    102c:	89250000 	stmdbhi	r5!, {}	; <UNPREDICTABLE>
    1030:	11010182 	smlabbne	r1, r2, r1, r0
  return 0;
    1034:	26000001 	strcs	r0, [r0], -r1
    printf("Error: Invalid bit location argument\n");
    1038:	0e03012e 	adfeqsp	f0, f3, #0.5
    103c:	0b3b0b3a 	bleq	ec3d2c <__ROM_SIZE__+0xe83d2c>
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)\n", argv[0]);
    1040:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1044:	06120111 			; <UNDEFINED> instruction: 0x06120111
  return -1;
    1048:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    104c:	00130119 	andseq	r0, r3, r9, lsl r1
    1050:	00342700 	eorseq	r2, r4, r0, lsl #14
    1054:	0b3a0803 	bleq	e83068 <__ROM_SIZE__+0xe43068>
size_t strlen(const char *str) {
    1058:	0b390b3b 	bleq	e43d4c <__ROM_SIZE__+0xe03d4c>
  while (str[len]) {
    105c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1060:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    1064:	00342800 	eorseq	r2, r4, r0, lsl #16
  while (*str1 && (*str1 == *str2)) {
    1068:	0b3a0e03 	bleq	e8487c <__ROM_SIZE__+0xe4487c>
    str2++;
    106c:	0b390b3b 	bleq	e43d60 <__ROM_SIZE__+0xe03d60>
  while (*str1 && (*str1 == *str2)) {
    1070:	17021349 	strne	r1, [r2, -r9, asr #6]
    1074:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
  return *str1 - *str2;
    1078:	010b2900 	tsteq	fp, r0, lsl #18
}
    107c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    *(str1++) = *(str2++);
    1080:	00001301 	andeq	r1, r0, r1, lsl #6
    1084:	0182892a 	orreq	r8, r2, sl, lsr #18
  while (*str2) {
    1088:	01011101 	tsteq	r1, r1, lsl #2
  *str1 = '\0';
    108c:	2b000013 	blcs	10e0 <initial_setup+0x28>
}
    1090:	0e03012e 	adfeqsp	f0, f3, #0.5
  for (i = 0; i < size; i++) {
    1094:	0b3b0b3a 	bleq	ec3d84 <__ROM_SIZE__+0xe83d84>
    dest_char[i] = src_char[i];
    1098:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    109c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  for (i = 0; i < size; i++) {
    10a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
}
    10a4:	00130119 	andseq	r0, r3, r9, lsl r1
  for (i = 0; i < size; i++) {
    10a8:	00052c00 	andeq	r2, r5, r0, lsl #24
    dest_char[i] = val;
    10ac:	0b3a0e03 	bleq	e848c0 <__ROM_SIZE__+0xe448c0>
  for (i = 0; i < size; i++) {
    10b0:	0b390b3b 	bleq	e43da4 <__ROM_SIZE__+0xe03da4>
}
    10b4:	17021349 	strne	r1, [r2, -r9, asr #6]
void __attribute__((optimize("O0"), weak)) initial_setup(void) {
    10b8:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    10bc:	012e2d00 			; <UNDEFINED> instruction: 0x012e2d00
  char *src = &_etext, *dst = &_data;
    10c0:	0b3a0e03 	bleq	e848d4 <__ROM_SIZE__+0xe448d4>
    10c4:	0b390b3b 	bleq	e43db8 <__ROM_SIZE__+0xe03db8>
  if (dst != src)
    10c8:	13491927 	movtne	r1, #39207	; 0x9927
    10cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    while (dst < &_edata) *(dst++) = *(src++);
    10d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    10d4:	00130119 	andseq	r0, r3, r9, lsl r1
    10d8:	00052e00 	andeq	r2, r5, r0, lsl #28
    10dc:	0b3a0803 	bleq	e830f0 <__ROM_SIZE__+0xe430f0>
    10e0:	0b390b3b 	bleq	e43dd4 <__ROM_SIZE__+0xe03dd4>
    10e4:	17021349 	strne	r1, [r2, -r9, asr #6]
  for (dst = &_bss; dst < &_ebss; dst++) *dst = 0;
    10e8:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    10ec:	010b2f00 	tsteq	fp, r0, lsl #30
    10f0:	13011755 	movwne	r1, #5973	; 0x1755
    10f4:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
    10f8:	03193f00 	tsteq	r9, #0, 30
    10fc:	3b0b3a0e 	blcc	2cf93c <__ROM_SIZE__+0x28f93c>
    1100:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  platform_init();
    1104:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
}
    1108:	97184006 	ldrls	r4, [r8, -r6]
    110c:	00001942 	andeq	r1, r0, r2, asr #18
    1110:	3f002e31 	svccc	0x00002e31
    1114:	3a0e0319 	bcc	381d80 <__ROM_SIZE__+0x341d80>
    1118:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    111c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
    1120:	97184006 	ldrls	r4, [r8, -r6]
static void delete(void) {
    1124:	00001942 	andeq	r1, r0, r2, asr #18
  __write_char__(BACK_SPACE);
    1128:	3f002e32 	svccc	0x00002e32
    112c:	3a0e0319 	bcc	381d98 <__ROM_SIZE__+0x341d98>
  __write_char__(SPACE);
    1130:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  __write_char__(BACK_SPACE);
    1134:	1119270b 	tstne	r9, fp, lsl #14
    1138:	40061201 	andmi	r1, r6, r1, lsl #4
}
    113c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
static void clear_prompt(int char_count) {
    1140:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
  while (char_count) {
    1144:	03193f01 	tsteq	r9, #1, 30
    delete ();
    1148:	3b0b3a0e 	blcc	2cf988 <__ROM_SIZE__+0x28f988>
  while (char_count) {
    114c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
}
    1150:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    1154:	97184006 	ldrls	r4, [r8, -r6]
    auto_load[i].command(0, NULL);
    1158:	13011942 	movwne	r1, #6466	; 0x1942
    115c:	05340000 	ldreq	r0, [r4, #-0]!
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    1160:	3a0e0300 	bcc	381d68 <__ROM_SIZE__+0x341d68>
    1164:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1168:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    116c:	35000018 	strcc	r0, [r0, #-24]	; 0xffffffe8
    1170:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
}
    1174:	0e6e193c 			; <UNDEFINED> instruction: 0x0e6e193c
static int show_history(int argc, char **argv) {
    1178:	0b3a0e03 	bleq	e8498c <__ROM_SIZE__+0xe4498c>
  uint32_t end_index = total_num_commands-1;
    117c:	0b390b3b 	bleq	e43e70 <__ROM_SIZE__+0xe03e70>
  if (total_num_commands > NUM_HISTORY_ENTRIES) {
    1180:	Address 0x0000000000001180 is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
	...
       8:	00000008 	andeq	r0, r0, r8
       c:	08500001 	ldmdaeq	r0, {r0}^
      10:	64000000 	strvs	r0, [r0], #-0
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	00005500 	andeq	r5, r0, r0, lsl #10
	...
      28:	000b0000 	andeq	r0, fp, r0
      2c:	00010000 	andeq	r0, r1, r0
      30:	00000b51 	andeq	r0, r0, r1, asr fp
      34:	00006400 	andeq	r6, r0, r0, lsl #8
      38:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
      44:	00000001 	andeq	r0, r0, r1
      48:	0000000c 	andeq	r0, r0, ip
      4c:	00000010 	andeq	r0, r0, r0, lsl r0
      50:	9f310002 	svcls	0x00310002
      54:	00000010 	andeq	r0, r0, r0, lsl r0
      58:	00000064 	andeq	r0, r0, r4, rrx
      5c:	00540001 	subseq	r0, r4, r1
	...
      6c:	04000000 	streq	r0, [r0], #-0
      70:	01000000 	mrseq	r0, (UNDEF: 0)
      74:	00045000 	andeq	r5, r4, r0
      78:	001c0000 	andseq	r0, ip, r0
      7c:	00040000 	andeq	r0, r4, r0
      80:	9f5001f3 	svcls	0x005001f3
	...
      94:	00000007 	andeq	r0, r0, r7
      98:	07510001 	ldrbeq	r0, [r1, -r1]
      9c:	1c000000 	stcne	0, cr0, [r0], {-0}
      a0:	04000000 	streq	r0, [r0], #-0
      a4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
      a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
      b8:	00000400 	andeq	r0, r0, r0, lsl #8
      bc:	50000100 	andpl	r0, r0, r0, lsl #2
      c0:	00000004 	andeq	r0, r0, r4
      c4:	0000001c 	andeq	r0, r0, ip, lsl r0
      c8:	01f30004 	mvnseq	r0, r4
      cc:	00009f50 	andeq	r9, r0, r0, asr pc
	...
      dc:	00070000 	andeq	r0, r7, r0
      e0:	00010000 	andeq	r0, r1, r0
      e4:	00000751 	andeq	r0, r0, r1, asr r7
      e8:	00001c00 	andeq	r1, r0, r0, lsl #24
      ec:	f3000400 	vshl.u8	d0, d0, d0
      f0:	009f5101 	addseq	r5, pc, r1, lsl #2
      f4:	00000000 	andeq	r0, r0, r0
      f8:	01000000 	mrseq	r0, (UNDEF: 0)
	...
     104:	14000000 	strne	r0, [r0], #-0
     108:	01000000 	mrseq	r0, (UNDEF: 0)
     10c:	00145000 	andseq	r5, r4, r0
     110:	00160000 	andseq	r0, r6, r0
     114:	00040000 	andeq	r0, r4, r0
     118:	9f5001f3 	svcls	0x005001f3
     11c:	00000016 	andeq	r0, r0, r6, lsl r0
     120:	00000018 	andeq	r0, r0, r8, lsl r0
     124:	18500001 	ldmdane	r0, {r0}^
     128:	24000000 	strcs	r0, [r0], #-0
     12c:	04000000 	streq	r0, [r0], #-0
     130:	5001f300 	andpl	pc, r1, r0, lsl #6
     134:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     138:	00000000 	andeq	r0, r0, r0
     13c:	00000100 	andeq	r0, r0, r0, lsl #2
	...
     148:	00001400 	andeq	r1, r0, r0, lsl #8
     14c:	50000100 	andpl	r0, r0, r0, lsl #2
     150:	00000014 	andeq	r0, r0, r4, lsl r0
     154:	00000016 	andeq	r0, r0, r6, lsl r0
     158:	01f30004 	mvnseq	r0, r4
     15c:	00169f50 	andseq	r9, r6, r0, asr pc
     160:	00180000 	andseq	r0, r8, r0
     164:	00010000 	andeq	r0, r1, r0
     168:	00001850 	andeq	r1, r0, r0, asr r8
     16c:	00002400 	andeq	r2, r0, r0, lsl #8
     170:	f3000400 	vshl.u8	d0, d0, d0
     174:	009f5001 	addseq	r5, pc, r1
	...
     180:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     184:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     188:	01000000 	mrseq	r0, (UNDEF: 0)
     18c:	006a5000 	rsbeq	r5, sl, r0
     190:	00700000 	rsbseq	r0, r0, r0
     194:	00010000 	andeq	r0, r1, r0
     198:	00000050 	andeq	r0, r0, r0, asr r0
	...
     1a8:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
     1ac:	01000000 	mrseq	r0, (UNDEF: 0)
     1b0:	00295000 	eoreq	r5, r9, r0
     1b4:	002c0000 	eoreq	r0, ip, r0
     1b8:	00040000 	andeq	r0, r4, r0
     1bc:	9f5001f3 	svcls	0x005001f3
     1c0:	0000002c 	andeq	r0, r0, ip, lsr #32
     1c4:	00000040 	andeq	r0, r0, r0, asr #32
     1c8:	00500001 	subseq	r0, r0, r1
	...
     1dc:	26000000 	strcs	r0, [r0], -r0
     1e0:	01000000 	mrseq	r0, (UNDEF: 0)
     1e4:	00265100 	eoreq	r5, r6, r0, lsl #2
     1e8:	00290000 	eoreq	r0, r9, r0
     1ec:	00010000 	andeq	r0, r1, r0
     1f0:	00002952 	andeq	r2, r0, r2, asr r9
     1f4:	00002c00 	andeq	r2, r0, r0, lsl #24
     1f8:	f3000400 	vshl.u8	d0, d0, d0
     1fc:	2c9f5101 	ldfcss	f5, [pc], {1}
     200:	40000000 	andmi	r0, r0, r0
     204:	01000000 	mrseq	r0, (UNDEF: 0)
     208:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     21c:	00240000 	eoreq	r0, r4, r0
     220:	00010000 	andeq	r0, r1, r0
     224:	00002452 	andeq	r2, r0, r2, asr r4
     228:	00002900 	andeq	r2, r0, r0, lsl #18
     22c:	03000500 	movweq	r0, #1280	; 0x500
     230:	20000008 	andcs	r0, r0, r8
     234:	00000029 	andeq	r0, r0, r9, lsr #32
     238:	0000002c 	andeq	r0, r0, ip, lsr #32
     23c:	01f30004 	mvnseq	r0, r4
     240:	002c9f52 	eoreq	r9, ip, r2, asr pc
     244:	00400000 	subeq	r0, r0, r0
     248:	00010000 	andeq	r0, r1, r0
     24c:	00000052 	andeq	r0, r0, r2, asr r0
	...
     258:	00023800 	andeq	r3, r2, r0, lsl #16
     25c:	00024000 	andeq	r4, r2, r0
     260:	91000200 	mrsls	r0, R8_usr
     264:	00024070 	andeq	r4, r2, r0, ror r0
     268:	00025200 	andeq	r5, r2, r0, lsl #4
     26c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     288:	0000015c 	andeq	r0, r0, ip, asr r1
     28c:	0000016e 	andeq	r0, r0, lr, ror #2
     290:	70910002 	addsvc	r0, r1, r2
     294:	0000016e 	andeq	r0, r0, lr, ror #2
     298:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     29c:	f0540001 			; <UNDEFINED> instruction: 0xf0540001
     2a0:	04000001 	streq	r0, [r0], #-1
     2a4:	01000002 	tsteq	r0, r2
     2a8:	02045500 	andeq	r5, r4, #0, 10
     2ac:	02080000 	andeq	r0, r8, #0
     2b0:	00010000 	andeq	r0, r1, r0
     2b4:	00020854 	andeq	r0, r2, r4, asr r8
     2b8:	00020e00 	andeq	r0, r2, r0, lsl #28
     2bc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     2c0:	0000020e 	andeq	r0, r0, lr, lsl #4
     2c4:	0000021e 	andeq	r0, r0, lr, lsl r2
     2c8:	1e540001 	cdpne	0, 5, cr0, cr4, cr1, {0}
     2cc:	22000002 	andcs	r0, r0, #2
     2d0:	01000002 	tsteq	r0, r2
     2d4:	022c5500 	eoreq	r5, ip, #0, 10
     2d8:	02380000 	eorseq	r0, r8, #0
     2dc:	00010000 	andeq	r0, r1, r0
     2e0:	00000054 	andeq	r0, r0, r4, asr r0
     2e4:	00000000 	andeq	r0, r0, r0
     2e8:	00000100 	andeq	r0, r0, r0, lsl #2
     2ec:	00000101 	andeq	r0, r0, r1, lsl #2
     2f0:	00000101 	andeq	r0, r0, r1, lsl #2
     2f4:	00000101 	andeq	r0, r0, r1, lsl #2
     2f8:	00000101 	andeq	r0, r0, r1, lsl #2
     2fc:	00000100 	andeq	r0, r0, r0, lsl #2
     300:	00000101 	andeq	r0, r0, r1, lsl #2
     304:	00016800 	andeq	r6, r1, r0, lsl #16
     308:	00016e00 	andeq	r6, r1, r0, lsl #28
     30c:	30000200 	andcc	r0, r0, r0, lsl #4
     310:	00016e9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
     314:	00018800 	andeq	r8, r1, r0, lsl #16
     318:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     31c:	00000188 	andeq	r0, r0, r8, lsl #3
     320:	0000018e 	andeq	r0, r0, lr, lsl #3
     324:	9f310002 	svcls	0x00310002
     328:	0000018e 	andeq	r0, r0, lr, lsl #3
     32c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     330:	bc550001 	mrrclt	0, 0, r0, r5, cr1
     334:	c0000001 	andgt	r0, r0, r1
     338:	02000001 	andeq	r0, r0, #1
     33c:	c09f3000 	addsgt	r3, pc, r0
     340:	d6000001 	strle	r0, [r0], -r1
     344:	01000001 	tsteq	r0, r1
     348:	01d65500 	bicseq	r5, r6, r0, lsl #10
     34c:	01da0000 	bicseq	r0, sl, r0
     350:	00020000 	andeq	r0, r2, r0
     354:	01da9f30 	bicseq	r9, sl, r0, lsr pc
     358:	01ea0000 	mvneq	r0, r0
     35c:	00010000 	andeq	r0, r1, r0
     360:	0001ea55 	andeq	lr, r1, r5, asr sl
     364:	0001ee00 	andeq	lr, r1, r0, lsl #28
     368:	30000200 	andcc	r0, r0, r0, lsl #4
     36c:	0001ee9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
     370:	0001f000 	andeq	pc, r1, r0
     374:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     378:	00000202 	andeq	r0, r0, r2, lsl #4
     37c:	00000208 	andeq	r0, r0, r8, lsl #4
     380:	9f300002 	svcls	0x00300002
     384:	0000020e 	andeq	r0, r0, lr, lsl #4
     388:	00000218 	andeq	r0, r0, r8, lsl r2
     38c:	18550001 	ldmdane	r5, {r0}^
     390:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
     394:	02000002 	andeq	r0, r0, #2
     398:	2c9f3000 	ldccs	0, cr3, [pc], {0}
     39c:	38000002 	stmdacc	r0, {r1}
     3a0:	01000002 	tsteq	r0, r2
     3a4:	00005500 	andeq	r5, r0, r0, lsl #10
     3a8:	00000000 	andeq	r0, r0, r0
     3ac:	00010000 	andeq	r0, r1, r0
     3b0:	01000000 	mrseq	r0, (UNDEF: 0)
     3b4:	01ee0001 	mvneq	r0, r1
     3b8:	01f80000 	mvnseq	r0, r0
     3bc:	00020000 	andeq	r0, r2, r0
int car_mesg(int argc, char** argv) {
     3c0:	01f89f31 	mvnseq	r9, r1, lsr pc
     3c4:	01ff0000 	mvnseq	r0, r0
    printf("Received the message:");
     3c8:	00010000 	andeq	r0, r1, r0
    for (ctr = 1; ctr < argc; ctr++) {
     3cc:	00020852 	andeq	r0, r2, r2, asr r8
        printf(" %s", argv[ctr]);
     3d0:	00020800 	andeq	r0, r2, r0, lsl #16
     3d4:	31000200 	mrscc	r0, R8_usr
     3d8:	0002089f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    for (ctr = 1; ctr < argc; ctr++) {
     3dc:	00020e00 	andeq	r0, r2, r0, lsl #28
    printf("\n");
     3e0:	32000200 	andcc	r0, r0, #0, 4
     3e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
            printf("strcmp didn't match %s\n", argv[1]);
     408:	00001c00 	andeq	r1, r0, r0, lsl #24
     40c:	00004c00 	andeq	r4, r0, r0, lsl #24
     410:	50000100 	andpl	r0, r0, r0, lsl #2
     414:	0000004c 	andeq	r0, r0, ip, asr #32
     418:	00000052 	andeq	r0, r0, r2, asr r0
     41c:	01f30004 	mvnseq	r0, r4
     420:	00529f50 	subseq	r9, r2, r0, asr pc
int ping(int argc, char** argv) {
     424:	00580000 	subseq	r0, r8, r0
    printf("Pinging the car.\n");
     428:	00010000 	andeq	r0, r1, r0
    printf2("FOB_MESG PING\n");
     42c:	00005850 	andeq	r5, r0, r0, asr r8
     430:	00006200 	andeq	r6, r0, r0, lsl #4
}
     434:	f3000400 	vshl.u8	d0, d0, d0
     438:	629f5001 	addsvs	r5, pc, #1
     43c:	72000000 	andvc	r0, r0, #0
int pair(int argc, char** argv) {
     440:	01000000 	mrseq	r0, (UNDEF: 0)
    printf("Sending a pair request.\n");
     444:	00725000 	rsbseq	r5, r2, r0
    printf2("FOB_MESG PAIR\n");
     448:	00a20000 	adceq	r0, r2, r0
     44c:	00040000 	andeq	r0, r4, r0
}
     450:	9f5001f3 	svcls	0x005001f3
     454:	000000a2 	andeq	r0, r0, r2, lsr #1
     458:	000000a8 	andeq	r0, r0, r8, lsr #1
void uputc(char c) {
     45c:	a8500001 	ldmdage	r0, {r0}^
  while ((UARTFR >> 5) & 1)
     460:	34000000 	strcc	r0, [r0], #-0
     464:	04000001 	streq	r0, [r0], #-1
  UART_DR = c;
     468:	5001f300 	andpl	pc, r1, r0, lsl #6
  if (c == '\n')
     46c:	0001349f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
}
     470:	00013a00 	andeq	r3, r1, r0, lsl #20
    uputc('\r');
     474:	50000100 	andpl	r0, r0, r0, lsl #2
}
     478:	0000013a 	andeq	r0, r0, sl, lsr r1
     47c:	0000013e 	andeq	r0, r0, lr, lsr r1
  if (!((UARTFR >> 4) & 1)) return UART_DR;
     480:	01f30004 	mvnseq	r0, r4
     484:	013e9f50 	teqeq	lr, r0, asr pc
     488:	01400000 	mrseq	r0, (UNDEF: 64)
     48c:	00010000 	andeq	r0, r1, r0
  return -1;
     490:	00014050 	andeq	r4, r1, r0, asr r0
}
     494:	00014200 	andeq	r4, r1, r0, lsl #4
     498:	f3000400 	vshl.u8	d0, d0, d0
  UARTCTL = 0;
     49c:	429f5001 	addsmi	r5, pc, #1
     4a0:	44000001 	strmi	r0, [r0], #-1
  UARTIBRD = 8;
     4a4:	01000001 	tsteq	r0, r1
  UARTFBRD = 44;
     4a8:	01445000 	mrseq	r5, (UNDEF: 68)
  UARTCC = 0;
     4ac:	015c0000 	cmpeq	ip, r0
  UARTLCRH = 0x60;
     4b0:	00040000 	andeq	r0, r4, r0
  UARTCTL = 0x301;
     4b4:	9f5001f3 	svcls	0x005001f3
	...
}
     4d4:	001c0000 	andseq	r0, ip, r0
    u2putc('\r');
     4d8:	004d0000 	subeq	r0, sp, r0
}
     4dc:	00010000 	andeq	r0, r1, r0
     4e0:	00004d51 	andeq	r4, r0, r1, asr sp
  if (!((UART2FR >> 4) & 1)) return UART2_DR;
     4e4:	00005200 	andeq	r5, r0, r0, lsl #4
     4e8:	f3000400 	vshl.u8	d0, d0, d0
     4ec:	529f5101 	addspl	r5, pc, #1073741824	; 0x40000000
     4f0:	5b000000 	blpl	4f8 <u2getc+0x14>
  return -1;
     4f4:	01000000 	mrseq	r0, (UNDEF: 0)
}
     4f8:	005b5100 	subseq	r5, fp, r0, lsl #2
     4fc:	00620000 	rsbeq	r0, r2, r0
  UART2CTL = 0;
     500:	00040000 	andeq	r0, r4, r0
     504:	9f5101f3 	svcls	0x005101f3
  UART2IBRD = 8;
     508:	00000062 	andeq	r0, r0, r2, rrx
  UART2FBRD = 44;
     50c:	00000072 	andeq	r0, r0, r2, ror r0
  UART2CC = 0;
     510:	72510001 	subsvc	r0, r1, #1
  UART2LCRH = 0x60;
     514:	a2000000 	andge	r0, r0, #0
  UART2CTL = 0x301;
     518:	04000000 	streq	r0, [r0], #-0
}
     51c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     520:	0000a29f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
  RCGCUART |= 3;
     524:	0000a900 	andeq	sl, r0, r0, lsl #18
     528:	51000100 	mrspl	r0, (UNDEF: 16)
     52c:	000000a9 	andeq	r0, r0, r9, lsr #1
     530:	00000134 	andeq	r0, r0, r4, lsr r1
  RCGCGPIO |= 3;
     534:	01f30004 	mvnseq	r0, r4
     538:	01349f51 	teqeq	r4, r1, asr pc
     53c:	013a0000 	teqeq	sl, r0
  GPIODEN = 0x03;
     540:	00010000 	andeq	r0, r1, r0
     544:	00013a51 	andeq	r3, r1, r1, asr sl
  GPIOAFSEL = 0x03;
     548:	00013e00 	andeq	r3, r1, r0, lsl #28
  GPIOPCTL |= 0x00000011;
     54c:	f3000400 	vshl.u8	d0, d0, d0
     550:	3e9f5101 	fmlcce	f5, f7, f1
     554:	5c000001 	stcpl	0, cr0, [r0], {1}
  GPIODEN2 = 0x03;
     558:	01000001 	tsteq	r0, r1
     55c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    uart_init();
     580:	0000001c 	andeq	r0, r0, ip, lsl r0
    uart2_init();
     584:	0000003a 	andeq	r0, r0, sl, lsr r0
    set_read_char(ugetc);
     588:	3a520001 	bcc	1480594 <__ROM_SIZE__+0x1440594>
    set_read_char2(u2getc);
     58c:	52000000 	andpl	r0, r0, #0
     590:	01000000 	mrseq	r0, (UNDEF: 0)
    set_write_char(uputc);
     594:	00525400 	subseq	r5, r2, r0, lsl #8
    set_write_char2(u2putc);
     598:	005b0000 	subseq	r0, fp, r0
     59c:	00010000 	andeq	r0, r1, r0
}
     5a0:	00005b52 	andeq	r5, r0, r2, asr fp
     5a4:	00005e00 	andeq	r5, r0, r0, lsl #28
     5a8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     5ac:	0000005e 	andeq	r0, r0, lr, asr r0
     5b0:	00000062 	andeq	r0, r0, r2, rrx
  selected_mode = mode;
     5b4:	01f30004 	mvnseq	r0, r4
  if (selected_mode == NONE) {
     5b8:	00629f52 	rsbeq	r9, r2, r2, asr pc
  out_buf_rgn.addr = addr;
     5bc:	006a0000 	rsbeq	r0, sl, r0
  out_buf_rgn.size = size / 2;
     5c0:	00010000 	andeq	r0, r1, r0
  out_buf_rgn.curr_index = 0;
     5c4:	00006a52 	andeq	r6, r0, r2, asr sl
  inp_buf_rgn.addr = addr + size / 2;
     5c8:	00007200 	andeq	r7, r0, r0, lsl #4
  inp_buf_rgn.curr_index = 0;
     5cc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
  if (!(selected_mode & INP)) {
     5d0:	00000072 	andeq	r0, r0, r2, ror r0
    out_buf_rgn.size = size;
     5d4:	000000a2 	andeq	r0, r0, r2, lsr #1
  memset(addr, 0, size);
     5d8:	01f30004 	mvnseq	r0, r4
     5dc:	00a29f52 	adceq	r9, r2, r2, asr pc
  } else if (!(selected_mode & OUT)) {
     5e0:	00ae0000 	adceq	r0, lr, r0
     5e4:	00010000 	andeq	r0, r1, r0
    inp_buf_rgn.addr = addr;
     5e8:	0000ae54 	andeq	sl, r0, r4, asr lr
    inp_buf_rgn.size = size;
     5ec:	00013400 	andeq	r3, r1, r0, lsl #8
     5f0:	f3000400 	vshl.u8	d0, d0, d0
  if (!(selected_mode & INP)) {
     5f4:	349f5201 	ldrcc	r5, [pc], #513	; 5fc <memlog_getc+0x8>
     5f8:	38000001 	stmdacc	r0, {r0}
     5fc:	01000001 	tsteq	r0, r1
  if (inp_buf_rgn.addr[inp_buf_rgn.curr_index] == 0) {
     600:	01385400 	teqeq	r8, r0, lsl #8
     604:	013e0000 	teqeq	lr, r0
  int val = inp_buf_rgn.addr[inp_buf_rgn.curr_index];
     608:	00040000 	andeq	r0, r4, r0
  inp_buf_rgn.addr[inp_buf_rgn.curr_index] = 0;
     60c:	9f5201f3 	svcls	0x005201f3
  inp_buf_rgn.curr_index++;
     610:	0000013e 	andeq	r0, r0, lr, lsr r1
     614:	0000015c 	andeq	r0, r0, ip, asr r1
  if (inp_buf_rgn.curr_index == inp_buf_rgn.size) {
     618:	00520001 	subseq	r0, r2, r1
}
     61c:	00000000 	andeq	r0, r0, r0
    inp_buf_rgn.curr_index = 0;
     620:	02000000 	andeq	r0, r0, #0
	...
  if (!(selected_mode & OUT) || c == 0) {
     634:	00002200 	andeq	r2, r0, r0, lsl #4
     638:	00005e00 	andeq	r5, r0, r0, lsl #28
     63c:	30000200 	andcc	r0, r0, r0, lsl #4
  out_buf_rgn.addr[out_buf_rgn.curr_index] = (uint8_t) c;
     640:	0000629f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     644:	00007200 	andeq	r7, r0, r0, lsl #4
  out_buf_rgn.curr_index++;
     648:	30000200 	andcc	r0, r0, r0, lsl #4
  if (out_buf_rgn.curr_index == out_buf_rgn.size) {
     64c:	0000729f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     650:	00009400 	andeq	r9, r0, r0, lsl #8
    out_buf_rgn.curr_index = 0;
     654:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     658:	00000094 	muleq	r0, r4, r0
     65c:	000000a2 	andeq	r0, r0, r2, lsr #1
static void outstr(const char *str) {
     660:	7f740003 	svcvc	0x00740003
  while (*str != '\0') {
     664:	0000a29f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    __write_char__(*str);
     668:	0000ae00 	andeq	sl, r0, r0, lsl #28
    str++;
     66c:	30000200 	andcc	r0, r0, r0, lsl #4
  while (*str != '\0') {
     670:	0000ae9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
}
     674:	0000e800 	andeq	lr, r0, r0, lsl #16
     678:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
static bool printf_numbers(const char fmt, va_list *args, int l_count) {
     67c:	000000e8 	andeq	r0, r0, r8, ror #1
     680:	000000f4 	strdeq	r0, [r0], -r4
  switch (fmt) {
     684:	7f740003 	svcvc	0x00740003
     688:	0000f49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     68c:	00011200 	andeq	r1, r1, r0, lsl #4
      if (l_count == 0) {
     690:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     694:	00000112 	andeq	r0, r0, r2, lsl r1
        value = va_arg(*args, unsigned int);
     698:	0000015c 	andeq	r0, r0, ip, asr r1
     69c:	9f300002 	svcls	0x00300002
	...
          __write_char__(hextable[0]);
     6a8:	00000001 	andeq	r0, r0, r1
     6ac:	00000000 	andeq	r0, r0, r0
  return true;
     6b0:	00620000 	rsbeq	r0, r2, r0
  switch (fmt) {
     6b4:	006e0000 	rsbeq	r0, lr, r0
      outstr("\nprintf-error\n");
     6b8:	00020000 	andeq	r0, r2, r0
      return false;
     6bc:	00729f30 	rsbseq	r9, r2, r0, lsr pc
}
     6c0:	009c0000 	addseq	r0, ip, r0
      if (l_count == 0) {
     6c4:	00010000 	andeq	r0, r1, r0
        value = va_arg(*args, int);
     6c8:	00009c55 	andeq	r9, r0, r5, asr ip
     6cc:	0000a200 	andeq	sl, r0, r0, lsl #4
      if (value < 0) {
     6d0:	51000100 	mrspl	r0, (UNDEF: 16)
        num[num_len++] = hextable[value % 10];
     6d4:	000000ac 	andeq	r0, r0, ip, lsr #1
     6d8:	000000ca 	andeq	r0, r0, sl, asr #1
     6dc:	3e550001 	cdpcc	0, 5, cr0, cr5, cr1, {0}
     6e0:	42000001 	andmi	r0, r0, #1
     6e4:	02000001 	andeq	r0, r0, #1
     6e8:	009f3000 	addseq	r3, pc, r0
     6ec:	00000000 	andeq	r0, r0, r0
     6f0:	01000000 	mrseq	r0, (UNDEF: 0)
	...
      } while (value > 0);
     6fc:	00003000 	andeq	r3, r0, r0
     700:	00003e00 	andeq	r3, r0, r0, lsl #28
        __write_char__('-');
     704:	30000200 	andcc	r0, r0, r0, lsl #4
     708:	0000ca9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
        value = -value;
     70c:	0000f000 	andeq	pc, r0, r0
        __write_char__(num[--num_len]);
     710:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     714:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     718:	000000f4 	strdeq	r0, [r0], -r4
     71c:	f4510001 			; <UNDEFINED> instruction: 0xf4510001
     720:	12000000 	andne	r0, r0, #0
      while (num_len > 0) {
     724:	01000001 	tsteq	r0, r1
  return true;
     728:	01425500 	cmpeq	r2, r0, lsl #10
          num[num_len++] = hextable[value % 10];
     72c:	015c0000 	cmpeq	ip, r0
     730:	00020000 	andeq	r0, r2, r0
     734:	00009f30 	andeq	r9, r0, r0, lsr pc
	...
     740:	01120000 	tsteq	r2, r0
     744:	01340000 	teqeq	r4, r0
     748:	00010000 	andeq	r0, r1, r0
          value = value / 10;
     74c:	00013a54 	andeq	r3, r1, r4, asr sl
        } while (value > 0);
     750:	00013e00 	andeq	r3, r1, r0, lsl #28
        while (num_len > 0) {
     754:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
          __write_char__(num[--num_len]);
     760:	00010100 	andeq	r0, r1, r0, lsl #2
     764:	00000000 	andeq	r0, r0, r0
     768:	00000112 	andeq	r0, r0, r2, lsl r1
     76c:	00000112 	andeq	r0, r0, r2, lsl r1
  return true;
     770:	12520001 	subsne	r0, r2, #1
              __write_char__(hextable[val]);
     774:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
     778:	02000001 	andeq	r0, r0, #1
              leading_zero_ignored = true;
     77c:	1e9f3100 	fmlnee	f3, f7, f0
          while (start_bit >= 0) {
     780:	34000001 	strcc	r0, [r0], #-1
            int val = (value >> start_bit) & 0xF;
     784:	01000001 	tsteq	r0, r1
            if (val || leading_zero_ignored) {
     788:	013a5200 	teqeq	sl, r0, lsl #4
     78c:	013e0000 	teqeq	lr, r0
     790:	00010000 	andeq	r0, r1, r0
          bool leading_zero_ignored = false;
     794:	00000052 	andeq	r0, r0, r2, asr r0
	...
        return false;
     7a4:	00011200 	andeq	r1, r1, r0, lsl #4
     7a8:	00011b00 	andeq	r1, r1, r0, lsl #22
     7ac:	53000100 	movwpl	r0, #256	; 0x100
     7b0:	0000011b 	andeq	r0, r0, fp, lsl r1
     7b4:	00000120 	andeq	r0, r0, r0, lsr #2
     7b8:	00750008 	rsbseq	r0, r5, r8
int printf(const char *fmt, ...) {
     7bc:	3f250074 	svccc	0x00250074
     7c0:	01289f1a 			; <UNDEFINED> instruction: 0x01289f1a
     7c4:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
  va_start(args, fmt);
     7c8:	00050000 	andeq	r0, r5, r0
  while (*fmt) {
     7cc:	1a3f0073 	bne	fc09a0 <__ROM_SIZE__+0xf809a0>
        if (*fmt == '%') {
     7d0:	00012c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
        __write_char__(*fmt);
     7d4:	00013400 	andeq	r3, r1, r0, lsl #8
        fmt++;
     7d8:	53000100 	movwpl	r0, #256	; 0x100
	...
          continue;
     7ec:	00000006 	andeq	r0, r0, r6
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
     7f0:	06500001 	ldrbeq	r0, [r0], -r1
     7f4:	16000000 	strne	r0, [r0], -r0
     7f8:	01000000 	mrseq	r0, (UNDEF: 0)
     7fc:	00005400 	andeq	r5, r0, r0, lsl #8
	...
        switch (*fmt) {
     808:	056c0000 	strbeq	r0, [ip, #-0]!
     80c:	057c0000 	ldrbeq	r0, [ip, #-0]!
     810:	00010000 	andeq	r0, r1, r0
            __write_char__(*fmt);
     814:	00057c50 	andeq	r7, r5, r0, asr ip
     818:	0005e000 	andeq	lr, r5, r0
            state = CHECK_CH;
     81c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
            outstr(va_arg(args, const char *));
     82c:	0000056c 	andeq	r0, r0, ip, ror #10
     830:	0000057c 	andeq	r0, r0, ip, ror r5
            fmt++;
     834:	7c510001 	mrrcvc	0, 0, r0, r1, cr1
            break;
     838:	e0000005 	and	r0, r0, r5
            __write_char__(va_arg(args, int));
     83c:	01000005 	tsteq	r0, r5
     840:	00005500 	andeq	r5, r0, r0, lsl #10
	...
            break;
     84c:	056c0000 	strbeq	r0, [ip, #-0]!
            if (*fmt == 'l') {
     850:	057c0000 	ldrbeq	r0, [ip, #-0]!
     854:	00010000 	andeq	r0, r1, r0
            if (printf_numbers(*fmt, &args, l_count)) {
     858:	00057c52 	andeq	r7, r5, r2, asr ip
     85c:	0005e000 	andeq	lr, r5, r0
     860:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
              l_count++;
     86c:	00000004 	andeq	r0, r0, r4
            if (printf_numbers(*fmt, &args, 0)) {
     870:	00000576 	andeq	r0, r0, r6, ror r5
     874:	0000057c 	andeq	r0, r0, ip, ror r5
              fmt++;
     878:	9f300002 	svcls	0x00300002
              break;
     87c:	0000057c 	andeq	r0, r0, ip, ror r5
            return -1;
     880:	000005e0 	andeq	r0, r0, r0, ror #11
}
     884:	00540001 	subseq	r0, r4, r1
     888:	00000000 	andeq	r0, r0, r0
            return -1;
     88c:	04000000 	streq	r0, [r0], #-0
     890:	01000000 	mrseq	r0, (UNDEF: 0)
     894:	00000000 	andeq	r0, r0, r0
int printf2(const char *fmt, ...) {
     898:	00057600 	andeq	r7, r5, r0, lsl #12
     89c:	00057c00 	andeq	r7, r5, r0, lsl #24
    __write_char2__(*fmt);
     8a0:	40000200 	andmi	r0, r0, r0, lsl #4
     8a4:	00057c9f 	muleq	r5, pc, ip	; <UNPREDICTABLE>
  while (*fmt != '\0') {
     8a8:	0005b700 	andeq	fp, r5, r0, lsl #14
     8ac:	53000100 	movwpl	r0, #256	; 0x100
     8b0:	000005c0 	andeq	r0, r0, r0, asr #11
     8b4:	000005c2 	andeq	r0, r0, r2, asr #11
     8b8:	9f3f0002 	svcls	0x003f0002
{
     8bc:	000005c2 	andeq	r0, r0, r2, asr #11
  for (i = 0; i < Nk; ++i)
     8c0:	000005d2 	ldrdeq	r0, [r0], -r2
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
     8c4:	dc530001 	mrrcle	0, 0, r0, r3, cr1
     8c8:	e0000005 	and	r0, r0, r5
     8cc:	01000005 	tsteq	r0, r5
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
     8d0:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
     8dc:	05260000 	streq	r0, [r6, #-0]!
     8e0:	05360000 	ldreq	r0, [r6, #-0]!
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
     8e4:	00010000 	andeq	r0, r1, r0
  for (i = 0; i < Nk; ++i)
     8e8:	00053650 	andeq	r3, r5, r0, asr r6
     8ec:	00056c00 	andeq	r6, r5, r0, lsl #24
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     8f0:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
     900:	00000526 	andeq	r0, r0, r6, lsr #10
     904:	00000536 	andeq	r0, r0, r6, lsr r5
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
     908:	36510001 	ldrbcc	r0, [r1], -r1
     90c:	6c000005 	stcvs	0, cr0, [r0], {5}
     910:	01000005 	tsteq	r0, r5
     914:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
     920:	05260000 	streq	r0, [r6, #-0]!
     924:	05360000 	ldreq	r0, [r6, #-0]!
     928:	00010000 	andeq	r0, r1, r0
     92c:	00053652 	andeq	r3, r5, r2, asr r6
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
     930:	00056c00 	andeq	r6, r5, r0, lsl #24
     934:	58000100 	stmdapl	r0, {r8}
	...
      k = (i - 1) * 4;
     940:	00000003 	andeq	r0, r0, r3
      tempa[0]=RoundKey[k + 0];
     944:	00000532 	andeq	r0, r0, r2, lsr r5
     948:	00000536 	andeq	r0, r0, r6, lsr r5
      tempa[1]=RoundKey[k + 1];
     94c:	9f300002 	svcls	0x00300002
     950:	00000536 	andeq	r0, r0, r6, lsr r5
      tempa[2]=RoundKey[k + 2];
     954:	0000056c 	andeq	r0, r0, ip, ror #10
     958:	00550001 	subseq	r0, r5, r1
	...
    if (i % Nk == 0)
     964:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
     968:	02000004 	andeq	r0, r0, #4
        tempa[0] = tempa[1];
     96c:	01000005 	tsteq	r0, r5
        tempa[1] = tempa[2];
     970:	05025000 	streq	r5, [r2, #-0]
        tempa[2] = tempa[3];
     974:	05260000 	streq	r0, [r6, #-0]!
        tempa[3] = u8tmp;
     978:	00010000 	andeq	r0, r1, r0
        tempa[0] = getSBoxValue(tempa[0]);
     97c:	00000056 	andeq	r0, r0, r6, asr r0
	...
        tempa[1] = getSBoxValue(tempa[1]);
     988:	00000202 	andeq	r0, r0, r2, lsl #4
        tempa[2] = getSBoxValue(tempa[2]);
     98c:	0004ee00 	andeq	lr, r4, r0, lsl #28
     990:	0004fe00 	andeq	pc, r4, r0, lsl #28
        tempa[3] = getSBoxValue(tempa[3]);
     994:	51000100 	mrspl	r0, (UNDEF: 16)
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
     998:	000004fe 	strdeq	r0, [r0], -lr
     99c:	00000510 	andeq	r0, r0, r0, lsl r5
     9a0:	10540001 	subsne	r0, r4, r1
     9a4:	16000005 	strne	r0, [r0], -r5
}
     9a8:	03000005 	movweq	r0, #5
     9ac:	9f107400 	svcls	0x00107400
{
     9b0:	00000516 	andeq	r0, r0, r6, lsl r5
  for (i = 0; i < 4; ++i)
     9b4:	00000526 	andeq	r0, r0, r6, lsr #10
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
     9b8:	00540001 	subseq	r0, r4, r1
	...
     9c4:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
     9c8:	02000004 	andeq	r0, r0, #4
     9cc:	01000005 	tsteq	r0, r5
     9d0:	05025200 	streq	r5, [r2, #-512]	; 0xfffffe00
    for (j = 0; j < 4; ++j)
     9d4:	05260000 	streq	r0, [r6, #-0]!
     9d8:	00010000 	andeq	r0, r1, r0
  for (i = 0; i < 4; ++i)
     9dc:	00000057 	andeq	r0, r0, r7, asr r0
     9e0:	00000000 	andeq	r0, r0, r0
     9e4:	00000100 	andeq	r0, r0, r0, lsl #2
    for (j = 0; j < 4; ++j)
     9e8:	0004fc00 	andeq	pc, r4, r0, lsl #24
}
     9ec:	00050200 	andeq	r0, r5, r0, lsl #4
  for (i = 0; i < 4; ++i)
     9f0:	30000200 	andcc	r0, r0, r0, lsl #4
    for (j = 0; j < 4; ++j)
     9f4:	0005029f 	muleq	r5, pc, r2	; <UNPREDICTABLE>
     9f8:	00052600 	andeq	r2, r5, r0, lsl #12
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
     9fc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
     a0c:	00000001 	andeq	r0, r0, r1
    for (j = 0; j < 4; ++j)
     a10:	000004fc 	strdeq	r0, [r0], -ip
     a14:	00000502 	andeq	r0, r0, r2, lsl #10
  for (i = 0; i < 4; ++i)
     a18:	02580001 	subseq	r0, r8, #1
     a1c:	07000005 	streq	r0, [r0, -r5]
    for (j = 0; j < 4; ++j)
     a20:	01000005 	tsteq	r0, r5
}
     a24:	05105100 	ldreq	r5, [r0, #-256]	; 0xffffff00
  for (i = 0; i < 4; ++i)
     a28:	05160000 	ldreq	r0, [r6, #-0]
     a2c:	00010000 	andeq	r0, r1, r0
     a30:	00051654 	andeq	r1, r5, r4, asr r6
  temp           = (*state)[0][1];
     a34:	00052100 	andeq	r2, r5, r0, lsl #2
  (*state)[0][1] = (*state)[1][1];
     a38:	51000100 	mrspl	r0, (UNDEF: 16)
	...
  temp           = (*state)[0][2];
     a44:	00000003 	andeq	r0, r0, r3
  (*state)[0][2] = (*state)[2][2];
     a48:	048c0000 	streq	r0, [ip], #0
  temp           = (*state)[1][2];
     a4c:	04900000 	ldreq	r0, [r0], #0
  (*state)[1][2] = (*state)[3][2];
     a50:	00020000 	andeq	r0, r2, r0
  temp           = (*state)[0][3];
     a54:	04909f30 	ldreq	r9, [r0], #3888	; 0xf30
  (*state)[0][3] = (*state)[3][3];
     a58:	049e0000 	ldreq	r0, [lr], #0
  (*state)[3][3] = (*state)[2][3];
     a5c:	00010000 	andeq	r0, r1, r0
  (*state)[2][3] = (*state)[1][3];
     a60:	0004a053 	andeq	sl, r4, r3, asr r0
}
     a64:	0004a600 	andeq	sl, r4, r0, lsl #12
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
     a68:	53000100 	movwpl	r0, #256	; 0x100
	...
{
     a78:	04e00000 	strbteq	r0, [r0], #0
     a7c:	04e80000 	strbteq	r0, [r8], #0
  for (i = 0; i < 4; ++i)
     a80:	00010000 	andeq	r0, r1, r0
    t   = (*state)[i][0];
     a84:	0004e850 	andeq	lr, r4, r0, asr r8
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
     a88:	0004eb00 	andeq	lr, r4, r0, lsl #22
     a8c:	51000100 	mrspl	r0, (UNDEF: 16)
     a90:	000004eb 	andeq	r0, r0, fp, ror #9
     a94:	000004ee 	andeq	r0, r0, lr, ror #9
     a98:	01f30004 	mvnseq	r0, r4
     a9c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
     aac:	000004e0 	andeq	r0, r0, r0, ror #9
     ab0:	000004e6 	andeq	r0, r0, r6, ror #9
     ab4:	e6510001 	ldrb	r0, [r1], -r1
     ab8:	eb000004 	bl	ad0 <MixColumns+0x58>
     abc:	01000004 	tsteq	r0, r4
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
     ac0:	04eb5300 	strbteq	r5, [fp], #768	; 0x300
     ac4:	04ee0000 	strbteq	r0, [lr], #0
     ac8:	00040000 	andeq	r0, r4, r0
     acc:	9f5101f3 	svcls	0x005101f3
	...
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
     adc:	04d20000 	ldrbeq	r0, [r2], #0
  for (i = 0; i < 4; ++i)
     ae0:	04da0000 	ldrbeq	r0, [sl], #0
     ae4:	00010000 	andeq	r0, r1, r0
}
     ae8:	0004da50 	andeq	sp, r4, r0, asr sl
{
     aec:	0004dd00 	andeq	sp, r4, r0, lsl #26
     af0:	51000100 	mrspl	r0, (UNDEF: 16)
  for (i = 0; i < 4; ++i)
     af4:	000004dd 	ldrdeq	r0, [r0], -sp
    a = (*state)[i][0];
     af8:	000004e0 	andeq	r0, r0, r0, ror #9
     afc:	01f30004 	mvnseq	r0, r4
    b = (*state)[i][1];
     b00:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
     b10:	000004d2 	ldrdeq	r0, [r0], -r2
     b14:	000004d8 	ldrdeq	r0, [r0], -r8
     b18:	d8510001 	ldmdale	r1, {r0}^
     b1c:	dd000004 	stcle	0, cr0, [r0, #-16]
     b20:	01000004 	tsteq	r0, r4
     b24:	04dd5300 	ldrbeq	r5, [sp], #768	; 0x300
     b28:	04e00000 	strbteq	r0, [r0], #0
     b2c:	00040000 	andeq	r0, r4, r0
     b30:	9f5101f3 	svcls	0x005101f3
	...
     b40:	04520000 	ldrbeq	r0, [r2], #-0
     b44:	045e0000 	ldrbeq	r0, [lr], #-0
     b48:	00010000 	andeq	r0, r1, r0
     b4c:	00045e50 	andeq	r5, r4, r0, asr lr
     b50:	00046100 	andeq	r6, r4, r0, lsl #2
     b54:	51000100 	mrspl	r0, (UNDEF: 16)
     b58:	00000461 	andeq	r0, r0, r1, ror #8
     b5c:	0000048c 	andeq	r0, r0, ip, lsl #9
     b60:	00550001 	subseq	r0, r5, r1
	...
     b70:	00045200 	andeq	r5, r4, r0, lsl #4
     b74:	00045c00 	andeq	r5, r4, r0, lsl #24
     b78:	51000100 	mrspl	r0, (UNDEF: 16)
     b7c:	0000045c 	andeq	r0, r0, ip, asr r4
     b80:	00000461 	andeq	r0, r0, r1, ror #8
     b84:	61520001 	cmpvs	r2, r1
     b88:	8c000004 	stchi	0, cr0, [r0], {4}
     b8c:	01000004 	tsteq	r0, r4
     b90:	00005600 	andeq	r5, r0, r0, lsl #12
     b94:	00000000 	andeq	r0, r0, r0
     b98:	01010000 	mrseq	r0, (UNDEF: 1)
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
     b9c:	00000001 	andeq	r0, r0, r1
     ba0:	04580000 	ldrbeq	r0, [r8], #-0
     ba4:	04620000 	strbteq	r0, [r2], #-0
     ba8:	00020000 	andeq	r0, r2, r0
     bac:	04629f30 	strbteq	r9, [r2], #-3888	; 0xfffff0d0
     bb0:	04660000 	strbteq	r0, [r6], #-0
     bb4:	00020000 	andeq	r0, r2, r0
     bb8:	04669f39 	strbteq	r9, [r6], #-3897	; 0xfffff0c7
     bbc:	046e0000 	strbteq	r0, [lr], #-0
     bc0:	00010000 	andeq	r0, r1, r0
     bc4:	00047054 	andeq	r7, r4, r4, asr r0
     bc8:	00048c00 	andeq	r8, r4, r0, lsl #24
     bcc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
     bdc:	040e0000 	streq	r0, [lr], #-0
     be0:	041a0000 	ldreq	r0, [sl], #-0
     be4:	00010000 	andeq	r0, r1, r0
     be8:	00041a50 	andeq	r1, r4, r0, asr sl
     bec:	00041d00 	andeq	r1, r4, r0, lsl #26
     bf0:	51000100 	mrspl	r0, (UNDEF: 16)
     bf4:	0000041d 	andeq	r0, r0, sp, lsl r4
     bf8:	00000452 	andeq	r0, r0, r2, asr r4
     bfc:	00550001 	subseq	r0, r5, r1
	...
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
     c0c:	00040e00 	andeq	r0, r4, r0, lsl #28
     c10:	00041800 	andeq	r1, r4, r0, lsl #16
     c14:	51000100 	mrspl	r0, (UNDEF: 16)
     c18:	00000418 	andeq	r0, r0, r8, lsl r4
     c1c:	0000041d 	andeq	r0, r0, sp, lsl r4
     c20:	1d520001 	ldclne	0, cr0, [r2, #-4]
     c24:	52000004 	andpl	r0, r0, #4
     c28:	01000004 	tsteq	r0, r4
     c2c:	00005600 	andeq	r5, r0, r0, lsl #12
     c30:	00000000 	andeq	r0, r0, r0
     c34:	01010000 	mrseq	r0, (UNDEF: 1)
     c38:	00000001 	andeq	r0, r0, r1
     c3c:	04140000 	ldreq	r0, [r4], #-0
  for (i = 0; i < 4; ++i)
     c40:	041e0000 	ldreq	r0, [lr], #-0
     c44:	00020000 	andeq	r0, r2, r0
     c48:	041e9f30 	ldreq	r9, [lr], #-3888	; 0xfffff0d0
}
     c4c:	04220000 	strteq	r0, [r2], #-0
  for (i = 0; i < 4; ++i)
     c50:	00020000 	andeq	r0, r2, r0
     c54:	04229f31 	strteq	r9, [r2], #-3889	; 0xfffff0cf
    for (j = 0; j < 4; ++j)
     c58:	04340000 	ldrteq	r0, [r4], #-0
{
     c5c:	00010000 	andeq	r0, r1, r0
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
     c60:	00043654 	andeq	r3, r4, r4, asr r6
     c64:	00045200 	andeq	r5, r4, r0, lsl #4
     c68:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    for (j = 0; j < 4; ++j)
     c74:	03de0000 	bicseq	r0, lr, #0
     c78:	040e0000 	streq	r0, [lr], #-0
  for (i = 0; i < 4; ++i)
     c7c:	00010000 	andeq	r0, r1, r0
     c80:	00000053 	andeq	r0, r0, r3, asr r0
    for (j = 0; j < 4; ++j)
     c84:	00000000 	andeq	r0, r0, r0
}
     c88:	00000300 	andeq	r0, r0, r0, lsl #6
  for (i = 0; i < 4; ++i)
     c8c:	00000000 	andeq	r0, r0, r0
     c90:	00039400 	andeq	r9, r3, r0, lsl #8
     c94:	00039600 	andeq	r9, r3, r0, lsl #12
  temp = (*state)[3][1];
     c98:	30000200 	andcc	r0, r0, r0, lsl #4
  (*state)[3][1] = (*state)[2][1];
     c9c:	0003969f 	muleq	r3, pc, r6	; <UNPREDICTABLE>
  (*state)[2][1] = (*state)[1][1];
     ca0:	0003c000 	andeq	ip, r3, r0
  (*state)[1][1] = (*state)[0][1];
     ca4:	51000100 	mrspl	r0, (UNDEF: 16)
  temp = (*state)[0][2];
     ca8:	000003c2 	andeq	r0, r0, r2, asr #7
  (*state)[0][2] = (*state)[2][2];
     cac:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  temp = (*state)[1][2];
     cb0:	d2510001 	subsle	r0, r1, #1
  (*state)[1][2] = (*state)[3][2];
     cb4:	dc000003 	stcle	0, cr0, [r0], {3}
  temp = (*state)[0][3];
     cb8:	01000003 	tsteq	r0, r3
  (*state)[0][3] = (*state)[1][3];
     cbc:	00005100 	andeq	r5, r0, r0, lsl #2
	...
{
     ccc:	0000039c 	muleq	r0, ip, r3
  AddRoundKey(0, state, RoundKey);
     cd0:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
     cd4:	ba530001 	blt	14c0ce0 <__ROM_SIZE__+0x1480ce0>
     cd8:	c8000003 	stmdagt	r0, {r0, r1}
  for (round = 1; ; ++round)
     cdc:	01000003 	tsteq	r0, r3
    MixColumns(state);
     ce0:	03ca5300 	biceq	r5, sl, #0, 6
    AddRoundKey(round, state, RoundKey);
     ce4:	03d40000 	bicseq	r0, r4, #0
     ce8:	00010000 	andeq	r0, r1, r0
     cec:	00000053 	andeq	r0, r0, r3, asr r0
	...
    ShiftRows(state);
     cf8:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
     cfc:	3c000002 	stccc	0, cr0, [r0], {2}
    if (round == Nr) {
     d00:	01000002 	tsteq	r0, r2
  AddRoundKey(Nr, state, RoundKey);
     d04:	023c5000 	eorseq	r5, ip, #0
     d08:	03900000 	orrseq	r0, r0, #0
}
     d0c:	00020000 	andeq	r0, r2, r0
{
     d10:	0390007d 	orrseq	r0, r0, #125	; 0x7d
  AddRoundKey(Nr, state, RoundKey);
     d14:	03940000 	orrseq	r0, r4, #0
     d18:	00030000 	andeq	r0, r3, r0
     d1c:	007fb091 			; <UNDEFINED> instruction: 0x007fb091
  for (round = (Nr - 1); ; --round)
     d20:	00000000 	andeq	r0, r0, r0
    InvMixColumns(state);
     d24:	03000000 	movweq	r0, #0
  for (round = (Nr - 1); ; --round)
     d28:	36000000 	strcc	r0, [r0], -r0
    InvShiftRows(state);
     d2c:	3c000002 	stccc	0, cr0, [r0], {2}
     d30:	02000002 	andeq	r0, r0, #2
    InvSubBytes(state);
     d34:	3c9f3000 	ldccc	0, cr3, [pc], {0}
    AddRoundKey(round, state, RoundKey);
     d38:	94000002 	strls	r0, [r0], #-2
     d3c:	01000003 	tsteq	r0, r3
     d40:	00005900 	andeq	r5, r0, r0, lsl #18
	...
    buf[i] ^= Iv[i];
     d4c:	00000242 	andeq	r0, r0, r2, asr #4
     d50:	0000034c 	andeq	r0, r0, ip, asr #6
     d54:	005b0001 	subseq	r0, fp, r1
	...
}
     d60:	00024a00 	andeq	r4, r2, r0, lsl #20
  KeyExpansion(ctx->RoundKey, key);
     d64:	00035e00 	andeq	r5, r3, r0, lsl #28
}
     d68:	5a000100 	bpl	1170 <exec_auto_cmds+0x1e>
	...
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     d74:	024e0000 	subeq	r0, lr, #0
     d78:	03860000 	orreq	r0, r6, #0
     d7c:	00010000 	andeq	r0, r1, r0
}
     d80:	00000058 	andeq	r0, r0, r8, asr r0
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     d84:	00000000 	andeq	r0, r0, r0
     d88:	50000000 	andpl	r0, r0, r0
}
     d8c:	3e000002 	cdpcc	0, 0, cr0, cr0, cr2, {0}
{
     d90:	01000003 	tsteq	r0, r3
  Cipher((state_t*)buf, ctx->RoundKey);
     d94:	00005400 	andeq	r5, r0, r0, lsl #8
	...
  InvCipher((state_t*)buf, ctx->RoundKey);
     da0:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
     da4:	01c60000 	biceq	r0, r6, r0
}
     da8:	00010000 	andeq	r0, r1, r0
{
     dac:	0001c650 	andeq	ip, r1, r0, asr r6
     db0:	00022e00 	andeq	r2, r2, r0, lsl #28
  uint8_t *Iv = ctx->Iv;
     db4:	59000100 	stmdbpl	r0, {r8}
	...
    XorWithIv(buf, Iv);
     dc0:	00000003 	andeq	r0, r0, r3
    Cipher((state_t*)buf, ctx->RoundKey);
     dc4:	01c20000 	biceq	r0, r2, r0
     dc8:	01c60000 	biceq	r0, r6, r0
  for (i = 0; i < length; i += AES_BLOCKLEN)
     dcc:	00020000 	andeq	r0, r2, r0
    buf += AES_BLOCKLEN;
     dd0:	01c69f30 	biceq	r9, r6, r0, lsr pc
  for (i = 0; i < length; i += AES_BLOCKLEN)
     dd4:	02240000 	eoreq	r0, r4, #0
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
     dd8:	00010000 	andeq	r0, r1, r0
     ddc:	00022655 	andeq	r2, r2, r5, asr r6
}
     de0:	00022e00 	andeq	r2, r2, r0, lsl #28
{
     de4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
  for (i = 0; i < length; i += AES_BLOCKLEN)
     df0:	01e20000 	mvneq	r0, r0
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
     df4:	021e0000 	andseq	r0, lr, #0
     df8:	00010000 	andeq	r0, r1, r0
    InvCipher((state_t*)buf, ctx->RoundKey);
     dfc:	00000054 	andeq	r0, r0, r4, asr r0
     e00:	00000000 	andeq	r0, r0, r0
    XorWithIv(buf, ctx->Iv);
     e04:	00000100 	andeq	r0, r0, r0, lsl #2
     e08:	01000000 	mrseq	r0, (UNDEF: 0)
     e0c:	00000000 	andeq	r0, r0, r0
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
     e10:	01000000 	mrseq	r0, (UNDEF: 0)
     e14:	00000000 	andeq	r0, r0, r0
     e18:	01000000 	mrseq	r0, (UNDEF: 0)
  for (i = 0; i < length; i += AES_BLOCKLEN)
     e1c:	00000000 	andeq	r0, r0, r0
     e20:	e2000000 	and	r0, r0, #0
}
     e24:	e5000001 	str	r0, [r0, #-1]
{
     e28:	01000001 	tsteq	r0, r1
     e2c:	01e55000 	mvneq	r5, r0
     e30:	01e60000 	mvneq	r0, r0
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     e34:	00060000 	andeq	r0, r6, r0
          ctx->Iv[bi] = 0;
     e38:	007a007b 	rsbseq	r0, sl, fp, ror r0
     e3c:	01e69f27 	mvneq	r9, r7, lsr #30
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     e40:	01e80000 	mvneq	r0, r0
      bi = 0;
     e44:	00010000 	andeq	r0, r1, r0
    buf[i] = (buf[i] ^ buffer[bi]);
     e48:	0001f050 	andeq	pc, r1, r0, asr r0	; <UNPREDICTABLE>
     e4c:	0001f400 	andeq	pc, r1, r0, lsl #8
     e50:	7b000600 	blvc	2658 <rsbox+0xc6c>
     e54:	27007800 	strcs	r7, [r0, -r0, lsl #16]
     e58:	0001f49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     e5c:	0001f700 	andeq	pc, r1, r0, lsl #14
     e60:	50000100 	andpl	r0, r0, r0, lsl #2
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
     e64:	000001f7 	strdeq	r0, [r0], -r7
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
     e68:	000001f8 	strdeq	r0, [r0], -r8
     e6c:	007b0006 	rsbseq	r0, fp, r6
     e70:	9f270078 	svcls	0x00270078
      Cipher((state_t*)buffer,ctx->RoundKey);
     e74:	000001f8 	strdeq	r0, [r0], -r8
     e78:	000001fa 	strdeq	r0, [r0], -sl
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     e7c:	02500001 	subseq	r0, r0, #1
     e80:	06000002 	streq	r0, [r0], -r2
        if (ctx->Iv[bi] == 255)
     e84:	06000002 	streq	r0, [r0], -r2
     e88:	77007800 	strvc	r7, [r0, -r0, lsl #16]
        ctx->Iv[bi] += 1;
     e8c:	069f2700 	ldreq	r2, [pc], r0, lsl #14
     e90:	09000002 	stmdbeq	r0, {r1}
      bi = 0;
     e94:	01000002 	tsteq	r0, r2
}
     e98:	02095000 	andeq	r5, r9, #0
int atoi(const char* str) {
     e9c:	020a0000 	andeq	r0, sl, #0
  int res = 0;
     ea0:	00060000 	andeq	r0, r6, r0
    res = res * 10 + str[i] - '0';
     ea4:	00770078 	rsbseq	r0, r7, r8, ror r0
     ea8:	020a9f27 	andeq	r9, sl, #39, 30	; 0x9c
     eac:	020c0000 	andeq	r0, ip, #0
  for (int i = 0; str[i] != '\0'; ++i) {
     eb0:	00010000 	andeq	r0, r1, r0
     eb4:	00021450 	andeq	r1, r2, r0, asr r4
uint32_t atoh(const char* str) {
     eb8:	00021800 	andeq	r1, r2, r0, lsl #16
  uint32_t hex = 0;
     ebc:	77000600 	strvc	r0, [r0, -r0, lsl #12]
    } else if (str[i] >= 'a' && str[i] <= 'f') {
     ec0:	27007a00 	strcs	r7, [r0, -r0, lsl #20]
     ec4:	0002189f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
     ec8:	00021b00 	andeq	r1, r2, r0, lsl #22
    hex |= value;
     ecc:	50000100 	andpl	r0, r0, r0, lsl #2
  for (uint32_t i = 0; str[i] != '\0'; i++) {
     ed0:	0000021b 	andeq	r0, r0, fp, lsl r2
     ed4:	0000021c 	andeq	r0, r0, ip, lsl r2
    if (str[i] >= '0' && str[i] <= '9') {
     ed8:	00770006 	rsbseq	r0, r7, r6
     edc:	9f27007a 	svcls	0x0027007a
     ee0:	0000021c 	andeq	r0, r0, ip, lsl r2
      value = str[i] - '0';
     ee4:	00000226 	andeq	r0, r0, r6, lsr #4
    } else if (str[i] >= 'A' && str[i] <= 'F') {
     ee8:	00500001 	subseq	r0, r0, r1
	...
}
     ef4:	0001ca00 	andeq	ip, r1, r0, lsl #20
int r32(int argc, char *argv[]) {
     ef8:	00022600 	andeq	r2, r2, r0, lsl #12
  if (argc < 2) {
     efc:	5a000100 	bpl	1304 <parse_line+0x20>
	...
  printf("0x%x: 0x%x\n", addr, data);
     f0c:	000001aa 	andeq	r0, r0, sl, lsr #3
}
     f10:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    printf("Usage: %s <address> (in hex)\n", argv[0]);
     f14:	b8500001 	ldmdalt	r0, {r0}^
     f18:	bc000001 	stclt	0, cr0, [r0], {1}
    return -1;
     f1c:	04000001 	streq	r0, [r0], #-1
     f20:	5001f300 	andpl	pc, r1, r0, lsl #6
     f24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
int w32(int argc, char *argv[]) {
     f28:	00000000 	andeq	r0, r0, r0
  if (argc < 3) {
     f2c:	7a000000 	bvc	f34 <w32+0xc>
  uint32_t addr = atoh(argv[1]);
     f30:	aa000001 	bge	f3c <w32+0x14>
     f34:	01000001 	tsteq	r0, r1
  uint32_t data = atoh(argv[2]);
     f38:	00005300 	andeq	r5, r0, r0, lsl #6
     f3c:	00000000 	andeq	r0, r0, r0
  return 0;
     f40:	00030000 	andeq	r0, r3, r0
    printf("Usage: %s <address> (in hex) <value> (in hex)\n", argv[0]);
     f44:	00000000 	andeq	r0, r0, r0
     f48:	01320000 	teqeq	r2, r0
    return -1;
     f4c:	01340000 	teqeq	r4, r0
     f50:	00020000 	andeq	r0, r2, r0
     f54:	01349f30 	teqeq	r4, r0, lsr pc
int read_mem(int argc, char *argv[]) {
     f58:	015c0000 	cmpeq	ip, r0
  if (argc < 3) {
     f5c:	00010000 	andeq	r0, r1, r0
  uint32_t addr = atoh(argv[1]);
     f60:	00015e52 	andeq	r5, r1, r2, asr lr
     f64:	00016c00 	andeq	r6, r1, r0, lsl #24
  uint32_t length = atoi(argv[2]);
     f68:	52000100 	andpl	r0, r0, #0, 2
     f6c:	0000016e 	andeq	r0, r0, lr, ror #2
  for (uint32_t i = 0, data = 0; i < length; i++) {
     f70:	00000178 	andeq	r0, r0, r8, ror r1
    printf("Usage: %s <address> (in hex) <num_words> (in decimal)\n", argv[0]);
     f74:	00520001 	subseq	r0, r2, r1
	...
    printf("0x%x: 0x%x\n", addr, data);
     f84:	00013a00 	andeq	r3, r1, r0, lsl #20
     f88:	00015400 	andeq	r5, r1, r0, lsl #8
    addr += 4;
     f8c:	53000100 	movwpl	r0, #256	; 0x100
  for (uint32_t i = 0, data = 0; i < length; i++) {
     f90:	00000156 	andeq	r0, r0, r6, asr r1
  return 0;
     f94:	00000164 	andeq	r0, r0, r4, ror #2
}
     f98:	66530001 	ldrbvs	r0, [r3], -r1
     f9c:	70000001 	andvc	r0, r0, r1
{
     fa0:	01000001 	tsteq	r0, r1
  if (argc < 4) {
     fa4:	00005300 	andeq	r5, r0, r0, lsl #6
  uint32_t addr = atoh(argv[1]);
     fa8:	00000000 	andeq	r0, r0, r0
     fac:	00020000 	andeq	r0, r2, r0
  uint32_t bit_loc = atoi(argv[2]);
     fb0:	00000000 	andeq	r0, r0, r0
     fb4:	000000f6 	strdeq	r0, [r0], -r6
  uint32_t bit_val = atoi(argv[3]);
     fb8:	000000fc 	strdeq	r0, [r0], -ip
     fbc:	9f300002 	svcls	0x00300002
  if (bit_loc > 31) {
     fc0:	000000fc 	strdeq	r0, [r0], -ip
  if (bit_val != 0 && bit_val != 1) {
     fc4:	00000122 	andeq	r0, r0, r2, lsr #2
  uint32_t data = reg32(addr);
     fc8:	265e0001 	ldrbcs	r0, [lr], -r1
  data = data | (bit_val << bit_loc);
     fcc:	32000001 	andcc	r0, r0, #1
  data = data & ~(!bit_val << bit_loc);
     fd0:	01000001 	tsteq	r0, r1
     fd4:	00005e00 	andeq	r5, r0, r0, lsl #28
	...
    printf("Error: Invalid bit location argument\n");
     fe0:	00fc0000 	rscseq	r0, ip, r0
     fe4:	01180000 	tsteq	r8, r0
    printf("Error: Invalid bit value argument\n");
     fe8:	00010000 	andeq	r0, r1, r0
     fec:	00011a53 	andeq	r1, r1, r3, asr sl
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)> <bit_value(0 or 1)>\n", argv[0]);
     ff0:	00012600 	andeq	r2, r1, r0, lsl #12
     ff4:	53000100 	movwpl	r0, #256	; 0x100
	...
  return -1;
    1004:	04c60000 	strbeq	r0, [r6], #0
{
    1008:	04cc0000 	strbeq	r0, [ip], #0
  if (argc < 3) {
    100c:	00010000 	andeq	r0, r1, r0
  uint32_t addr = atoh(argv[1]);
    1010:	0004cc50 	andeq	ip, r4, r0, asr ip
    1014:	0004cf00 	andeq	ip, r4, r0, lsl #30
  uint32_t bit_loc = atoi(argv[2]);
    1018:	70000400 	andvc	r0, r0, r0, lsl #8
    101c:	cf9f7ed0 	svcgt	0x009f7ed0
  if (bit_loc > 31) {
    1020:	d2000004 	andle	r0, r0, #4
  uint32_t data = reg32(addr);
    1024:	04000004 	streq	r0, [r0], #-4
  printf("Bit %u @ 0x%08x: %u\n", bit_loc, addr, bit_val);
    1028:	5001f300 	andpl	pc, r1, r0, lsl #6
    102c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    printf("Error: Invalid bit location argument\n");
    1038:	0004c600 	andeq	ip, r4, r0, lsl #12
    103c:	0004cf00 	andeq	ip, r4, r0, lsl #30
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)\n", argv[0]);
    1040:	51000100 	mrspl	r0, (UNDEF: 16)
    1044:	000004cf 	andeq	r0, r0, pc, asr #9
  return -1;
    1048:	000004d2 	ldrdeq	r0, [r0], -r2
    104c:	01f30004 	mvnseq	r0, r4
    1050:	00009f51 	andeq	r9, r0, r1, asr pc
	...
  while (str[len]) {
    105c:	04ae0000 	strteq	r0, [lr], #0
    1060:	04b70000 	ldrteq	r0, [r7], #0
    1064:	00010000 	andeq	r0, r1, r0
  while (*str1 && (*str1 == *str2)) {
    1068:	0004b750 	andeq	fp, r4, r0, asr r7
    str2++;
    106c:	0004c600 	andeq	ip, r4, r0, lsl #12
  while (*str1 && (*str1 == *str2)) {
    1070:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    *(str1++) = *(str2++);
    1080:	000004ae 	andeq	r0, r0, lr, lsr #9
    1084:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
  while (*str2) {
    1088:	b7510001 	ldrblt	r0, [r1, -r1]
  *str1 = '\0';
    108c:	c6000004 	strgt	r0, [r0], -r4
}
    1090:	04000004 	streq	r0, [r0], #-4
  for (i = 0; i < size; i++) {
    1094:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    dest_char[i] = src_char[i];
    1098:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
}
    10a4:	0004ae00 	andeq	sl, r4, r0, lsl #28
  for (i = 0; i < size; i++) {
    10a8:	0004b700 	andeq	fp, r4, r0, lsl #14
    dest_char[i] = val;
    10ac:	52000100 	andpl	r0, r0, #0, 2
  for (i = 0; i < size; i++) {
    10b0:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
}
    10b4:	000004c6 	andeq	r0, r0, r6, asr #9
void __attribute__((optimize("O0"), weak)) initial_setup(void) {
    10b8:	00550001 	subseq	r0, r5, r1
	...
  char *src = &_etext, *dst = &_data;
    10c4:	a6000000 	strge	r0, [r0], -r0
  if (dst != src)
    10c8:	ab000004 	blge	10e0 <initial_setup+0x28>
    10cc:	01000004 	tsteq	r0, r4
    while (dst < &_edata) *(dst++) = *(src++);
    10d0:	04ab5000 	strteq	r5, [fp], #0
    10d4:	04ae0000 	strteq	r0, [lr], #0
    10d8:	00040000 	andeq	r0, r4, r0
    10dc:	9f5001f3 	svcls	0x005001f3
	...
  for (dst = &_bss; dst < &_ebss; dst++) *dst = 0;
    10ec:	000004a6 	andeq	r0, r0, r6, lsr #9
    10f0:	000004ab 	andeq	r0, r0, fp, lsr #9
    10f4:	ab510001 	blge	1441100 <__ROM_SIZE__+0x1401100>
    10f8:	ae000004 	cdpge	0, 0, cr0, cr0, cr4, {0}
    10fc:	04000004 	streq	r0, [r0], #-4
    1100:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
  platform_init();
    1104:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
}
    1114:	00003600 	andeq	r3, r0, r0, lsl #12
    1118:	51000100 	mrspl	r0, (UNDEF: 16)
    111c:	00000036 	andeq	r0, r0, r6, lsr r0
    1120:	000000f4 	strdeq	r0, [r0], -r4
static void delete(void) {
    1124:	01f30004 	mvnseq	r0, r4
  __write_char__(BACK_SPACE);
    1128:	00009f51 	andeq	r9, r0, r1, asr pc
    112c:	00000000 	andeq	r0, r0, r0
  __write_char__(SPACE);
    1130:	00030000 	andeq	r0, r3, r0
  __write_char__(BACK_SPACE);
    1134:	00000000 	andeq	r0, r0, r0
    1138:	00000004 	andeq	r0, r0, r4
}
    113c:	00000008 	andeq	r0, r0, r8
static void clear_prompt(int char_count) {
    1140:	9f300002 	svcls	0x00300002
  while (char_count) {
    1144:	00000008 	andeq	r0, r0, r8
    delete ();
    1148:	00000036 	andeq	r0, r0, r6, lsr r0
  while (char_count) {
    114c:	36520001 	ldrbcc	r0, [r2], -r1
}
    1150:	f4000000 	vst4.8	{d0-d3}, [r0], r0
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    1154:	01000000 	mrseq	r0, (UNDEF: 0)
    auto_load[i].command(0, NULL);
    1158:	00005300 	andeq	r5, r0, r0, lsl #6
	...
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    1164:	00380000 	eorseq	r0, r8, r0
    1168:	007a0000 	rsbseq	r0, sl, r0
    116c:	00010000 	andeq	r0, r1, r0
    1170:	00007a51 	andeq	r7, r0, r1, asr sl
}
    1174:	00008000 	andeq	r8, r0, r0
static int show_history(int argc, char **argv) {
    1178:	71000300 	mrsvc	r0, LR_irq
  uint32_t end_index = total_num_commands-1;
    117c:	00009f7d 	andeq	r9, r0, sp, ror pc
	...
  uint32_t beg_index = 0;
    1190:	00000036 	andeq	r0, r0, r6, lsr r0
    printf("%s\n", cmd_history[index % NUM_HISTORY_ENTRIES]);
    1194:	0000003a 	andeq	r0, r0, sl, lsr r0
    1198:	7f730005 	svcvc	0x00730005
    119c:	3a9f2432 	bcc	fe7ca26c <_STACK_TOP_+0xde7c2270>
    11a0:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
  for (uint32_t index = beg_index; index <= end_index; ++index) {
    11a4:	05000000 	streq	r0, [r0, #-0]
}
    11a8:	32007200 	andcc	r7, r0, #0, 4
    11ac:	004e9f24 	subeq	r9, lr, r4, lsr #30
    11b0:	00800000 	addeq	r0, r0, r0
    11b4:	00050000 	andeq	r0, r5, r0
int cmd_exec_status(int argc, char **argv) {
    11b8:	24327c73 	ldrtcs	r7, [r2], #-3187	; 0xfffff38d
  printf("%d\n", __cmd_exec_status);
    11bc:	0000869f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    11c0:	00009200 	andeq	r9, r0, r0, lsl #4
}
    11c4:	72000500 	andvc	r0, r0, #0, 10
    11c8:	9f243200 	svcls	0x00243200
    11cc:	00000092 	muleq	r0, r2, r0
static int build_info(int argc, char **argv) {
    11d0:	000000ec 	andeq	r0, r0, ip, ror #1
  printf("Build: [" SHELL_VERSION ":" USER_REPO_VERSION "] - [" BUILD_USER
    11d4:	7f730005 	svcvc	0x00730005
}
    11d8:	009f2432 	addseq	r2, pc, r2, lsr r4	; <UNPREDICTABLE>
    11dc:	00000000 	andeq	r0, r0, r0
static void execute(int argc, char **argv) {
    11e0:	01000000 	mrseq	r0, (UNDEF: 0)
    11e4:	00000000 	andeq	r0, r0, r0
  for (int i = 0; table[i].command_name != NULL; i++) {
    11e8:	0000ae00 	andeq	sl, r0, r0, lsl #28
    11ec:	0000d800 	andeq	sp, r0, r0, lsl #16
    11f0:	51000100 	mrspl	r0, (UNDEF: 16)
    11f4:	000000d8 	ldrdeq	r0, [r0], -r8
    11f8:	000000dc 	ldrdeq	r0, [r0], -ip
    if (strcmp(argv[0], table[i].command_name) == 0) {
    11fc:	77910002 	ldrvc	r0, [r1, r2]
    1200:	000000dc 	ldrdeq	r0, [r0], -ip
      __cmd_exec_status = table[i].command(argc, &argv[0]);
    1204:	000000ec 	andeq	r0, r0, ip, ror #1
    1208:	7f730007 	svcvc	0x00730007
    120c:	00702432 	rsbseq	r2, r0, r2, lsr r4
    1210:	00000022 	andeq	r0, r0, r2, lsr #32
	...
    printf("\"%s\": command not found. Use \"help\" to list all command.\n",
    121c:	00001c00 	andeq	r1, r0, r0, lsl #24
    __cmd_exec_status = -1;
    1220:	00002200 	andeq	r2, r0, r0, lsl #4
    1224:	50000100 	andpl	r0, r0, r0, lsl #2
}
    1228:	00000022 	andeq	r0, r0, r2, lsr #32
    122c:	0000005a 	andeq	r0, r0, sl, asr r0
    1230:	005c0001 	subseq	r0, ip, r1
    1234:	00000000 	andeq	r0, r0, r0
int help(int argc, char **argv) {
    1238:	01000000 	mrseq	r0, (UNDEF: 0)
  if (argc > 1 && (strcmp(argv[1], "-l")==0)) {
    123c:	01010000 	mrseq	r0, (UNDEF: 1)
    1240:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1244:	24000000 	strcs	r0, [r0], #-0
    1248:	02000000 	andeq	r0, r0, #0
    printf("use: help -l for list only.\n\n");
    124c:	249f3000 	ldrcs	r3, [pc], #0	; 1254 <help+0x1c>
  bool verbose = true;
    1250:	30000000 	andcc	r0, r0, r0
    verbose = false;
    1254:	01000000 	mrseq	r0, (UNDEF: 0)
    printf("\n");
    1258:	00305000 	eorseq	r5, r0, r0
    i++;
    125c:	00340000 	eorseq	r0, r4, r0
  while (table[i].command_name != NULL) {
    1260:	00050000 	andeq	r0, r5, r0
    1264:	24340070 	ldrtcs	r0, [r4], #-112	; 0xffffff90
    1268:	0000349f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    printf(table[i].command_name);
    126c:	00005a00 	andeq	r5, r0, r0, lsl #20
    if (verbose) {
    1270:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      printf(table[i].command_help);
    127c:	00000002 	andeq	r0, r0, r2
    1280:	00000000 	andeq	r0, r0, r0
    verbose = false;
    1284:	0000001e 	andeq	r0, r0, lr, lsl r0
}
    1288:	00000024 	andeq	r0, r0, r4, lsr #32
    128c:	9f300002 	svcls	0x00300002
    1290:	00000030 	andeq	r0, r0, r0, lsr r0
    1294:	00000034 	andeq	r0, r0, r4, lsr r0
    1298:	48530001 	ldmdami	r3, {r0}^
    129c:	4a000000 	bmi	12a4 <add_command_to_history+0x4>
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    12a0:	01000000 	mrseq	r0, (UNDEF: 0)
static void add_command_to_history(const char *cmd_str) {
    12a4:	00565300 	subseq	r5, r6, r0, lsl #6
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    12a8:	00580000 	subseq	r0, r8, r0
    12ac:	00010000 	andeq	r0, r1, r0
  int index = total_num_commands % NUM_HISTORY_ENTRIES;
    12b0:	00000053 	andeq	r0, r0, r3, asr r0
    12b4:	00000000 	andeq	r0, r0, r0
    12b8:	00000400 	andeq	r0, r0, r0, lsl #8
    12bc:	00001e00 	andeq	r1, r0, r0, lsl #28
  memcpy(&cmd_history[index], cmd_str, LINE_BUFF_SIZE);
    12c0:	00002400 	andeq	r2, r0, r0, lsl #8
    12c4:	30000200 	andcc	r0, r0, r0, lsl #4
    12c8:	0000249f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    12cc:	00005a00 	andeq	r5, r0, r0, lsl #20
  total_num_commands++;
    12d0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
static int parse_line(char **argv, char *line_buff, int argument_size) {
    12e4:	00000006 	andeq	r0, r0, r6
    12e8:	06500001 	ldrbeq	r0, [r0], -r1
  int length = strlen(line_buff);
    12ec:	1c000000 	stcne	0, cr0, [r0], {-0}
    12f0:	01000000 	mrseq	r0, (UNDEF: 0)
  int argc = 0;
    12f4:	00005100 	andeq	r5, r0, r0, lsl #2
         pos++)
    12f8:	00000000 	andeq	r0, r0, r0
    for (; line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    12fc:	00010000 	andeq	r0, r1, r0
    1300:	00000000 	andeq	r0, r0, r0
    1304:	00000002 	andeq	r0, r0, r2
    1308:	00000008 	andeq	r0, r0, r8
    if (line_buff[pos] == '\t' || line_buff[pos] == SPACE)
    130c:	9f300002 	svcls	0x00300002
    1310:	00000008 	andeq	r0, r0, r8
      line_buff[pos] = END_OF_LINE;
    1314:	0000000c 	andeq	r0, r0, ip
  while (pos <= length) {
    1318:	12500001 	subsne	r0, r0, #1
    if (line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    131c:	1c000000 	stcne	0, cr0, [r0], {-0}
    1320:	01000000 	mrseq	r0, (UNDEF: 0)
    1324:	00005000 	andeq	r5, r0, r0
    1328:	00000000 	andeq	r0, r0, r0
      argv[argc++] = &line_buff[pos];
    132c:	00030000 	andeq	r0, r3, r0
    1330:	00020000 	andeq	r0, r2, r0
}
    1334:	00080000 	andeq	r0, r8, r0
static int prefix_match(char *sub, int len, const char *str) {
    1338:	00020000 	andeq	r0, r2, r0
    133c:	00089f30 	andeq	r9, r8, r0, lsr pc
  if (sub == NULL || str == NULL || len <= 0 || len > strlen(str)) {
    1340:	001c0000 	andseq	r0, ip, r0
    1344:	00010000 	andeq	r0, r1, r0
    1348:	00000052 	andeq	r0, r0, r2, asr r0
	...
  for (int i = 0; i<len; ++i) {
    1354:	00011000 	andeq	r1, r1, r0
    if (sub[i] != str[i]) {
    1358:	00011a00 	andeq	r1, r1, r0, lsl #20
    135c:	50000100 	andpl	r0, r0, r0, lsl #2
  for (int i = 0; i<len; ++i) {
    1360:	0000011a 	andeq	r0, r0, sl, lsl r1
}
    1364:	00000160 	andeq	r0, r0, r0, ror #2
  return TRUE;
    1368:	01f30004 	mvnseq	r0, r4
      return FALSE;
    136c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    1378:	01100000 	tsteq	r0, r0
    137c:	011d0000 	tsteq	sp, r0
    1380:	00010000 	andeq	r0, r1, r0
      curr_command_ptr == 0) {
    1384:	00011d51 	andeq	r1, r1, r1, asr sp
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    1388:	00016000 	andeq	r6, r1, r0
    printf("%s", cmd_buff);
    138c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
  curr_command_ptr--;
    139c:	01200100 			; <UNDEFINED> instruction: 0x01200100
    13a0:	01220000 			; <UNDEFINED> instruction: 0x01220000
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    13a4:	00010000 	andeq	r0, r1, r0
    13a8:	00012250 	andeq	r2, r1, r0, asr r2
    13ac:	00013e00 	andeq	r3, r1, r0, lsl #28
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    13b0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    13b4:	00000140 	andeq	r0, r0, r0, asr #2
    13b8:	00000146 	andeq	r0, r0, r6, asr #2
    13bc:	00550001 	subseq	r0, r5, r1
	...
  printf("%s", cmd_buff);
    13cc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    13d0:	38000001 	stmdacc	r0, {r0}
    13d4:	01000001 	tsteq	r0, r1
static void handle_down_arrow(char *cmd_buff, int *char_count) {
    13d8:	01385000 	teqeq	r8, r0
    13dc:	013b0000 	teqeq	fp, r0
  memset(cmd_buff, 0, LINE_BUFF_SIZE);
    13e0:	00010000 	andeq	r0, r1, r0
    13e4:	00014051 	andeq	r4, r1, r1, asr r0
  *char_count = 0;
    13e8:	00014200 	andeq	r4, r1, r0, lsl #4
  if (curr_command_ptr == total_num_commands) return;
    13ec:	50000100 	andpl	r0, r0, r0, lsl #2
    13f0:	00000142 	andeq	r0, r0, r2, asr #2
  curr_command_ptr++;
    13f4:	00000145 	andeq	r0, r0, r5, asr #2
    13f8:	00510001 	subseq	r0, r1, r1
	...
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    1404:	00012e00 	andeq	r2, r1, r0, lsl #28
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    1408:	00013000 	andeq	r3, r1, r0
    140c:	53000100 	movwpl	r0, #256	; 0x100
	...
  *char_count = strlen(cmd_buff);
    141c:	00000130 	andeq	r0, r0, r0, lsr r1
  printf("%s", cmd_buff);
    1420:	00000134 	andeq	r0, r0, r4, lsr r1
    1424:	00730005 	rsbseq	r0, r3, r5
}
    1428:	349f1a31 	ldrcc	r1, [pc], #2609	; 1430 <set_read_char>
    142c:	3b000001 	blcc	1438 <set_read_char+0x8>
void set_read_char(int (*func)(void)) { __read_char__ = func; }
    1430:	01000001 	tsteq	r0, r1
    1434:	00005300 	andeq	r5, r0, r0, lsl #6
	...
void set_read_char2(int (*func)(void)) { __read_char2__ = func; }
    1440:	00a80000 	adceq	r0, r8, r0
    1444:	00b20000 	adcseq	r0, r2, r0
void set_write_char(void (*func)(char)) { __write_char__ = func; }
    1448:	00010000 	andeq	r0, r1, r0
    144c:	0000b250 	andeq	fp, r0, r0, asr r2
    1450:	00011000 	andeq	r1, r1, r0
void set_write_char2(void (*func)(char)) { __write_char2__ = func; }
    1454:	f3000400 	vshl.u8	d0, d0, d0
    1458:	009f5001 	addseq	r5, pc, r1
	...
}
    1464:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
  if (cmd_buff == NULL || char_count <= 0) {
    1468:	b5000000 	strlt	r0, [r0, #-0]
static void handle_tab(char *cmd_buff, int *char_count) {
    146c:	01000000 	mrseq	r0, (UNDEF: 0)
    1470:	00b55100 	adcseq	r5, r5, r0, lsl #2
  int last_match = -1;
    1474:	01100000 	tsteq	r0, r0
  int match_count = 0;
    1478:	00010000 	andeq	r0, r1, r0
  int i = 0;
    147c:	00000054 	andeq	r0, r0, r4, asr r0
	...
  while (table[i].command_name != NULL) { //loop over all commands
    1488:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    148c:	ba000000 	blt	1494 <handle_tab+0x2e>
    if (prefix_match(cmd_buff, *char_count, table[i].command_name)) {
    1490:	01000000 	mrseq	r0, (UNDEF: 0)
    1494:	00ba5000 	adcseq	r5, sl, r0
    1498:	00e60000 	rsceq	r0, r6, r0
      match_count++;
    149c:	00010000 	andeq	r0, r1, r0
      printf("\n%s", table[i].command_name);
    14a0:	0000e856 	andeq	lr, r0, r6, asr r8
    14a4:	0000f600 	andeq	pc, r0, r0, lsl #12
      last_match = i;
    14a8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
}
    14b8:	00c00100 	sbceq	r0, r0, r0, lsl #2
    memcpy(cmd_buff, table[last_match].command_name, LINE_BUFF_SIZE);
    14bc:	00c20000 	sbceq	r0, r2, r0
    14c0:	00010000 	andeq	r0, r1, r0
    14c4:	0000c250 	andeq	ip, r0, r0, asr r2
    14c8:	0000e600 	andeq	lr, r0, r0, lsl #12
    *char_count = strlen(cmd_buff);
    14cc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    14d0:	000000e8 	andeq	r0, r0, r8, ror #1
    14d4:	000000f6 	strdeq	r0, [r0], -r6
    printf("\n");
    14d8:	00550001 	subseq	r0, r5, r1
	...
    printf("%s", cmd_buff);
    14ec:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    14f0:	d4000000 	strle	r0, [r0], #-0
    14f4:	01000000 	mrseq	r0, (UNDEF: 0)
    14f8:	00d45000 	sbcseq	r5, r4, r0
    14fc:	00da0000 	sbcseq	r0, sl, r0
    1500:	00010000 	andeq	r0, r1, r0
    1504:	0000e853 	andeq	lr, r0, r3, asr r8
__attribute__((weak)) int active_prompt() { return TRUE; }
    1508:	0000ea00 	andeq	lr, r0, r0, lsl #20
static void shell(void) {
    150c:	50000100 	andpl	r0, r0, r0, lsl #2
  int count = 0;
    1510:	000000ea 	andeq	r0, r0, sl, ror #1
  for (int i = 0; i < LINE_BUFF_SIZE; i++) line_buff[i] = 0;
    1514:	000000ed 	andeq	r0, r0, sp, ror #1
    1518:	f0530001 			; <UNDEFINED> instruction: 0xf0530001
    151c:	f2000000 	vhadd.s8	d0, d0, d0
    1520:	01000000 	mrseq	r0, (UNDEF: 0)
    1524:	00f25000 	rscseq	r5, r2, r0
  for (int i = 0; i < MAX_ARG_COUNT; i++) argv[i] = NULL;
    1528:	00f50000 	rscseq	r0, r5, r0
    152c:	00010000 	andeq	r0, r1, r0
    1530:	00000053 	andeq	r0, r0, r3, asr r0
	...
    153c:	d2000000 	andle	r0, r0, #0
  prepend_prompt();
    1540:	d6000000 	strle	r0, [r0], -r0
  printf(PROMPT);
    1544:	01000000 	mrseq	r0, (UNDEF: 0)
  int special_key = 0;
    1548:	00d65200 	sbcseq	r5, r6, r0, lsl #4
        special_key = 1;
    154c:	00e20000 	rsceq	r0, r2, r0
    if (s == -1) { s = __read_char2__();}
    1550:	00010000 	andeq	r0, r1, r0
    1554:	0000e250 	andeq	lr, r0, r0, asr r2
        line_buff[count] = END_OF_LINE;
    1558:	0000e600 	andeq	lr, r0, r0, lsl #12
    155c:	53000100 	movwpl	r0, #256	; 0x100
	...
  add_command_to_history(line_buff);
    1570:	00000060 	andeq	r0, r0, r0, rrx
  argc = parse_line(argv, line_buff, MAX_ARG_COUNT);
    1574:	0000006a 	andeq	r0, r0, sl, rrx
    1578:	6a500001 	bvs	1401584 <__ROM_SIZE__+0x13c1584>
  if (argc > 0) execute(argc, argv);
    157c:	7c000000 	stcvc	0, cr0, [r0], {-0}
}
    1580:	04000000 	streq	r0, [r0], #-0
        if (!__echo) {
    1584:	5001f300 	andpl	pc, r1, r0, lsl #6
    1588:	00007c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
        if (count == 0) continue;
    158c:	00008000 	andeq	r8, r0, r0
        count--;
    1590:	50000100 	andpl	r0, r0, r0, lsl #2
        line_buff[count] = END_OF_LINE;
    1594:	00000080 	andeq	r0, r0, r0, lsl #1
    1598:	000000a8 	andeq	r0, r0, r8, lsr #1
    159c:	01f30004 	mvnseq	r0, r4
        delete ();
    15a0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
          delete ();
    15b4:	00600000 	rsbeq	r0, r0, r0
          delete ();
    15b8:	006d0000 	rsbeq	r0, sp, r0
    15bc:	00010000 	andeq	r0, r1, r0
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    15c0:	00006d51 	andeq	r6, r0, r1, asr sp
        special_key = 2;
    15c4:	00007a00 	andeq	r7, r0, r0, lsl #20
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    15c8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
        special_key = 0;
    15cc:	0000007a 	andeq	r0, r0, sl, ror r0
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    15d0:	0000007c 	andeq	r0, r0, ip, ror r0
        if (!__echo) {
    15d4:	01f30004 	mvnseq	r0, r4
          clear_prompt(count + 4);
    15d8:	007c9f51 	rsbseq	r9, ip, r1, asr pc
    15dc:	007e0000 	rsbseq	r0, lr, r0
        if (c == 'A') {
    15e0:	00010000 	andeq	r0, r1, r0
          handle_down_arrow(line_buff, &count);
    15e4:	00007e51 	andeq	r7, r0, r1, asr lr
    15e8:	00008a00 	andeq	r8, r0, r0, lsl #20
        special_key = 0;
    15ec:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
          clear_prompt(count);
    15f0:	0000008a 	andeq	r0, r0, sl, lsl #1
    15f4:	000000a8 	andeq	r0, r0, r8, lsr #1
          handle_up_arrow(line_buff, &count);
    15f8:	01f30004 	mvnseq	r0, r4
    15fc:	00009f51 	andeq	r9, r0, r1, asr pc
	...
      loop();
    160c:	00000070 	andeq	r0, r0, r0, ror r0
    if (!active_prompt()) {
    1610:	00000072 	andeq	r0, r0, r2, ror r0
    1614:	72500001 	subsvc	r0, r0, #1
    s = __read_char__();
    1618:	7c000000 	stcvc	0, cr0, [r0], {-0}
    161c:	01000000 	mrseq	r0, (UNDEF: 0)
    if (s == -1) { s = __read_char2__();}
    1620:	008a5400 	addeq	r5, sl, r0, lsl #8
    if (s != -1) {
    1624:	009e0000 	addseq	r0, lr, r0
    1628:	00010000 	andeq	r0, r1, r0
      if (c == CARRIAGE_RETURN || c == NEW_LINE) {
    162c:	00000054 	andeq	r0, r0, r4, asr r0
	...
      if (c == DELETE || c == BACK_SPACE) {
    1638:	00007800 	andeq	r7, r0, r0, lsl #16
      } else if (c == ESCAPE) {
    163c:	00007c00 	andeq	r7, r0, r0, lsl #24
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    1640:	50000100 	andpl	r0, r0, r0, lsl #2
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    1644:	0000008a 	andeq	r0, r0, sl, lsl #1
    1648:	0000009e 	muleq	r0, lr, r0
    164c:	00560001 	subseq	r0, r6, r1
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    1650:	00000000 	andeq	r0, r0, r0
    1654:	02000000 	andeq	r0, r0, #0
      else if (c == TAB) {
    1658:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
        line_buff[count] = c;
    165c:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1660:	02000000 	andeq	r0, r0, #0
    1664:	8a9f3000 	bhi	fe7cd66c <_STACK_TOP_+0xde7c5670>
        count++;
    1668:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    166c:	01000000 	mrseq	r0, (UNDEF: 0)
  if (argc > 0) execute(argc, argv);
    1670:	00005500 	andeq	r5, r0, r0, lsl #10
}
    1674:	00000000 	andeq	r0, r0, r0
    1678:	00020000 	andeq	r0, r2, r0
    167c:	00780000 	rsbseq	r0, r8, r0
    1680:	007c0000 	rsbseq	r0, ip, r0
void prompt() {
    1684:	00020000 	andeq	r0, r2, r0
  initial_setup();
    1688:	008c9f30 	addeq	r9, ip, r0, lsr pc
  exec_auto_cmds();
    168c:	00930000 	addseq	r0, r3, r0
  setup();
    1690:	00010000 	andeq	r0, r1, r0
    shell();
    1694:	00000052 	andeq	r0, r0, r2, asr r0
	...
  argc = parse_line(argv, cmd_str, MAX_ARG_COUNT);
    16a4:	00003000 	andeq	r3, r0, r0
  if (argc > 0) execute(argc, argv);
    16a8:	00003a00 	andeq	r3, r0, r0, lsl #20
  return __cmd_exec_status;
    16ac:	50000100 	andpl	r0, r0, r0, lsl #2
}
    16b0:	0000003a 	andeq	r0, r0, sl, lsr r0
  if (argc > 0) execute(argc, argv);
    16b4:	0000004c 	andeq	r0, r0, ip, asr #32
    16b8:	01f30004 	mvnseq	r0, r4
    16bc:	004c9f50 	subeq	r9, ip, r0, asr pc
cmd get_function_addr(char *cmd_str) {
    16c0:	00500000 	subseq	r0, r0, r0
  for (int i = 0; table[i].command_name != NULL; i++) {
    16c4:	00010000 	andeq	r0, r1, r0
    16c8:	00005050 	andeq	r5, r0, r0, asr r0
    16cc:	00006000 	andeq	r6, r0, r0
    16d0:	f3000400 	vshl.u8	d0, d0, d0
    16d4:	009f5001 	addseq	r5, pc, r1
	...
      return table[i].command;
    16e4:	30000000 	andcc	r0, r0, r0
  return NULL;
    16e8:	3d000000 	stccc	0, cr0, [r0, #-0]
}
    16ec:	01000000 	mrseq	r0, (UNDEF: 0)
    16f0:	003d5100 	eorseq	r5, sp, r0, lsl #2
    16f4:	004c0000 	subeq	r0, ip, r0
    16f8:	00010000 	andeq	r0, r1, r0
    16fc:	00004c54 	andeq	r4, r0, r4, asr ip
    1700:	00004e00 	andeq	r4, r0, r0, lsl #28
    1704:	51000100 	mrspl	r0, (UNDEF: 16)
    1708:	0000004e 	andeq	r0, r0, lr, asr #32
    170c:	00000060 	andeq	r0, r0, r0, rrx
    1710:	00540001 	subseq	r0, r4, r1
	...
    171c:	40000000 	andmi	r0, r0, r0
    1720:	42000000 	andmi	r0, r0, #0
    1724:	01000000 	mrseq	r0, (UNDEF: 0)
    1728:	00425000 	subeq	r5, r2, r0
    172c:	004a0000 	subeq	r0, sl, r0
    1730:	00010000 	andeq	r0, r1, r0
    1734:	00000055 	andeq	r0, r0, r5, asr r0
    1738:	00000000 	andeq	r0, r0, r0
    173c:	46000000 	strmi	r0, [r0], -r0
    1740:	4a000000 	bmi	1748 <_varr32_bit>
    1744:	01000000 	mrseq	r0, (UNDEF: 0)
    1748:	00005000 	andeq	r5, r0, r0
	...
    175c:	00080000 	andeq	r0, r8, r0
    1760:	00010000 	andeq	r0, r1, r0
    1764:	00000850 	andeq	r0, r0, r0, asr r8
    1768:	00001a00 	andeq	r1, r0, r0, lsl #20
    176c:	f3000400 	vshl.u8	d0, d0, d0
    1770:	1a9f5001 	bne	fe7d577c <_STACK_TOP_+0xde7cd780>
    1774:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1778:	01000000 	mrseq	r0, (UNDEF: 0)
    177c:	001e5000 	andseq	r5, lr, r0
    1780:	00300000 	eorseq	r0, r0, r0
    1784:	00040000 	andeq	r0, r4, r0
    1788:	9f5001f3 	svcls	0x005001f3
	...
    17a0:	0000000b 	andeq	r0, r0, fp
    17a4:	0b510001 	bleq	14417b0 <__ROM_SIZE__+0x14017b0>
    17a8:	1a000000 	bne	17b0 <cmd_end_+0x20>
    17ac:	04000000 	streq	r0, [r0], #-0
    17b0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    17b4:	00001a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    17b8:	00001c00 	andeq	r1, r0, r0, lsl #24
    17bc:	51000100 	mrspl	r0, (UNDEF: 16)
    17c0:	0000001c 	andeq	r0, r0, ip, lsl r0
    17c4:	00000030 	andeq	r0, r0, r0, lsr r0
    17c8:	01f30004 	mvnseq	r0, r4
    17cc:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    17d8:	000e0000 	andeq	r0, lr, r0
    17dc:	00120000 	andseq	r0, r2, r0
    17e0:	00010000 	andeq	r0, r1, r0
    17e4:	00001250 	andeq	r1, r0, r0, asr r2
    17e8:	00001500 	andeq	r1, r0, r0, lsl #10
    17ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    17f8:	00100000 	andseq	r0, r0, r0
    17fc:	00150000 	andseq	r0, r5, r0
    1800:	00010000 	andeq	r0, r1, r0
    1804:	00000052 	andeq	r0, r0, r2, asr r0
	...
    1810:	00005000 	andeq	r5, r0, r0
    1814:	00005e00 	andeq	r5, r0, r0, lsl #28
    1818:	50000100 	andpl	r0, r0, r0, lsl #2
    181c:	0000005e 	andeq	r0, r0, lr, asr r0
    1820:	00000060 	andeq	r0, r0, r0, rrx
    1824:	01f30004 	mvnseq	r0, r4
    1828:	00009f50 	andeq	r9, r0, r0, asr pc
    182c:	00000000 	andeq	r0, r0, r0
    1830:	00040000 	andeq	r0, r4, r0
    1834:	00500000 	subseq	r0, r0, r0
    1838:	00540000 	subseq	r0, r4, r0
    183c:	00020000 	andeq	r0, r2, r0
    1840:	00549f30 	subseq	r9, r4, r0, lsr pc
    1844:	00600000 	rsbeq	r0, r0, r0
    1848:	00010000 	andeq	r0, r1, r0
    184c:	00000053 	andeq	r0, r0, r3, asr r0
    1850:	00000000 	andeq	r0, r0, r0
    1854:	00000300 	andeq	r0, r0, r0, lsl #6
    1858:	00005000 	andeq	r5, r0, r0
    185c:	00005e00 	andeq	r5, r0, r0, lsl #28
    1860:	50000100 	andpl	r0, r0, r0, lsl #2
    1864:	0000005e 	andeq	r0, r0, lr, asr r0
    1868:	00000060 	andeq	r0, r0, r0, rrx
    186c:	01f30004 	mvnseq	r0, r4
    1870:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    187c:	003a0000 	eorseq	r0, sl, r0
    1880:	004e0000 	subeq	r0, lr, r0
    1884:	00010000 	andeq	r0, r1, r0
    1888:	00004e50 	andeq	r4, r0, r0, asr lr
    188c:	00005000 	andeq	r5, r0, r0
    1890:	f3000400 	vshl.u8	d0, d0, d0
    1894:	009f5001 	addseq	r5, pc, r1
    1898:	00000000 	andeq	r0, r0, r0
    189c:	05000000 	streq	r0, [r0, #-0]
    18a0:	3a000000 	bcc	18a8 <cmd_end_+0x118>
    18a4:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    18a8:	02000000 	andeq	r0, r0, #0
    18ac:	3e9f3000 	cdpcc	0, 9, cr3, cr15, cr0, {0}
    18b0:	50000000 	andpl	r0, r0, r0
    18b4:	01000000 	mrseq	r0, (UNDEF: 0)
    18b8:	00005300 	andeq	r5, r0, r0, lsl #6
    18bc:	00000000 	andeq	r0, r0, r0
    18c0:	00030000 	andeq	r0, r3, r0
    18c4:	0000003a 	andeq	r0, r0, sl, lsr r0
    18c8:	00000050 	andeq	r0, r0, r0, asr r0
    18cc:	00510001 	subseq	r0, r1, r1
    18d0:	00000000 	andeq	r0, r0, r0
    18d4:	04000000 	streq	r0, [r0], #-0
    18d8:	3a000000 	bcc	18e0 <sbox>
    18dc:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    18e0:	01000000 	mrseq	r0, (UNDEF: 0)
    18e4:	004e5000 	subeq	r5, lr, r0
    18e8:	00500000 	subseq	r0, r0, r0
    18ec:	00040000 	andeq	r0, r4, r0
    18f0:	9f5001f3 	svcls	0x005001f3
	...
    1900:	00260000 	eoreq	r0, r6, r0
    1904:	002a0000 	eoreq	r0, sl, r0
    1908:	00010000 	andeq	r0, r1, r0
    190c:	00002a50 	andeq	r2, r0, r0, asr sl
    1910:	00002e00 	andeq	r2, r0, r0, lsl #28
    1914:	70000300 	andvc	r0, r0, r0, lsl #6
    1918:	002e9f01 	eoreq	r9, lr, r1, lsl #30
    191c:	00380000 	eorseq	r0, r8, r0
    1920:	00010000 	andeq	r0, r1, r0
    1924:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1930:	00002600 	andeq	r2, r0, r0, lsl #12
    1934:	00002a00 	andeq	r2, r0, r0, lsl #20
    1938:	51000100 	mrspl	r0, (UNDEF: 16)
    193c:	0000002a 	andeq	r0, r0, sl, lsr #32
    1940:	0000003a 	andeq	r0, r0, sl, lsr r0
    1944:	00510001 	subseq	r0, r1, r1
	...
    1950:	10000000 	andne	r0, r0, r0
    1954:	14000000 	strne	r0, [r0], #-0
    1958:	01000000 	mrseq	r0, (UNDEF: 0)
    195c:	00145000 	andseq	r5, r4, r0
    1960:	00220000 	eoreq	r0, r2, r0
    1964:	00010000 	andeq	r0, r1, r0
    1968:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1974:	00001000 	andeq	r1, r0, r0
    1978:	00001600 	andeq	r1, r0, r0, lsl #12
    197c:	51000100 	mrspl	r0, (UNDEF: 16)
    1980:	00000016 	andeq	r0, r0, r6, lsl r0
    1984:	00000026 	andeq	r0, r0, r6, lsr #32
    1988:	00510001 	subseq	r0, r1, r1
	...
    1998:	04000000 	streq	r0, [r0], #-0
    199c:	01000000 	mrseq	r0, (UNDEF: 0)
    19a0:	00045000 	andeq	r5, r4, r0
    19a4:	00100000 	andseq	r0, r0, r0
    19a8:	00010000 	andeq	r0, r1, r0
    19ac:	00000052 	andeq	r0, r0, r2, asr r0
    19b0:	00000000 	andeq	r0, r0, r0
    19b4:	00000100 	andeq	r0, r0, r0, lsl #2
    19b8:	00000200 	andeq	r0, r0, r0, lsl #4
    19bc:	00000600 	andeq	r0, r0, r0, lsl #12
    19c0:	30000200 	andcc	r0, r0, r0, lsl #4
    19c4:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    19c8:	00001000 	andeq	r1, r0, r0
    19cc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    19dc:	00000100 	andeq	r0, r0, r0, lsl #2
    19e0:	00000108 	andeq	r0, r0, r8, lsl #2
    19e4:	08500001 	ldmdaeq	r0, {r0}^
    19e8:	18000001 	stmdane	r0, {r0}
    19ec:	04000001 	streq	r0, [r0], #-1
    19f0:	5001f300 	andpl	pc, r1, r0, lsl #6
    19f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1a00:	00010000 	andeq	r0, r1, r0
    1a04:	00010600 	andeq	r0, r1, r0, lsl #12
    1a08:	51000100 	mrspl	r0, (UNDEF: 16)
    1a0c:	00000106 	andeq	r0, r0, r6, lsl #2
    1a10:	00000118 	andeq	r0, r0, r8, lsl r1
    1a14:	01f30004 	mvnseq	r0, r4
    1a18:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    1a24:	01800000 	orreq	r0, r0, r0
    1a28:	018c0000 	orreq	r0, ip, r0
    1a2c:	00010000 	andeq	r0, r1, r0
    1a30:	00018c50 	andeq	r8, r1, r0, asr ip
    1a34:	0001e800 	andeq	lr, r1, r0, lsl #16
    1a38:	f3000400 	vshl.u8	d0, d0, d0
    1a3c:	009f5001 	addseq	r5, pc, r1
	...
    1a4c:	00018000 	andeq	r8, r1, r0
    1a50:	00018a00 	andeq	r8, r1, r0, lsl #20
    1a54:	51000100 	mrspl	r0, (UNDEF: 16)
    1a58:	0000018a 	andeq	r0, r0, sl, lsl #3
    1a5c:	0000018f 	andeq	r0, r0, pc, lsl #3
    1a60:	8f530001 	svchi	0x00530001
    1a64:	e8000001 	stmda	r0, {r0}
    1a68:	04000001 	streq	r0, [r0], #-1
    1a6c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1a70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1a74:	00000000 	andeq	r0, r0, r0
    1a78:	00000100 	andeq	r0, r0, r0, lsl #2
    1a7c:	00000000 	andeq	r0, r0, r0
    1a80:	00018200 	andeq	r8, r1, r0, lsl #4
    1a84:	00019e00 	andeq	r9, r1, r0, lsl #28
    1a88:	30000200 	andcc	r0, r0, r0, lsl #4
    1a8c:	00019e9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
    1a90:	0001cc00 	andeq	ip, r1, r0, lsl #24
    1a94:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    1a98:	000001cc 	andeq	r0, r0, ip, asr #3
    1a9c:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1aa0:	9f300002 	svcls	0x00300002
    1aa4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1aa8:	000001d2 	ldrdeq	r0, [r0], -r2
    1aac:	00550001 	subseq	r0, r5, r1
    1ab0:	00000000 	andeq	r0, r0, r0
    1ab4:	02000000 	andeq	r0, r0, #0
    1ab8:	00000000 	andeq	r0, r0, r0
    1abc:	82000000 	andhi	r0, r0, #0
    1ac0:	9a000001 	bls	1acc <rsbox+0xe0>
    1ac4:	02000001 	andeq	r0, r0, #1
    1ac8:	9e9f3100 	fmllse	f3, f7, f0
    1acc:	cc000001 	stcgt	0, cr0, [r0], {1}
    1ad0:	01000001 	tsteq	r0, r1
    1ad4:	01cc5600 	biceq	r5, ip, r0, lsl #12
    1ad8:	01d00000 	bicseq	r0, r0, r0
    1adc:	00020000 	andeq	r0, r2, r0
    1ae0:	01d09f31 	bicseq	r9, r0, r1, lsr pc
    1ae4:	01d20000 	bicseq	r0, r2, r0
    1ae8:	00010000 	andeq	r0, r1, r0
    1aec:	00000056 	andeq	r0, r0, r6, asr r0
	...
    1af8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1afc:	10000006 	andne	r0, r0, r6
    1b00:	01000006 	tsteq	r0, r6
    1b04:	06105000 	ldreq	r5, [r0], -r0
    1b08:	06340000 	ldrteq	r0, [r4], -r0
    1b0c:	00010000 	andeq	r0, r1, r0
    1b10:	00063456 	andeq	r3, r6, r6, asr r4
    1b14:	00063800 	andeq	r3, r6, r0, lsl #16
    1b18:	f3000400 	vshl.u8	d0, d0, d0
    1b1c:	009f5001 	addseq	r5, pc, r1
    1b20:	00000000 	andeq	r0, r0, r0
    1b24:	02000000 	andeq	r0, r0, #0
    1b28:	0c000000 	stceq	0, cr0, [r0], {-0}
    1b2c:	10000006 	andne	r0, r0, r6
    1b30:	02000006 	andeq	r0, r0, #6
    1b34:	109f3000 	addsne	r3, pc, r0
    1b38:	34000006 	strcc	r0, [r0], #-6
    1b3c:	01000006 	tsteq	r0, r6
    1b40:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    1b50:	000005e0 	andeq	r0, r0, r0, ror #11
    1b54:	000005ea 	andeq	r0, r0, sl, ror #11
    1b58:	ea500001 	b	1401b64 <__ROM_SIZE__+0x13c1b64>
    1b5c:	ed000005 	stc	0, cr0, [r0, #-20]	; 0xffffffec
    1b60:	01000005 	tsteq	r0, r5
    1b64:	05ed5100 	strbeq	r5, [sp, #256]!	; 0x100
    1b68:	06080000 	streq	r0, [r8], -r0
    1b6c:	00040000 	andeq	r0, r4, r0
    1b70:	9f5001f3 	svcls	0x005001f3
	...
    1b80:	000005ee 	andeq	r0, r0, lr, ror #11
    1b84:	000005f2 	strdeq	r0, [r0], -r2
    1b88:	fc500001 	mrrc2	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1b8c:	01000005 	tsteq	r0, r5
    1b90:	01000006 	tsteq	r0, r6
    1b94:	00005000 	andeq	r5, r0, r0
	...
    1ba4:	000a0000 	andeq	r0, sl, r0
    1ba8:	000c0000 	andeq	r0, ip, r0
    1bac:	00010000 	andeq	r0, r1, r0
    1bb0:	00000c53 	andeq	r0, r0, r3, asr ip
    1bb4:	00001e00 	andeq	r1, r0, r0, lsl #28
    1bb8:	91000200 	mrsls	r0, R8_usr
    1bbc:	00001e74 	andeq	r1, r0, r4, ror lr
    1bc0:	00002000 	andeq	r2, r0, r0
    1bc4:	53000100 	movwpl	r0, #256	; 0x100
    1bc8:	00000020 	andeq	r0, r0, r0, lsr #32
    1bcc:	0000006c 	andeq	r0, r0, ip, rrx
    1bd0:	74910002 	ldrvc	r0, [r1], #2
	...
    1bf0:	0000000e 	andeq	r0, r0, lr
    1bf4:	00000012 	andeq	r0, r0, r2, lsl r0
    1bf8:	12530001 	subsne	r0, r3, #1
    1bfc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1c00:	01000000 	mrseq	r0, (UNDEF: 0)
    1c04:	00185200 	andseq	r5, r8, r0, lsl #4
    1c08:	001c0000 	andseq	r0, ip, r0
    1c0c:	00010000 	andeq	r0, r1, r0
    1c10:	00001c53 	andeq	r1, r0, r3, asr ip
    1c14:	00002400 	andeq	r2, r0, r0, lsl #8
    1c18:	91000200 	mrsls	r0, R8_usr
    1c1c:	00002470 	andeq	r2, r0, r0, ror r4
    1c20:	00002800 	andeq	r2, r0, r0, lsl #16
    1c24:	51000100 	mrspl	r0, (UNDEF: 16)
    1c28:	00000028 	andeq	r0, r0, r8, lsr #32
    1c2c:	00000034 	andeq	r0, r0, r4, lsr r0
    1c30:	70910002 	addsvc	r0, r1, r2
    1c34:	00000034 	andeq	r0, r0, r4, lsr r0
    1c38:	00000038 	andeq	r0, r0, r8, lsr r0
    1c3c:	38530001 	ldmdacc	r3, {r0}^
    1c40:	54000000 	strpl	r0, [r0], #-0
    1c44:	02000000 	andeq	r0, r0, #0
    1c48:	54709100 	ldrbtpl	r9, [r0], #-256	; 0xffffff00
    1c4c:	56000000 	strpl	r0, [r0], -r0
    1c50:	02000000 	andeq	r0, r0, #0
    1c54:	56007d00 	strpl	r7, [r0], -r0, lsl #26
    1c58:	6c000000 	stcvs	0, cr0, [r0], {-0}
    1c5c:	02000000 	andeq	r0, r0, #0
    1c60:	00787d00 	rsbseq	r7, r8, r0, lsl #26
	...
    1c6c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1c70:	1c000001 	stcne	0, cr0, [r0], {1}
    1c74:	01000001 	tsteq	r0, r1
    1c78:	011c5000 	tsteq	ip, r0
    1c7c:	01280000 			; <UNDEFINED> instruction: 0x01280000
    1c80:	00040000 	andeq	r0, r4, r0
    1c84:	9f5001f3 	svcls	0x005001f3
	...
    1c94:	00000118 	andeq	r0, r0, r8, lsl r1
    1c98:	0000011f 	andeq	r0, r0, pc, lsl r1
    1c9c:	1f510001 	svcne	0x00510001
    1ca0:	28000001 	stmdacs	r0, {r0}
    1ca4:	04000001 	streq	r0, [r0], #-1
    1ca8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1cac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1cb0:	00000000 	andeq	r0, r0, r0
    1cb4:	00000200 	andeq	r0, r0, r0, lsl #4
    1cb8:	00009c00 	andeq	r9, r0, r0, lsl #24
    1cbc:	0000a000 	andeq	sl, r0, r0
    1cc0:	30000200 	andcc	r0, r0, r0, lsl #4
    1cc4:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1cc8:	0000bc00 	andeq	fp, r0, r0, lsl #24
    1ccc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1ce8:	04940000 	ldreq	r0, [r4], #0
    1cec:	049d0000 	ldreq	r0, [sp], #0
    1cf0:	00010000 	andeq	r0, r1, r0
    1cf4:	00049e50 	andeq	r9, r4, r0, asr lr
    1cf8:	0004b200 	andeq	fp, r4, r0, lsl #4
    1cfc:	50000100 	andpl	r0, r0, r0, lsl #2
    1d00:	000004cc 	andeq	r0, r0, ip, asr #9
    1d04:	000004d2 	ldrdeq	r0, [r0], -r2
    1d08:	fc500001 	mrrc2	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1d0c:	ff000004 			; <UNDEFINED> instruction: 0xff000004
    1d10:	01000004 	tsteq	r0, r4
    1d14:	05065000 	streq	r5, [r6, #-0]
    1d18:	05220000 	streq	r0, [r2, #-0]!
    1d1c:	00010000 	andeq	r0, r1, r0
    1d20:	00053850 	andeq	r3, r5, r0, asr r8
    1d24:	00053a00 	andeq	r3, r5, r0, lsl #20
    1d28:	50000100 	andpl	r0, r0, r0, lsl #2
    1d2c:	0000054a 	andeq	r0, r0, sl, asr #10
    1d30:	0000054e 	andeq	r0, r0, lr, asr #10
    1d34:	54500001 	ldrbpl	r0, [r0], #-1
    1d38:	57000005 	strpl	r0, [r0, -r5]
    1d3c:	01000005 	tsteq	r0, r5
    1d40:	05665000 	strbeq	r5, [r6, #-0]!
    1d44:	05b60000 	ldreq	r0, [r6, #0]!
    1d48:	00010000 	andeq	r0, r1, r0
    1d4c:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1d58:	0004c400 	andeq	ip, r4, r0, lsl #8
    1d5c:	0004c800 	andeq	ip, r4, r0, lsl #16
    1d60:	50000100 	andpl	r0, r0, r0, lsl #2
    1d64:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    1d68:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    1d6c:	00500001 	subseq	r0, r0, r1
    1d70:	00000000 	andeq	r0, r0, r0
    1d74:	01000000 	mrseq	r0, (UNDEF: 0)
	...
    1d80:	00000101 	andeq	r0, r0, r1, lsl #2
    1d84:	00045c00 	andeq	r5, r4, r0, lsl #24
    1d88:	00049400 	andeq	r9, r4, r0, lsl #8
    1d8c:	30000200 	andcc	r0, r0, r0, lsl #4
    1d90:	0004949f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
    1d94:	00049600 	andeq	r9, r4, r0, lsl #12
    1d98:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    1d9c:	00000498 	muleq	r0, r8, r4
    1da0:	0000050c 	andeq	r0, r0, ip, lsl #10
    1da4:	0e550001 	cdpeq	0, 5, cr0, cr5, cr1, {0}
    1da8:	14000005 	strne	r0, [r0], #-5
    1dac:	01000005 	tsteq	r0, r5
    1db0:	05165500 	ldreq	r5, [r6, #-1280]	; 0xfffffb00
    1db4:	05340000 	ldreq	r0, [r4, #-0]!
    1db8:	00010000 	andeq	r0, r1, r0
    1dbc:	00053455 	andeq	r3, r5, r5, asr r4
    1dc0:	00053800 	andeq	r3, r5, r0, lsl #16
    1dc4:	30000200 	andcc	r0, r0, r0, lsl #4
    1dc8:	0005389f 	muleq	r5, pc, r8	; <UNPREDICTABLE>
    1dcc:	0005cc00 	andeq	ip, r5, r0, lsl #24
    1dd0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1de0:	04940000 	ldreq	r0, [r4], #0
    1de4:	04980000 	ldreq	r0, [r8], #0
    1de8:	00010000 	andeq	r0, r1, r0
    1dec:	0004a054 	andeq	sl, r4, r4, asr r0
    1df0:	00055400 	andeq	r5, r5, r0, lsl #8
    1df4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1df8:	00000574 	andeq	r0, r0, r4, ror r5
    1dfc:	000005cc 	andeq	r0, r0, ip, asr #11
    1e00:	00540001 	subseq	r0, r4, r1
    1e04:	00000000 	andeq	r0, r0, r0
    1e08:	06000000 	streq	r0, [r0], -r0
    1e0c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1e10:	5e000004 	cdppl	0, 0, cr0, cr0, cr4, {0}
    1e14:	02000004 	andeq	r0, r0, #4
    1e18:	5e9f3000 	cdppl	0, 9, cr3, cr15, cr0, {0}
    1e1c:	72000004 	andvc	r0, r0, #4
    1e20:	01000004 	tsteq	r0, r4
    1e24:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    1e30:	00000472 	andeq	r0, r0, r2, ror r4
    1e34:	00000489 	andeq	r0, r0, r9, lsl #9
    1e38:	00530001 	subseq	r0, r3, r1
	...
    1e48:	00012800 	andeq	r2, r1, r0, lsl #16
    1e4c:	00013400 	andeq	r3, r1, r0, lsl #8
    1e50:	50000100 	andpl	r0, r0, r0, lsl #2
    1e54:	00000134 	andeq	r0, r0, r4, lsr r1
    1e58:	00000172 	andeq	r0, r0, r2, ror r1
    1e5c:	72580001 	subsvc	r0, r8, #1
    1e60:	80000001 	andhi	r0, r0, r1
    1e64:	04000001 	streq	r0, [r0], #-1
    1e68:	5001f300 	andpl	pc, r1, r0, lsl #6
    1e6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1e78:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1e7c:	34000001 	strcc	r0, [r0], #-1
    1e80:	01000001 	tsteq	r0, r1
    1e84:	01345100 	teqeq	r4, r0, lsl #2
    1e88:	01720000 	cmneq	r2, r0
    1e8c:	00010000 	andeq	r0, r1, r0
    1e90:	00017256 	andeq	r7, r1, r6, asr r2
    1e94:	00018000 	andeq	r8, r1, r0
    1e98:	f3000400 	vshl.u8	d0, d0, d0
    1e9c:	009f5101 	addseq	r5, pc, r1, lsl #2
    1ea0:	00000000 	andeq	r0, r0, r0
    1ea4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ea8:	00000101 	andeq	r0, r0, r1, lsl #2
    1eac:	00013000 	andeq	r3, r1, r0
    1eb0:	00015c00 	andeq	r5, r1, r0, lsl #24
    1eb4:	30000200 	andcc	r0, r0, r0, lsl #4
    1eb8:	00015c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    1ebc:	00015e00 	andeq	r5, r1, r0, lsl #28
    1ec0:	31000200 	mrscc	r0, R8_usr
    1ec4:	00015e9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
    1ec8:	00016e00 	andeq	r6, r1, r0, lsl #28
    1ecc:	30000200 	andcc	r0, r0, r0, lsl #4
    1ed0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1ed4:	00000000 	andeq	r0, r0, r0
    1ed8:	00000300 	andeq	r0, r0, r0, lsl #6
    1edc:	00013000 	andeq	r3, r1, r0
    1ee0:	00013400 	andeq	r3, r1, r0, lsl #8
    1ee4:	30000200 	andcc	r0, r0, r0, lsl #4
    1ee8:	0001349f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    1eec:	00017200 	andeq	r7, r1, r0, lsl #4
    1ef0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1f00:	0000022c 	andeq	r0, r0, ip, lsr #4
    1f04:	00000234 	andeq	r0, r0, r4, lsr r2
    1f08:	34500001 	ldrbcc	r0, [r0], #-1
    1f0c:	7e000002 	cdpvc	0, 0, cr0, cr0, cr2, {0}
    1f10:	01000002 	tsteq	r0, r2
    1f14:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    1f20:	022c0000 	eoreq	r0, ip, #0
    1f24:	02370000 	eorseq	r0, r7, #0
    1f28:	00010000 	andeq	r0, r1, r0
    1f2c:	00023751 	andeq	r3, r2, r1, asr r7
    1f30:	00027e00 	andeq	r7, r2, r0, lsl #28
    1f34:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1f44:	0000022c 	andeq	r0, r0, ip, lsr #4
    1f48:	00000237 	andeq	r0, r0, r7, lsr r2
    1f4c:	37520001 	ldrbcc	r0, [r2, -r1]
    1f50:	7e000002 	cdpvc	0, 0, cr0, cr0, cr2, {0}
    1f54:	04000002 	streq	r0, [r0], #-2
    1f58:	5201f300 	andpl	pc, r1, #0, 6
    1f5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f60:	00000000 	andeq	r0, r0, r0
    1f64:	00000100 	andeq	r0, r0, r0, lsl #2
    1f68:	00000101 	andeq	r0, r0, r1, lsl #2
    1f6c:	00023200 	andeq	r3, r2, r0, lsl #4
    1f70:	00024000 	andeq	r4, r2, r0
    1f74:	30000200 	andcc	r0, r0, r0, lsl #4
    1f78:	0002409f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1f7c:	00027400 	andeq	r7, r2, r0, lsl #8
    1f80:	50000100 	andpl	r0, r0, r0, lsl #2
    1f84:	00000274 	andeq	r0, r0, r4, ror r2
    1f88:	0000027a 	andeq	r0, r0, sl, ror r2
    1f8c:	01700003 	cmneq	r0, r3
    1f90:	00027a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    1f94:	00027e00 	andeq	r7, r2, r0, lsl #28
    1f98:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1fa4:	00000002 	andeq	r0, r0, r2
    1fa8:	00000232 	andeq	r0, r0, r2, lsr r2
    1fac:	00000240 	andeq	r0, r0, r0, asr #4
    1fb0:	9f300002 	svcls	0x00300002
    1fb4:	00000240 	andeq	r0, r0, r0, asr #4
    1fb8:	0000027e 	andeq	r0, r0, lr, ror r2
    1fbc:	00530001 	subseq	r0, r3, r1
	...
    1fc8:	3a000000 	bcc	1fd0 <rsbox+0x5e4>
    1fcc:	3e000002 	cdpcc	0, 0, cr0, cr0, cr2, {0}
    1fd0:	01000002 	tsteq	r0, r2
    1fd4:	023e5000 	eorseq	r5, lr, #0
    1fd8:	027e0000 	rsbseq	r0, lr, #0
    1fdc:	00010000 	andeq	r0, r1, r0
    1fe0:	0000005c 	andeq	r0, r0, ip, asr r0
	...
    1fec:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    1ff0:	c8000003 	stmdagt	r0, {r0, r1}
    1ff4:	01000003 	tsteq	r0, r3
    1ff8:	03c85000 	biceq	r5, r8, #0
    1ffc:	04400000 	strbeq	r0, [r0], #-0
    2000:	00010000 	andeq	r0, r1, r0
    2004:	00044058 	andeq	r4, r4, r8, asr r0
    2008:	00045000 	andeq	r5, r4, r0
    200c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    201c:	03ae0000 			; <UNDEFINED> instruction: 0x03ae0000
    2020:	03c80000 	biceq	r0, r8, #0
    2024:	00010000 	andeq	r0, r1, r0
    2028:	0003c851 	andeq	ip, r3, r1, asr r8
    202c:	00044000 	andeq	r4, r4, r0
    2030:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2034:	00000440 	andeq	r0, r0, r0, asr #8
    2038:	00000450 	andeq	r0, r0, r0, asr r4
    203c:	00510001 	subseq	r0, r1, r1
	...
    2048:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    204c:	00000003 	andeq	r0, r0, r3
    2050:	01000004 	tsteq	r0, r4
    2054:	04045500 	streq	r5, [r4], #-1280	; 0xfffffb00
    2058:	04400000 	strbeq	r0, [r0], #-0
    205c:	00010000 	andeq	r0, r1, r0
    2060:	00000055 	andeq	r0, r0, r5, asr r0
	...
    206c:	0003c800 	andeq	ip, r3, r0, lsl #16
    2070:	00040000 	andeq	r0, r4, r0
    2074:	59000100 	stmdbpl	r0, {r8}
    2078:	00000404 	andeq	r0, r0, r4, lsl #8
    207c:	00000440 	andeq	r0, r0, r0, asr #8
    2080:	00590001 	subseq	r0, r9, r1
	...
    208c:	00000101 	andeq	r0, r0, r1, lsl #2
    2090:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    2094:	e6000003 	str	r0, [r0], -r3
    2098:	01000003 	tsteq	r0, r3
    209c:	03e65a00 	mvneq	r5, #0, 20
    20a0:	03f40000 	mvnseq	r0, #0
    20a4:	00010000 	andeq	r0, r1, r0
    20a8:	0003f455 	andeq	pc, r3, r5, asr r4	; <UNPREDICTABLE>
    20ac:	0003fa00 	andeq	pc, r3, r0, lsl #20
    20b0:	5a000100 	bpl	24b8 <rsbox+0xacc>
    20b4:	00000404 	andeq	r0, r0, r4, lsl #8
    20b8:	00000408 	andeq	r0, r0, r8, lsl #8
    20bc:	005a0001 	subseq	r0, sl, r1
	...
    20cc:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    20d0:	90000002 	andls	r0, r0, r2
    20d4:	01000002 	tsteq	r0, r2
    20d8:	02905000 	addseq	r5, r0, #0
    20dc:	02b60000 	adcseq	r0, r6, #0
    20e0:	00010000 	andeq	r0, r1, r0
    20e4:	0002b656 	andeq	fp, r2, r6, asr r6
    20e8:	0002b800 	andeq	fp, r2, r0, lsl #16
    20ec:	50000100 	andpl	r0, r0, r0, lsl #2
    20f0:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    20f4:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    20f8:	01f30004 	mvnseq	r0, r4
    20fc:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    210c:	0000027e 	andeq	r0, r0, lr, ror r2
    2110:	00000293 	muleq	r0, r3, r2
    2114:	93510001 	cmpls	r1, #1
    2118:	b6000002 	strlt	r0, [r0], -r2
    211c:	01000002 	tsteq	r0, r2
    2120:	02b65500 	adcseq	r5, r6, #0, 10
    2124:	02ba0000 	adcseq	r0, sl, #0
    2128:	00010000 	andeq	r0, r1, r0
    212c:	00000051 	andeq	r0, r0, r1, asr r0
	...
    2138:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    213c:	93000002 	movwls	r0, #2
    2140:	01000002 	tsteq	r0, r2
    2144:	02935200 	addseq	r5, r3, #0, 4
    2148:	02b60000 	adcseq	r0, r6, #0
    214c:	00010000 	andeq	r0, r1, r0
    2150:	0002b654 	andeq	fp, r2, r4, asr r6
    2154:	0002ba00 	andeq	fp, r2, r0, lsl #20
    2158:	52000100 	andpl	r0, r0, #0, 2
	...
    2168:	0000029a 	muleq	r0, sl, r2
    216c:	000002aa 	andeq	r0, r0, sl, lsr #5
    2170:	ae530001 	cdpge	0, 5, cr0, cr3, cr1, {0}
    2174:	b6000002 	strlt	r0, [r0], -r2
    2178:	01000002 	tsteq	r0, r2
    217c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    2188:	00c00000 	sbceq	r0, r0, r0
    218c:	00da0000 	sbcseq	r0, sl, r0
    2190:	00010000 	andeq	r0, r1, r0
    2194:	0000da50 	andeq	sp, r0, r0, asr sl
    2198:	00010000 	andeq	r0, r1, r0
    219c:	f3000400 	vshl.u8	d0, d0, d0
    21a0:	009f5001 	addseq	r5, pc, r1
	...
    21ac:	c0000000 	andgt	r0, r0, r0
    21b0:	da000000 	ble	21b8 <rsbox+0x7cc>
    21b4:	01000000 	mrseq	r0, (UNDEF: 0)
    21b8:	00da5100 	sbcseq	r5, sl, r0, lsl #2
    21bc:	01000000 	mrseq	r0, (UNDEF: 0)
    21c0:	00040000 	andeq	r0, r4, r0
    21c4:	9f5101f3 	svcls	0x005101f3
	...
    21d0:	00c80000 	sbceq	r0, r8, r0
    21d4:	00f40000 	rscseq	r0, r4, r0
    21d8:	00010000 	andeq	r0, r1, r0
    21dc:	00000055 	andeq	r0, r0, r5, asr r0
    21e0:	00000000 	andeq	r0, r0, r0
    21e4:	00000100 	andeq	r0, r0, r0, lsl #2
    21e8:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    21ec:	d4000000 	strle	r0, [r0], #-0
    21f0:	02000000 	andeq	r0, r0, #0
    21f4:	d49f3000 	ldrle	r3, [pc], #0	; 21fc <rsbox+0x810>
    21f8:	d6000000 	strle	r0, [r0], -r0
    21fc:	01000000 	mrseq	r0, (UNDEF: 0)
    2200:	00d65400 	sbcseq	r5, r6, r0, lsl #8
    2204:	00da0000 	sbcseq	r0, sl, r0
    2208:	00020000 	andeq	r0, r2, r0
    220c:	00009f30 	andeq	r9, r0, r0, lsr pc
	...
    2218:	000000da 	ldrdeq	r0, [r0], -sl
    221c:	000000f4 	strdeq	r0, [r0], -r4
    2220:	00540001 	subseq	r0, r4, r1
	...
    2230:	0001e800 	andeq	lr, r1, r0, lsl #16
    2234:	0001f300 	andeq	pc, r1, r0, lsl #6
    2238:	50000100 	andpl	r0, r0, r0, lsl #2
    223c:	000001f3 	strdeq	r0, [r0], -r3
    2240:	00000222 	andeq	r0, r0, r2, lsr #4
    2244:	22550001 	subscs	r0, r5, #1
    2248:	2c000002 	stccs	0, cr0, [r0], {2}
    224c:	01000002 	tsteq	r0, r2
    2250:	00005000 	andeq	r5, r0, r0
	...
    225c:	00000206 	andeq	r0, r0, r6, lsl #4
    2260:	00000212 	andeq	r0, r0, r2, lsl r2
    2264:	00500001 	subseq	r0, r0, r1
	...
    2274:	00032000 	andeq	r2, r3, r0
    2278:	00032d00 	andeq	r2, r3, r0, lsl #26
    227c:	50000100 	andpl	r0, r0, r0, lsl #2
    2280:	0000032d 	andeq	r0, r0, sp, lsr #6
    2284:	00000370 	andeq	r0, r0, r0, ror r3
    2288:	70540001 	subsvc	r0, r4, r1
    228c:	78000003 	stmdavc	r0, {r0, r1}
    2290:	04000003 	streq	r0, [r0], #-3
    2294:	5001f300 	andpl	pc, r1, r0, lsl #6
    2298:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    22a4:	20000000 	andcs	r0, r0, r0
    22a8:	2a000003 	bcs	22bc <rsbox+0x8d0>
    22ac:	01000003 	tsteq	r0, r3
    22b0:	032a5100 			; <UNDEFINED> instruction: 0x032a5100
    22b4:	03700000 	cmneq	r0, #0
    22b8:	00010000 	andeq	r0, r1, r0
    22bc:	00037055 	andeq	r7, r3, r5, asr r0
    22c0:	00037800 	andeq	r7, r3, r0, lsl #16
    22c4:	f3000400 	vshl.u8	d0, d0, d0
    22c8:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    22d4:	00035000 	andeq	r5, r3, r0
    22d8:	00035d00 	andeq	r5, r3, r0, lsl #26
    22dc:	53000100 	movwpl	r0, #256	; 0x100
	...
    22f0:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    22f4:	000002d6 	ldrdeq	r0, [r0], -r6
    22f8:	d6500001 	ldrble	r0, [r0], -r1
    22fc:	dc000002 	stcle	0, cr0, [r0], {2}
    2300:	01000002 	tsteq	r0, r2
    2304:	02dc5400 	sbcseq	r5, ip, #0, 8
    2308:	02e30000 	rsceq	r0, r3, #0
    230c:	00010000 	andeq	r0, r1, r0
    2310:	0002e350 	andeq	lr, r2, r0, asr r3
    2314:	00032000 	andeq	r2, r3, r0
    2318:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    232c:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    2330:	000002d4 	ldrdeq	r0, [r0], -r4
    2334:	d4510001 	ldrble	r0, [r1], #-1
    2338:	dc000002 	stcle	0, cr0, [r0], {2}
    233c:	04000002 	streq	r0, [r0], #-2
    2340:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2344:	0002dc9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    2348:	0002e000 	andeq	lr, r2, r0
    234c:	51000100 	mrspl	r0, (UNDEF: 16)
    2350:	000002e0 	andeq	r0, r0, r0, ror #5
    2354:	00000320 	andeq	r0, r0, r0, lsr #6
    2358:	00550001 	subseq	r0, r5, r1
	...
    2364:	0002f800 	andeq	pc, r2, r0, lsl #16
    2368:	00030000 	andeq	r0, r3, r0
    236c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    237c:	00000088 	andeq	r0, r0, r8, lsl #1
    2380:	0000008e 	andeq	r0, r0, lr, lsl #1
    2384:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
    2388:	9a000000 	bls	2390 <rsbox+0x9a4>
    238c:	01000000 	mrseq	r0, (UNDEF: 0)
    2390:	00005400 	andeq	r5, r0, r0, lsl #8
    2394:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	000003c0 	andeq	r0, r0, r0, asr #7
  14:	00000064 	andeq	r0, r0, r4, rrx
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01fb0002 	mvnseq	r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00000424 	andeq	r0, r0, r4, lsr #8
  34:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	03860002 	orreq	r0, r6, #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	00000440 	andeq	r0, r0, r0, asr #8
  54:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	05110002 	ldreq	r0, [r1, #-2]
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	0000045c 	andeq	r0, r0, ip, asr r4
  74:	00000064 	andeq	r0, r0, r4, rrx
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	05a50002 	streq	r0, [r5, #2]!
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	000004c0 	andeq	r0, r0, r0, asr #9
  94:	00000064 	andeq	r0, r0, r4, rrx
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	06390002 	ldrteq	r0, [r9], -r2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00000524 	andeq	r0, r0, r4, lsr #10
  b4:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	07630002 	strbeq	r0, [r3, -r2]!
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
  d4:	00000002 	andeq	r0, r0, r2
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	081b0002 	ldmdaeq	fp, {r1}
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
  f4:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	0a340002 	beq	d00114 <__ROM_SIZE__+0xcc0114>
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00000660 	andeq	r0, r0, r0, ror #12
 114:	0000025c 	andeq	r0, r0, ip, asr r2
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	0db10002 	ldceq	0, cr0, [r1, #8]!
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
 134:	000005e0 	andeq	r0, r0, r0, ror #11
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	1a480002 	bne	1200154 <__ROM_SIZE__+0x11c0154>
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00000e9c 	muleq	r0, ip, lr
 154:	0000005a 	andeq	r0, r0, sl, asr r0
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	1b980002 	blne	fe600174 <_STACK_TOP_+0xde5f8178>
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00000ef8 	strdeq	r0, [r0], -r8
 174:	00000160 	andeq	r0, r0, r0, ror #2
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	211c0002 	tstcs	ip, r2
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	00001058 	andeq	r1, r0, r8, asr r0
 194:	00000060 	andeq	r0, r0, r0, rrx
	...
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	23460002 	movtcs	r0, #24578	; 0x6002
 1a8:	00040000 	andeq	r0, r4, r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	000010b8 	strheq	r1, [r0], -r8
 1b4:	00000638 	andeq	r0, r0, r8, lsr r6
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000130 	andeq	r0, r0, r0, lsr r1
       4:	00bf0003 	adcseq	r0, pc, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
      24:	2f657661 	svccs	0x00657661
      28:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
      2c:	7463652f 	strbtvc	r6, [r3], #-1327	; 0xfffffad1
      30:	6f662f66 	svcvs	0x00662f66
      34:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
      38:	2f656d6f 	svccs	0x00656d6f
      3c:	61647264 	cmnvs	r4, r4, ror #4
      40:	652f6576 	strvs	r6, [pc, #-1398]!	; fffffad2 <_STACK_TOP_+0xdfff7ad6>
      44:	2f626f66 	svccs	0x00626f66
      48:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
      4c:	68732f6c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
      50:	006c6c65 	rsbeq	r6, ip, r5, ror #24
      54:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffa0 <_STACK_TOP_+0xdfff7fa4>
      58:	72642f65 	rsbvc	r2, r4, #404	; 0x194
      5c:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
      60:	6f66652f 	svcvs	0x0066652f
      64:	68732f62 	ldmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
      68:	2f6c6c65 	svccs	0x006c6c65
      6c:	2f62696c 	svccs	0x0062696c
      70:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
      74:	2f006674 	svccs	0x00006674
      78:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      7c:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
      80:	2f657661 	svccs	0x00657661
      84:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
      88:	6568732f 	strbvs	r7, [r8, #-815]!	; 0xfffffcd1
      8c:	6c2f6c6c 	stcvs	12, cr6, [pc], #-432	; fffffee4 <_STACK_TOP_+0xdfff7ee8>
      90:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
      94:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
      98:	6d000067 	stcvs	0, cr0, [r0, #-412]	; 0xfffffe64
      9c:	2e677365 	cdpcs	3, 6, cr7, cr7, cr5, {3}
      a0:	00010063 	andeq	r0, r1, r3, rrx
      a4:	65687300 	strbvs	r7, [r8, #-768]!	; 0xfffffd00
      a8:	682e6c6c 	stmdavs	lr!, {r2, r3, r5, r6, sl, fp, sp, lr}
      ac:	00000200 	andeq	r0, r0, r0, lsl #4
      b0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
      b4:	682e6674 	stmdavs	lr!, {r2, r4, r5, r6, r9, sl, sp, lr}
      b8:	00000300 	andeq	r0, r0, r0, lsl #6
      bc:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
      c0:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
      c4:	00000400 	andeq	r0, r0, r0, lsl #8
      c8:	00250500 	eoreq	r0, r5, r0, lsl #10
      cc:	03c00205 	biceq	r0, r0, #1342177280	; 0x50000000
      d0:	06160000 	ldreq	r0, [r6], -r0
      d4:	06050501 	streq	r0, [r5], -r1, lsl #10
      d8:	2006133d 	andcs	r1, r6, sp, lsr r3
      dc:	0e052f06 	cdpeq	15, 0, cr2, cr5, cr6, {0}
      e0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
      e4:	00090520 	andeq	r0, r9, r0, lsr #10
      e8:	06030402 	streq	r0, [r3], -r2, lsl #8
      ec:	001f0521 	andseq	r0, pc, r1, lsr #10
      f0:	57030402 	strpl	r0, [r3, -r2, lsl #8]
      f4:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
      f8:	01060304 	tsteq	r6, r4, lsl #6
      fc:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
     100:	20060104 	andcs	r0, r6, r4, lsl #2
     104:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
     108:	01060104 	tsteq	r6, r4, lsl #2
     10c:	053e3106 	ldreq	r3, [lr, #-262]!	; 0xfffffefa
     110:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     114:	0a030605 	beq	c1930 <__ROM_SIZE__+0x81930>
     118:	0601052e 	streq	r0, [r1], -lr, lsr #10
     11c:	06090513 			; <UNDEFINED> instruction: 0x06090513
     120:	052e7703 	streq	r7, [lr, #-1795]!	; 0xfffff8fd
     124:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
     128:	0d054a0c 	vstreq	s8, [r5, #-48]	; 0xffffffd0
     12c:	024d2106 	subeq	r2, sp, #-2147483647	; 0x80000001
     130:	01010012 	tsteq	r1, r2, lsl r0
     134:	000000b4 	strheq	r0, [r0], -r4
     138:	00900003 	addseq	r0, r0, r3
     13c:	01020000 	mrseq	r0, (UNDEF: 2)
     140:	000d0efb 	strdeq	r0, [sp], -fp
     144:	01010101 	tsteq	r1, r1, lsl #2
     148:	01000000 	mrseq	r0, (UNDEF: 0)
     14c:	2f010000 	svccs	0x00010000
     150:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     154:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
     158:	2f657661 	svccs	0x00657661
     15c:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
     160:	7463652f 	strbtvc	r6, [r3], #-1327	; 0xfffffad1
     164:	6f662f66 	svcvs	0x00662f66
     168:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
     16c:	2f656d6f 	svccs	0x00656d6f
     170:	61647264 	cmnvs	r4, r4, ror #4
     174:	652f6576 	strvs	r6, [pc, #-1398]!	; fffffc06 <_STACK_TOP_+0xdfff7c0a>
     178:	2f626f66 	svccs	0x00626f66
     17c:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
     180:	68732f6c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     184:	006c6c65 	rsbeq	r6, ip, r5, ror #24
     188:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; d4 <vector_table+0xd4>
     18c:	72642f65 	rsbvc	r2, r4, #404	; 0x194
     190:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
     194:	6f66652f 	svcvs	0x0066652f
     198:	68732f62 	ldmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
     19c:	2f6c6c65 	svccs	0x006c6c65
     1a0:	2f62696c 	svccs	0x0062696c
     1a4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     1a8:	00006674 	andeq	r6, r0, r4, ror r6
     1ac:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
     1b0:	0100632e 	tsteq	r0, lr, lsr #6
     1b4:	68730000 	ldmdavs	r3!, {}^	; <UNPREDICTABLE>
     1b8:	2e6c6c65 	cdpcs	12, 6, cr6, cr12, cr5, {3}
     1bc:	00020068 	andeq	r0, r2, r8, rrx
     1c0:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
     1c4:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
     1c8:	00030068 	andeq	r0, r3, r8, rrx
     1cc:	21050000 	mrscs	r0, (UNDEF: 5)
     1d0:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
     1d4:	16000004 	strne	r0, [r0], -r4
     1d8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     1dc:	20062106 	andcs	r2, r6, r6, lsl #2
     1e0:	053d2f06 	ldreq	r2, [sp, #-3846]!	; 0xfffff0fa
     1e4:	02130601 	andseq	r0, r3, #1048576	; 0x100000
     1e8:	01010007 	tsteq	r1, r7
     1ec:	000000b4 	strheq	r0, [r0], -r4
     1f0:	00900003 	addseq	r0, r0, r3
     1f4:	01020000 	mrseq	r0, (UNDEF: 2)
     1f8:	000d0efb 	strdeq	r0, [sp], -fp
     1fc:	01010101 	tsteq	r1, r1, lsl #2
     200:	01000000 	mrseq	r0, (UNDEF: 0)
     204:	2f010000 	svccs	0x00010000
     208:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     20c:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
     210:	2f657661 	svccs	0x00657661
     214:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
     218:	7463652f 	strbtvc	r6, [r3], #-1327	; 0xfffffad1
     21c:	6f662f66 	svcvs	0x00662f66
     220:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
     224:	2f656d6f 	svccs	0x00656d6f
     228:	61647264 	cmnvs	r4, r4, ror #4
     22c:	652f6576 	strvs	r6, [pc, #-1398]!	; fffffcbe <_STACK_TOP_+0xdfff7cc2>
     230:	2f626f66 	svccs	0x00626f66
     234:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
     238:	68732f6c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     23c:	006c6c65 	rsbeq	r6, ip, r5, ror #24
     240:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 18c <vector_table+0x18c>
     244:	72642f65 	rsbvc	r2, r4, #404	; 0x194
     248:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
     24c:	6f66652f 	svcvs	0x0066652f
     250:	68732f62 	ldmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
     254:	2f6c6c65 	svccs	0x006c6c65
     258:	2f62696c 	svccs	0x0062696c
     25c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     260:	00006674 	andeq	r6, r0, r4, ror r6
     264:	72696170 	rsbvc	r6, r9, #112, 2
     268:	0100632e 	tsteq	r0, lr, lsr #6
     26c:	68730000 	ldmdavs	r3!, {}^	; <UNPREDICTABLE>
     270:	2e6c6c65 	cdpcs	12, 6, cr6, cr12, cr5, {3}
     274:	00020068 	andeq	r0, r2, r8, rrx
     278:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
     27c:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
     280:	00030068 	andeq	r0, r3, r8, rrx
     284:	21050000 	mrscs	r0, (UNDEF: 5)
     288:	40020500 	andmi	r0, r2, r0, lsl #10
     28c:	16000004 	strne	r0, [r0], -r4
     290:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     294:	20062106 	andcs	r2, r6, r6, lsl #2
     298:	053d2f06 	ldreq	r2, [sp, #-3846]!	; 0xfffff0fa
     29c:	02130601 	andseq	r0, r3, #1048576	; 0x100000
     2a0:	01010007 	tsteq	r1, r7
     2a4:	000000fa 	strdeq	r0, [r0], -sl
     2a8:	00460003 	subeq	r0, r6, r3
     2ac:	01020000 	mrseq	r0, (UNDEF: 2)
     2b0:	000d0efb 	strdeq	r0, [sp], -fp
     2b4:	01010101 	tsteq	r1, r1, lsl #2
     2b8:	01000000 	mrseq	r0, (UNDEF: 0)
     2bc:	2f010000 	svccs	0x00010000
     2c0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     2c4:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
     2c8:	2f657661 	svccs	0x00657661
     2cc:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
     2d0:	7463652f 	strbtvc	r6, [r3], #-1327	; 0xfffffad1
     2d4:	6f662f66 	svcvs	0x00662f66
     2d8:	6c702f62 	ldclvs	15, cr2, [r0], #-392	; 0xfffffe78
     2dc:	6f667461 	svcvs	0x00667461
     2e0:	752f6d72 	strvc	r6, [pc, #-3442]!	; fffff576 <_STACK_TOP_+0xdfff757a>
     2e4:	00747261 	rsbseq	r7, r4, r1, ror #4
     2e8:	72617500 	rsbvc	r7, r1, #0, 10
     2ec:	00632e74 	rsbeq	r2, r3, r4, ror lr
     2f0:	00000001 	andeq	r0, r0, r1
     2f4:	05001405 	streq	r1, [r0, #-1029]	; 0xfffffbfb
     2f8:	00045c02 	andeq	r5, r4, r2, lsl #24
     2fc:	01120300 	tsteq	r2, r0, lsl #6
     300:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     304:	01040200 	mrseq	r0, R12_usr
     308:	09052206 	stmdbeq	r5, {r1, r2, r9, sp}
     30c:	01040200 	mrseq	r0, R12_usr
     310:	000b0511 	andeq	r0, fp, r1, lsl r5
     314:	06010402 	streq	r0, [r1], -r2, lsl #8
     318:	00090501 	andeq	r0, r9, r1, lsl #10
     31c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
     320:	3f060305 	svccc	0x00060305
     324:	01060b05 	tsteq	r6, r5, lsl #22
     328:	2f060305 	svccs	0x00060305
     32c:	01060605 	tsteq	r6, r5, lsl #12
     330:	05300105 	ldreq	r0, [r0, #-261]!	; 0xfffffefb
     334:	061f0605 	ldreq	r0, [pc], -r5, lsl #12
     338:	2f010520 	svccs	0x00010520
     33c:	00061105 	andeq	r1, r6, r5, lsl #2
     340:	04800205 	streq	r0, [r0], #517	; 0x205
     344:	05140000 	ldreq	r0, [r4, #-0]
     348:	0a051303 	beq	144f5c <__ROM_SIZE__+0x104f5c>
     34c:	06050106 	streq	r0, [r5], -r6, lsl #2
     350:	001d052e 	andseq	r0, sp, lr, lsr #10
     354:	06010402 	streq	r0, [r1], -r2, lsl #8
     358:	0024053c 	eoreq	r0, r4, ip, lsr r5
     35c:	06010402 	streq	r0, [r1], -r2, lsl #8
     360:	3e0a0501 	cfsh32cc	mvfx0, mvfx10, #1
     364:	052f0105 	streq	r0, [pc, #-261]!	; 267 <vector_table+0x267>
     368:	054c0616 	strbeq	r0, [ip, #-1558]	; 0xfffff9ea
     36c:	0b051403 	bleq	145380 <__ROM_SIZE__+0x105380>
     370:	03050106 	movweq	r0, #20742	; 0x5106
     374:	0c053f06 	stceq	15, cr3, [r5], {6}
     378:	03050106 	movweq	r0, #20742	; 0x5106
     37c:	0c052f06 	stceq	15, cr2, [r5], {6}
     380:	03050106 	movweq	r0, #20742	; 0x5106
     384:	0a053106 	beq	14c7a4 <__ROM_SIZE__+0x10c7a4>
     388:	03050106 	movweq	r0, #20742	; 0x5106
     38c:	0c053106 	stfeqs	f3, [r5], {6}
     390:	03050106 	movweq	r0, #20742	; 0x5106
     394:	0b053106 	bleq	14c7b4 <__ROM_SIZE__+0x10c7b4>
     398:	01050106 	tsteq	r5, r6, lsl #2
     39c:	0004023d 	andeq	r0, r4, sp, lsr r2
     3a0:	00fb0101 	rscseq	r0, fp, r1, lsl #2
     3a4:	00030000 	andeq	r0, r3, r0
     3a8:	00000047 	andeq	r0, r0, r7, asr #32
     3ac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     3b0:	0101000d 	tsteq	r1, sp
     3b4:	00000101 	andeq	r0, r0, r1, lsl #2
     3b8:	00000100 	andeq	r0, r0, r0, lsl #2
     3bc:	6f682f01 	svcvs	0x00682f01
int car_mesg(int argc, char** argv) {
     3c0:	642f656d 	strtvs	r6, [pc], #-1389	; 3c8 <car_mesg+0x8>
     3c4:	76616472 			; <UNDEFINED> instruction: 0x76616472
    printf("Received the message:");
     3c8:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
    for (ctr = 1; ctr < argc; ctr++) {
     3cc:	652f626f 	strvs	r6, [pc, #-623]!	; 165 <vector_table+0x165>
        printf(" %s", argv[ctr]);
     3d0:	2f667463 	svccs	0x00667463
     3d4:	2f626f66 	svccs	0x00626f66
     3d8:	74616c70 	strbtvc	r6, [r1], #-3184	; 0xfffff390
    for (ctr = 1; ctr < argc; ctr++) {
     3dc:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    printf("\n");
     3e0:	7261752f 	rsbvc	r7, r1, #197132288	; 0xbc00000
     3e4:	75000074 	strvc	r0, [r0, #-116]	; 0xffffff8c
    if (argc > 0) {
     3e8:	32747261 	rsbscc	r7, r4, #268435462	; 0x10000006
}
     3ec:	0100632e 	tsteq	r0, lr, lsr #6
        if (strcmp(argv[1], "PING_REPLY") == 0) {
     3f0:	05000000 	streq	r0, [r0, #-0]
     3f4:	02050015 	andeq	r0, r5, #21
            printf("Got a ping reply.\n");
     3f8:	000004c0 	andeq	r0, r0, r0, asr #9
     3fc:	06011203 	streq	r1, [r1], -r3, lsl #4
            printf("strcmp didn't match %s\n", argv[1]);
     400:	00050501 	andeq	r0, r5, r1, lsl #10
     404:	06010402 	streq	r0, [r1], -r2, lsl #8
     408:	00090522 	andeq	r0, r9, r2, lsr #10
     40c:	11010402 	tstne	r1, r2, lsl #8
     410:	02000b05 	andeq	r0, r0, #5120	; 0x1400
     414:	01060104 	tsteq	r6, r4, lsl #2
     418:	02000905 	andeq	r0, r0, #81920	; 0x14000
     41c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
     420:	053f0603 	ldreq	r0, [pc, #-1539]!	; fffffe25 <_STACK_TOP_+0xdfff7e29>
int ping(int argc, char** argv) {
     424:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    printf("Pinging the car.\n");
     428:	052f0603 	streq	r0, [pc, #-1539]!	; fffffe2d <_STACK_TOP_+0xdfff7e31>
    printf2("FOB_MESG PING\n");
     42c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
     430:	05053001 	streq	r3, [r5, #-1]
}
     434:	20061f06 	andcs	r1, r6, r6, lsl #30
     438:	052f0105 	streq	r0, [pc, #-261]!	; 33b <vector_table+0x33b>
     43c:	05000612 	streq	r0, [r0, #-1554]	; 0xfffff9ee
int pair(int argc, char** argv) {
     440:	0004e402 	andeq	lr, r4, r2, lsl #8
    printf("Sending a pair request.\n");
     444:	03051400 	movweq	r1, #21504	; 0x5400
    printf2("FOB_MESG PAIR\n");
     448:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
     44c:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
}
     450:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
     454:	3c060104 	stfccs	f0, [r6], {4}
     458:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
void uputc(char c) {
     45c:	01060104 	tsteq	r6, r4, lsl #2
  while ((UARTFR >> 5) & 1)
     460:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
     464:	17052f01 	strne	r2, [r5, -r1, lsl #30]
  UART_DR = c;
     468:	03054c06 	movweq	r4, #23558	; 0x5c06
  if (c == '\n')
     46c:	060c0514 			; <UNDEFINED> instruction: 0x060c0514
}
     470:	06030501 	streq	r0, [r3], -r1, lsl #10
    uputc('\r');
     474:	060d053f 			; <UNDEFINED> instruction: 0x060d053f
}
     478:	06030501 	streq	r0, [r3], -r1, lsl #10
     47c:	060d052f 	streq	r0, [sp], -pc, lsr #10
  if (!((UARTFR >> 4) & 1)) return UART_DR;
     480:	06030501 	streq	r0, [r3], -r1, lsl #10
     484:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
     488:	06030501 	streq	r0, [r3], -r1, lsl #10
     48c:	060d0531 			; <UNDEFINED> instruction: 0x060d0531
  return -1;
     490:	06030501 	streq	r0, [r3], -r1, lsl #10
}
     494:	060c0531 			; <UNDEFINED> instruction: 0x060c0531
     498:	3d010501 	cfstr32cc	mvfx0, [r1, #-4]
  UARTCTL = 0;
     49c:	01000402 	tsteq	r0, r2, lsl #8
     4a0:	00011601 	andeq	r1, r1, r1, lsl #12
  UARTIBRD = 8;
     4a4:	ac000300 	stcge	3, cr0, [r0], {-0}
  UARTFBRD = 44;
     4a8:	02000000 	andeq	r0, r0, #0
  UARTCC = 0;
     4ac:	0d0efb01 	vstreq	d15, [lr, #-4]
  UARTLCRH = 0x60;
     4b0:	01010100 	mrseq	r0, (UNDEF: 17)
  UARTCTL = 0x301;
     4b4:	00000001 	andeq	r0, r0, r1
}
     4b8:	01000001 	tsteq	r0, r1
     4bc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 408 <car_mesg+0x48>
void u2putc(char c) {
     4c0:	72642f65 	rsbvc	r2, r4, #404	; 0x194
  while ((UART2FR >> 5) & 1)
     4c4:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
     4c8:	6f66652f 	svcvs	0x0066652f
  UART2_DR = c;
     4cc:	63652f62 	cmnvs	r5, #392	; 0x188
  if (c == '\n')
     4d0:	662f6674 			; <UNDEFINED> instruction: 0x662f6674
}
     4d4:	702f626f 	eorvc	r6, pc, pc, ror #4
    u2putc('\r');
     4d8:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
}
     4dc:	006d726f 	rsbeq	r7, sp, pc, ror #4
     4e0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 42c <ping+0x8>
  if (!((UART2FR >> 4) & 1)) return UART2_DR;
     4e4:	72642f65 	rsbvc	r2, r4, #404	; 0x194
     4e8:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
     4ec:	6f66652f 	svcvs	0x0066652f
     4f0:	63652f62 	cmnvs	r5, #392	; 0x188
  return -1;
     4f4:	662f6674 			; <UNDEFINED> instruction: 0x662f6674
}
     4f8:	702f626f 	eorvc	r6, pc, pc, ror #4
     4fc:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
  UART2CTL = 0;
     500:	2f6d726f 	svccs	0x006d726f
     504:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
  UART2IBRD = 8;
     508:	6f682f00 	svcvs	0x00682f00
  UART2FBRD = 44;
     50c:	642f656d 	strtvs	r6, [pc], #-1389	; 514 <uart2_init+0x14>
  UART2CC = 0;
     510:	76616472 			; <UNDEFINED> instruction: 0x76616472
  UART2LCRH = 0x60;
     514:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
  UART2CTL = 0x301;
     518:	732f626f 			; <UNDEFINED> instruction: 0x732f626f
}
     51c:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
     520:	6568732f 	strbvs	r7, [r8, #-815]!	; 0xfffffcd1
  RCGCUART |= 3;
     524:	00006c6c 	andeq	r6, r0, ip, ror #24
     528:	74616c70 	strbtvc	r6, [r1], #-3184	; 0xfffff390
     52c:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
     530:	0100632e 	tsteq	r0, lr, lsr #6
  RCGCGPIO |= 3;
     534:	61750000 	cmnvs	r5, r0
     538:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
     53c:	00000200 	andeq	r0, r0, r0, lsl #4
  GPIODEN = 0x03;
     540:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     544:	00682e32 	rsbeq	r2, r8, r2, lsr lr
  GPIOAFSEL = 0x03;
     548:	73000002 	movwvc	r0, #2
  GPIOPCTL |= 0x00000011;
     54c:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
     550:	0300682e 	movweq	r6, #2094	; 0x82e
     554:	05000000 	streq	r0, [r0, #-0]
  GPIODEN2 = 0x03;
     558:	02050012 	andeq	r0, r5, #18
     55c:	00000524 	andeq	r0, r0, r4, lsr #10
  GPIOAFSEL2 = 0x03;
     560:	05012103 	streq	r2, [r1, #-259]	; 0xfffffefd
  GPIOPCTL2 |= 0x00000011;
     564:	0c051503 	cfstr32eq	mvfx1, [r5], {3}
     568:	03050106 	movweq	r0, #20742	; 0x5106
     56c:	0c057606 	stceq	6, cr7, [r5], {6}
}
     570:	03050106 	movweq	r0, #20742	; 0x5106
     574:	0b056906 	bleq	15a994 <__ROM_SIZE__+0x11a994>
void platform_init() {
     578:	03050106 	movweq	r0, #20742	; 0x5106
    pin_setup();
     57c:	0d055906 	vstreq.16	s10, [r5, #-12]	; <UNPREDICTABLE>
    uart_init();
     580:	03050106 	movweq	r0, #20742	; 0x5106
    uart2_init();
     584:	0c052f06 	stceq	15, cr2, [r5], {6}
    set_read_char(ugetc);
     588:	03050106 	movweq	r0, #20742	; 0x5106
    set_read_char2(u2getc);
     58c:	0c056906 			; <UNDEFINED> instruction: 0x0c056906
     590:	03050106 	movweq	r0, #20742	; 0x5106
    set_write_char(uputc);
     594:	0e054b06 	vmlaeq.f64	d4, d5, d6
    set_write_char2(u2putc);
     598:	03050106 	movweq	r0, #20742	; 0x5106
     59c:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
}
     5a0:	01050106 	tsteq	r5, r6, lsl #2
     5a4:	06160567 	ldreq	r0, [r6], -r7, ror #10
     5a8:	21050550 	tstcs	r5, r0, asr r5
     5ac:	3d2f2f2f 	stccc	15, cr2, [pc, #-188]!	; 4f8 <u2getc+0x14>
     5b0:	01053d3d 	tsteq	r5, sp, lsr sp
  selected_mode = mode;
     5b4:	09023d06 	stmdbeq	r2, {r1, r2, r8, sl, fp, ip, sp}
  if (selected_mode == NONE) {
     5b8:	ab010100 	blge	409c0 <__ROM_SIZE__+0x9c0>
  out_buf_rgn.addr = addr;
     5bc:	03000000 	movweq	r0, #0
  out_buf_rgn.size = size / 2;
     5c0:	00007f00 	andeq	r7, r0, r0, lsl #30
  out_buf_rgn.curr_index = 0;
     5c4:	fb010200 	blx	40dce <__ROM_SIZE__+0xdce>
  inp_buf_rgn.addr = addr + size / 2;
     5c8:	01000d0e 	tsteq	r0, lr, lsl #26
  inp_buf_rgn.curr_index = 0;
     5cc:	00010101 	andeq	r0, r1, r1, lsl #2
  if (!(selected_mode & INP)) {
     5d0:	00010000 	andeq	r0, r1, r0
    out_buf_rgn.size = size;
     5d4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
  memset(addr, 0, size);
     5d8:	2f656d6f 	svccs	0x00656d6f
     5dc:	61647264 	cmnvs	r4, r4, ror #4
  } else if (!(selected_mode & OUT)) {
     5e0:	652f6576 	strvs	r6, [pc, #-1398]!	; 72 <vector_table+0x72>
     5e4:	2f626f66 	svccs	0x00626f66
    inp_buf_rgn.addr = addr;
     5e8:	66746365 	ldrbtvs	r6, [r4], -r5, ror #6
    inp_buf_rgn.size = size;
     5ec:	626f662f 	rsbvs	r6, pc, #49283072	; 0x2f00000
     5f0:	616c702f 	cmnvs	ip, pc, lsr #32
  if (!(selected_mode & INP)) {
     5f4:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
     5f8:	752f006d 	strvc	r0, [pc, #-109]!	; 593 <platform_init+0x1b>
     5fc:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 438 <ping+0x14>
  if (inp_buf_rgn.addr[inp_buf_rgn.curr_index] == 0) {
     600:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     604:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
  int val = inp_buf_rgn.addr[inp_buf_rgn.curr_index];
     608:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
  inp_buf_rgn.addr[inp_buf_rgn.curr_index] = 0;
     60c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
  inp_buf_rgn.curr_index++;
     610:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     614:	2e30312f 	rsfcssp	f3, f0, #10.0
  if (inp_buf_rgn.curr_index == inp_buf_rgn.size) {
     618:	2f312e33 	svccs	0x00312e33
}
     61c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    inp_buf_rgn.curr_index = 0;
     620:	00656475 	rsbeq	r6, r5, r5, ror r4
    return -1;
     624:	63657600 	cmnvs	r5, #0, 12
     628:	5f726f74 	svcpl	0x00726f74
    return -1;
     62c:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     630:	00632e65 	rsbeq	r2, r3, r5, ror #28
  if (!(selected_mode & OUT) || c == 0) {
     634:	73000001 	movwvc	r0, #1
     638:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     63c:	00682e74 	rsbeq	r2, r8, r4, ror lr
  out_buf_rgn.addr[out_buf_rgn.curr_index] = (uint8_t) c;
     640:	00000002 	andeq	r0, r0, r2
     644:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
  out_buf_rgn.curr_index++;
     648:	0005b002 	andeq	fp, r5, r2
  if (out_buf_rgn.curr_index == out_buf_rgn.size) {
     64c:	01160300 	tsteq	r6, r0, lsl #6
     650:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    out_buf_rgn.curr_index = 0;
     654:	05130104 	ldreq	r0, [r3, #-260]	; 0xfffffefc
     658:	04020005 	streq	r0, [r2], #-5
     65c:	09051301 	stmdbeq	r5, {r0, r8, r9, ip}
static void outstr(const char *str) {
     660:	01040200 	mrseq	r0, R12_usr
  while (*str != '\0') {
     664:	00010211 	andeq	r0, r1, r1, lsl r2
    __write_char__(*str);
     668:	01dd0101 	bicseq	r0, sp, r1, lsl #2
    str++;
     66c:	00030000 	andeq	r0, r3, r0
  while (*str != '\0') {
     670:	000000b3 	strheq	r0, [r0], -r3
}
     674:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     678:	0101000d 	tsteq	r1, sp
static bool printf_numbers(const char fmt, va_list *args, int l_count) {
     67c:	00000101 	andeq	r0, r0, r1, lsl #2
     680:	00000100 	andeq	r0, r0, r0, lsl #2
  switch (fmt) {
     684:	6f682f01 	svcvs	0x00682f01
     688:	642f656d 	strtvs	r6, [pc], #-1389	; 690 <printf_numbers+0x14>
     68c:	76616472 			; <UNDEFINED> instruction: 0x76616472
      if (l_count == 0) {
     690:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
     694:	732f626f 			; <UNDEFINED> instruction: 0x732f626f
        value = va_arg(*args, unsigned int);
     698:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
     69c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
      if (fmt == 'u') {
     6a0:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	; 0xffffff44
        if (value == 0) {
     6a4:	00676f6c 	rsbeq	r6, r7, ip, ror #30
          __write_char__(hextable[0]);
     6a8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     6ac:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
  return true;
     6b0:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
  switch (fmt) {
     6b4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      outstr("\nprintf-error\n");
     6b8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      return false;
     6bc:	61652d65 	cmnvs	r5, r5, ror #26
}
     6c0:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
      if (l_count == 0) {
     6c4:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
        value = va_arg(*args, int);
     6c8:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
     6cc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
      if (value < 0) {
     6d0:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
        num[num_len++] = hextable[value % 10];
     6d4:	2f656d6f 	svccs	0x00656d6f
     6d8:	61647264 	cmnvs	r4, r4, ror #4
     6dc:	652f6576 	strvs	r6, [pc, #-1398]!	; 16e <vector_table+0x16e>
     6e0:	2f626f66 	svccs	0x00626f66
     6e4:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
     6e8:	696c2f6c 	stmdbvs	ip!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     6ec:	74732f62 	ldrbtvc	r2, [r3], #-3938	; 0xfffff09e
     6f0:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     6f4:	656d0000 	strbvs	r0, [sp, #-0]!
        value = value / 10;
     6f8:	676f6c6d 	strbvs	r6, [pc, -sp, ror #24]!
      } while (value > 0);
     6fc:	0100632e 	tsteq	r0, lr, lsr #6
     700:	74730000 	ldrbtvc	r0, [r3], #-0
        __write_char__('-');
     704:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     708:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
        value = -value;
     70c:	656d0000 	strbvs	r0, [sp, #-0]!
        __write_char__(num[--num_len]);
     710:	676f6c6d 	strbvs	r6, [pc, -sp, ror #24]!
     714:	0100682e 	tsteq	r0, lr, lsr #16
     718:	74730000 	ldrbtvc	r0, [r3], #-0
     71c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     720:	0300682e 	movweq	r6, #2094	; 0x82e
      while (num_len > 0) {
     724:	05000000 	streq	r0, [r0, #-0]
  return true;
     728:	0205003d 	andeq	r0, r5, #61	; 0x3d
          num[num_len++] = hextable[value % 10];
     72c:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     730:	05011603 	streq	r1, [r1, #-1539]	; 0xfffff9fd
     734:	11051303 	tstne	r5, r3, lsl #6
     738:	03050106 	movweq	r0, #20742	; 0x5106
     73c:	06053006 	streq	r3, [r5], -r6
     740:	3d050106 	stfccs	f0, [r5, #-24]	; 0xffffffe8
     744:	0603051d 			; <UNDEFINED> instruction: 0x0603051d
     748:	06140527 	ldreq	r0, [r4], -r7, lsr #10
          value = value / 10;
     74c:	06030501 	streq	r0, [r3], -r1, lsl #10
        } while (value > 0);
     750:	061b0521 	ldreq	r0, [fp], -r1, lsr #10
        while (num_len > 0) {
     754:	20140501 	andscs	r0, r4, r1, lsl #10
          __write_char__(num[--num_len]);
     758:	21060305 	tstcs	r6, r5, lsl #6
     75c:	01061a05 	tsteq	r6, r5, lsl #20
     760:	30060305 	andcc	r0, r6, r5, lsl #6
     764:	01061b05 	tsteq	r6, r5, lsl #22
     768:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
     76c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
  return true;
     770:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
              __write_char__(hextable[val]);
     774:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     778:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
              leading_zero_ignored = true;
     77c:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
          while (start_bit >= 0) {
     780:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
            int val = (value >> start_bit) & 0xF;
     784:	053f0605 	ldreq	r0, [pc, #-1541]!	; 187 <vector_table+0x187>
            if (val || leading_zero_ignored) {
     788:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
     78c:	06280603 	strteq	r0, [r8], -r3, lsl #12
     790:	01052020 	tsteq	r5, r0, lsr #32
          bool leading_zero_ignored = false;
     794:	060a052f 	streq	r0, [sl], -pc, lsr #10
          int start_bit = LAST_NIBBLE_FIRST_BIT;
     798:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
  return true;
     79c:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
        return false;
     7a0:	053f0605 	ldreq	r0, [pc, #-1541]!	; 1a3 <vector_table+0x1a3>
        return false;
     7a4:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
     7a8:	052f0605 	streq	r0, [pc, #-1541]!	; 1ab <vector_table+0x1ab>
     7ac:	2e010616 	mcrcs	6, 0, r0, cr1, cr6, {0}
     7b0:	42061305 	andmi	r1, r6, #335544320	; 0x14000000
     7b4:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
     7b8:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
int printf(const char *fmt, ...) {
     7bc:	03052e06 	movweq	r2, #24070	; 0x5e06
     7c0:	12054006 	andne	r4, r5, #6
     7c4:	23050106 	movwcs	r0, #20742	; 0x5106
  va_start(args, fmt);
     7c8:	2017052e 	andscs	r0, r7, lr, lsr #10
  while (*fmt) {
     7cc:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
        if (*fmt == '%') {
     7d0:	05240603 	streq	r0, [r4, #-1539]!	; 0xfffff9fd
        __write_char__(*fmt);
     7d4:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
        fmt++;
     7d8:	052f0603 	streq	r0, [pc, #-1539]!	; 1dd <vector_table+0x1dd>
  while (*fmt) {
     7dc:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
    switch (state) {
     7e0:	052f0603 	streq	r0, [pc, #-1539]!	; 1e5 <vector_table+0x1e5>
     7e4:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
          fmt++;
     7e8:	053e0603 	ldreq	r0, [lr, #-1539]!	; 0xfffff9fd
          continue;
     7ec:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
     7f0:	01052006 	tsteq	r5, r6
     7f4:	06050533 			; <UNDEFINED> instruction: 0x06050533
     7f8:	061c051c 			; <UNDEFINED> instruction: 0x061c051c
     7fc:	030c0501 	movweq	r0, #50433	; 0xc501
     800:	05403c74 	strbeq	r3, [r0, #-3188]	; 0xfffff38c
        switch (*fmt) {
     804:	0e03061a 	mcreq	6, 0, r0, cr3, cr10, {0}
     808:	13030558 	movwne	r0, #13656	; 0x3558
     80c:	01061705 	tsteq	r6, r5, lsl #14
     810:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
            __write_char__(*fmt);
     814:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
     818:	03053c01 	movweq	r3, #23553	; 0x5c01
            state = CHECK_CH;
     81c:	0e052406 	cdpeq	4, 0, cr2, cr5, cr6, {0}
            break;
     820:	1f050106 	svcne	0x00050106
     824:	202c052e 	eorcs	r0, ip, lr, lsr #10
            outstr(va_arg(args, const char *));
     828:	21060305 	tstcs	r6, r5, lsl #6
     82c:	01061905 	tsteq	r6, r5, lsl #18
     830:	30060305 	andcc	r0, r6, r5, lsl #6
            fmt++;
     834:	01062c05 	tsteq	r6, r5, lsl #24
            break;
     838:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
            __write_char__(va_arg(args, int));
     83c:	05053101 	streq	r3, [r5, #-257]	; 0xfffffeff
     840:	1c051e06 	stcne	14, cr1, [r5], {6}
     844:	06020106 	streq	r0, [r2], -r6, lsl #2
            fmt++;
     848:	b2010100 	andlt	r0, r1, #0, 2
            break;
     84c:	03000003 	movweq	r0, #3
            if (*fmt == 'l') {
     850:	00008600 	andeq	r8, r0, r0, lsl #12
     854:	fb010200 	blx	4105e <__ROM_SIZE__+0x105e>
            if (printf_numbers(*fmt, &args, l_count)) {
     858:	01000d0e 	tsteq	r0, lr, lsl #26
     85c:	00010101 	andeq	r0, r1, r1, lsl #2
     860:	00010000 	andeq	r0, r1, r0
              state = CHECK_CH;
     864:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
              fmt++;
     868:	2f656d6f 	svccs	0x00656d6f
              l_count++;
     86c:	61647264 	cmnvs	r4, r4, ror #4
            if (printf_numbers(*fmt, &args, 0)) {
     870:	652f6576 	strvs	r6, [pc, #-1398]!	; 302 <vector_table+0x302>
     874:	2f626f66 	svccs	0x00626f66
              fmt++;
     878:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
              break;
     87c:	696c2f6c 	stmdbvs	ip!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
            return -1;
     880:	72702f62 	rsbsvc	r2, r0, #392	; 0x188
}
     884:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
     888:	73752f00 	cmnvc	r5, #0, 30
            return -1;
     88c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     890:	63672f62 	cmnvs	r7, #392	; 0x188
     894:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
int printf2(const char *fmt, ...) {
     898:	6f6e2d6d 	svcvs	0x006e2d6d
     89c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    __write_char2__(*fmt);
     8a0:	2f696261 	svccs	0x00696261
     8a4:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
  while (*fmt != '\0') {
     8a8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
     8ac:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     8b0:	00006564 	andeq	r6, r0, r4, ror #10
     8b4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     8b8:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
{
     8bc:	00000100 	andeq	r0, r0, r0, lsl #2
  for (i = 0; i < Nk; ++i)
     8c0:	61647473 	smcvs	18243	; 0x4743
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
     8c4:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
     8c8:	00000200 	andeq	r0, r0, r0, lsl #4
     8cc:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
     8d0:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
     8d4:	00003e6e 	andeq	r3, r0, lr, ror #28
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
     8d8:	05000000 	streq	r0, [r0, #-0]
     8dc:	02050025 	andeq	r0, r5, #37	; 0x25
     8e0:	00000660 	andeq	r0, r0, r0, ror #12
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
     8e4:	06012a03 	streq	r2, [r1], -r3, lsl #20
  for (i = 0; i < Nk; ++i)
     8e8:	06030501 	streq	r0, [r3], -r1, lsl #10
     8ec:	0609052f 	streq	r0, [r9], -pc, lsr #10
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     8f0:	06050501 	streq	r0, [r5], -r1, lsl #10
    j = i * 4; k=(i - Nk) * 4;
     8f4:	08053d21 	stmdaeq	r5, {r0, r5, r8, sl, fp, ip, sp}
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
     8f8:	09050106 	stmdbeq	r5, {r1, r2, r8}
     8fc:	0a051e06 	beq	14811c <__ROM_SIZE__+0x10811c>
     900:	09050106 	stmdbeq	r5, {r1, r2, r8}
     904:	32010520 	andcc	r0, r1, #32, 10	; 0x8000000
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
     908:	06480520 	strbeq	r0, [r8], -r0, lsr #10
     90c:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
     910:	14000006 	strne	r0, [r0], #-6
     914:	03050106 	movweq	r0, #20742	; 0x5106
     918:	14133d06 	ldrne	r3, [r3], #-3334	; 0xfffff2fa
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
     91c:	3b030705 	blcc	c2538 <__ROM_SIZE__+0x82538>
     920:	0a051474 	beq	145af8 <__ROM_SIZE__+0x105af8>
     924:	09050106 	stmdbeq	r5, {r1, r2, r8}
     928:	0f053d06 	svceq	0x00053d06
     92c:	052e0106 	streq	r0, [lr, #-262]!	; 0xfffffefa
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
     930:	11030607 	tstne	r3, r7, lsl #12
     934:	060a052e 	streq	r0, [sl], -lr, lsr #10
     938:	06090501 	streq	r0, [r9], -r1, lsl #10
  for (i = Nk; i < Nb * (Nr + 1); ++i)
     93c:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
      k = (i - 1) * 4;
     940:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
      tempa[0]=RoundKey[k + 0];
     944:	062f060b 	strteq	r0, [pc], -fp, lsl #12
     948:	0a05203c 	beq	148a40 <__ROM_SIZE__+0x108a40>
      tempa[1]=RoundKey[k + 1];
     94c:	2e011603 	cfmadd32cs	mvax0, mvfx1, mvfx1, mvfx3
     950:	90030305 	andls	r0, r3, r5, lsl #6
      tempa[2]=RoundKey[k + 2];
     954:	0705017f 	smlsdxeq	r5, pc, r1, r0	; <UNPREDICTABLE>
     958:	00ed0306 	rsceq	r0, sp, r6, lsl #6
      tempa[3]=RoundKey[k + 3];
     95c:	0620062e 	strteq	r0, [r0], -lr, lsr #12
     960:	060e052f 	streq	r0, [lr], -pc, lsr #10
    if (i % Nk == 0)
     964:	23010501 	movwcs	r0, #5377	; 0x1501
     968:	03060705 	movweq	r0, #26373	; 0x6705
        tempa[0] = tempa[1];
     96c:	142e7f9a 	strtne	r7, [lr], #-3994	; 0xfffff066
        tempa[1] = tempa[2];
     970:	01060a05 	tsteq	r6, r5, lsl #20
        tempa[2] = tempa[3];
     974:	2f060905 	svccs	0x00060905
        tempa[3] = u8tmp;
     978:	01060f05 	tsteq	r6, r5, lsl #30
        tempa[0] = getSBoxValue(tempa[0]);
     97c:	0607052e 	streq	r0, [r7], -lr, lsr #10
     980:	052e1203 	streq	r1, [lr, #-515]!	; 0xfffffdfd
        tempa[1] = getSBoxValue(tempa[1]);
     984:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
     988:	04020007 	streq	r0, [r2], #-7
        tempa[2] = getSBoxValue(tempa[2]);
     98c:	05330601 	ldreq	r0, [r3, #-1537]!	; 0xfffff9ff
     990:	04020009 	streq	r0, [r2], #-9
        tempa[3] = getSBoxValue(tempa[3]);
     994:	29051301 	stmdbcs	r5, {r0, r8, r9, ip}
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
     998:	01040200 	mrseq	r0, R12_usr
     99c:	22050106 	andcs	r0, r5, #-2147483647	; 0x80000001
     9a0:	01040200 	mrseq	r0, R12_usr
     9a4:	001805ac 	andseq	r0, r8, ip, lsr #11
}
     9a8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
     9ac:	01040200 	mrseq	r0, R12_usr
{
     9b0:	0009054a 	andeq	r0, r9, sl, asr #10
  for (i = 0; i < 4; ++i)
     9b4:	06010402 	streq	r0, [r1], -r2, lsl #8
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
     9b8:	000f052f 	andeq	r0, pc, pc, lsr #10
     9bc:	06010402 	streq	r0, [r1], -r2, lsl #8
     9c0:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
     9c4:	05210601 	streq	r0, [r1, #-1537]!	; 0xfffff9ff
     9c8:	04020007 	streq	r0, [r2], #-7
     9cc:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
     9d0:	79030609 	stmdbvc	r3, {r0, r3, r9, sl}
    for (j = 0; j < 4; ++j)
     9d4:	063c063c 			; <UNDEFINED> instruction: 0x063c063c
     9d8:	060f0521 	streq	r0, [pc], -r1, lsr #10
  for (i = 0; i < 4; ++i)
     9dc:	09052001 	stmdbeq	r5, {r0, sp}
     9e0:	20090306 	andcs	r0, r9, r6, lsl #6
     9e4:	0d052006 	stceq	0, cr2, [r5, #-24]	; 0xffffffe8
    for (j = 0; j < 4; ++j)
     9e8:	0a058f06 	beq	164608 <__ROM_SIZE__+0x124608>
}
     9ec:	00c60306 	sbceq	r0, r6, r6, lsl #6
  for (i = 0; i < 4; ++i)
     9f0:	0009052e 	andeq	r0, r9, lr, lsr #10
    for (j = 0; j < 4; ++j)
     9f4:	06010402 	streq	r0, [r1], -r2, lsl #8
     9f8:	052e6003 	streq	r6, [lr, #-3]!
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
     9fc:	0402000b 	streq	r0, [r2], #-11
     a00:	2b051301 	blcs	14560c <__ROM_SIZE__+0x10560c>
     a04:	01040200 	mrseq	r0, R12_usr
     a08:	24050106 	strcs	r0, [r5], #-262	; 0xfffffefa
     a0c:	01040200 	mrseq	r0, R12_usr
    for (j = 0; j < 4; ++j)
     a10:	001a0590 	mulseq	sl, r0, r5
     a14:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
  for (i = 0; i < 4; ++i)
     a18:	01040200 	mrseq	r0, R12_usr
     a1c:	000b054a 	andeq	r0, fp, sl, asr #10
    for (j = 0; j < 4; ++j)
     a20:	06010402 	streq	r0, [r1], -r2, lsl #8
}
     a24:	0011052f 	andseq	r0, r1, pc, lsr #10
  for (i = 0; i < 4; ++i)
     a28:	06010402 	streq	r0, [r1], -r2, lsl #8
     a2c:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
     a30:	05210601 	streq	r0, [r1, #-1537]!	; 0xfffff9ff
  temp           = (*state)[0][1];
     a34:	04020009 	streq	r0, [r2], #-9
  (*state)[0][1] = (*state)[1][1];
     a38:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
  (*state)[1][1] = (*state)[2][1];
     a3c:	0530060f 	ldreq	r0, [r0, #-1551]!	; 0xfffff9f1
  (*state)[2][1] = (*state)[3][1];
     a40:	20062f0b 	andcs	r2, r6, fp, lsl #30
  temp           = (*state)[0][2];
     a44:	030a059e 	movweq	r0, #42398	; 0xa59e
  (*state)[0][2] = (*state)[2][2];
     a48:	0f05011a 	svceq	0x0005011a
  temp           = (*state)[1][2];
     a4c:	2e730306 	cdpcs	3, 7, cr0, cr3, cr6, {0}
  (*state)[1][2] = (*state)[3][2];
     a50:	06240513 			; <UNDEFINED> instruction: 0x06240513
  temp           = (*state)[0][3];
     a54:	060d0557 			; <UNDEFINED> instruction: 0x060d0557
  (*state)[0][3] = (*state)[3][3];
     a58:	06170523 	ldreq	r0, [r7], -r3, lsr #10
  (*state)[3][3] = (*state)[2][3];
     a5c:	11052001 	tstne	r5, r1
  (*state)[2][3] = (*state)[1][3];
     a60:	017a0306 	cmneq	sl, r6, lsl #6
}
     a64:	052f0d05 	streq	r0, [pc, #-3333]!	; fffffd67 <_STACK_TOP_+0xdfff7d6b>
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
     a68:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
     a6c:	052f060d 	streq	r0, [pc, #-1549]!	; 467 <uputc+0xb>
     a70:	2e010610 	mcrcs	6, 0, r0, cr1, cr0, {0}
}
     a74:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
{
     a78:	00200104 	eoreq	r0, r0, r4, lsl #2
     a7c:	3c010402 	cfstrscc	mvf0, [r1], {2}
  for (i = 0; i < 4; ++i)
     a80:	050e1005 	streq	r1, [lr, #-5]
    t   = (*state)[i][0];
     a84:	20201f0f 	eorcs	r1, r0, pc, lsl #30
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
     a88:	13030a05 	movwne	r0, #14853	; 0x3a05
     a8c:	03100501 	tsteq	r0, #4194304	; 0x400000
     a90:	202e7fac 	eorcs	r7, lr, ip, lsr #31
     a94:	01300320 	teqeq	r0, r0, lsr #6
     a98:	06220520 	strteq	r0, [r2], -r0, lsr #10
     a9c:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
     aa0:	03000007 	movweq	r0, #7
     aa4:	01060127 	tsteq	r6, r7, lsr #2
     aa8:	67060305 	strvs	r0, [r6, -r5, lsl #6]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
     aac:	05221413 	streq	r1, [r2, #-1043]!	; 0xfffffbed
     ab0:	050d0610 	streq	r0, [sp, #-1552]	; 0xfffff9f0
     ab4:	23062509 	movwcs	r2, #25865	; 0x6509
     ab8:	01060c05 	tsteq	r6, r5, lsl #24
     abc:	33060905 	movwcc	r0, #26885	; 0x6905
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
     ac0:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
     ac4:	06090501 	streq	r0, [r9], -r1, lsl #10
     ac8:	01760321 	cmneq	r6, r1, lsr #6
     acc:	01060a05 	tsteq	r6, r5, lsl #20
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
     ad0:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
     ad4:	052f0605 	streq	r0, [pc, #-1541]!	; 4d7 <u2putc+0x17>
     ad8:	05134d0b 	ldreq	r4, [r3, #-3339]	; 0xfffff2f5
     adc:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
  for (i = 0; i < 4; ++i)
     ae0:	0521060b 	streq	r0, [r1, #-1547]!	; 0xfffff9f5
     ae4:	05100611 	ldreq	r0, [r0, #-1553]	; 0xfffff9ef
}
     ae8:	0306220b 	movweq	r2, #25099	; 0x620b
{
     aec:	0e052009 	cdpeq	0, 0, cr2, cr5, cr9, {0}
     af0:	0f050106 	svceq	0x00050106
  for (i = 0; i < 4; ++i)
     af4:	10051f06 	andne	r1, r5, r6, lsl #30
    a = (*state)[i][0];
     af8:	0f050106 	svceq	0x00050106
     afc:	00260520 	eoreq	r0, r6, r0, lsr #10
    b = (*state)[i][1];
     b00:	20010402 	andcs	r0, r1, r2, lsl #8
     b04:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    c = (*state)[i][2];
     b08:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
     b0c:	04020036 	streq	r0, [r2], #-54	; 0xffffffca
     b10:	09052e02 	stmdbeq	r5, {r1, r9, sl, fp, sp}
     b14:	0d053206 	sfmeq	f3, 4, [r5, #-24]	; 0xffffffe8
     b18:	10053d92 	mulne	r5, r2, sp
     b1c:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     b20:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
     b24:	05110613 	ldreq	r0, [r1, #-1555]	; 0xfffff9ed
     b28:	0620210d 	strteq	r2, [r0], -sp, lsl #2
     b2c:	674a0903 	strbvs	r0, [sl, -r3, lsl #18]
     b30:	01061005 	tsteq	r6, r5
     b34:	21060d05 	tstcs	r6, r5, lsl #26
     b38:	06130513 			; <UNDEFINED> instruction: 0x06130513
     b3c:	210d0511 	tstcs	sp, r1, lsl r5
     b40:	20770306 	rsbscs	r0, r7, r6, lsl #6
     b44:	2e061c05 	cdpcs	12, 0, cr1, cr6, cr5, {0}
     b48:	063c0d05 	ldrteq	r0, [ip], -r5, lsl #26
     b4c:	0610052f 	ldreq	r0, [r0], -pc, lsr #10
     b50:	060d0501 	streq	r0, [sp], -r1, lsl #10
     b54:	13051321 	movwne	r1, #21281	; 0x5321
     b58:	0d051106 	stfeqs	f1, [r5, #-24]	; 0xffffffe8
     b5c:	13280621 			; <UNDEFINED> instruction: 0x13280621
     b60:	01061005 	tsteq	r6, r5
     b64:	21060d05 	tstcs	r6, r5, lsl #26
     b68:	01061105 	tsteq	r6, r5, lsl #2
     b6c:	05201005 	streq	r1, [r0, #-5]!
     b70:	0d052c11 	stceq	12, cr2, [r5, #-68]	; 0xffffffbc
     b74:	11052606 	tstne	r5, r6, lsl #12
     b78:	10050106 	andne	r0, r5, r6, lsl #2
     b7c:	060f054a 	streq	r0, [pc], -sl, asr #10
     b80:	12051321 	andne	r1, r5, #-2080374784	; 0x84000000
     b84:	0f050106 	svceq	0x00050106
     b88:	15052106 	strne	r2, [r5, #-262]	; 0xfffffefa
     b8c:	0f051006 	svceq	0x00051006
     b90:	7a030622 	bvc	c2420 <__ROM_SIZE__+0x82420>
     b94:	12051320 	andne	r1, r5, #32, 6	; 0x80000000
     b98:	16050106 	strne	r0, [r5], -r6, lsl #2
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
     b9c:	0d052e1f 	stceq	14, cr2, [r5, #-124]	; 0xffffff84
     ba0:	010b0306 	tsteq	fp, r6, lsl #6
     ba4:	01061105 	tsteq	r6, r5, lsl #2
     ba8:	054a1005 	strbeq	r1, [sl, #-5]
     bac:	1321060f 			; <UNDEFINED> instruction: 0x1321060f
     bb0:	01061205 	tsteq	r6, r5, lsl #4
     bb4:	21060f05 	tstcs	r6, r5, lsl #30
     bb8:	10061505 	andne	r1, r6, r5, lsl #10
     bbc:	05220f05 	streq	r0, [r2, #-3845]!	; 0xfffff0fb
     bc0:	207a0314 	rsbscs	r0, sl, r4, lsl r3
     bc4:	0301052e 	movweq	r0, #5422	; 0x152e
     bc8:	14050111 	strne	r0, [r5], #-273	; 0xfffffeef
     bcc:	05587703 	ldrbeq	r7, [r8, #-1795]	; 0xfffff8fd
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
     bd0:	16030623 	strne	r0, [r3], -r3, lsr #12
     bd4:	05010666 	streq	r0, [r1, #-1638]	; 0xfffff99a
     bd8:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
     bdc:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
     be0:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
     be4:	01060805 	tsteq	r6, r5, lsl #16
     be8:	1e060905 	vmlane.f16	s0, s12, s10	; <UNPREDICTABLE>
     bec:	01060a05 	tsteq	r6, r5, lsl #20
     bf0:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
     bf4:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
     bf8:	2e130601 	cfmsub32cs	mvax0, mvfx0, mvfx3, mvfx1
     bfc:	01000502 	tsteq	r0, r2, lsl #10
     c00:	000b1f01 	andeq	r1, fp, r1, lsl #30
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
     c04:	bb000300 	bllt	180c <cmd_end_+0x7c>
     c08:	02000000 	andeq	r0, r0, #0
     c0c:	0d0efb01 	vstreq	d15, [lr, #-4]
     c10:	01010100 	mrseq	r0, (UNDEF: 17)
     c14:	00000001 	andeq	r0, r0, r1
     c18:	01000001 	tsteq	r0, r1
     c1c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; b68 <InvMixColumns+0x7e>
     c20:	72642f65 	rsbvc	r2, r4, #404	; 0x194
     c24:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
     c28:	6f66652f 	svcvs	0x0066652f
     c2c:	68732f62 	ldmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
     c30:	2f6c6c65 	svccs	0x006c6c65
     c34:	2f62696c 	svccs	0x0062696c
     c38:	796e6974 	stmdbvc	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}^
     c3c:	7365612d 	cmnvc	r5, #1073741835	; 0x4000000b
  for (i = 0; i < 4; ++i)
     c40:	73752f00 	cmnvc	r5, #0, 30
     c44:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     c48:	63672f62 	cmnvs	r7, #392	; 0x188
}
     c4c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
  for (i = 0; i < 4; ++i)
     c50:	6f6e2d6d 	svcvs	0x006e2d6d
     c54:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    for (j = 0; j < 4; ++j)
     c58:	2f696261 	svccs	0x00696261
{
     c5c:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
     c60:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
     c64:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     c68:	2f006564 	svccs	0x00006564
     c6c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     c70:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
    for (j = 0; j < 4; ++j)
     c74:	2f657661 	svccs	0x00657661
     c78:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
  for (i = 0; i < 4; ++i)
     c7c:	6568732f 	strbvs	r7, [r8, #-815]!	; 0xfffffcd1
     c80:	6c2f6c6c 	stcvs	12, cr6, [pc], #-432	; ad8 <MixColumns+0x60>
    for (j = 0; j < 4; ++j)
     c84:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
}
     c88:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
  for (i = 0; i < 4; ++i)
     c8c:	61000067 	tstvs	r0, r7, rrx
     c90:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
     c94:	00000100 	andeq	r0, r0, r0, lsl #2
  temp = (*state)[3][1];
     c98:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
  (*state)[3][1] = (*state)[2][1];
     c9c:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
  (*state)[2][1] = (*state)[1][1];
     ca0:	00000200 	andeq	r0, r0, r0, lsl #4
  (*state)[1][1] = (*state)[0][1];
     ca4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
  temp = (*state)[0][2];
     ca8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  (*state)[0][2] = (*state)[2][2];
     cac:	00000200 	andeq	r0, r0, r0, lsl #4
  temp = (*state)[1][2];
     cb0:	2e736561 	cdpcs	5, 7, cr6, cr3, cr1, {3}
  (*state)[1][2] = (*state)[3][2];
     cb4:	00010068 	andeq	r0, r1, r8, rrx
  temp = (*state)[0][3];
     cb8:	72747300 	rsbsvc	r7, r4, #0, 6
  (*state)[0][3] = (*state)[1][3];
     cbc:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
  (*state)[1][3] = (*state)[2][3];
     cc0:	00030068 	andeq	r0, r3, r8, rrx
  (*state)[2][3] = (*state)[3][3];
     cc4:	01050000 	mrseq	r0, (UNDEF: 5)
}
     cc8:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
{
     ccc:	03000008 	movweq	r0, #8
  AddRoundKey(0, state, RoundKey);
     cd0:	06010192 			; <UNDEFINED> instruction: 0x06010192
     cd4:	06030501 	streq	r0, [r3], -r1, lsl #10
     cd8:	0515132f 	ldreq	r1, [r5, #-815]	; 0xfffffcd1
  for (round = 1; ; ++round)
     cdc:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    MixColumns(state);
     ce0:	05052003 	streq	r2, [r5, #-3]
    AddRoundKey(round, state, RoundKey);
     ce4:	03040200 	movweq	r0, #16896	; 0x4200
     ce8:	24052206 	strcs	r2, [r5], #-518	; 0xfffffdfa
     cec:	03040200 	movweq	r0, #16896	; 0x4200
  for (round = 1; ; ++round)
     cf0:	20050106 	andcs	r0, r5, r6, lsl #2
    SubBytes(state);
     cf4:	03040200 	movweq	r0, #16896	; 0x4200
    ShiftRows(state);
     cf8:	001b0520 	andseq	r0, fp, r0, lsr #10
     cfc:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    if (round == Nr) {
     d00:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
  AddRoundKey(Nr, state, RoundKey);
     d04:	2f060304 	svccs	0x00060304
     d08:	02002005 	andeq	r2, r0, #5
}
     d0c:	01060304 	tsteq	r6, r4, lsl #6
{
     d10:	02001b05 	andeq	r1, r0, #5120	; 0x1400
  AddRoundKey(Nr, state, RoundKey);
     d14:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
     d18:	04020005 	streq	r0, [r2], #-5
     d1c:	052f0603 	streq	r0, [pc, #-1539]!	; 721 <printf_numbers+0xa5>
  for (round = (Nr - 1); ; --round)
     d20:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    InvMixColumns(state);
     d24:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
  for (round = (Nr - 1); ; --round)
     d28:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
    InvShiftRows(state);
     d2c:	05053c03 	streq	r3, [r5, #-3075]	; 0xfffff3fd
     d30:	03040200 	movweq	r0, #16896	; 0x4200
    InvSubBytes(state);
     d34:	20052f06 	andcs	r2, r5, r6, lsl #30
    AddRoundKey(round, state, RoundKey);
     d38:	03040200 	movweq	r0, #16896	; 0x4200
     d3c:	1b050106 	blne	14115c <__ROM_SIZE__+0x10115c>
     d40:	03040200 	movweq	r0, #16896	; 0x4200
    if (round == 0) {
     d44:	0017052e 	andseq	r0, r7, lr, lsr #10
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
     d48:	06030402 	streq	r0, [r3], -r2, lsl #8
    buf[i] ^= Iv[i];
     d4c:	000f051b 	andeq	r0, pc, fp, lsl r5	; <UNPREDICTABLE>
     d50:	20010402 	andcs	r0, r1, r2, lsl #8
     d54:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
     d58:	01060104 	tsteq	r6, r4, lsl #2
     d5c:	09030a05 	stmdbeq	r3, {r0, r2, r9, fp}
}
     d60:	0005052e 	andeq	r0, r5, lr, lsr #10
  KeyExpansion(ctx->RoundKey, key);
     d64:	06020402 	streq	r0, [r2], -r2, lsl #8
}
     d68:	052e3203 	streq	r3, [lr, #-515]!	; 0xfffffdfd
{
     d6c:	04020007 	streq	r0, [r2], #-7
  KeyExpansion(ctx->RoundKey, key);
     d70:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     d74:	04020010 	streq	r0, [r2], #-16
     d78:	05200602 	streq	r0, [r0, #-1538]!	; 0xfffff9fe
     d7c:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
}
     d80:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
     d84:	04020005 	streq	r0, [r2], #-5
     d88:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
}
     d8c:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
{
     d90:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
  Cipher((state_t*)buf, ctx->RoundKey);
     d94:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     d98:	15052e02 	strne	r2, [r5, #-3586]	; 0xfffff1fe
{
     d9c:	02040200 	andeq	r0, r4, #0, 4
  InvCipher((state_t*)buf, ctx->RoundKey);
     da0:	0005052e 	andeq	r0, r5, lr, lsr #10
     da4:	06020402 	streq	r0, [r2], -r2, lsl #8
}
     da8:	001f054b 	andseq	r0, pc, fp, asr #10
{
     dac:	06020402 	streq	r0, [r2], -r2, lsl #8
     db0:	04020001 	streq	r0, [r2], #-1
  uint8_t *Iv = ctx->Iv;
     db4:	2e052e02 	cdpcs	14, 0, cr2, cr5, cr2, {0}
     db8:	02040200 	andeq	r0, r4, #0, 4
  for (i = 0; i < length; i += AES_BLOCKLEN)
     dbc:	000d052e 	andeq	r0, sp, lr, lsr #10
    XorWithIv(buf, Iv);
     dc0:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
    Cipher((state_t*)buf, ctx->RoundKey);
     dc4:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
     dc8:	05200204 	streq	r0, [r0, #-516]!	; 0xfffffdfc
  for (i = 0; i < length; i += AES_BLOCKLEN)
     dcc:	04020005 	streq	r0, [r2], #-5
    buf += AES_BLOCKLEN;
     dd0:	054b0602 	strbeq	r0, [fp, #-1538]	; 0xfffff9fe
  for (i = 0; i < length; i += AES_BLOCKLEN)
     dd4:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
     dd8:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
     ddc:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
}
     de0:	0d052e02 	stceq	14, cr2, [r5, #-8]
{
     de4:	02040200 	andeq	r0, r4, #0, 4
     de8:	0015052e 	andseq	r0, r5, lr, lsr #10
     dec:	20020402 	andcs	r0, r2, r2, lsl #8
  for (i = 0; i < length; i += AES_BLOCKLEN)
     df0:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
     df4:	4b060204 	blmi	18160c <__ROM_SIZE__+0x14160c>
     df8:	02001f05 	andeq	r1, r0, #5, 30
    InvCipher((state_t*)buf, ctx->RoundKey);
     dfc:	01060204 	tsteq	r6, r4, lsl #4
     e00:	02002e05 	andeq	r2, r0, #5, 28	; 0x50
    XorWithIv(buf, ctx->Iv);
     e04:	05200204 	streq	r0, [r0, #-516]!	; 0xfffffdfc
     e08:	0402000d 	streq	r0, [r2], #-13
     e0c:	15052e02 	strne	r2, [r5, #-3586]	; 0xfffff1fe
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
     e10:	02040200 	andeq	r0, r4, #0, 4
     e14:	00230520 	eoreq	r0, r3, r0, lsr #10
     e18:	06020402 	streq	r0, [r2], -r2, lsl #8
  for (i = 0; i < length; i += AES_BLOCKLEN)
     e1c:	052e4a03 	streq	r4, [lr, #-2563]!	; 0xfffff5fd
     e20:	04020010 	streq	r0, [r2], #-16
}
     e24:	03052001 	movweq	r2, #20481	; 0x5001
{
     e28:	01040200 	mrseq	r0, R12_usr
     e2c:	07050106 	streq	r0, [r5, -r6, lsl #2]
     e30:	0e053106 	adfeqs	f3, f5, f6
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     e34:	07050106 	streq	r0, [r5, -r6, lsl #2]
          ctx->Iv[bi] = 0;
     e38:	18052106 	stmdane	r5, {r1, r2, r8, sp}
     e3c:	0f050106 	svceq	0x00050106
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     e40:	0607052e 	streq	r0, [r7], -lr, lsr #10
      bi = 0;
     e44:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
    buf[i] = (buf[i] ^ buffer[bi]);
     e48:	0f052e01 	svceq	0x00052e01
     e4c:	06070520 	streq	r0, [r7], -r0, lsr #10
     e50:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
     e54:	2e0f0501 	cfsh32cs	mvfx0, mvfx15, #1
     e58:	2f060705 	svccs	0x00060705
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
     e5c:	01061805 	tsteq	r6, r5, lsl #16
     e60:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
     e64:	05320605 	ldreq	r0, [r2, #-1541]!	; 0xfffff9fb
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
     e68:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     e6c:	13430609 	movtne	r0, #13833	; 0x3609
     e70:	01061205 	tsteq	r6, r5, lsl #4
      Cipher((state_t*)buffer,ctx->RoundKey);
     e74:	2f060905 	svccs	0x00060905
     e78:	01061205 	tsteq	r6, r5, lsl #4
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
     e7c:	2f060905 	svccs	0x00060905
     e80:	01061205 	tsteq	r6, r5, lsl #4
        if (ctx->Iv[bi] == 255)
     e84:	2f060905 	svccs	0x00060905
     e88:	01061205 	tsteq	r6, r5, lsl #4
        ctx->Iv[bi] += 1;
     e8c:	36060905 	strcc	r0, [r6], -r5, lsl #18
     e90:	01061405 	tsteq	r6, r5, lsl #8
      bi = 0;
     e94:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
}
     e98:	052f0609 	streq	r0, [pc, #-1545]!	; 897 <printf+0xdb>
int atoi(const char* str) {
     e9c:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
  int res = 0;
     ea0:	09052e12 	stmdbeq	r5, {r1, r4, r9, sl, fp, sp}
    res = res * 10 + str[i] - '0';
     ea4:	14052f06 	strne	r2, [r5], #-3846	; 0xfffff0fa
     ea8:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
     eac:	0609052e 	streq	r0, [r9], -lr, lsr #10
  for (int i = 0; str[i] != '\0'; ++i) {
     eb0:	0614052f 	ldreq	r0, [r4], -pc, lsr #10
     eb4:	20120501 	andscs	r0, r2, r1, lsl #10
uint32_t atoh(const char* str) {
     eb8:	31060705 	tstcc	r6, r5, lsl #14
  uint32_t hex = 0;
     ebc:	01062105 	tsteq	r6, r5, lsl #2
    } else if (str[i] >= 'a' && str[i] <= 'f') {
     ec0:	054a1005 	strbeq	r1, [sl, #-5]
     ec4:	4a140301 	bmi	501ad0 <__ROM_SIZE__+0x4c1ad0>
     ec8:	02050006 	andeq	r0, r5, #6
    hex |= value;
     ecc:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
  for (uint32_t i = 0; str[i] != '\0'; i++) {
     ed0:	06011503 	streq	r1, [r1], -r3, lsl #10
     ed4:	06030501 	streq	r0, [r3], -r1, lsl #10
    if (str[i] >= '0' && str[i] <= '9') {
     ed8:	0a051321 	beq	145b64 <__ROM_SIZE__+0x105b64>
     edc:	03050106 	movweq	r0, #20742	; 0x5106
     ee0:	0007052e 	andeq	r0, r7, lr, lsr #10
      value = str[i] - '0';
     ee4:	06030402 	streq	r0, [r3], -r2, lsl #8
    } else if (str[i] >= 'A' && str[i] <= 'F') {
     ee8:	00330524 	eorseq	r0, r3, r4, lsr #10
     eec:	06030402 	streq	r0, [r3], -r2, lsl #8
      value = str[i] - 'A' + 10;
     ef0:	003e0501 	eorseq	r0, lr, r1, lsl #10
}
     ef4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
int r32(int argc, char *argv[]) {
     ef8:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
  if (argc < 2) {
     efc:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
  uint32_t addr = atoh(argv[1]);
     f00:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
     f04:	18052e03 	stmdane	r5, {r0, r1, r9, sl, fp, sp}
  printf("0x%x: 0x%x\n", addr, data);
     f08:	03040200 	movweq	r0, #16896	; 0x4200
     f0c:	02007206 	andeq	r7, r0, #1610612736	; 0x60000000
}
     f10:	20060304 	andcs	r0, r6, r4, lsl #6
    printf("Usage: %s <address> (in hex)\n", argv[0]);
     f14:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
     f18:	20060104 	andcs	r0, r6, r4, lsl #2
    return -1;
     f1c:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
     f20:	01060104 	tsteq	r6, r4, lsl #2
     f24:	02001605 	andeq	r1, r0, #5242880	; 0x500000
int w32(int argc, char *argv[]) {
     f28:	2c060204 	sfmcs	f0, 4, [r6], {4}
  if (argc < 3) {
     f2c:	02040200 	andeq	r0, r4, #0, 4
  uint32_t addr = atoh(argv[1]);
     f30:	0f052e06 	svceq	0x00052e06
     f34:	01040200 	mrseq	r0, R12_usr
  uint32_t data = atoh(argv[2]);
     f38:	03052e06 	movweq	r2, #24070	; 0x5e06
     f3c:	01040200 	mrseq	r0, R12_usr
  return 0;
     f40:	0c050106 	stfeqs	f0, [r5], {6}
    printf("Usage: %s <address> (in hex) <value> (in hex)\n", argv[0]);
     f44:	3301053e 	movwcc	r0, #5438	; 0x153e
     f48:	03052506 	movweq	r2, #21766	; 0x5506
    return -1;
     f4c:	0a051313 	beq	145ba0 <__ROM_SIZE__+0x105ba0>
     f50:	0f050106 	svceq	0x00050106
     f54:	03052006 	movweq	r2, #20486	; 0x5006
int read_mem(int argc, char *argv[]) {
     f58:	0c050106 	stfeqs	f0, [r5], {6}
  if (argc < 3) {
     f5c:	06110530 			; <UNDEFINED> instruction: 0x06110530
  uint32_t addr = atoh(argv[1]);
     f60:	06050520 	streq	r0, [r5], -r0, lsr #10
     f64:	2a010501 	bcs	42370 <__ROM_SIZE__+0x2370>
  uint32_t length = atoi(argv[2]);
     f68:	02000705 	andeq	r0, r0, #1310720	; 0x140000
     f6c:	26060304 	strcs	r0, [r6], -r4, lsl #6
  for (uint32_t i = 0, data = 0; i < length; i++) {
     f70:	02001805 	andeq	r1, r0, #327680	; 0x50000
    printf("Usage: %s <address> (in hex) <num_words> (in decimal)\n", argv[0]);
     f74:	01060304 	tsteq	r6, r4, lsl #6
     f78:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    return -1;
     f7c:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
     f80:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
    printf("0x%x: 0x%x\n", addr, data);
     f84:	002c0603 	eoreq	r0, ip, r3, lsl #12
     f88:	06030402 	streq	r0, [r3], -r2, lsl #8
    addr += 4;
     f8c:	00110520 	andseq	r0, r1, r0, lsr #10
  for (uint32_t i = 0, data = 0; i < length; i++) {
     f90:	06010402 	streq	r0, [r1], -r2, lsl #8
  return 0;
     f94:	00050520 	andeq	r0, r5, r0, lsr #10
}
     f98:	06010402 	streq	r0, [r1], -r2, lsl #8
     f9c:	00160501 	andseq	r0, r6, r1, lsl #10
{
     fa0:	06020402 	streq	r0, [r2], -r2, lsl #8
  if (argc < 4) {
     fa4:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
  uint32_t addr = atoh(argv[1]);
     fa8:	05200602 	streq	r0, [r0, #-1538]!	; 0xfffff9fe
     fac:	0402000f 	streq	r0, [r2], #-15
  uint32_t bit_loc = atoi(argv[2]);
     fb0:	05200602 	streq	r0, [r0, #-1538]!	; 0xfffff9fe
     fb4:	04020003 	streq	r0, [r2], #-3
  uint32_t bit_val = atoi(argv[3]);
     fb8:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
     fbc:	0520300c 	streq	r3, [r0, #-12]!
  if (bit_loc > 31) {
     fc0:	16052501 	strne	r2, [r5], -r1, lsl #10
  if (bit_val != 0 && bit_val != 1) {
     fc4:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
  uint32_t data = reg32(addr);
     fc8:	20202006 	eorcs	r2, r0, r6
  data = data | (bit_val << bit_loc);
     fcc:	03060105 	movweq	r0, #24837	; 0x6105
  data = data & ~(!bit_val << bit_loc);
     fd0:	03054a0d 	movweq	r4, #23053	; 0x5a0d
     fd4:	12051513 	andne	r1, r5, #79691776	; 0x4c00000
     fd8:	03050106 	movweq	r0, #20742	; 0x5106
  return 0;
     fdc:	1f052106 	svcne	0x00052106
    printf("Error: Invalid bit location argument\n");
     fe0:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
     fe4:	06030520 	streq	r0, [r3], -r0, lsr #10
    printf("Error: Invalid bit value argument\n");
     fe8:	061f0521 	ldreq	r0, [pc], -r1, lsr #10
     fec:	20120501 	andscs	r0, r2, r1, lsl #10
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)> <bit_value(0 or 1)>\n", argv[0]);
     ff0:	21060305 	tstcs	r6, r5, lsl #6
     ff4:	01061f05 	tsteq	r6, r5, lsl #30
  return -1;
     ff8:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
     ffc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    1000:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1004:	05230603 	streq	r0, [r3, #-1539]!	; 0xfffff9fd
{
    1008:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
  if (argc < 3) {
    100c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
  uint32_t addr = atoh(argv[1]);
    1010:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
    1014:	03052012 	movweq	r2, #20498	; 0x5012
  uint32_t bit_loc = atoi(argv[2]);
    1018:	12052106 	andne	r2, r5, #-2147483647	; 0x80000001
    101c:	03050106 	movweq	r0, #20742	; 0x5106
  if (bit_loc > 31) {
    1020:	12052206 	andne	r2, r5, #1610612736	; 0x60000000
  uint32_t data = reg32(addr);
    1024:	03050106 	movweq	r0, #20742	; 0x5106
  printf("Bit %u @ 0x%08x: %u\n", bit_loc, addr, bit_val);
    1028:	1f052106 	svcne	0x00052106
    102c:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    1030:	06030520 	streq	r0, [r3], -r0, lsr #10
  return 0;
    1034:	06120521 	ldreq	r0, [r2], -r1, lsr #10
    printf("Error: Invalid bit location argument\n");
    1038:	06030501 	streq	r0, [r3], -r1, lsl #10
    103c:	06120523 	ldreq	r0, [r2], -r3, lsr #10
  printf("Usage: %s <address_in_hex(32-bits)> <bit_location_in_decimal(0 to 31)\n", argv[0]);
    1040:	06030501 	streq	r0, [r3], -r1, lsl #10
    1044:	061f0521 	ldreq	r0, [pc], -r1, lsr #10
  return -1;
    1048:	20120501 	andscs	r0, r2, r1, lsl #10
    104c:	21060305 	tstcs	r6, r5, lsl #6
    1050:	01061f05 	tsteq	r6, r5, lsl #30
    1054:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
size_t strlen(const char *str) {
    1058:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
  while (str[len]) {
    105c:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
    1060:	03052012 	movweq	r2, #20498	; 0x5012
    1064:	12052106 	andne	r2, r5, #-2147483647	; 0x80000001
  while (*str1 && (*str1 == *str2)) {
    1068:	01050106 	tsteq	r5, r6, lsl #2
    str2++;
    106c:	05230621 	streq	r0, [r3, #-1569]!	; 0xfffff9df
  while (*str1 && (*str1 == *str2)) {
    1070:	12051303 	andne	r1, r5, #201326592	; 0xc000000
    1074:	01050106 	tsteq	r5, r6, lsl #2
  return *str1 - *str2;
    1078:	06320675 			; <UNDEFINED> instruction: 0x06320675
}
    107c:	06030501 	streq	r0, [r3], -r1, lsl #10
    *(str1++) = *(str2++);
    1080:	0513133d 	ldreq	r1, [r3, #-829]	; 0xfffffcc3
    1084:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
  while (*str2) {
    1088:	05052003 	streq	r2, [r5, #-3]
  *str1 = '\0';
    108c:	03040200 	movweq	r0, #16896	; 0x4200
}
    1090:	09052206 	stmdbeq	r5, {r1, r2, r9, sp}
  for (i = 0; i < size; i++) {
    1094:	03040200 	movweq	r0, #16896	; 0x4200
    dest_char[i] = src_char[i];
    1098:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    109c:	03040200 	movweq	r0, #16896	; 0x4200
  for (i = 0; i < size; i++) {
    10a0:	27052f06 	strcs	r2, [r5, -r6, lsl #30]
}
    10a4:	03040200 	movweq	r0, #16896	; 0x4200
  for (i = 0; i < size; i++) {
    10a8:	09050106 	stmdbeq	r5, {r1, r2, r8}
    dest_char[i] = val;
    10ac:	03040200 	movweq	r0, #16896	; 0x4200
  for (i = 0; i < size; i++) {
    10b0:	0038054a 	eorseq	r0, r8, sl, asr #10
}
    10b4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
void __attribute__((optimize("O0"), weak)) initial_setup(void) {
    10b8:	02004905 	andeq	r4, r0, #81920	; 0x14000
    10bc:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
  char *src = &_etext, *dst = &_data;
    10c0:	04020009 	streq	r0, [r2], #-9
    10c4:	05052003 	streq	r2, [r5, #-3]
  if (dst != src)
    10c8:	03040200 	movweq	r0, #16896	; 0x4200
    10cc:	2d053d06 	stccs	13, cr3, [r5, #-24]	; 0xffffffe8
    while (dst < &_edata) *(dst++) = *(src++);
    10d0:	03040200 	movweq	r0, #16896	; 0x4200
    10d4:	00320501 	eorseq	r0, r2, r1, lsl #10
    10d8:	06030402 	streq	r0, [r3], -r2, lsl #8
    10dc:	003e0501 	eorseq	r0, lr, r1, lsl #10
    10e0:	06030402 	streq	r0, [r3], -r2, lsl #8
    10e4:	004d052e 	subeq	r0, sp, lr, lsr #10
  for (dst = &_bss; dst < &_ebss; dst++) *dst = 0;
    10e8:	06030402 	streq	r0, [r3], -r2, lsl #8
    10ec:	04020001 	streq	r0, [r2], #-1
    10f0:	05052003 	streq	r2, [r5, #-3]
    10f4:	03040200 	movweq	r0, #16896	; 0x4200
    10f8:	2d054b06 	vstrcs	d4, [r5, #-24]	; 0xffffffe8
    10fc:	03040200 	movweq	r0, #16896	; 0x4200
    1100:	00320501 	eorseq	r0, r2, r1, lsl #10
  platform_init();
    1104:	06030402 	streq	r0, [r3], -r2, lsl #8
}
    1108:	04020001 	streq	r0, [r2], #-1
    110c:	3e052e03 	cdpcc	14, 0, cr2, cr5, cr3, {0}
    1110:	03040200 	movweq	r0, #16896	; 0x4200
    1114:	4d052e06 	stcmi	14, cr2, [r5, #-24]	; 0xffffffe8
    1118:	03040200 	movweq	r0, #16896	; 0x4200
    111c:	02000106 	andeq	r0, r0, #-2147483647	; 0x80000001
    1120:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
static void delete(void) {
    1124:	04020005 	streq	r0, [r2], #-5
  __write_char__(BACK_SPACE);
    1128:	054b0603 	strbeq	r0, [fp, #-1539]	; 0xfffff9fd
    112c:	0402002d 	streq	r0, [r2], #-45	; 0xffffffd3
  __write_char__(SPACE);
    1130:	32050103 	andcc	r0, r5, #-1073741824	; 0xc0000000
  __write_char__(BACK_SPACE);
    1134:	03040200 	movweq	r0, #16896	; 0x4200
    1138:	02000106 	andeq	r0, r0, #-2147483647	; 0x80000001
}
    113c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
static void clear_prompt(int char_count) {
    1140:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
  while (char_count) {
    1144:	052e0603 	streq	r0, [lr, #-1539]!	; 0xfffff9fd
    delete ();
    1148:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
  while (char_count) {
    114c:	00010603 	andeq	r0, r1, r3, lsl #12
}
    1150:	20030402 	andcs	r0, r3, r2, lsl #8
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    1154:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    auto_load[i].command(0, NULL);
    1158:	4b060304 	blmi	181d70 <__ROM_SIZE__+0x141d70>
    115c:	02002d05 	andeq	r2, r0, #320	; 0x140
  for (int i = 0; auto_load[i].command_name != NULL; i++) {
    1160:	05010304 	streq	r0, [r1, #-772]	; 0xfffffcfc
    1164:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    1168:	00010603 	andeq	r0, r1, r3, lsl #12
    116c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    1170:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
}
    1174:	2e060304 	cdpcs	3, 0, cr0, cr6, cr4, {0}
static int show_history(int argc, char **argv) {
    1178:	02004d05 	andeq	r4, r0, #320	; 0x140
  uint32_t end_index = total_num_commands-1;
    117c:	01060304 	tsteq	r6, r4, lsl #6
  if (total_num_commands > NUM_HISTORY_ENTRIES) {
    1180:	03040200 	movweq	r0, #16896	; 0x4200
    1184:	00160520 	andseq	r0, r6, r0, lsr #10
    beg_index = total_num_commands - NUM_HISTORY_ENTRIES;
    1188:	06030402 	streq	r0, [r3], -r2, lsl #8
    118c:	002e7903 	eoreq	r7, lr, r3, lsl #18
  uint32_t beg_index = 0;
    1190:	06030402 	streq	r0, [r3], -r2, lsl #8
    printf("%s\n", cmd_history[index % NUM_HISTORY_ENTRIES]);
    1194:	000f0520 	andeq	r0, pc, r0, lsr #10
    1198:	06010402 	streq	r0, [r1], -r2, lsl #8
    119c:	00030520 	andeq	r0, r3, r0, lsr #10
    11a0:	06010402 	streq	r0, [r1], -r2, lsl #8
  for (uint32_t index = beg_index; index <= end_index; ++index) {
    11a4:	03010501 	movweq	r0, #5377	; 0x1501
}
    11a8:	062e2e09 	strteq	r2, [lr], -r9, lsl #28
    11ac:	ea020500 	b	825b4 <__ROM_SIZE__+0x425b4>
    11b0:	0300000a 	movweq	r0, #10
    11b4:	01060126 	tsteq	r6, r6, lsr #2
int cmd_exec_status(int argc, char **argv) {
    11b8:	4b060305 	blmi	181dd4 <__ROM_SIZE__+0x141dd4>
  printf("%d\n", __cmd_exec_status);
    11bc:	0a051313 	beq	145e10 <__ROM_SIZE__+0x105e10>
    11c0:	03050106 	movweq	r0, #20742	; 0x5106
}
    11c4:	0005052e 	andeq	r0, r5, lr, lsr #10
    11c8:	06030402 	streq	r0, [r3], -r2, lsl #8
    11cc:	00070522 	andeq	r0, r7, r2, lsr #10
static int build_info(int argc, char **argv) {
    11d0:	06030402 	streq	r0, [r3], -r2, lsl #8
  printf("Build: [" SHELL_VERSION ":" USER_REPO_VERSION "] - [" BUILD_USER
    11d4:	00050501 	andeq	r0, r5, r1, lsl #10
}
    11d8:	06030402 	streq	r0, [r3], -r2, lsl #8
    11dc:	0007053d 	andeq	r0, r7, sp, lsr r5
static void execute(int argc, char **argv) {
    11e0:	06030402 	streq	r0, [r3], -r2, lsl #8
    11e4:	00050501 	andeq	r0, r5, r1, lsl #10
  for (int i = 0; table[i].command_name != NULL; i++) {
    11e8:	06030402 	streq	r0, [r3], -r2, lsl #8
    11ec:	0007054b 	andeq	r0, r7, fp, asr #10
    11f0:	06030402 	streq	r0, [r3], -r2, lsl #8
    11f4:	00050501 	andeq	r0, r5, r1, lsl #10
    11f8:	06030402 	streq	r0, [r3], -r2, lsl #8
    if (strcmp(argv[0], table[i].command_name) == 0) {
    11fc:	0007052f 	andeq	r0, r7, pc, lsr #10
    1200:	06030402 	streq	r0, [r3], -r2, lsl #8
      __cmd_exec_status = table[i].command(argc, &argv[0]);
    1204:	00050501 	andeq	r0, r5, r1, lsl #10
    1208:	06030402 	streq	r0, [r3], -r2, lsl #8
    120c:	00160522 	andseq	r0, r6, r2, lsr #10
    1210:	06030402 	streq	r0, [r3], -r2, lsl #8
  if (match_found == FALSE) {
    1214:	002a0501 	eoreq	r0, sl, r1, lsl #10
    printf("\"%s\": command not found. Use \"help\" to list all command.\n",
    1218:	9e030402 	cdpls	4, 0, cr0, cr3, cr2, {0}
    121c:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
    __cmd_exec_status = -1;
    1220:	059e0304 	ldreq	r0, [lr, #772]	; 0x304
    1224:	04020052 	streq	r0, [r2], #-82	; 0xffffffae
}
    1228:	16059e03 	strne	r9, [r5], -r3, lsl #28
    122c:	03040200 	movweq	r0, #16896	; 0x4200
    1230:	002a0590 	mlaeq	sl, r0, r5, r0
    1234:	90030402 	andls	r0, r3, r2, lsl #8
int help(int argc, char **argv) {
    1238:	02002805 	andeq	r2, r0, #327680	; 0x50000
  if (argc > 1 && (strcmp(argv[1], "-l")==0)) {
    123c:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
    1240:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    1244:	3c052003 	stccc	0, cr2, [r5], {3}
    1248:	03040200 	movweq	r0, #16896	; 0x4200
    printf("use: help -l for list only.\n\n");
    124c:	00520566 	subseq	r0, r2, r6, ror #10
  bool verbose = true;
    1250:	20030402 	andcs	r0, r3, r2, lsl #8
    verbose = false;
    1254:	02005005 	andeq	r5, r0, #5
    printf("\n");
    1258:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
    i++;
    125c:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
  while (table[i].command_name != NULL) {
    1260:	05052003 	streq	r2, [r5, #-3]
    1264:	03040200 	movweq	r0, #16896	; 0x4200
    1268:	16054b06 	strne	r4, [r5], -r6, lsl #22
    printf(table[i].command_name);
    126c:	03040200 	movweq	r0, #16896	; 0x4200
    if (verbose) {
    1270:	2a050106 	bcs	141690 <__ROM_SIZE__+0x101690>
      printf("\n\t");
    1274:	03040200 	movweq	r0, #16896	; 0x4200
      printf(table[i].command_help);
    1278:	0028053c 	eoreq	r0, r8, ip, lsr r5
    127c:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
    1280:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
    verbose = false;
    1284:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
}
    1288:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    128c:	52057403 	andpl	r7, r5, #50331648	; 0x3000000
    1290:	03040200 	movweq	r0, #16896	; 0x4200
    1294:	00500520 	subseq	r0, r0, r0, lsr #10
    1298:	58030402 	stmdapl	r3, {r1, sl}
    129c:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    12a0:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
static void add_command_to_history(const char *cmd_str) {
    12a4:	04020005 	streq	r0, [r2], #-5
  if (cmd_str == NULL || strcmp(cmd_str, "") == 0) {
    12a8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    12ac:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
  int index = total_num_commands % NUM_HISTORY_ENTRIES;
    12b0:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    12b4:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
    12b8:	28056603 	stmdacs	r5, {r0, r1, r9, sl, sp, lr}
    12bc:	03040200 	movweq	r0, #16896	; 0x4200
  memcpy(&cmd_history[index], cmd_str, LINE_BUFF_SIZE);
    12c0:	003e053c 	eorseq	r0, lr, ip, lsr r5
    12c4:	20030402 	andcs	r0, r3, r2, lsl #8
    12c8:	02003c05 	andeq	r3, r0, #1280	; 0x500
    12cc:	05820304 	streq	r0, [r2, #772]	; 0x304
  total_num_commands++;
    12d0:	04020052 	streq	r0, [r2], #-82	; 0xffffffae
  curr_command_ptr = total_num_commands;
    12d4:	02002003 	andeq	r2, r0, #3
    12d8:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    12dc:	04020050 	streq	r0, [r2], #-80	; 0xffffffb0
    12e0:	14053c03 	strne	r3, [r5], #-3075	; 0xfffff3fd
static int parse_line(char **argv, char *line_buff, int argument_size) {
    12e4:	03040200 	movweq	r0, #16896	; 0x4200
    12e8:	00050520 	andeq	r0, r5, r0, lsr #10
  int length = strlen(line_buff);
    12ec:	06030402 	streq	r0, [r3], -r2, lsl #8
    12f0:	00160521 	andseq	r0, r6, r1, lsr #10
  int argc = 0;
    12f4:	06030402 	streq	r0, [r3], -r2, lsl #8
         pos++)
    12f8:	04020001 	streq	r0, [r2], #-1
    for (; line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    12fc:	2a052e03 	bcs	14cb10 <__ROM_SIZE__+0x10cb10>
    1300:	03040200 	movweq	r0, #16896	; 0x4200
    1304:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    1308:	28053c03 	stmdacs	r5, {r0, r1, sl, fp, ip, sp}
    if (line_buff[pos] == '\t' || line_buff[pos] == SPACE)
    130c:	03040200 	movweq	r0, #16896	; 0x4200
    1310:	003e0558 	eorseq	r0, lr, r8, asr r5
      line_buff[pos] = END_OF_LINE;
    1314:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
  while (pos <= length) {
    1318:	02003c05 	andeq	r3, r0, #1280	; 0x500
    if (line_buff[pos] != '\t' && line_buff[pos] != SPACE &&
    131c:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
    1320:	04020052 	streq	r0, [r2], #-82	; 0xffffffae
    1324:	50052003 	andpl	r2, r5, r3
    1328:	03040200 	movweq	r0, #16896	; 0x4200
      argv[argc++] = &line_buff[pos];
    132c:	00140558 	andseq	r0, r4, r8, asr r5
    1330:	20030402 	andcs	r0, r3, r2, lsl #8
}
    1334:	02001605 	andeq	r1, r0, #5242880	; 0x500000
static int prefix_match(char *sub, int len, const char *str) {
    1338:	03060304 	movweq	r0, #25348	; 0x6304
    133c:	0f052076 	svceq	0x00052076
  if (sub == NULL || str == NULL || len <= 0 || len > strlen(str)) {
    1340:	01040200 	mrseq	r0, R12_usr
    1344:	0003052e 	andeq	r0, r3, lr, lsr #10
    1348:	06010402 	streq	r0, [r1], -r2, lsl #8
    134c:	03010501 	movweq	r0, #5377	; 0x1501
  for (int i = 0; i<len; ++i) {
    1350:	2e204a0c 	vmulcs.f32	s8, s0, s24
    1354:	02050006 	andeq	r0, r5, #6
    if (sub[i] != str[i]) {
    1358:	00000c50 	andeq	r0, r0, r0, asr ip
    135c:	13030518 	movwne	r0, #13592	; 0x3518
  for (int i = 0; i<len; ++i) {
    1360:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
}
    1364:	060f0501 	streq	r0, [pc], -r1, lsl #10
  return TRUE;
    1368:	06030520 	streq	r0, [r3], -r0, lsr #10
      return FALSE;
    136c:	300c0501 	andcc	r0, ip, r1, lsl #10
}
    1370:	20061105 	andcs	r1, r6, r5, lsl #2
static void handle_up_arrow(char *cmd_buff, int *char_count) {
    1374:	01060505 	tsteq	r6, r5, lsl #10
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    1378:	052a0105 	streq	r0, [sl, #-261]!	; 0xfffffefb
    137c:	04020007 	streq	r0, [r2], #-7
    1380:	05260603 	streq	r0, [r6, #-1539]!	; 0xfffff9fd
      curr_command_ptr == 0) {
    1384:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
  if (curr_command_ptr < total_num_commands - NUM_HISTORY_ENTRIES ||
    1388:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    printf("%s", cmd_buff);
    138c:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    1390:	18058203 	stmdane	r5, {r0, r1, r9, pc}
  memset(cmd_buff, 0, LINE_BUFF_SIZE);
    1394:	03040200 	movweq	r0, #16896	; 0x4200
    1398:	02002c06 	andeq	r2, r0, #1536	; 0x600
  curr_command_ptr--;
    139c:	20060304 	andcs	r0, r6, r4, lsl #6
    13a0:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    13a4:	20060104 	andcs	r0, r6, r4, lsl #2
    13a8:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    13ac:	01060104 	tsteq	r6, r4, lsl #2
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    13b0:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    13b4:	2c060204 	sfmcs	f0, 4, [r6], {4}
    13b8:	02040200 	andeq	r0, r4, #0, 4
    13bc:	0f052006 	svceq	0x00052006
  *char_count = strlen(cmd_buff);
    13c0:	02040200 	andeq	r0, r4, #0, 4
    13c4:	03052006 	movweq	r2, #20486	; 0x5006
  printf("%s", cmd_buff);
    13c8:	02040200 	andeq	r0, r4, #0, 4
    13cc:	0c050106 	stfeqs	f0, [r5], {6}
    13d0:	01052030 	tsteq	r5, r0, lsr r0
    13d4:	06160525 	ldreq	r0, [r6], -r5, lsr #10
static void handle_down_arrow(char *cmd_buff, int *char_count) {
    13d8:	062e7903 	strteq	r7, [lr], -r3, lsl #18
    13dc:	05202020 	streq	r2, [r0, #-32]!	; 0xffffffe0
  memset(cmd_buff, 0, LINE_BUFF_SIZE);
    13e0:	0a030601 	beq	c2bec <__ROM_SIZE__+0x82bec>
    13e4:	1303054a 	movwne	r0, #13642	; 0x354a
  *char_count = 0;
    13e8:	06080515 			; <UNDEFINED> instruction: 0x06080515
  if (curr_command_ptr == total_num_commands) return;
    13ec:	06030501 	streq	r0, [r3], -r1, lsl #10
    13f0:	061f0521 	ldreq	r0, [pc], -r1, lsr #10
  curr_command_ptr++;
    13f4:	20120501 	andscs	r0, r2, r1, lsl #10
    13f8:	21060305 	tstcs	r6, r5, lsl #6
  int index = (curr_command_ptr % NUM_HISTORY_ENTRIES);
    13fc:	01061f05 	tsteq	r6, r5, lsl #30
    1400:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
    1404:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
  memcpy(cmd_buff, &cmd_history[index], LINE_BUFF_SIZE);
    1408:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
    140c:	03052012 	movweq	r2, #20498	; 0x5012
    1410:	12052106 	andne	r2, r5, #-2147483647	; 0x80000001
    1414:	03050106 	movweq	r0, #20742	; 0x5106
  *char_count = strlen(cmd_buff);
    1418:	08052306 	stmdaeq	r5, {r1, r2, r8, r9, sp}
    141c:	03050106 	movweq	r0, #20742	; 0x5106
  printf("%s", cmd_buff);
    1420:	1f052106 	svcne	0x00052106
    1424:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
}
    1428:	06030520 	streq	r0, [r3], -r0, lsr #10
    142c:	06120521 	ldreq	r0, [r2], -r1, lsr #10
void set_read_char(int (*func)(void)) { __read_char__ = func; }
    1430:	06030501 	streq	r0, [r3], -r1, lsl #10
    1434:	06080522 	streq	r0, [r8], -r2, lsr #10
    1438:	06030501 	streq	r0, [r3], -r1, lsl #10
void set_read_char2(int (*func)(void)) { __read_char2__ = func; }
    143c:	061f0521 	ldreq	r0, [pc], -r1, lsr #10
    1440:	20120501 	andscs	r0, r2, r1, lsl #10
    1444:	21060305 	tstcs	r6, r5, lsl #6
void set_write_char(void (*func)(char)) { __write_char__ = func; }
    1448:	01061205 	tsteq	r6, r5, lsl #4
    144c:	23060305 	movwcs	r0, #25349	; 0x6305
    1450:	01060805 	tsteq	r6, r5, lsl #16
void set_write_char2(void (*func)(char)) { __write_char2__ = func; }
    1454:	21060305 	tstcs	r6, r5, lsl #6
    1458:	01061f05 	tsteq	r6, r5, lsl #30
    145c:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
}
    1460:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
}
    1464:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
  if (cmd_buff == NULL || char_count <= 0) {
    1468:	03052012 	movweq	r2, #20498	; 0x5012
static void handle_tab(char *cmd_buff, int *char_count) {
    146c:	1f052106 	svcne	0x00052106
    1470:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
  int last_match = -1;
    1474:	06030520 	streq	r0, [r3], -r0, lsr #10
  int match_count = 0;
    1478:	06120521 	ldreq	r0, [r2], -r1, lsr #10
  int i = 0;
    147c:	21010501 	tstcs	r1, r1, lsl #10
    i++;
    1480:	01062506 	tsteq	r6, r6, lsl #10
  while (table[i].command_name != NULL) { //loop over all commands
    1484:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    1488:	202e0615 	eorcs	r0, lr, r5, lsl r6
    148c:	0e053406 	cdpeq	4, 0, cr3, cr5, cr6, {0}
    if (prefix_match(cmd_buff, *char_count, table[i].command_name)) {
    1490:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1494:	053d3506 	ldreq	r3, [sp, #-1286]!	; 0xfffffafa
    1498:	58780315 	ldmdapl	r8!, {r0, r2, r4, r8, r9}^
      match_count++;
    149c:	13052006 	movwne	r2, #20486	; 0x5006
      printf("\n%s", table[i].command_name);
    14a0:	05052006 	streq	r2, [r5, #-6]
    14a4:	053d3d14 	ldreq	r3, [sp, #-3348]!	; 0xfffff2ec
      last_match = i;
    14a8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
  if (match_count == 1) {
    14ac:	05350603 	ldreq	r0, [r5, #-1539]!	; 0xfffff9fd
    14b0:	20590601 	subscs	r0, r9, r1, lsl #12
  if (match_count) {
    14b4:	02050006 	andeq	r0, r5, #6
}
    14b8:	00000d0e 	andeq	r0, r0, lr, lsl #26
    memcpy(cmd_buff, table[last_match].command_name, LINE_BUFF_SIZE);
    14bc:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    14c0:	153d0603 	ldrne	r0, [sp, #-1539]!	; 0xfffff9fd
    14c4:	06202e06 	strteq	r2, [r0], -r6, lsl #28
    14c8:	060e0534 			; <UNDEFINED> instruction: 0x060e0534
    *char_count = strlen(cmd_buff);
    14cc:	06050501 	streq	r0, [r5], -r1, lsl #10
    14d0:	031c0536 	tsteq	ip, #226492416	; 0xd800000
    14d4:	20063c78 	andcs	r3, r6, r8, ror ip
    printf("\n");
    14d8:	20061a05 	andcs	r1, r6, r5, lsl #20
    14dc:	3d140505 	cfldr32cc	mvfx0, [r4, #-20]	; 0xffffffec
    prepend_prompt();
    14e0:	0805593d 	stmdaeq	r5, {r0, r2, r3, r4, r5, r8, fp, ip, lr}
    printf(PROMPT);
    14e4:	01050106 	tsteq	r5, r6, lsl #2
    14e8:	00062034 	andeq	r2, r6, r4, lsr r0
    printf("%s", cmd_buff);
    14ec:	0d480205 	sfmeq	f0, 2, [r8, #-20]	; 0xffffffec
    14f0:	20030000 	andcs	r0, r3, r0
    14f4:	13030501 	movwne	r0, #13569	; 0x3501
    14f8:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    14fc:	20030501 	andcs	r0, r3, r1, lsl #10
    1500:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    1504:	22060304 	andcs	r0, r6, #4, 6	; 0x10000000
__attribute__((weak)) int active_prompt() { return TRUE; }
    1508:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
static void shell(void) {
    150c:	01060304 	tsteq	r6, r4, lsl #6
  int count = 0;
    1510:	02000c05 	andeq	r0, r0, #1280	; 0x500
  for (int i = 0; i < LINE_BUFF_SIZE; i++) line_buff[i] = 0;
    1514:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
    1518:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    151c:	00560603 	subseq	r0, r6, r3, lsl #12
    1520:	06030402 	streq	r0, [r3], -r2, lsl #8
    1524:	000f0520 	andeq	r0, pc, r0, lsr #10
  for (int i = 0; i < MAX_ARG_COUNT; i++) argv[i] = NULL;
    1528:	06010402 	streq	r0, [r1], -r2, lsl #8
    152c:	00030520 	andeq	r0, r3, r0, lsr #10
    1530:	06010402 	streq	r0, [r1], -r2, lsl #8
    1534:	32010501 	andcc	r0, r1, #4194304	; 0x400000
    1538:	7de90306 	stclvc	3, cr0, [r9, #24]!
    153c:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
  prepend_prompt();
    1540:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
  printf(PROMPT);
    1544:	062f0601 	strteq	r0, [pc], -r1, lsl #12
  int special_key = 0;
    1548:	05010623 	streq	r0, [r1, #-1571]	; 0xfffff9dd
        special_key = 1;
    154c:	2f3d0603 	svccs	0x003d0603
    if (s == -1) { s = __read_char2__();}
    1550:	67060105 	strvs	r0, [r6, -r5, lsl #2]
    1554:	05000620 	streq	r0, [r0, #-1568]	; 0xfffff9e0
        line_buff[count] = END_OF_LINE;
    1558:	000d8202 	andeq	r8, sp, r2, lsl #4
    155c:	01061400 	tsteq	r6, r0, lsl #8
    1560:	21060305 	tstcs	r6, r5, lsl #6
        __write_char__(NEW_LINE);
    1564:	01052e06 	tsteq	r5, r6, lsl #28
    1568:	ef03062f 	svc	0x0003062f
  add_command_to_history(line_buff);
    156c:	01062001 	tsteq	r6, r1
    1570:	30060305 	andcc	r0, r6, r5, lsl #6
  argc = parse_line(argv, line_buff, MAX_ARG_COUNT);
    1574:	05202006 	streq	r2, [r0, #-6]!
    1578:	23062f01 	movwcs	r2, #28417	; 0x6f01
  if (argc > 0) execute(argc, argv);
    157c:	03050106 	movweq	r0, #20742	; 0x5106
}
    1580:	20063006 	andcs	r3, r6, r6
        if (!__echo) {
    1584:	2f010520 	svccs	0x00010520
    1588:	20160306 	andscs	r0, r6, r6, lsl #6
        if (count == 0) continue;
    158c:	03050106 	movweq	r0, #20742	; 0x5106
        count--;
    1590:	05135906 	ldreq	r5, [r3, #-2310]	; 0xfffff6fa
        line_buff[count] = END_OF_LINE;
    1594:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    1598:	052f0603 	streq	r0, [pc, #-1539]!	; f9d <read_mem+0x45>
    159c:	0511060c 	ldreq	r0, [r1, #-1548]	; 0xfffff9f4
        delete ();
    15a0:	0305210a 	movweq	r2, #20746	; 0x510a
      if (__echo) {
    15a4:	00050520 	andeq	r0, r5, r0, lsr #10
    15a8:	06030402 	streq	r0, [r3], -r2, lsl #8
        __write_char__(c);
    15ac:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    15b0:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
          delete ();
    15b4:	004b0304 	subeq	r0, fp, r4, lsl #6
          delete ();
    15b8:	13030402 	movwne	r0, #13314	; 0x3402
    15bc:	02001b05 	andeq	r1, r0, #5120	; 0x1400
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    15c0:	050d0304 	streq	r0, [sp, #-772]	; 0xfffffcfc
        special_key = 2;
    15c4:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    15c8:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
        special_key = 0;
    15cc:	04020008 	streq	r0, [r2], #-8
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    15d0:	09052403 	stmdbeq	r5, {r0, r1, sl, sp}
        if (!__echo) {
    15d4:	03040200 	movweq	r0, #16896	; 0x4200
          clear_prompt(count + 4);
    15d8:	000f0521 	andeq	r0, pc, r1, lsr #10
    15dc:	06010402 	streq	r0, [r1], -r2, lsl #8
        if (c == 'A') {
    15e0:	0003051b 	andeq	r0, r3, fp, lsl r5
          handle_down_arrow(line_buff, &count);
    15e4:	06010402 	streq	r0, [r1], -r2, lsl #8
    15e8:	05360601 	ldreq	r0, [r6, #-1537]!	; 0xfffff9ff
        special_key = 0;
    15ec:	2e4b0601 	cdpcs	6, 4, cr0, cr11, cr1, {0}
          clear_prompt(count);
    15f0:	02050006 	andeq	r0, r5, #6
    15f4:	00000de2 	andeq	r0, r0, r2, ror #27
          handle_up_arrow(line_buff, &count);
    15f8:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    15fc:	13670603 	cmnne	r7, #3145728	; 0x300000
    1600:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
        handle_tab(line_buff, &count);
    1604:	20030501 	andcs	r0, r3, r1, lsl #10
    1608:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
      loop();
    160c:	22060304 	andcs	r0, r6, #4, 6	; 0x10000000
    if (!active_prompt()) {
    1610:	03040200 	movweq	r0, #16896	; 0x4200
    1614:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    s = __read_char__();
    1618:	17054b03 	strne	r4, [r5, -r3, lsl #22]
    161c:	03040200 	movweq	r0, #16896	; 0x4200
    if (s == -1) { s = __read_char2__();}
    1620:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    if (s != -1) {
    1624:	03040200 	movweq	r0, #16896	; 0x4200
    1628:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
      if (c == CARRIAGE_RETURN || c == NEW_LINE) {
    162c:	004b0603 	subeq	r0, fp, r3, lsl #12
    1630:	59030402 	stmdbpl	r3, {r1, sl}
      if (c == DELETE || c == BACK_SPACE) {
    1634:	02000905 	andeq	r0, r0, #81920	; 0x14000
    1638:	01060304 	tsteq	r6, r4, lsl #6
      } else if (c == ESCAPE) {
    163c:	02001b05 	andeq	r1, r0, #5120	; 0x1400
      } else if (c == SQUARE_BRACKET_OPEN && special_key == 1) {
    1640:	03060304 	movweq	r0, #25348	; 0x6304
      } else if ((c == 'C' || c == 'D') && special_key != 0) {
    1644:	1d05207a 	stcne	0, cr2, [r5, #-488]	; 0xfffffe18
    1648:	03040200 	movweq	r0, #16896	; 0x4200
    164c:	0f050106 	svceq	0x00050106
      } else if ((c == 'A' || c == 'B') && special_key == 2) {
    1650:	01040200 	mrseq	r0, R12_usr
    1654:	03052006 	movweq	r2, #20486	; 0x5006
      else if (c == TAB) {
    1658:	01040200 	mrseq	r0, R12_usr
        line_buff[count] = c;
    165c:	01050106 	tsteq	r5, r6, lsl #2
    1660:	3c2e0903 			; <UNDEFINED> instruction: 0x3c2e0903
    1664:	02050006 	andeq	r0, r5, #6
        count++;
    1668:	00000e28 	andeq	r0, r0, r8, lsr #28
    166c:	06010a03 	streq	r0, [r1], -r3, lsl #20
  if (argc > 0) execute(argc, argv);
    1670:	06030501 	streq	r0, [r3], -r1, lsl #10
}
    1674:	13131459 	tstne	r3, #1493172224	; 0x59000000
    1678:	01061205 	tsteq	r6, r5, lsl #4
    167c:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
    1680:	0b052003 	bleq	149694 <__ROM_SIZE__+0x109694>
void prompt() {
    1684:	200e0306 	andcs	r0, lr, r6, lsl #6
  initial_setup();
    1688:	01061705 	tsteq	r6, r5, lsl #14
  exec_auto_cmds();
    168c:	4b060b05 	blmi	1842a8 <__ROM_SIZE__+0x1442a8>
  setup();
    1690:	7a032e05 	bvc	cceac <__ROM_SIZE__+0x8ceac>
    shell();
    1694:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
int exec(char *cmd_str) {
    1698:	200b030a 	andcs	r0, fp, sl, lsl #6
    169c:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
  argc = parse_line(argv, cmd_str, MAX_ARG_COUNT);
    16a0:	23060204 	movwcs	r0, #25092	; 0x6204
    16a4:	02001205 	andeq	r1, r0, #1342177280	; 0x50000000
  if (argc > 0) execute(argc, argv);
    16a8:	01060204 	tsteq	r6, r4, lsl #4
  return __cmd_exec_status;
    16ac:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
}
    16b0:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
  if (argc > 0) execute(argc, argv);
    16b4:	0402000c 	streq	r0, [r2], #-12
    16b8:	2e055802 	cdpcs	8, 0, cr5, cr5, cr2, {0}
    16bc:	02040200 	andeq	r0, r4, #0, 4
cmd get_function_addr(char *cmd_str) {
    16c0:	4a690306 	bmi	1a422e0 <__ROM_SIZE__+0x1a022e0>
  for (int i = 0; table[i].command_name != NULL; i++) {
    16c4:	02003305 	andeq	r3, r0, #335544320	; 0x14000000
    16c8:	20060204 	andcs	r0, r6, r4, lsl #4
    16cc:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
    16d0:	20060104 	andcs	r0, r6, r4, lsl #2
    16d4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    if (strcmp(cmd_str, table[i].command_name) == 0) {
    16d8:	01060104 	tsteq	r6, r4, lsl #2
    16dc:	30060505 	andcc	r0, r6, r5, lsl #10
      return table[i].command;
    16e0:	01060805 	tsteq	r6, r5, lsl #16
    16e4:	31060705 	tstcc	r6, r5, lsl #14
  return NULL;
    16e8:	0f054d67 	svceq	0x00054d67
}
    16ec:	25050106 	strcs	r0, [r5, #-262]	; 0xfffffefa
    16f0:	01040200 	mrseq	r0, R12_usr
    16f4:	07052006 	streq	r2, [r5, -r6]
    16f8:	01040200 	mrseq	r0, R12_usr
    16fc:	09050106 	stmdbeq	r5, {r1, r2, r8}
    1700:	14053106 	strne	r3, [r5], #-262	; 0xfffffefa
    1704:	0c050106 	stfeqs	f0, [r5], {6}
    1708:	0609053c 			; <UNDEFINED> instruction: 0x0609053c
    170c:	06150533 			; <UNDEFINED> instruction: 0x06150533
    1710:	09052001 	stmdbeq	r5, {r0, sp}
    1714:	0a053d06 	beq	150b34 <__ROM_SIZE__+0x110b34>
    1718:	09051406 	stmdbeq	r5, {r1, r2, sl, ip}
    171c:	2701051e 	smladcs	r1, lr, r5, r0
    1720:	0101002e 	tsteq	r1, lr, lsr #32
    1724:	00000170 	andeq	r0, r0, r0, ror r1
    1728:	00720003 	rsbseq	r0, r2, r3
    172c:	01020000 	mrseq	r0, (UNDEF: 2)
    1730:	000d0efb 	strdeq	r0, [sp], -fp
    1734:	01010101 	tsteq	r1, r1, lsl #2
    1738:	01000000 	mrseq	r0, (UNDEF: 0)
    173c:	2f010000 	svccs	0x00010000
    1740:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1744:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
    1748:	2f657661 	svccs	0x00657661
    174c:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
    1750:	6568732f 	strbvs	r7, [r8, #-815]!	; 0xfffffcd1
    1754:	6c2f6c6c 	stcvs	12, cr6, [pc], #-432	; 15ac <shell+0xa0>
    1758:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
    175c:	2f006932 	svccs	0x00006932
    1760:	2f727375 	svccs	0x00727375
    1764:	2f62696c 	svccs	0x0062696c
    1768:	2f636367 	svccs	0x00636367
    176c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1770:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1774:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1778:	30312f69 	eorscc	r2, r1, r9, ror #30
    177c:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    1780:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1784:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1788:	32610000 	rsbcc	r0, r1, #0
    178c:	00632e69 	rsbeq	r2, r3, r9, ror #28
    1790:	73000001 	movwvc	r0, #1
    1794:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1798:	00682e74 	rsbeq	r2, r8, r4, ror lr
    179c:	00000002 	andeq	r0, r0, r2
    17a0:	05001b05 	streq	r1, [r0, #-2821]	; 0xfffff4fb
    17a4:	000e9c02 	andeq	r9, lr, r2, lsl #24
    17a8:	01120300 	tsteq	r2, r0, lsl #6
    17ac:	03050106 	movweq	r0, #20742	; 0x5106
    17b0:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
    17b4:	0c050108 	stfeqs	f0, [r5], {8}
    17b8:	07050106 	streq	r0, [r5, -r6, lsl #2]
    17bc:	2103051f 	tstcs	r3, pc, lsl r5
    17c0:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    17c4:	21060304 	tstcs	r6, r4, lsl #6
    17c8:	02000f05 	andeq	r0, r0, #5, 30
    17cc:	01060304 	tsteq	r6, r4, lsl #6
    17d0:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
    17d4:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    17d8:	04020009 	streq	r0, [r2], #-9
    17dc:	23052e03 	movwcs	r2, #24067	; 0x5e03
    17e0:	03040200 	movweq	r0, #16896	; 0x4200
    17e4:	13051f06 	movwne	r1, #24326	; 0x5f06
    17e8:	01040200 	mrseq	r0, R12_usr
    17ec:	00160520 	andseq	r0, r6, r0, lsr #10
    17f0:	06010402 	streq	r0, [r1], -r2, lsl #8
    17f4:	00030501 	andeq	r0, r3, r1, lsl #10
    17f8:	20010402 	andcs	r0, r1, r2, lsl #8
    17fc:	01053106 	tsteq	r5, r6, lsl #2
    1800:	20051306 	andcs	r1, r5, r6, lsl #6
    1804:	01062206 	tsteq	r6, r6, lsl #4
    1808:	21060305 	tstcs	r6, r5, lsl #6
    180c:	08051413 	stmdaeq	r5, {r0, r1, r4, sl, ip}
    1810:	06110501 	ldreq	r0, [r1], -r1, lsl #10
    1814:	1d0c0501 	cfstr32ne	mvfx0, [ip, #-4]
    1818:	05230305 	streq	r0, [r3, #-773]!	; 0xfffffcfb
    181c:	0523060c 	streq	r0, [r3, #-1548]!	; 0xfffff9f4
    1820:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    1824:	07053c0f 	streq	r3, [r5, -pc, lsl #24]
    1828:	1c052f06 	stcne	15, cr2, [r5], {6}
    182c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1830:	05132806 	ldreq	r2, [r3, #-2054]	; 0xfffff7fa
    1834:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    1838:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
    183c:	73030602 	movwvc	r0, #13826	; 0x3602
    1840:	0029052e 	eoreq	r0, r9, lr, lsr #10
    1844:	06020402 	streq	r0, [r2], -r2, lsl #8
    1848:	00180501 	andseq	r0, r8, r1, lsl #10
    184c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1850:	001b0520 	andseq	r0, fp, r0, lsr #10
    1854:	06010402 	streq	r0, [r1], -r2, lsl #8
    1858:	00030501 	andeq	r0, r3, r1, lsl #10
    185c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    1860:	21060505 	tstcs	r6, r5, lsl #10
    1864:	01061705 	tsteq	r6, r5, lsl #14
    1868:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
    186c:	052f0607 	streq	r0, [pc, #-1543]!	; 126d <help+0x35>
    1870:	20010616 	andcs	r0, r1, r6, lsl r6
    1874:	23060c05 	movwcs	r0, #27653	; 0x6c05
    1878:	01061e05 	tsteq	r6, r5, lsl #28
    187c:	053c0f05 	ldreq	r0, [ip, #-3845]!	; 0xfffff0fb
    1880:	052f0607 	streq	r0, [pc, #-1543]!	; 1281 <help+0x49>
    1884:	2001061c 	andcs	r0, r1, ip, lsl r6
    1888:	06030520 	streq	r0, [r3], -r0, lsr #10
    188c:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
    1890:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    1894:	01010001 	tsteq	r1, r1
    1898:	00000302 	andeq	r0, r0, r2, lsl #6
    189c:	00f70003 	rscseq	r0, r7, r3
    18a0:	01020000 	mrseq	r0, (UNDEF: 2)
    18a4:	000d0efb 	strdeq	r0, [sp], -fp
    18a8:	01010101 	tsteq	r1, r1, lsl #2
    18ac:	01000000 	mrseq	r0, (UNDEF: 0)
    18b0:	2f010000 	svccs	0x00010000
    18b4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    18b8:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
    18bc:	2f657661 	svccs	0x00657661
    18c0:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
    18c4:	6568732f 	strbvs	r7, [r8, #-815]!	; 0xfffffcd1
    18c8:	6c2f6c6c 	stcvs	12, cr6, [pc], #-432	; 1720 <_varpair+0x8>
    18cc:	752f6269 	strvc	r6, [pc, #-617]!	; 166b <shell+0x15f>
    18d0:	736c6974 	cmnvc	ip, #116, 18	; 0x1d0000
    18d4:	73752f00 	cmnvc	r5, #0, 30
    18d8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    18dc:	63672f62 	cmnvs	r7, #392	; 0x188
    18e0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    18e4:	6f6e2d6d 	svcvs	0x006e2d6d
    18e8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    18ec:	2f696261 	svccs	0x00696261
    18f0:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
    18f4:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    18f8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    18fc:	2f006564 	svccs	0x00006564
    1900:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1904:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
    1908:	2f657661 	svccs	0x00657661
    190c:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
    1910:	6568732f 	strbvs	r7, [r8, #-815]!	; 0xfffffcd1
    1914:	732f6c6c 			; <UNDEFINED> instruction: 0x732f6c6c
    1918:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
    191c:	6f682f00 	svcvs	0x00682f00
    1920:	642f656d 	strtvs	r6, [pc], #-1389	; 1928 <sbox+0x48>
    1924:	76616472 			; <UNDEFINED> instruction: 0x76616472
    1928:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
    192c:	732f626f 			; <UNDEFINED> instruction: 0x732f626f
    1930:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
    1934:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1938:	6932612f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r8, sp, lr}
    193c:	6f682f00 	svcvs	0x00682f00
    1940:	642f656d 	strtvs	r6, [pc], #-1389	; 1948 <sbox+0x68>
    1944:	76616472 			; <UNDEFINED> instruction: 0x76616472
    1948:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
    194c:	732f626f 			; <UNDEFINED> instruction: 0x732f626f
    1950:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
    1954:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1958:	6972702f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, ip, sp, lr}^
    195c:	0066746e 	rsbeq	r7, r6, lr, ror #8
    1960:	69747500 	ldmdbvs	r4!, {r8, sl, ip, sp, lr}^
    1964:	632e736c 			; <UNDEFINED> instruction: 0x632e736c
    1968:	00000100 	andeq	r0, r0, r0, lsl #2
    196c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1970:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1974:	00000200 	andeq	r0, r0, r0, lsl #4
    1978:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
    197c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    1980:	61000003 	tstvs	r0, r3
    1984:	682e6932 	stmdavs	lr!, {r1, r4, r5, r8, fp, sp, lr}
    1988:	00000400 	andeq	r0, r0, r0, lsl #8
    198c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    1990:	682e6674 	stmdavs	lr!, {r2, r4, r5, r6, r9, sl, sp, lr}
    1994:	00000500 	andeq	r0, r0, r0, lsl #10
    1998:	00210500 	eoreq	r0, r1, r0, lsl #10
    199c:	0ef80205 	cdpeq	2, 15, cr0, cr8, cr5, {0}
    19a0:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    19a4:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
    19a8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    19ac:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    19b0:	05330603 	ldreq	r0, [r3, #-1539]!	; 0xfffff9fd
    19b4:	20010613 	andcs	r0, r1, r3, lsl r6
    19b8:	0603052e 	streq	r0, [r3], -lr, lsr #10
    19bc:	08051421 	stmdaeq	r5, {r0, r5, sl, ip}
    19c0:	03050106 	movweq	r0, #20742	; 0x5106
    19c4:	20062206 	andcs	r2, r6, r6, lsl #4
    19c8:	0a052f06 	beq	14d5e8 <__ROM_SIZE__+0x10d5e8>
    19cc:	01050106 	tsteq	r5, r6, lsl #2
    19d0:	06050521 	streq	r0, [r5], -r1, lsr #10
    19d4:	06207503 	strteq	r7, [r0], -r3, lsl #10
    19d8:	2f062020 	svccs	0x00062020
    19dc:	01060c05 	tsteq	r6, r5, lsl #24
    19e0:	03062105 	movweq	r2, #24837	; 0x6105
    19e4:	0106740c 	tsteq	r6, ip, lsl #8
    19e8:	2f060305 	svccs	0x00060305
    19ec:	01060605 	tsteq	r6, r5, lsl #12
    19f0:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    19f4:	01061305 	tsteq	r6, r5, lsl #6
    19f8:	03052e20 	movweq	r2, #24096	; 0x5e20
    19fc:	13052106 	movwne	r2, #20742	; 0x5106
    1a00:	05200106 	streq	r0, [r0, #-262]!	; 0xfffffefa
    1a04:	052f0603 	streq	r0, [pc, #-1539]!	; 1409 <handle_down_arrow+0x31>
    1a08:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    1a0c:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    1a10:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    1a14:	05052101 	streq	r2, [r5, #-257]	; 0xfffffeff
    1a18:	20780306 	rsbscs	r0, r8, r6, lsl #6
    1a1c:	06202006 	strteq	r2, [r0], -r6
    1a20:	060c052f 	streq	r0, [ip], -pc, lsr #10
    1a24:	06260501 	strteq	r0, [r6], -r1, lsl #10
    1a28:	06660903 	strbteq	r0, [r6], -r3, lsl #18
    1a2c:	06030501 	streq	r0, [r3], -r1, lsl #10
    1a30:	0606052f 	streq	r0, [r6], -pc, lsr #10
    1a34:	06030501 	streq	r0, [r3], -r1, lsl #10
    1a38:	06130533 			; <UNDEFINED> instruction: 0x06130533
    1a3c:	052e2001 	streq	r2, [lr, #-1]!
    1a40:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    1a44:	20010615 	andcs	r0, r1, r5, lsl r6
    1a48:	3e060305 	cdpcc	3, 0, cr0, cr6, cr5, {0}
    1a4c:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    1a50:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    1a54:	05202003 	streq	r2, [r0, #-3]!
    1a58:	79030605 	stmdbvc	r3, {r0, r2, r9, sl}
    1a5c:	20200601 	eorcs	r0, r0, r1, lsl #12
    1a60:	0c052f06 	stceq	15, cr2, [r5], {6}
    1a64:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1a68:	03040200 	movweq	r0, #16896	; 0x4200
    1a6c:	0a054306 	beq	15268c <__ROM_SIZE__+0x11268c>
    1a70:	03040200 	movweq	r0, #16896	; 0x4200
    1a74:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1a78:	03040200 	movweq	r0, #16896	; 0x4200
    1a7c:	02002106 	andeq	r2, r0, #-2147483647	; 0x80000001
    1a80:	054c0304 	strbeq	r0, [ip, #-772]	; 0xfffffcfc
    1a84:	0402000a 	streq	r0, [r2], #-10
    1a88:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    1a8c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    1a90:	051c0603 	ldreq	r0, [ip, #-1539]	; 0xfffff9fd
    1a94:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    1a98:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    1a9c:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    1aa0:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    1aa4:	04020003 	streq	r0, [r2], #-3
    1aa8:	00010601 	andeq	r0, r1, r1, lsl #12
    1aac:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    1ab0:	05190a05 	ldreq	r0, [r9, #-2565]	; 0xfffff5fb
    1ab4:	5c062101 	stfpls	f2, [r6], {1}
    1ab8:	03050106 	movweq	r0, #20742	; 0x5106
    1abc:	06052f06 	streq	r2, [r5], -r6, lsl #30
    1ac0:	03050106 	movweq	r0, #20742	; 0x5106
    1ac4:	13053206 	movwne	r3, #20998	; 0x5206
    1ac8:	2e200106 	sufcss	f0, f0, f6
    1acc:	21060305 	tstcs	r6, r5, lsl #6
    1ad0:	01061605 	tsteq	r6, r5, lsl #12
    1ad4:	06030520 	streq	r0, [r3], -r0, lsr #10
    1ad8:	0616053d 			; <UNDEFINED> instruction: 0x0616053d
    1adc:	03052001 	movweq	r2, #20481	; 0x5001
    1ae0:	06053e06 	streq	r3, [r5], -r6, lsl #28
    1ae4:	03050106 	movweq	r0, #20742	; 0x5106
    1ae8:	06053306 	streq	r3, [r5], -r6, lsl #6
    1aec:	03050106 	movweq	r0, #20742	; 0x5106
    1af0:	0c053306 	stceq	3, cr3, [r5], {6}
    1af4:	03050106 	movweq	r0, #20742	; 0x5106
    1af8:	1a052106 	bne	149f18 <__ROM_SIZE__+0x109f18>
    1afc:	08050106 	stmdaeq	r5, {r1, r2, r8}
    1b00:	06030520 	streq	r0, [r3], -r0, lsr #10
    1b04:	06130521 	ldreq	r0, [r3], -r1, lsr #10
    1b08:	1c052e01 	stcne	14, cr2, [r5], {1}
    1b0c:	20080520 	andcs	r0, r8, r0, lsr #10
    1b10:	2f060305 	svccs	0x00060305
    1b14:	01060f05 	tsteq	r6, r5, lsl #30
    1b18:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    1b1c:	01060a05 	tsteq	r6, r5, lsl #20
    1b20:	05240105 	streq	r0, [r4, #-261]!	; 0xfffffefb
    1b24:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
    1b28:	06200620 	strteq	r0, [r0], -r0, lsr #12
    1b2c:	2006242f 	andcs	r2, r6, pc, lsr #8
    1b30:	03052f06 	movweq	r2, #24326	; 0x5f06
    1b34:	4b010a03 	blmi	44348 <__ROM_SIZE__+0x4348>
    1b38:	01060a05 	tsteq	r6, r5, lsl #20
    1b3c:	94060105 	strls	r0, [r6], #-261	; 0xfffffefb
    1b40:	03050106 	movweq	r0, #20742	; 0x5106
    1b44:	06052f06 	streq	r2, [r5], -r6, lsl #30
    1b48:	03050106 	movweq	r0, #20742	; 0x5106
    1b4c:	13053206 	movwne	r3, #20998	; 0x5206
    1b50:	2e200106 	sufcss	f0, f0, f6
    1b54:	21060305 	tstcs	r6, r5, lsl #6
    1b58:	01061605 	tsteq	r6, r5, lsl #12
    1b5c:	06030520 	streq	r0, [r3], -r0, lsr #10
    1b60:	0606053e 			; <UNDEFINED> instruction: 0x0606053e
    1b64:	06030501 	streq	r0, [r3], -r1, lsl #10
    1b68:	060c0533 			; <UNDEFINED> instruction: 0x060c0533
    1b6c:	06030501 	streq	r0, [r3], -r1, lsl #10
    1b70:	061c0521 	ldreq	r0, [ip], -r1, lsr #10
    1b74:	06030501 	streq	r0, [r3], -r1, lsl #10
    1b78:	2e2e0621 	cfmadda32cs	mvax1, mvax0, mvfx14, mvfx1
    1b7c:	0a052f06 	beq	14d79c <__ROM_SIZE__+0x10d79c>
    1b80:	01050106 	tsteq	r5, r6, lsl #2
    1b84:	06050525 	streq	r0, [r5], -r5, lsr #10
    1b88:	06207403 	strteq	r7, [r0], -r3, lsl #8
    1b8c:	052f0620 	streq	r0, [pc, #-1568]!	; 1574 <shell+0x68>
    1b90:	01090303 	tsteq	r9, r3, lsl #6
    1b94:	060a054b 	streq	r0, [sl], -fp, asr #10
    1b98:	00090201 	andeq	r0, r9, r1, lsl #4
    1b9c:	01bd0101 			; <UNDEFINED> instruction: 0x01bd0101
    1ba0:	00030000 	andeq	r0, r3, r0
    1ba4:	00000078 	andeq	r0, r0, r8, ror r0
    1ba8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1bac:	0101000d 	tsteq	r1, sp
    1bb0:	00000101 	andeq	r0, r0, r1, lsl #2
    1bb4:	00000100 	andeq	r0, r0, r0, lsl #2
    1bb8:	6f682f01 	svcvs	0x00682f01
    1bbc:	642f656d 	strtvs	r6, [pc], #-1389	; 1bc4 <rsbox+0x1d8>
    1bc0:	76616472 			; <UNDEFINED> instruction: 0x76616472
    1bc4:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
    1bc8:	732f626f 			; <UNDEFINED> instruction: 0x732f626f
    1bcc:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
    1bd0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1bd4:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    1bd8:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1bdc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1be0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1be4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1be8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1bec:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1bf0:	61652d65 	cmnvs	r5, r5, ror #26
    1bf4:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
    1bf8:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
    1bfc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    1c00:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1c04:	73000065 	movwvc	r0, #101	; 0x65
    1c08:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1c0c:	00632e67 	rsbeq	r2, r3, r7, ror #28
    1c10:	73000001 	movwvc	r0, #1
    1c14:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    1c18:	00682e66 	rsbeq	r2, r8, r6, ror #28
    1c1c:	00000002 	andeq	r0, r0, r2
    1c20:	05002005 	streq	r2, [r0, #-5]
    1c24:	00105802 	andseq	r5, r0, r2, lsl #16
    1c28:	01120300 	tsteq	r2, r0, lsl #6
    1c2c:	03050106 	movweq	r0, #20742	; 0x5106
    1c30:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
    1c34:	0511060a 	ldreq	r0, [r1, #-1546]	; 0xfffff9f6
    1c38:	05052109 	streq	r2, [r5, #-265]	; 0xfffffef7
    1c3c:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    1c40:	09050106 	stmdbeq	r5, {r1, r2, r8}
    1c44:	0d051f06 	stceq	15, cr1, [r5, #-24]	; 0xffffffe8
    1c48:	09050106 	stmdbeq	r5, {r1, r2, r8}
    1c4c:	06030520 	streq	r0, [r3], -r0, lsr #10
    1c50:	06010531 			; <UNDEFINED> instruction: 0x06010531
    1c54:	06300513 			; <UNDEFINED> instruction: 0x06300513
    1c58:	13030522 	movwne	r0, #13602	; 0x3522
    1c5c:	01060905 	tsteq	r6, r5, lsl #18
    1c60:	21060505 	tstcs	r6, r5, lsl #10
    1c64:	01060905 	tsteq	r6, r5, lsl #18
    1c68:	21060505 	tstcs	r6, r5, lsl #10
    1c6c:	01060905 	tsteq	r6, r5, lsl #18
    1c70:	0a051e06 	beq	149490 <__ROM_SIZE__+0x109490>
    1c74:	09050106 	stmdbeq	r5, {r1, r2, r8}
    1c78:	001d0520 	andseq	r0, sp, r0, lsr #10
    1c7c:	20010402 	andcs	r0, r1, r2, lsl #8
    1c80:	02001005 	andeq	r1, r0, #5
    1c84:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
    1c88:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    1c8c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1c90:	2c052101 	stfcss	f2, [r5], {1}
    1c94:	03053006 	movweq	r3, #20486	; 0x5006
    1c98:	06090513 			; <UNDEFINED> instruction: 0x06090513
    1c9c:	06050501 	streq	r0, [r5], -r1, lsl #10
    1ca0:	06170521 	ldreq	r0, [r7], -r1, lsr #10
    1ca4:	200f0501 	andcs	r0, pc, r1, lsl #10
    1ca8:	2d060905 	vstrcs.16	s0, [r6, #-10]	; <UNPREDICTABLE>
    1cac:	01060a05 	tsteq	r6, r5, lsl #20
    1cb0:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
    1cb4:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    1cb8:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    1cbc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    1cc0:	20130601 	andscs	r0, r3, r1, lsl #12
    1cc4:	22063805 	andcs	r3, r6, #327680	; 0x50000
    1cc8:	13130305 	tstne	r3, #335544320	; 0x14000000
    1ccc:	0a051313 	beq	146920 <__ROM_SIZE__+0x106920>
    1cd0:	03050106 	movweq	r0, #20742	; 0x5106
    1cd4:	00050520 	andeq	r0, r5, r0, lsr #10
    1cd8:	06030402 	streq	r0, [r3], -r2, lsl #8
    1cdc:	001c0521 	andseq	r0, ip, r1, lsr #10
    1ce0:	06030402 	streq	r0, [r3], -r2, lsl #8
    1ce4:	00120501 	andseq	r0, r2, r1, lsl #10
    1ce8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    1cec:	02001905 	andeq	r1, r0, #81920	; 0x14000
    1cf0:	2d060304 	stccs	3, cr0, [r6, #-16]
    1cf4:	02001a05 	andeq	r1, r0, #20480	; 0x5000
    1cf8:	01060304 	tsteq	r6, r4, lsl #6
    1cfc:	02000f05 	andeq	r0, r0, #5, 30
    1d00:	20060104 	andcs	r0, r6, r4, lsl #2
    1d04:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    1d08:	01060104 	tsteq	r6, r4, lsl #2
    1d0c:	01053106 	tsteq	r5, r6, lsl #2
    1d10:	05201306 	streq	r1, [r0, #-774]!	; 0xfffffcfa
    1d14:	05220630 	streq	r0, [r2, #-1584]!	; 0xfffff9d0
    1d18:	13131303 	tstne	r3, #201326592	; 0xc000000
    1d1c:	01060a05 	tsteq	r6, r5, lsl #20
    1d20:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
    1d24:	04020005 	streq	r0, [r2], #-5
    1d28:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    1d2c:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
    1d30:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    1d34:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
    1d38:	051f0603 	ldreq	r0, [pc, #-1539]	; 173d <_varr32+0x1>
    1d3c:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    1d40:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    1d44:	0402000f 	streq	r0, [r2], #-15
    1d48:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    1d4c:	04020003 	streq	r0, [r2], #-3
    1d50:	06010601 	streq	r0, [r1], -r1, lsl #12
    1d54:	06010532 			; <UNDEFINED> instruction: 0x06010532
    1d58:	01022013 	tsteq	r2, r3, lsl r0
    1d5c:	de010100 	adfles	f0, f1, f0
    1d60:	03000009 	movweq	r0, #9
    1d64:	0000db00 	andeq	sp, r0, r0, lsl #22
    1d68:	fb010200 	blx	42572 <__ROM_SIZE__+0x2572>
    1d6c:	01000d0e 	tsteq	r0, lr, lsl #26
    1d70:	00010101 	andeq	r0, r1, r1, lsl #2
    1d74:	00010000 	andeq	r0, r1, r0
    1d78:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    1d7c:	2f656d6f 	svccs	0x00656d6f
    1d80:	61647264 	cmnvs	r4, r4, ror #4
    1d84:	652f6576 	strvs	r6, [pc, #-1398]!	; 1816 <cmd_end_+0x86>
    1d88:	2f626f66 	svccs	0x00626f66
    1d8c:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
    1d90:	68732f6c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    1d94:	006c6c65 	rsbeq	r6, ip, r5, ror #24
    1d98:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1d9c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1da0:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1da4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1da8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1dac:	61652d65 	cmnvs	r5, r5, ror #26
    1db0:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
    1db4:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
    1db8:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    1dbc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1dc0:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    1dc4:	2f656d6f 	svccs	0x00656d6f
    1dc8:	61647264 	cmnvs	r4, r4, ror #4
    1dcc:	652f6576 	strvs	r6, [pc, #-1398]!	; 185e <cmd_end_+0xce>
    1dd0:	2f626f66 	svccs	0x00626f66
    1dd4:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
    1dd8:	696c2f6c 	stmdbvs	ip!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    1ddc:	72702f62 	rsbsvc	r2, r0, #392	; 0x188
    1de0:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    1de4:	6f682f00 	svcvs	0x00682f00
    1de8:	642f656d 	strtvs	r6, [pc], #-1389	; 1df0 <rsbox+0x404>
    1dec:	76616472 			; <UNDEFINED> instruction: 0x76616472
    1df0:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
    1df4:	732f626f 			; <UNDEFINED> instruction: 0x732f626f
    1df8:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
    1dfc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1e00:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    1e04:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1e08:	65687300 	strbvs	r7, [r8, #-768]!	; 0xfffffd00
    1e0c:	632e6c6c 			; <UNDEFINED> instruction: 0x632e6c6c
    1e10:	00000100 	andeq	r0, r0, r0, lsl #2
    1e14:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
    1e18:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    1e1c:	73000001 	movwvc	r0, #1
    1e20:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1e24:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1e28:	70000002 	andvc	r0, r0, r2
    1e2c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    1e30:	00682e66 	rsbeq	r2, r8, r6, ror #28
    1e34:	73000003 	movwvc	r0, #3
    1e38:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1e3c:	00682e67 	rsbeq	r2, r8, r7, ror #28
    1e40:	00000004 	andeq	r0, r0, r4
    1e44:	05004005 	streq	r4, [r0, #-5]
    1e48:	0010b802 	andseq	fp, r0, r2, lsl #16
    1e4c:	02f40300 	rscseq	r0, r4, #0, 6
    1e50:	03030501 	movweq	r0, #13569	; 0x3501
    1e54:	05133c0b 	ldreq	r3, [r3, #-3083]	; 0xfffff3f5
    1e58:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    1e5c:	05202e19 	streq	r2, [r0, #-3609]!	; 0xfffff1e7
    1e60:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
    1e64:	2e010606 	cfmadd32cs	mvax0, mvfx0, mvfx1, mvfx6
    1e68:	2f060505 	svccs	0x00060505
    1e6c:	01060b05 	tsteq	r6, r5, lsl #22
    1e70:	02001b05 	andeq	r1, r0, #5120	; 0x1400
    1e74:	20060204 	andcs	r0, r6, r4, lsl #4
    1e78:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    1e7c:	01060204 	tsteq	r6, r4, lsl #4
    1e80:	02040200 	andeq	r0, r4, #0, 4
    1e84:	0020052e 	eoreq	r0, r0, lr, lsr #10
    1e88:	20020402 	andcs	r0, r2, r2, lsl #8
    1e8c:	02040200 	andeq	r0, r4, #0, 4
    1e90:	00260520 	eoreq	r0, r6, r0, lsr #10
    1e94:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
    1e98:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    1e9c:	05200204 	streq	r0, [r0, #-516]!	; 0xfffffdfc
    1ea0:	0402000b 	streq	r0, [r2], #-11
    1ea4:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    1ea8:	0c054d03 	stceq	13, cr4, [r5], {3}
    1eac:	03050106 	movweq	r0, #20742	; 0x5106
    1eb0:	002a052e 	eoreq	r0, sl, lr, lsr #10
    1eb4:	06030402 	streq	r0, [r3], -r2, lsl #8
    1eb8:	002f0520 	eoreq	r0, pc, r0, lsr #10
    1ebc:	06030402 	streq	r0, [r3], -r2, lsl #8
    1ec0:	04020001 	streq	r0, [r2], #-1
    1ec4:	23052003 	movwcs	r2, #20483	; 0x5003
    1ec8:	03040200 	movweq	r0, #16896	; 0x4200
    1ecc:	26052e06 	strcs	r2, [r5], -r6, lsl #28
    1ed0:	03040200 	movweq	r0, #16896	; 0x4200
    1ed4:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
    1ed8:	01040200 	mrseq	r0, R12_usr
    1edc:	03053c06 	movweq	r3, #23558	; 0x5c06
    1ee0:	01040200 	mrseq	r0, R12_usr
    1ee4:	03060106 	movweq	r0, #24838	; 0x6106
    1ee8:	01054a10 	tsteq	r5, r0, lsl sl
    1eec:	203c2f06 	eorscs	r2, ip, r6, lsl #30
    1ef0:	00061a05 	andeq	r1, r6, r5, lsl #20
    1ef4:	11240205 			; <UNDEFINED> instruction: 0x11240205
    1ef8:	ab030000 	blge	c1f00 <__ROM_SIZE__+0x81f00>
    1efc:	0305017d 	movweq	r0, #20861	; 0x517d
    1f00:	053d4b21 	ldreq	r4, [sp, #-2849]!	; 0xfffff4df
    1f04:	053d0601 	ldreq	r0, [sp, #-1537]!	; 0xfffff9ff
    1f08:	063e062a 	ldrteq	r0, [lr], -sl, lsr #12
    1f0c:	06030501 	streq	r0, [r3], -r1, lsl #10
    1f10:	0609052f 	streq	r0, [r9], -pc, lsr #10
    1f14:	06050501 	streq	r0, [r5], -r1, lsl #10
    1f18:	0f052f21 	svceq	0x00052f21
    1f1c:	09050106 	stmdbeq	r5, {r1, r2, r8}
    1f20:	01051e06 	tsteq	r5, r6, lsl #28
    1f24:	05203206 	streq	r3, [r0, #-518]!	; 0xfffffdfa
    1f28:	05000622 	streq	r0, [r0, #-1570]	; 0xfffff9de
    1f2c:	00115202 	andseq	r5, r1, r2, lsl #4
    1f30:	02950300 	addseq	r0, r5, #0, 6
    1f34:	21030501 	tstcs	r3, r1, lsl #10
    1f38:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    1f3c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    1f40:	05052003 	streq	r2, [r5, #-3]
    1f44:	03040200 	movweq	r0, #16896	; 0x4200
    1f48:	11052106 	tstne	r5, r6, lsl #2
    1f4c:	03040200 	movweq	r0, #16896	; 0x4200
    1f50:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1f54:	03040200 	movweq	r0, #16896	; 0x4200
    1f58:	00360520 	eorseq	r0, r6, r0, lsr #10
    1f5c:	06030402 	streq	r0, [r3], -r2, lsl #8
    1f60:	0037053b 	eorseq	r0, r7, fp, lsr r5
    1f64:	06030402 	streq	r0, [r3], -r2, lsl #8
    1f68:	00130501 	andseq	r0, r3, r1, lsl #10
    1f6c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1f70:	001c0520 	andseq	r0, ip, r0, lsr #10
    1f74:	06010402 	streq	r0, [r1], -r2, lsl #8
    1f78:	001f0501 	andseq	r0, pc, r1, lsl #10
    1f7c:	58010402 	stmdapl	r1, {r1, sl}
    1f80:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    1f84:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
    1f88:	05203101 	streq	r3, [r0, #-257]!	; 0xfffffeff
    1f8c:	05000630 	streq	r0, [r0, #-1584]	; 0xfffff9d0
    1f90:	00117802 	andseq	r7, r1, r2, lsl #16
    1f94:	7e990300 	cdpvc	3, 9, cr0, cr9, cr0, {0}
    1f98:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
    1f9c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    1fa0:	0501062a 	streq	r0, [r1, #-1578]	; 0xfffff9d6
    1fa4:	133d0603 	teqne	sp, #3145728	; 0x300000
    1fa8:	01061a05 	tsteq	r6, r5, lsl #20
    1fac:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    1fb0:	052f0605 	streq	r0, [pc, #-1541]!	; 19b3 <sbox+0xd3>
    1fb4:	3c010624 	stccc	6, cr0, [r1], {36}	; 0x24
    1fb8:	051e0c05 	ldreq	r0, [lr, #-3077]	; 0xfffff3fb
    1fbc:	04020005 	streq	r0, [r2], #-5
    1fc0:	05330603 	ldreq	r0, [r3, #-1539]!	; 0xfffff9fd
    1fc4:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
    1fc8:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    1fcc:	04020005 	streq	r0, [r2], #-5
    1fd0:	38052e03 	stmdacc	r5, {r0, r1, r9, sl, fp, sp}
    1fd4:	03040200 	movweq	r0, #16896	; 0x4200
    1fd8:	24056506 	strcs	r6, [r5], #-1286	; 0xfffffafa
    1fdc:	01040200 	mrseq	r0, R12_usr
    1fe0:	00030520 	andeq	r0, r3, r0, lsr #10
    1fe4:	06010402 	streq	r0, [r1], -r2, lsl #8
    1fe8:	05320601 	ldreq	r0, [r2, #-1537]!	; 0xfffff9ff
    1fec:	2e130601 	cfmsub32cs	mvax0, mvfx0, mvfx3, mvfx1
    1ff0:	00062c05 	andeq	r2, r6, r5, lsl #24
    1ff4:	11b80205 			; <UNDEFINED> instruction: 0x11b80205
    1ff8:	cf030000 	svcgt	0x00030000
    1ffc:	01060102 	tsteq	r6, r2, lsl #2
    2000:	21060305 	tstcs	r6, r5, lsl #6
    2004:	06202e06 	strteq	r2, [r0], -r6, lsl #28
    2008:	0601052f 	streq	r0, [r1], -pc, lsr #10
    200c:	062e0513 			; <UNDEFINED> instruction: 0x062e0513
    2010:	d0020500 	andle	r0, r2, r0, lsl #10
    2014:	03000011 	movweq	r0, #17
    2018:	06017f8c 	streq	r7, [r1], -ip, lsl #31
    201c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2020:	06200621 	strteq	r0, [r0], -r1, lsr #12
    2024:	06010530 			; <UNDEFINED> instruction: 0x06010530
    2028:	062c0513 			; <UNDEFINED> instruction: 0x062c0513
    202c:	e0020500 	and	r0, r2, r0, lsl #10
    2030:	03000011 	movweq	r0, #17
    2034:	06017ef1 			; <UNDEFINED> instruction: 0x06017ef1
    2038:	06030501 	streq	r0, [r3], -r1, lsl #10
    203c:	0805144b 	stmdaeq	r5, {r0, r1, r3, r6, sl, ip}
    2040:	060c0501 	streq	r0, [ip], -r1, lsl #10
    2044:	20030501 	andcs	r0, r3, r1, lsl #10
    2048:	02003205 	andeq	r3, r0, #1342177280	; 0x50000000
    204c:	20060204 	andcs	r0, r6, r4, lsl #4
    2050:	02003305 	andeq	r3, r0, #335544320	; 0x14000000
    2054:	01060204 	tsteq	r6, r4, lsl #4
    2058:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    205c:	20060104 	andcs	r0, r6, r4, lsl #2
    2060:	02001805 	andeq	r1, r0, #327680	; 0x50000
    2064:	01060104 	tsteq	r6, r4, lsl #2
    2068:	02001b05 	andeq	r1, r0, #5120	; 0x1400
    206c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2070:	04020003 	streq	r0, [r2], #-3
    2074:	05052001 	streq	r2, [r5, #-1]
    2078:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    207c:	08050106 	stmdaeq	r5, {r1, r2, r8}
    2080:	0607053c 			; <UNDEFINED> instruction: 0x0607053c
    2084:	0620052f 	strteq	r0, [r0], -pc, lsr #10
    2088:	2e230501 	cfsh64cs	mvdx0, mvdx3, #1
    208c:	05201b05 	streq	r1, [r0, #-2821]!	; 0xfffff4fb
    2090:	07053c19 	smladeq	r5, r9, ip, r3
    2094:	06132f06 	ldreq	r2, [r3], -r6, lsl #30
    2098:	06030501 	streq	r0, [r3], -r1, lsl #10
    209c:	05052016 	streq	r2, [r5, #-22]	; 0xffffffea
    20a0:	17054c13 	smladne	r5, r3, ip, r4
    20a4:	01050106 	tsteq	r5, r6, lsl #2
    20a8:	21052e4c 	tstcs	r5, ip, asr #28
    20ac:	02050006 	andeq	r0, r5, #6
    20b0:	00001238 	andeq	r1, r0, r8, lsr r2
    20b4:	0101d203 	tsteq	r1, r3, lsl #4
    20b8:	03050106 	movweq	r0, #20742	; 0x5106
    20bc:	14142106 	ldrne	r2, [r4], #-262	; 0xfffffefa
    20c0:	01060605 	tsteq	r6, r5, lsl #12
    20c4:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
    20c8:	003c0104 	eorseq	r0, ip, r4, lsl #2
    20cc:	20010402 	andcs	r0, r1, r2, lsl #8
    20d0:	01040200 	mrseq	r0, R12_usr
    20d4:	00100520 	andseq	r0, r0, r0, lsr #10
    20d8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    20dc:	23060505 	movwcs	r0, #25861	; 0x6505
    20e0:	37060805 	strcc	r0, [r6, -r5, lsl #16]
    20e4:	05230d05 	streq	r0, [r3, #-3333]!	; 0xfffff2fb
    20e8:	0d030605 	stceq	6, cr0, [r3, #-20]	; 0xffffffec
    20ec:	06053d2e 	streq	r3, [r5], -lr, lsr #26
    20f0:	09050106 	stmdbeq	r5, {r1, r2, r8}
    20f4:	20770306 	rsbscs	r0, r7, r6, lsl #6
    20f8:	01060f05 	tsteq	r6, r5, lsl #30
    20fc:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
    2100:	05052009 	streq	r2, [r5, #-9]
    2104:	05302106 	ldreq	r2, [r0, #-262]!	; 0xfffffefa
    2108:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    210c:	3d2f0607 	stccc	6, cr0, [pc, #-28]!	; 20f8 <rsbox+0x70c>
    2110:	01061305 	tsteq	r6, r5, lsl #6
    2114:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
    2118:	4a76030d 	bmi	1d82d54 <__ROM_SIZE__+0x1d42d54>
    211c:	03060305 	movweq	r0, #25349	; 0x6305
    2120:	01052e11 	tsteq	r5, r1, lsl lr
    2124:	05201306 	streq	r1, [r0, #-774]!	; 0xfffffcfa
    2128:	05000639 	streq	r0, [r0, #-1593]	; 0xfffff9c7
    212c:	0012a002 	andseq	sl, r2, r2
    2130:	7d9c0300 	ldcvc	3, cr0, [ip]
    2134:	15030501 	strne	r0, [r3, #-1281]	; 0xfffffaff
    2138:	01060605 	tsteq	r6, r5, lsl #12
    213c:	02003905 	andeq	r3, r0, #81920	; 0x14000
    2140:	051d0104 	ldreq	r0, [sp, #-260]	; 0xfffffefc
    2144:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    2148:	17053101 	strne	r3, [r5, -r1, lsl #2]
    214c:	01040200 	mrseq	r0, R12_usr
    2150:	2701053c 	smladxcs	r1, ip, r5, r0
    2154:	1c060305 	stcne	3, cr0, [r6], {5}
    2158:	01062205 	tsteq	r6, r5, lsl #4
    215c:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
    2160:	05590603 	ldrbeq	r0, [r9, #-1539]	; 0xfffff9fd
    2164:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    2168:	064a2e03 	strbeq	r2, [sl], -r3, lsl #28
    216c:	0615052f 	ldreq	r0, [r5], -pc, lsr #10
    2170:	06030501 	streq	r0, [r3], -r1, lsl #10
    2174:	0614053d 			; <UNDEFINED> instruction: 0x0614053d
    2178:	48053c01 	stmdami	r5, {r0, sl, fp, ip, sp}
    217c:	00c90306 	sbceq	r0, r9, r6, lsl #6
    2180:	05010658 	streq	r0, [r1, #-1624]	; 0xfffff9a8
    2184:	133d0603 	teqne	sp, #3145728	; 0x300000
    2188:	06100513 			; <UNDEFINED> instruction: 0x06100513
    218c:	052e2001 	streq	r2, [lr, #-1]!
    2190:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    2194:	1f0f0607 	svcne	0x000f0607
    2198:	05240905 	streq	r0, [r4, #-2309]!	; 0xfffff6fb
    219c:	05280607 	streq	r0, [r8, #-1543]!	; 0xfffff9f9
    21a0:	0d05110a 	stfeqs	f1, [r5, #-40]	; 0xffffffd8
    21a4:	0c050106 	stfeqs	f0, [r5], {6}
    21a8:	15051e06 	strne	r1, [r5, #-3590]	; 0xfffff1fa
    21ac:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    21b0:	0023052e 	eoreq	r0, r3, lr, lsr #10
    21b4:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    21b8:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
    21bc:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
    21c0:	05330605 	ldreq	r0, [r3, #-1541]!	; 0xfffff9fb
    21c4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    21c8:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    21cc:	07052e01 	streq	r2, [r5, -r1, lsl #28]
    21d0:	16052f06 	strne	r2, [r5], -r6, lsl #30
    21d4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    21d8:	08053006 	stmdaeq	r5, {r1, r2, ip, sp}
    21dc:	09050106 	stmdbeq	r5, {r1, r2, r8}
    21e0:	20730306 	rsbscs	r0, r3, r6, lsl #6
    21e4:	052f0505 	streq	r0, [pc, #-1285]!	; 1ce7 <rsbox+0x2fb>
    21e8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    21ec:	20052e08 	andcs	r2, r5, r8, lsl #28
    21f0:	01040200 	mrseq	r0, R12_usr
    21f4:	003b052e 	eorseq	r0, fp, lr, lsr #10
    21f8:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
    21fc:	30060705 	andcc	r0, r6, r5, lsl #14
    2200:	01061405 	tsteq	r6, r5, lsl #8
    2204:	202e1005 	eorcs	r1, lr, r5
    2208:	03060305 	movweq	r0, #25349	; 0x6305
    220c:	0105200d 	tsteq	r5, sp
    2210:	05201306 	streq	r1, [r0, #-774]!	; 0xfffffcfa
    2214:	0500063e 	streq	r0, [r0, #-1598]	; 0xfffff9c2
    2218:	00133602 	andseq	r3, r3, r2, lsl #12
    221c:	7fb80300 	svcvc	0x00b80300
    2220:	13030501 	movwne	r0, #13569	; 0x3501
    2224:	01060605 	tsteq	r6, r5, lsl #12
    2228:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
    222c:	051f0104 	ldreq	r0, [pc, #-260]	; 2130 <rsbox+0x744>
    2230:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    2234:	22054b01 	andcs	r4, r5, #1024	; 0x400
    2238:	02040200 	andeq	r0, r4, #0, 4
    223c:	00370520 	eorseq	r0, r7, r0, lsr #10
    2240:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    2244:	03040200 	movweq	r0, #16896	; 0x4200
    2248:	002e0520 	eoreq	r0, lr, r0, lsr #10
    224c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    2250:	05320c05 	ldreq	r0, [r2, #-3077]!	; 0xfffff3fb
    2254:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    2258:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    225c:	04020003 	streq	r0, [r2], #-3
    2260:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
    2264:	052f0605 	streq	r0, [pc, #-1541]!	; 1c67 <rsbox+0x27b>
    2268:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    226c:	08052010 	stmdaeq	r5, {r4, sp}
    2270:	001a0520 	andseq	r0, sl, r0, lsr #10
    2274:	06020402 	streq	r0, [r2], -r2, lsl #8
    2278:	0402002d 	streq	r0, [r2], #-45	; 0xffffffd3
    227c:	00200602 	eoreq	r0, r0, r2, lsl #12
    2280:	20020402 	andcs	r0, r2, r2, lsl #8
    2284:	0f060505 	svceq	0x00060505
    2288:	01060c05 	tsteq	r6, r5, lsl #24
    228c:	0a030105 	beq	c26a8 <__ROM_SIZE__+0x826a8>
    2290:	1f0a0520 	svcne	0x000a0520
    2294:	2e2a0e05 	cdpcs	14, 2, cr0, cr10, cr5, {0}
    2298:	0d060505 	cfstr32eq	mvfx0, [r6, #-20]	; 0xffffffec
    229c:	01060c05 	tsteq	r6, r5, lsl #24
    22a0:	0a030105 	beq	c26bc <__ROM_SIZE__+0x826bc>
    22a4:	063e0520 	ldrteq	r0, [lr], -r0, lsr #10
    22a8:	207fb603 	rsbscs	fp, pc, r3, lsl #12
    22ac:	03050106 	movweq	r0, #20742	; 0x5106
    22b0:	2d052f06 	stccs	15, cr2, [r5, #-24]	; 0xffffffe8
    22b4:	18050106 	stmdane	r5, {r1, r2, r8}
    22b8:	2006053c 	andcs	r0, r6, ip, lsr r5
    22bc:	02001805 	andeq	r1, r0, #327680	; 0x50000
    22c0:	053d0104 	ldreq	r0, [sp, #-260]!	; 0xfffffefc
    22c4:	04020043 	streq	r0, [r2], #-67	; 0xffffffbd
    22c8:	05052d01 	streq	r2, [r5, #-3329]	; 0xfffff2ff
    22cc:	20062206 	andcs	r2, r6, r6, lsl #4
    22d0:	052f0620 	streq	r0, [pc, #-1568]!	; 1cb8 <rsbox+0x2cc>
    22d4:	0b030601 	bleq	c3ae0 <__ROM_SIZE__+0x83ae0>
    22d8:	06030501 	streq	r0, [r3], -r1, lsl #10
    22dc:	06207803 	strteq	r7, [r0], -r3, lsl #16
    22e0:	0530062e 	ldreq	r0, [r0, #-1582]!	; 0xfffff9d2
    22e4:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    22e8:	054b0603 	strbeq	r0, [fp, #-1539]	; 0xfffff9fd
    22ec:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    22f0:	03052007 	movweq	r2, #20487	; 0x5007
    22f4:	14055906 	strne	r5, [r5], #-2310	; 0xfffff6fa
    22f8:	03050106 	movweq	r0, #20742	; 0x5106
    22fc:	3d063c20 	stccc	12, cr3, [r6, #-128]	; 0xffffff80
    2300:	01061105 	tsteq	r6, r5, lsl #2
    2304:	053c0f05 	ldreq	r0, [ip, #-3845]!	; 0xfffff0fb
    2308:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    230c:	01069340 	tsteq	r6, r0, asr #6
    2310:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    2314:	2f062e06 	svccs	0x00062e06
    2318:	01060f05 	tsteq	r6, r5, lsl #30
    231c:	2f060305 	svccs	0x00060305
    2320:	01061805 	tsteq	r6, r5, lsl #16
    2324:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    2328:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    232c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2330:	054b0603 	strbeq	r0, [fp, #-1539]	; 0xfffff9fd
    2334:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    2338:	03052007 	movweq	r2, #20487	; 0x5007
    233c:	14055906 	strne	r5, [r5], #-2310	; 0xfffff6fa
    2340:	03050106 	movweq	r0, #20742	; 0x5106
    2344:	05670620 	strbeq	r0, [r7, #-1568]!	; 0xfffff9e0
    2348:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    234c:	03053c0f 	movweq	r3, #23567	; 0x5c0f
    2350:	01052206 	tsteq	r5, r6, lsl #4
    2354:	05204b06 	streq	r4, [r0, #-2822]!	; 0xfffff4fa
    2358:	05000627 	streq	r0, [r0, #-1575]	; 0xfffff9d9
    235c:	00143002 	andseq	r3, r4, r2
    2360:	7fba0300 	svcvc	0x00ba0300
    2364:	01290501 			; <UNDEFINED> instruction: 0x01290501
    2368:	01063705 	tsteq	r6, r5, lsl #14
    236c:	052e3f05 	streq	r3, [lr, #-3845]!	; 0xfffff0fb
    2370:	054b0628 	strbeq	r0, [fp, #-1576]	; 0xfffff9d8
    2374:	3905012a 	stmdbcc	r5, {r1, r3, r5, r8}
    2378:	41050106 	tstmi	r5, r6, lsl #2
    237c:	0629052e 	strteq	r0, [r9], -lr, lsr #10
    2380:	012b054c 			; <UNDEFINED> instruction: 0x012b054c
    2384:	01063a05 	tsteq	r6, r5, lsl #20
    2388:	052e4205 	streq	r4, [lr, #-517]!	; 0xfffffdfb
    238c:	054b062a 	strbeq	r0, [fp, #-1578]	; 0xfffff9d6
    2390:	3c05012c 	stfccs	f0, [r5], {44}	; 0x2c
    2394:	44050106 	strmi	r0, [r5], #-262	; 0xfffffefa
    2398:	0628052e 	strteq	r0, [r8], -lr, lsr #10
    239c:	1401054c 	strne	r0, [r1], #-1356	; 0xfffffab4
    23a0:	05222705 	streq	r2, [r2, #-1797]!	; 0xfffff8fb
    23a4:	2d051401 	cfstrscs	mvf1, [r5, #-4]
    23a8:	13030523 	movwne	r0, #13603	; 0x3523
    23ac:	13060105 	movwne	r0, #24837	; 0x6105
    23b0:	03063905 	movweq	r3, #26885	; 0x6905
    23b4:	052000e4 	streq	r0, [r0, #-228]!	; 0xffffff1c
    23b8:	06051303 	streq	r1, [r5], -r3, lsl #6
    23bc:	39050106 	stmdbcc	r5, {r1, r2, r8}
    23c0:	01040200 	mrseq	r0, R12_usr
    23c4:	0018052d 	andseq	r0, r8, sp, lsr #10
    23c8:	4b010402 	blmi	433d8 <__ROM_SIZE__+0x33d8>
    23cc:	2d260705 	stccs	7, cr0, [r6, #-20]!	; 0xffffffec
    23d0:	0605052d 	streq	r0, [r5], -sp, lsr #10
    23d4:	052e0c03 	streq	r0, [lr, #-3075]!	; 0xfffff3fd
    23d8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    23dc:	77030609 	strvc	r0, [r3, -r9, lsl #12]
    23e0:	060f0520 	streq	r0, [pc], -r0, lsr #10
    23e4:	4a120501 	bmi	4837f0 <__ROM_SIZE__+0x4437f0>
    23e8:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
    23ec:	05230605 	streq	r0, [r3, #-1541]!	; 0xfffff9fb
    23f0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    23f4:	07054a08 	streq	r4, [r5, -r8, lsl #20]
    23f8:	12052f06 	andne	r2, r5, #6, 30
    23fc:	07050106 	streq	r0, [r5, -r6, lsl #2]
    2400:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    2404:	05570612 	ldrbeq	r0, [r7, #-1554]	; 0xfffff9ee
    2408:	05360603 	ldreq	r0, [r6, #-1539]!	; 0xfffff9fd
    240c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2410:	05420603 	strbeq	r0, [r2, #-1539]	; 0xfffff9fd
    2414:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2418:	05054201 	streq	r4, [r5, #-513]	; 0xfffffdff
    241c:	2e750306 	cdpcs	3, 7, cr0, cr5, cr6, {0}
    2420:	01061b05 	tsteq	r6, r5, lsl #22
    2424:	062e0505 	strteq	r0, [lr], -r5, lsl #10
    2428:	06130567 	ldreq	r0, [r3], -r7, ror #10
    242c:	3c110501 	cfldr32cc	mvfx0, [r1], {1}
    2430:	33060505 	movwcc	r0, #25861	; 0x6505
    2434:	064b2f59 			; <UNDEFINED> instruction: 0x064b2f59
    2438:	062b0566 	strteq	r0, [fp], -r6, ror #10
    243c:	827f8103 	rsbshi	r8, pc, #-1073741824	; 0xc0000000
    2440:	05012d05 	streq	r2, [r1, #-3333]	; 0xfffff2fb
    2444:	0501063a 	streq	r0, [r1, #-1594]	; 0xfffff9c6
    2448:	05000619 	streq	r0, [r0, #-1561]	; 0xfffff9e7
    244c:	00150c02 	andseq	r0, r5, r2, lsl #24
    2450:	01af0300 			; <UNDEFINED> instruction: 0x01af0300
    2454:	2f030501 	svccs	0x00030501
    2458:	06070513 			; <UNDEFINED> instruction: 0x06070513
    245c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2460:	1314132f 	tstne	r4, #-1140850688	; 0xbc000000
    2464:	01080514 	tsteq	r8, r4, lsl r5
    2468:	01060305 	tsteq	r6, r5, lsl #6
    246c:	02002c05 	andeq	r2, r0, #1280	; 0x500
    2470:	20060304 	andcs	r0, r6, r4, lsl #6
    2474:	02003905 	andeq	r3, r0, #81920	; 0x14000
    2478:	01060304 	tsteq	r6, r4, lsl #6
    247c:	02002705 	andeq	r2, r0, #1310720	; 0x140000
    2480:	66060304 	strvs	r0, [r6], -r4, lsl #6
    2484:	02002805 	andeq	r2, r0, #327680	; 0x50000
    2488:	01060304 	tsteq	r6, r4, lsl #6
    248c:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    2490:	20060104 	andcs	r0, r6, r4, lsl #2
    2494:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    2498:	01060104 	tsteq	r6, r4, lsl #2
    249c:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
    24a0:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    24a4:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    24a8:	04020003 	streq	r0, [r2], #-3
    24ac:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
    24b0:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    24b4:	052e0603 	streq	r0, [lr, #-1539]!	; 0xfffff9fd
    24b8:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
    24bc:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    24c0:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
    24c4:	05660603 	strbeq	r0, [r6, #-1539]!	; 0xfffff9fd
    24c8:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
    24cc:	00010603 	andeq	r0, r1, r3, lsl #12
    24d0:	20030402 	andcs	r0, r3, r2, lsl #8
    24d4:	03040200 	movweq	r0, #16896	; 0x4200
    24d8:	06030520 	streq	r0, [r3], -r0, lsr #10
    24dc:	07052f14 	smladeq	r5, r4, pc, r2	; <UNPREDICTABLE>
    24e0:	3c750306 	ldclcc	3, cr0, [r5], #-24	; 0xffffffe8
    24e4:	30031505 	andcc	r1, r3, r5, lsl #10
    24e8:	1405202e 	strne	r2, [r5], #-46	; 0xffffffd2
    24ec:	01040200 	mrseq	r0, R12_usr
    24f0:	20660306 	rsbcs	r0, r6, r6, lsl #6
    24f4:	02001805 	andeq	r1, r0, #327680	; 0x50000
    24f8:	01060104 	tsteq	r6, r4, lsl #2
    24fc:	01040200 	mrseq	r0, R12_usr
    2500:	0609053c 			; <UNDEFINED> instruction: 0x0609053c
    2504:	06120527 	ldreq	r0, [r2], -r7, lsr #10
    2508:	201a0501 	andscs	r0, sl, r1, lsl #10
    250c:	59060905 	stmdbpl	r6, {r0, r2, r8, fp}
    2510:	21063c06 	tstcs	r6, r6, lsl #24
    2514:	c7030305 	strgt	r0, [r3, -r5, lsl #6]
    2518:	05400100 	strbeq	r0, [r0, #-256]	; 0xffffff00
    251c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    2520:	055b0603 	ldrbeq	r0, [fp, #-1539]	; 0xfffff9fd
    2524:	20010606 	andcs	r0, r1, r6, lsl #12
    2528:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
    252c:	b5030609 	strlt	r0, [r3, #-1545]	; 0xfffff9f7
    2530:	0d052e7f 	stceq	14, cr2, [r5, #-508]	; 0xfffffe04
    2534:	0c050106 	stfeqs	f0, [r5], {6}
    2538:	0609052e 	streq	r0, [r9], -lr, lsr #10
    253c:	06130526 	ldreq	r0, [r3], -r6, lsr #10
    2540:	200c0501 	andcs	r0, ip, r1, lsl #10
    2544:	30060905 	andcc	r0, r6, r5, lsl #18
    2548:	01060e05 	tsteq	r6, r5, lsl #28
    254c:	30060905 	andcc	r0, r6, r5, lsl #18
    2550:	01061a05 	tsteq	r6, r5, lsl #20
    2554:	59060905 	stmdbpl	r6, {r0, r2, r8, fp}
    2558:	2a030705 	bcs	c4174 <__ROM_SIZE__+0x84174>
    255c:	060b052e 	streq	r0, [fp], -lr, lsr #10
    2560:	2e0a0501 	cfsh32cs	mvfx0, mvfx10, #1
    2564:	2f060905 	svccs	0x00060905
    2568:	4b030b05 	blmi	c5184 <__ROM_SIZE__+0x85184>
    256c:	2b052f58 	blcs	14e2d4 <__ROM_SIZE__+0x10e2d4>
    2570:	01040200 	mrseq	r0, R12_usr
    2574:	3c0d0306 	stccc	3, cr0, [sp], {6}
    2578:	202f1505 	eorcs	r1, pc, r5, lsl #10
    257c:	02002905 	andeq	r2, r0, #81920	; 0x14000
    2580:	05220104 	streq	r0, [r2, #-260]!	; 0xfffffefc
    2584:	05203015 	streq	r3, [r0, #-21]!	; 0xffffffeb
    2588:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
    258c:	09052201 	stmdbeq	r5, {r0, r9, sp}
    2590:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    2594:	0c050106 	stfeqs	f0, [r5], {6}
    2598:	060b052e 	streq	r0, [fp], -lr, lsr #10
    259c:	05200621 	streq	r0, [r0, #-1569]!	; 0xfffff9df
    25a0:	0a030609 	beq	c3dcc <__ROM_SIZE__+0x83dcc>
    25a4:	060c053c 			; <UNDEFINED> instruction: 0x060c053c
    25a8:	060b0501 	streq	r0, [fp], -r1, lsl #10
    25ac:	4d090531 	cfstr32mi	mvfx0, [r9, #-196]	; 0xffffff3c
    25b0:	06150513 			; <UNDEFINED> instruction: 0x06150513
    25b4:	21090511 	tstcs	r9, r1, lsl r5
    25b8:	03060b05 	movweq	r0, #27397	; 0x6b05
    25bc:	20062071 	andcs	r2, r6, r1, ror r0
    25c0:	3c090306 	stccc	3, cr0, [r9], {6}
    25c4:	0a030905 	beq	c49e0 <__ROM_SIZE__+0x849e0>
    25c8:	062e0658 			; <UNDEFINED> instruction: 0x062e0658
    25cc:	0307052f 	movweq	r0, #29999	; 0x752f
    25d0:	0305200b 	movweq	r2, #20491	; 0x500b
    25d4:	2e7fb103 	expcse	f3, f3
    25d8:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    25dc:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    25e0:	05052e08 	streq	r2, [r5, #-3592]	; 0xfffff1f8
    25e4:	09053306 	stmdbeq	r5, {r1, r2, r8, r9, ip, sp}
    25e8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    25ec:	08053f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, ip, sp}
    25f0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    25f4:	08053f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, ip, sp}
    25f8:	07050106 	streq	r0, [r5, -r6, lsl #2]
    25fc:	09053d06 	stmdbeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    2600:	07050106 	streq	r0, [r5, -r6, lsl #2]
    2604:	0a052206 	beq	14ae24 <__ROM_SIZE__+0x10ae24>
    2608:	20050106 	andcs	r0, r5, r6, lsl #2
    260c:	01040200 	mrseq	r0, R12_usr
    2610:	0607052e 	streq	r0, [r7], -lr, lsr #10
    2614:	060a0534 			; <UNDEFINED> instruction: 0x060a0534
    2618:	00170501 	andseq	r0, r7, r1, lsl #10
    261c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    2620:	03060e05 	movweq	r0, #28165	; 0x6e05
    2624:	11052e0d 	tstne	r5, sp, lsl #28
    2628:	0e050106 	adfeqs	f0, f5, f6
    262c:	11053106 	tstne	r5, r6, lsl #2
    2630:	0e050106 	adfeqs	f0, f5, f6
    2634:	1c053106 	stfnes	f3, [r5], {6}
    2638:	11050106 	tstne	r5, r6, lsl #2
    263c:	060e053c 			; <UNDEFINED> instruction: 0x060e053c
    2640:	061c0532 			; <UNDEFINED> instruction: 0x061c0532
    2644:	3c110501 	cfldr32cc	mvfx0, [r1], {1}
    2648:	03060c05 	movweq	r0, #27653	; 0x6c05
    264c:	0f052e16 	svceq	0x00052e16
    2650:	09050106 	stmdbeq	r5, {r1, r2, r8}
    2654:	12053406 	andne	r3, r5, #100663296	; 0x6000000
    2658:	1a050106 	bne	142a78 <__ROM_SIZE__+0x102a78>
    265c:	06090520 	streq	r0, [r9], -r0, lsr #10
    2660:	060e0559 			; <UNDEFINED> instruction: 0x060e0559
    2664:	00110501 	andseq	r0, r1, r1, lsl #10
    2668:	06010402 	streq	r0, [r1], -r2, lsl #8
    266c:	053c1703 	ldreq	r1, [ip, #-1795]!	; 0xfffff8fd
    2670:	04020001 	streq	r0, [r2], #-1
    2674:	053d0601 	ldreq	r0, [sp, #-1537]!	; 0xfffff9ff
    2678:	0500060f 	streq	r0, [r0, #-1551]	; 0xfffff9f1
    267c:	00168402 	andseq	r8, r6, r2, lsl #8
    2680:	013d0300 	teqeq	sp, r0, lsl #6
    2684:	2f210305 	svccs	0x00210305
    2688:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    268c:	05053001 	streq	r3, [r5, #-1]
    2690:	01040200 	mrseq	r0, R12_usr
    2694:	00090513 	andeq	r0, r9, r3, lsl r5
    2698:	2d010402 	cfstrscs	mvf0, [r1, #-8]
    269c:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
    26a0:	00169802 	andseq	r9, r6, r2, lsl #16
    26a4:	01061700 	tsteq	r6, r0, lsl #14
    26a8:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    26ac:	0a051515 	beq	147b08 <__ROM_SIZE__+0x107b08>
    26b0:	052e0106 	streq	r0, [lr, #-262]!	; 0xfffffefa
    26b4:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    26b8:	20010606 	andcs	r0, r1, r6, lsl #12
    26bc:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    26c0:	01060a05 	tsteq	r6, r5, lsl #20
    26c4:	052f0105 	streq	r0, [pc, #-261]!	; 25c7 <rsbox+0xbdb>
    26c8:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
    26cc:	00390601 	eorseq	r0, r9, r1, lsl #12
    26d0:	06010402 	streq	r0, [r1], -r2, lsl #8
    26d4:	0626053c 			; <UNDEFINED> instruction: 0x0626053c
    26d8:	c0020500 	andgt	r0, r2, r0, lsl #10
    26dc:	17000016 	smladne	r0, r6, r0, r0
    26e0:	03050106 	movweq	r0, #20742	; 0x5106
    26e4:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    26e8:	060c0501 	streq	r0, [ip], -r1, lsl #10
    26ec:	20030501 	andcs	r0, r3, r1, lsl #10
    26f0:	02003205 	andeq	r3, r0, #1342177280	; 0x50000000
    26f4:	20060204 	andcs	r0, r6, r4, lsl #4
    26f8:	02003305 	andeq	r3, r0, #335544320	; 0x14000000
    26fc:	01060204 	tsteq	r6, r4, lsl #4
    2700:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    2704:	20060104 	andcs	r0, r6, r4, lsl #2
    2708:	02001805 	andeq	r1, r0, #327680	; 0x50000
    270c:	01060104 	tsteq	r6, r4, lsl #2
    2710:	02001b05 	andeq	r1, r0, #5120	; 0x1400
    2714:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2718:	04020003 	streq	r0, [r2], #-3
    271c:	05052001 	streq	r2, [r5, #-1]
    2720:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    2724:	08050106 	stmdaeq	r5, {r1, r2, r8}
    2728:	0607053c 			; <UNDEFINED> instruction: 0x0607053c
    272c:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
    2730:	2e160501 	cfmul32cs	mvfx0, mvfx6, mvfx1
    2734:	150a052e 	strne	r0, [sl, #-1326]	; 0xfffffad2
    2738:	20210105 	eorcs	r0, r1, r5, lsl #2
    273c:	01000202 	tsteq	r0, r2, lsl #4
    2740:	Address 0x0000000000002740 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
   4:	5f646e61 	svcpl	0x00646e61
   8:	706c6568 	rsbvc	r6, ip, r8, ror #10
   c:	6f682f00 	svcvs	0x00682f00
  10:	642f656d 	strtvs	r6, [pc], #-1389	; 18 <vector_table+0x18>
  14:	76616472 			; <UNDEFINED> instruction: 0x76616472
  18:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
  1c:	652f626f 	strvs	r6, [pc, #-623]!	; fffffdb5 <_STACK_TOP_+0xdfff7db9>
  20:	2f667463 	svccs	0x00667463
  24:	2f626f66 	svccs	0x00626f66
  28:	6773656d 	ldrbvs	r6, [r3, -sp, ror #10]!
  2c:	6300632e 	movwvs	r6, #814	; 0x32e
  30:	616d6d6f 	cmnvs	sp, pc, ror #26
  34:	6300646e 	movwvs	r6, #1134	; 0x46e
  38:	616d6d6f 	cmnvs	sp, pc, ror #26
  3c:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
  40:	00656d61 	rsbeq	r6, r5, r1, ror #26
  44:	7261765f 	rsbvc	r7, r1, #99614720	; 0x5f00000
  48:	5f726163 	svcpl	0x00726163
  4c:	6773656d 	ldrbvs	r6, [r3, -sp, ror #10]!
  50:	736e7500 	cmnvc	lr, #0, 10
  54:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  58:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  5c:	47007261 	strmi	r7, [r0, -r1, ror #4]
  60:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  64:	31203731 			; <UNDEFINED> instruction: 0x31203731
  68:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
  6c:	30322031 	eorscc	r2, r2, r1, lsr r0
  70:	36303132 			; <UNDEFINED> instruction: 0x36303132
  74:	28203132 	stmdacs	r0!, {r1, r4, r5, r8, ip, sp}
  78:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  7c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  80:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
  84:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
  88:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
  8c:	346d2d78 	strbtcc	r2, [sp], #-3448	; 0xfffff288
  90:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  94:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  98:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  9c:	3d656e75 	stclcc	14, cr6, [r5, #-468]!	; 0xfffffe2c
  a0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
  a4:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
  a8:	6d2d2034 	stcvs	0, cr2, [sp, #-208]!	; 0xffffff30
  ac:	616f6c66 	cmnvs	pc, r6, ror #24
  b0:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
  b4:	6f733d69 	svcvs	0x00733d69
  b8:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
  bc:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  c0:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  c4:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0xfffff993
  c8:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  cc:	62646767 	rsbvs	r6, r4, #27000832	; 0x19c0000
  d0:	674f2d20 	strbvs	r2, [pc, -r0, lsr #26]
  d4:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
  d8:	73656572 	cmnvc	r5, #478150656	; 0x1c800000
  dc:	646e6174 	strbtvs	r6, [lr], #-372	; 0xfffffe8c
  e0:	00676e69 	rsbeq	r6, r7, r9, ror #28
  e4:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
  e8:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
  ec:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  f0:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
  f4:	7300746e 	movwvc	r7, #1134	; 0x46e
  f8:	6d637274 	sfmvs	f7, 2, [r3, #-464]!	; 0xfffffe30
  fc:	6f6c0070 	svcvs	0x006c0070
 100:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 104:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 108:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 10c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 110:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 114:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 118:	6f6c0063 	svcvs	0x006c0063
 11c:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 120:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 124:	00746e69 	rsbseq	r6, r4, r9, ror #28
 128:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 12c:	73006674 	movwvc	r6, #1652	; 0x674
 130:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 134:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 138:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 13c:	682f0076 	stmdavs	pc!, {r1, r2, r4, r5, r6}	; <UNPREDICTABLE>
 140:	2f656d6f 	svccs	0x00656d6f
 144:	61647264 	cmnvs	r4, r4, ror #4
 148:	652f6576 	strvs	r6, [pc, #-1398]!	; fffffbda <_STACK_TOP_+0xdfff7bde>
 14c:	2f626f66 	svccs	0x00626f66
 150:	66746365 	ldrbtvs	r6, [r4], -r5, ror #6
 154:	626f662f 	rsbvs	r6, pc, #49283072	; 0x2f00000
 158:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
 15c:	6c00745f 	cfstrsvs	mvf7, [r0], {95}	; 0x5f
 160:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 164:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
 168:	5f00656c 	svcpl	0x0000656c
 16c:	70726176 	rsbsvc	r6, r2, r6, ror r1
 170:	00676e69 	rsbeq	r6, r7, r9, ror #28
 174:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 178:	00326674 	eorseq	r6, r2, r4, ror r6
 17c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; c8 <vector_table+0xc8>
 180:	72642f65 	rsbvc	r2, r4, #404	; 0x194
 184:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
 188:	6f66652f 	svcvs	0x0066652f
 18c:	63652f62 	cmnvs	r5, #392	; 0x188
 190:	662f6674 			; <UNDEFINED> instruction: 0x662f6674
 194:	702f626f 	eorvc	r6, pc, pc, ror #4
 198:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
 19c:	765f0063 	ldrbvc	r0, [pc], -r3, rrx
 1a0:	61707261 	cmnvs	r0, r1, ror #4
 1a4:	2f007269 	svccs	0x00007269
 1a8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 1ac:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
 1b0:	2f657661 	svccs	0x00657661
 1b4:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
 1b8:	7463652f 	strbtvc	r6, [r3], #-1327	; 0xfffffad1
 1bc:	6f662f66 	svcvs	0x00662f66
 1c0:	61702f62 	cmnvs	r0, r2, ror #30
 1c4:	632e7269 			; <UNDEFINED> instruction: 0x632e7269
 1c8:	72617500 	rsbvc	r7, r1, #0, 10
 1cc:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
 1d0:	2f007469 	svccs	0x00007469
 1d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 1d8:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
 1dc:	2f657661 	svccs	0x00657661
 1e0:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
 1e4:	7463652f 	strbtvc	r6, [r3], #-1327	; 0xfffffad1
 1e8:	6f662f66 	svcvs	0x00662f66
 1ec:	6c702f62 	ldclvs	15, cr2, [r0], #-392	; 0xfffffe78
 1f0:	6f667461 	svcvs	0x00667461
 1f4:	752f6d72 	strvc	r6, [pc, #-3442]!	; fffff48a <_STACK_TOP_+0xdfff748e>
 1f8:	2f747261 	svccs	0x00747261
 1fc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 200:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
 204:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
 208:	75707500 	ldrbvc	r7, [r0, #-1280]!	; 0xfffffb00
 20c:	2f006374 	svccs	0x00006374
 210:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 214:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
 218:	2f657661 	svccs	0x00657661
 21c:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
 220:	7463652f 	strbtvc	r6, [r3], #-1327	; 0xfffffad1
 224:	6f662f66 	svcvs	0x00662f66
 228:	6c702f62 	ldclvs	15, cr2, [r0], #-392	; 0xfffffe78
 22c:	6f667461 	svcvs	0x00667461
 230:	752f6d72 	strvc	r6, [pc, #-3442]!	; fffff4c6 <_STACK_TOP_+0xdfff74ca>
 234:	2f747261 	svccs	0x00747261
 238:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 23c:	00632e32 	rsbeq	r2, r3, r2, lsr lr
 240:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 244:	6e695f32 	mcrvs	15, 3, r5, cr9, cr2, {1}
 248:	75007469 	strvc	r7, [r0, #-1129]	; 0xfffffb97
 24c:	74757032 	ldrbtvc	r7, [r5], #-50	; 0xffffffce
 250:	32750063 	rsbscc	r0, r5, #99	; 0x63
 254:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
 258:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
 25c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 260:	73007075 	movwvc	r7, #117	; 0x75
 264:	775f7465 	ldrbvc	r7, [pc, -r5, ror #8]
 268:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 26c:	6168635f 	cmnvs	r8, pc, asr r3
 270:	73003272 	movwvc	r3, #626	; 0x272
 274:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
 278:	5f646165 	svcpl	0x00646165
 27c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 280:	65730032 	ldrbvs	r0, [r3, #-50]!	; 0xffffffce
 284:	72775f74 	rsbsvc	r5, r7, #116, 30	; 0x1d0
 288:	5f657469 	svcpl	0x00657469
 28c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 290:	6f682f00 	svcvs	0x00682f00
 294:	642f656d 	strtvs	r6, [pc], #-1389	; 29c <vector_table+0x29c>
 298:	76616472 			; <UNDEFINED> instruction: 0x76616472
 29c:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
 2a0:	652f626f 	strvs	r6, [pc, #-623]!	; 39 <vector_table+0x39>
 2a4:	2f667463 	svccs	0x00667463
 2a8:	2f626f66 	svccs	0x00626f66
 2ac:	74616c70 	strbtvc	r6, [r1], #-3184	; 0xfffff390
 2b0:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
 2b4:	616c702f 	cmnvs	ip, pc, lsr #32
 2b8:	726f6674 	rsbvc	r6, pc, #116, 12	; 0x7400000
 2bc:	00632e6d 	rsbeq	r2, r3, sp, ror #28
 2c0:	5f746573 	svcpl	0x00746573
 2c4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 2c8:	6168635f 	cmnvs	r8, pc, asr r3
 2cc:	6c700072 	ldclvs	0, cr0, [r0], #-456	; 0xfffffe38
 2d0:	6f667461 	svcvs	0x00667461
 2d4:	695f6d72 	ldmdbvs	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 2d8:	0074696e 	rsbseq	r6, r4, lr, ror #18
 2dc:	61666564 	cmnvs	r6, r4, ror #10
 2e0:	5f746c75 	svcpl	0x00746c75
 2e4:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
 2e8:	0072656c 	rsbseq	r6, r2, ip, ror #10
 2ec:	4154535f 	cmpmi	r4, pc, asr r3
 2f0:	545f4b43 	ldrbpl	r4, [pc], #-2883	; 2f8 <vector_table+0x2f8>
 2f4:	005f504f 	subseq	r5, pc, pc, asr #32
 2f8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 244 <vector_table+0x244>
 2fc:	72642f65 	rsbvc	r2, r4, #404	; 0x194
 300:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
 304:	6f66652f 	svcvs	0x0066652f
 308:	63652f62 	cmnvs	r5, #392	; 0x188
 30c:	662f6674 			; <UNDEFINED> instruction: 0x662f6674
 310:	702f626f 	eorvc	r6, pc, pc, ror #4
 314:	6674616c 	ldrbtvs	r6, [r4], -ip, ror #2
 318:	2f6d726f 	svccs	0x006d726f
 31c:	74636576 	strbtvc	r6, [r3], #-1398	; 0xfffffa8a
 320:	745f726f 	ldrbvc	r7, [pc], #-623	; 328 <vector_table+0x328>
 324:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 328:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
 32c:	33746e69 	cmncc	r4, #1680	; 0x690
 330:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 334:	74636576 	strbtvc	r6, [r3], #-1398	; 0xfffffa8a
 338:	745f726f 	ldrbvc	r7, [pc], #-623	; 340 <vector_table+0x340>
 33c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 340:	6e677200 	cdpvs	2, 6, cr7, cr7, cr0, {0}
 344:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
 348:	00745f6f 	rsbseq	r5, r4, pc, ror #30
 34c:	454e4f4e 	strbmi	r4, [lr, #-3918]	; 0xfffff0b2
 350:	6e677200 	cdpvs	2, 6, cr7, cr7, cr0, {0}
 354:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
 358:	756f006f 	strbvc	r0, [pc, #-111]!	; 2f1 <vector_table+0x2f1>
 35c:	75625f74 	strbvc	r5, [r2, #-3956]!	; 0xfffff08c
 360:	67725f66 	ldrbvs	r5, [r2, -r6, ror #30]!
 364:	656d006e 	strbvs	r0, [sp, #-110]!	; 0xffffff92
 368:	7465736d 	strbtvc	r7, [r5], #-877	; 0xfffffc93
 36c:	6c657300 	stclvs	3, cr7, [r5], #-0
 370:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 374:	6f6d5f64 	svcvs	0x006d5f64
 378:	6d006564 	cfstr32vs	mvfx6, [r0, #-400]	; 0xfffffe70
 37c:	6f6c6d65 	svcvs	0x006c6d65
 380:	75705f67 	ldrbvc	r5, [r0, #-3943]!	; 0xfffff099
 384:	63006374 	movwvs	r6, #884	; 0x374
 388:	5f727275 	svcpl	0x00727275
 38c:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 390:	6e690078 	mcrvs	0, 3, r0, cr9, cr8, {3}
 394:	75625f70 	strbvc	r5, [r2, #-3952]!	; 0xfffff090
 398:	67725f66 	ldrbvs	r5, [r2, -r6, ror #30]!
 39c:	6975006e 	ldmdbvs	r5!, {r1, r2, r3, r5, r6}^
 3a0:	5f38746e 	svcpl	0x0038746e
 3a4:	656d0074 	strbvs	r0, [sp, #-116]!	; 0xffffff8c
 3a8:	676f6c6d 	strbvs	r6, [pc, -sp, ror #24]!
 3ac:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 3b0:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
 3b4:	2f656d6f 	svccs	0x00656d6f
 3b8:	61647264 	cmnvs	r4, r4, ror #4
 3bc:	652f6576 	strvs	r6, [pc, #-1398]!	; fffffe4e <_STACK_TOP_+0xdfff7e52>
int car_mesg(int argc, char** argv) {
 3c0:	2f626f66 	svccs	0x00626f66
 3c4:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
    printf("Received the message:");
 3c8:	696c2f6c 	stmdbvs	ip!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    for (ctr = 1; ctr < argc; ctr++) {
 3cc:	656d2f62 	strbvs	r2, [sp, #-3938]!	; 0xfffff09e
        printf(" %s", argv[ctr]);
 3d0:	676f6c6d 	strbvs	r6, [pc, -sp, ror #24]!
 3d4:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	; 0xffffff44
 3d8:	2e676f6c 	cdpcs	15, 6, cr6, cr7, cr12, {3}
    for (ctr = 1; ctr < argc; ctr++) {
 3dc:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
    printf("\n");
 3e0:	676f6c6d 	strbvs	r6, [pc, -sp, ror #24]!
 3e4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    if (argc > 0) {
 3e8:	4e490063 	cdpmi	0, 4, cr0, cr9, cr3, {3}
}
 3ec:	554f5f50 	strbpl	r5, [pc, #-3920]	; fffff4a4 <_STACK_TOP_+0xdfff74a8>
        if (strcmp(argv[1], "PING_REPLY") == 0) {
 3f0:	6f6d0054 	svcvs	0x006d0054
 3f4:	745f6564 	ldrbvc	r6, [pc], #-1380	; 3fc <car_mesg+0x3c>
            printf("Got a ping reply.\n");
 3f8:	45484300 	strbmi	r4, [r8, #-768]	; 0xfffffd00
 3fc:	435f4b43 	cmpmi	pc, #68608	; 0x10c00
            printf("strcmp didn't match %s\n", argv[1]);
 400:	756f0048 	strbvc	r0, [pc, #-72]!	; 3c0 <car_mesg>
 404:	72747374 	rsbsvc	r7, r4, #116, 6	; 0xd0000001
 408:	61656c00 	cmnvs	r5, r0, lsl #24
 40c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
 410:	72657a5f 	rsbvc	r7, r5, #389120	; 0x5f000
 414:	67695f6f 	strbvs	r5, [r9, -pc, ror #30]!
 418:	65726f6e 	ldrbvs	r6, [r2, #-3950]!	; 0xfffff092
 41c:	5f5f0064 	svcpl	0x005f0064
 420:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
int ping(int argc, char** argv) {
 424:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    printf("Pinging the car.\n");
 428:	5f327261 	svcpl	0x00327261
    printf2("FOB_MESG PING\n");
 42c:	6568005f 	strbvs	r0, [r8, #-95]!	; 0xffffffa1
 430:	62617478 	rsbvs	r7, r1, #120, 8	; 0x78000000
}
 434:	6e00656c 	cfsh32vs	mvfx6, mvfx0, #60
 438:	6c5f6d75 	mrrcvs	13, 7, r6, pc, cr5	; <UNPREDICTABLE>
 43c:	50006e65 	andpl	r6, r0, r5, ror #28
int pair(int argc, char** argv) {
 440:	45535241 	ldrbmi	r5, [r3, #-577]	; 0xfffffdbf
    printf("Sending a pair request.\n");
 444:	544d465f 	strbpl	r4, [sp], #-1631	; 0xfffff9a1
    printf2("FOB_MESG PAIR\n");
 448:	5254535f 	subspl	r5, r4, #2080374785	; 0x7c000001
 44c:	635f6c00 	cmpvs	pc, #0, 24
}
 450:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 454:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
 458:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
void uputc(char c) {
 45c:	70007473 	andvc	r7, r0, r3, ror r4
  while ((UARTFR >> 5) & 1)
 460:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 464:	74735f66 	ldrbtvc	r5, [r3], #-3942	; 0xfffff09a
  UART_DR = c;
 468:	00657461 	rsbeq	r7, r5, r1, ror #8
  if (c == '\n')
 46c:	6f6f425f 	svcvs	0x006f425f
}
 470:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
    uputc('\r');
 474:	2f656d6f 	svccs	0x00656d6f
}
 478:	61647264 	cmnvs	r4, r4, ror #4
 47c:	652f6576 	strvs	r6, [pc, #-1398]!	; ffffff0e <_STACK_TOP_+0xdfff7f12>
  if (!((UARTFR >> 4) & 1)) return UART_DR;
 480:	2f626f66 	svccs	0x00626f66
 484:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
 488:	696c2f6c 	stmdbvs	ip!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
 48c:	72702f62 	rsbsvc	r2, r0, #392	; 0x188
  return -1;
 490:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
}
 494:	6972702f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, ip, sp, lr}^
 498:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
  UARTCTL = 0;
 49c:	5f5f0063 	svcpl	0x005f0063
 4a0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  UARTIBRD = 8;
 4a4:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
  UARTFBRD = 44;
 4a8:	5f5f7261 	svcpl	0x005f7261
  UARTCC = 0;
 4ac:	61747300 	cmnvs	r4, r0, lsl #6
  UARTLCRH = 0x60;
 4b0:	625f7472 	subsvs	r7, pc, #1912602624	; 0x72000000
  UARTCTL = 0x301;
 4b4:	5f007469 	svcpl	0x00007469
}
 4b8:	756e675f 	strbvc	r6, [lr, #-1887]!	; 0xfffff8a1
 4bc:	61765f63 	cmnvs	r6, r3, ror #30
void u2putc(char c) {
 4c0:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
  while ((UART2FR >> 5) & 1)
 4c4:	61760074 	cmnvs	r6, r4, ror r0
 4c8:	0065756c 	rsbeq	r7, r5, ip, ror #10
  UART2_DR = c;
 4cc:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
  if (c == '\n')
 4d0:	6e5f6674 	mrcvs	6, 2, r6, cr15, cr4, {3}
}
 4d4:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
    u2putc('\r');
 4d8:	61007372 	tstvs	r0, r2, ror r3
}
 4dc:	00736772 	rsbseq	r6, r3, r2, ror r7
 4e0:	70615f5f 	rsbvc	r5, r1, pc, asr pc
  if (!((UART2FR >> 4) & 1)) return UART2_DR;
 4e4:	53454100 	movtpl	r4, #20736	; 0x5100
 4e8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 4ec:	74635f74 	strbtvc	r5, [r3], #-3956	; 0xfffff08c
 4f0:	76695f78 	uqsub16vc	r5, r9, r8
  return -1;
 4f4:	53454100 	movtpl	r4, #20736	; 0x5100
}
 4f8:	7874635f 	ldmdavc	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
 4fc:	69747800 	ldmdbvs	r4!, {fp, ip, sp, lr}^
  UART2CTL = 0;
 500:	7400656d 	strvc	r6, [r0], #-1389	; 0xfffffa93
 504:	61706d65 	cmnvs	r0, r5, ror #26
  UART2IBRD = 8;
 508:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
  UART2FBRD = 44;
 50c:	74730070 	ldrbtvc	r0, [r3], #-112	; 0xffffff90
  UART2CC = 0;
 510:	4e65726f 	cdpmi	2, 6, cr7, cr5, cr15, {3}
  UART2LCRH = 0x60;
 514:	49747865 	ldmdbmi	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
  UART2CTL = 0x301;
 518:	73720076 	cmnvc	r2, #118	; 0x76
}
 51c:	00786f62 	rsbseq	r6, r8, r2, ror #30
 520:	5f534541 	svcpl	0x00534541
  RCGCUART |= 3;
 524:	5f434243 	svcpl	0x00434243
 528:	72636e65 	rsbvc	r6, r3, #1616	; 0x650
 52c:	5f747079 	svcpl	0x00747079
 530:	66667562 	strbtvs	r7, [r6], -r2, ror #10
  RCGCGPIO |= 3;
 534:	41007265 	tstmi	r0, r5, ror #4
 538:	455f5345 	ldrbmi	r5, [pc, #-837]	; 1fb <vector_table+0x1fb>
 53c:	645f4243 	ldrbvs	r4, [pc], #-579	; 544 <pin_setup+0x20>
  GPIODEN = 0x03;
 540:	79726365 	ldmdbvc	r2!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 544:	6d007470 	cfstrsvs	mvf7, [r0, #-448]	; 0xfffffe40
  GPIOAFSEL = 0x03;
 548:	70636d65 	rsbvc	r6, r3, r5, ror #26
  GPIOPCTL |= 0x00000011;
 54c:	6e490079 	mcrvs	0, 2, r0, cr9, cr9, {3}
 550:	70694376 	rsbvc	r4, r9, r6, ror r3
 554:	00726568 	rsbseq	r6, r2, r8, ror #10
  GPIODEN2 = 0x03;
 558:	6d743875 	ldclvs	8, cr3, [r4, #-468]!	; 0xfffffe2c
 55c:	656c0070 	strbvs	r0, [ip, #-112]!	; 0xffffff90
  GPIOAFSEL2 = 0x03;
 560:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
  GPIOPCTL2 |= 0x00000011;
 564:	61747300 	cmnvs	r4, r0, lsl #6
 568:	745f6574 	ldrbvc	r6, [pc], #-1396	; 570 <pin_setup+0x4c>
 56c:	53454100 	movtpl	r4, #20736	; 0x5100
}
 570:	4342435f 	movtmi	r4, #9055	; 0x235f
 574:	6365645f 	cmnvs	r5, #1593835520	; 0x5f000000
void platform_init() {
 578:	74707972 	ldrbtvc	r7, [r0], #-2418	; 0xfffff68e
    pin_setup();
 57c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
    uart_init();
 580:	00726566 	rsbseq	r6, r2, r6, ror #10
    uart2_init();
 584:	4d766e49 	ldclmi	14, cr6, [r6, #-292]!	; 0xfffffedc
    set_read_char(ugetc);
 588:	6f437869 	svcvs	0x00437869
    set_read_char2(u2getc);
 58c:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
 590:	64410073 	strbvs	r0, [r1], #-115	; 0xffffff8d
    set_write_char(uputc);
 594:	756f5264 	strbvc	r5, [pc, #-612]!	; 338 <vector_table+0x338>
    set_write_char2(u2putc);
 598:	654b646e 	strbvs	r6, [fp, #-1134]	; 0xfffffb92
 59c:	45410079 	strbmi	r0, [r1, #-121]	; 0xffffff87
}
 5a0:	54435f53 	strbpl	r5, [r3], #-3923	; 0xfffff0ad
 5a4:	63785f52 	cmnvs	r8, #328	; 0x148
 5a8:	74707972 	ldrbtvc	r7, [r0], #-2418	; 0xfffff68e
 5ac:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 5b0:	00726566 	rsbseq	r6, r2, r6, ror #10
  selected_mode = mode;
 5b4:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
  if (selected_mode == NONE) {
 5b8:	63520064 	cmpvs	r2, #100	; 0x64
  out_buf_rgn.addr = addr;
 5bc:	41006e6f 	tstmi	r0, pc, ror #28
  out_buf_rgn.size = size / 2;
 5c0:	635f5345 	cmpvs	pc, #335544321	; 0x14000001
  out_buf_rgn.curr_index = 0;
 5c4:	735f7874 	cmpvc	pc, #116, 16	; 0x740000
  inp_buf_rgn.addr = addr + size / 2;
 5c8:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
  inp_buf_rgn.curr_index = 0;
 5cc:	682f0076 	stmdavs	pc!, {r1, r2, r4, r5, r6}	; <UNPREDICTABLE>
  if (!(selected_mode & INP)) {
 5d0:	2f656d6f 	svccs	0x00656d6f
    out_buf_rgn.size = size;
 5d4:	61647264 	cmnvs	r4, r4, ror #4
  memset(addr, 0, size);
 5d8:	652f6576 	strvs	r6, [pc, #-1398]!	; 6a <vector_table+0x6a>
 5dc:	2f626f66 	svccs	0x00626f66
  } else if (!(selected_mode & OUT)) {
 5e0:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
 5e4:	696c2f6c 	stmdbvs	ip!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    inp_buf_rgn.addr = addr;
 5e8:	69742f62 	ldmdbvs	r4!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    inp_buf_rgn.size = size;
 5ec:	612d796e 			; <UNDEFINED> instruction: 0x612d796e
 5f0:	612f7365 			; <UNDEFINED> instruction: 0x612f7365
  if (!(selected_mode & INP)) {
 5f4:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 5f8:	53454100 	movtpl	r4, #20736	; 0x5100
 5fc:	4243455f 	submi	r4, r3, #398458880	; 0x17c00000
  if (inp_buf_rgn.addr[inp_buf_rgn.curr_index] == 0) {
 600:	636e655f 	cmnvs	lr, #398458880	; 0x17c00000
 604:	74707972 	ldrbtvc	r7, [r0], #-2418	; 0xfffff68e
  int val = inp_buf_rgn.addr[inp_buf_rgn.curr_index];
 608:	766e4900 	strbtvc	r4, [lr], -r0, lsl #18
  inp_buf_rgn.addr[inp_buf_rgn.curr_index] = 0;
 60c:	66696853 			; <UNDEFINED> instruction: 0x66696853
  inp_buf_rgn.curr_index++;
 610:	776f5274 			; <UNDEFINED> instruction: 0x776f5274
 614:	69730073 	ldmdbvs	r3!, {r0, r1, r4, r5, r6}^
  if (inp_buf_rgn.curr_index == inp_buf_rgn.size) {
 618:	745f657a 	ldrbvc	r6, [pc], #-1402	; 620 <memlog_getc+0x2c>
}
 61c:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
    inp_buf_rgn.curr_index = 0;
 620:	61707845 	cmnvs	r0, r5, asr #16
    return -1;
 624:	6f69736e 	svcvs	0x0069736e
 628:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
    return -1;
 62c:	62755376 	rsbsvs	r5, r5, #-671088639	; 0xd8000001
 630:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
  if (!(selected_mode & OUT) || c == 0) {
 634:	45410073 	strbmi	r0, [r1, #-115]	; 0xffffff8d
 638:	6e695f53 	mcrvs	15, 3, r5, cr9, cr3, {2}
 63c:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
  out_buf_rgn.addr[out_buf_rgn.curr_index] = (uint8_t) c;
 640:	58007874 	stmdapl	r0, {r2, r4, r5, r6, fp, ip, sp, lr}
 644:	6957726f 	ldmdbvs	r7, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
  out_buf_rgn.curr_index++;
 648:	76496874 			; <UNDEFINED> instruction: 0x76496874
  if (out_buf_rgn.curr_index == out_buf_rgn.size) {
 64c:	6f682f00 	svcvs	0x00682f00
 650:	642f656d 	strtvs	r6, [pc], #-1389	; 658 <memlog_putc+0x24>
    out_buf_rgn.curr_index = 0;
 654:	76616472 			; <UNDEFINED> instruction: 0x76616472
 658:	66652f65 	strbtvs	r2, [r5], -r5, ror #30
 65c:	732f626f 			; <UNDEFINED> instruction: 0x732f626f
static void outstr(const char *str) {
 660:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
  while (*str != '\0') {
 664:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    __write_char__(*str);
 668:	6932612f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r8, sp, lr}
    str++;
 66c:	6932612f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r8, sp, lr}
  while (*str != '\0') {
 670:	6100632e 	tstvs	r0, lr, lsr #6
}
 674:	00686f74 	rsbeq	r6, r8, r4, ror pc
 678:	696f7461 	stmdbvs	pc!, {r0, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
static bool printf_numbers(const char fmt, va_list *args, int l_count) {
 67c:	61765f00 	cmnvs	r6, r0, lsl #30
 680:	32337772 	eorscc	r7, r3, #29884416	; 0x1c80000
  switch (fmt) {
 684:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 688:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 68c:	72747074 	rsbsvc	r7, r4, #116	; 0x74
      if (l_count == 0) {
 690:	5f00745f 	svcpl	0x0000745f
 694:	72726176 	rsbsvc	r6, r2, #-2147483619	; 0x8000001d
        value = va_arg(*args, unsigned int);
 698:	5f646165 	svcpl	0x00646165
 69c:	006d656d 	rsbeq	r6, sp, sp, ror #10
      if (fmt == 'u') {
 6a0:	7261765f 	rsbvc	r7, r1, #99614720	; 0x5f00000
        if (value == 0) {
 6a4:	00323377 	eorseq	r3, r2, r7, ror r3
          __write_char__(hextable[0]);
 6a8:	5f746962 	svcpl	0x00746962
 6ac:	00636f6c 	rsbeq	r6, r3, ip, ror #30
  return true;
 6b0:	5f746962 	svcpl	0x00746962
  switch (fmt) {
 6b4:	006c6176 	rsbeq	r6, ip, r6, ror r1
      outstr("\nprintf-error\n");
 6b8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 604 <memlog_getc+0x10>
      return false;
 6bc:	72642f65 	rsbvc	r2, r4, #404	; 0x194
}
 6c0:	65766164 	ldrbvs	r6, [r6, #-356]!	; 0xfffffe9c
      if (l_count == 0) {
 6c4:	6f66652f 	svcvs	0x0066652f
        value = va_arg(*args, int);
 6c8:	68732f62 	ldmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
 6cc:	2f6c6c65 	svccs	0x006c6c65
      if (value < 0) {
 6d0:	2f62696c 	svccs	0x0062696c
        num[num_len++] = hextable[value % 10];
 6d4:	6c697475 	cfstrdvs	mvd7, [r9], #-468	; 0xfffffe2c
 6d8:	74752f73 	ldrbtvc	r2, [r5], #-3955	; 0xfffff08d
 6dc:	2e736c69 	cdpcs	12, 7, cr6, cr3, cr9, {3}
 6e0:	73750063 	cmnvc	r5, #99	; 0x63
 6e4:	00656761 	rsbeq	r6, r5, r1, ror #14
 6e8:	7261765f 	rsbvc	r7, r1, #99614720	; 0x5f00000
 6ec:	00323372 	eorseq	r3, r2, r2, ror r3
 6f0:	7261765f 	rsbvc	r7, r1, #99614720	; 0x5f00000
 6f4:	5f323372 	svcpl	0x00323372
        value = value / 10;
 6f8:	00746962 	rsbseq	r6, r4, r2, ror #18
      } while (value > 0);
 6fc:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 700:	72747300 	rsbsvc	r7, r4, #0, 6
        __write_char__('-');
 704:	00797063 	rsbseq	r7, r9, r3, rrx
 708:	31727473 	cmncc	r2, r3, ror r4
        value = -value;
 70c:	73656400 	cmnvc	r5, #0, 8
        __write_char__(num[--num_len]);
 710:	68635f74 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 714:	73007261 	movwvc	r7, #609	; 0x261
 718:	635f6372 	cmpvs	pc, #-939524095	; 0xc8000001
 71c:	00726168 	rsbseq	r6, r2, r8, ror #2
 720:	6c727473 	cfldrdvs	mvd7, [r2], #-460	; 0xfffffe34
      while (num_len > 0) {
 724:	2f006e65 	svccs	0x00006e65
  return true;
 728:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
          num[num_len++] = hextable[value % 10];
 72c:	6472642f 	ldrbtvs	r6, [r2], #-1071	; 0xfffffbd1
 730:	2f657661 	svccs	0x00657661
 734:	626f6665 	rsbvs	r6, pc, #105906176	; 0x6500000
 738:	6568732f 	strbvs	r7, [r8, #-815]!	; 0xfffffcd1
 73c:	6c2f6c6c 	stcvs	12, cr6, [pc], #-432	; 594 <platform_init+0x1c>
 740:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
 744:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 748:	74732f67 	ldrbtvc	r2, [r3], #-3943	; 0xfffff099
          value = value / 10;
 74c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
        } while (value > 0);
 750:	7300632e 	movwvc	r6, #814	; 0x32e
        while (num_len > 0) {
 754:	00327274 	eorseq	r7, r2, r4, ror r2
          __write_char__(num[--num_len]);
 758:	73726170 	cmnvc	r2, #112, 2
 75c:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 760:	6300656e 	movwvs	r6, #1390	; 0x56e
 764:	5f726168 	svcpl	0x00726168
 768:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 76c:	765f0074 			; <UNDEFINED> instruction: 0x765f0074
  return true;
 770:	68737261 	ldmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
              __write_char__(hextable[val]);
 774:	685f776f 	ldmdavs	pc, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 778:	6f747369 	svcvs	0x00747369
              leading_zero_ignored = true;
 77c:	61007972 	tstvs	r0, r2, ror r9
          while (start_bit >= 0) {
 780:	76697463 	strbtvc	r7, [r9], -r3, ror #8
            int val = (value >> start_bit) & 0xF;
 784:	72705f65 	rsbsvc	r5, r0, #404	; 0x194
            if (val || leading_zero_ignored) {
 788:	74706d6f 	ldrbtvc	r6, [r0], #-3439	; 0xfffff291
 78c:	635f5f00 	cmpvs	pc, #0, 30
 790:	655f646d 	ldrbvs	r6, [pc, #-1133]	; 32b <vector_table+0x32b>
          bool leading_zero_ignored = false;
 794:	5f636578 	svcpl	0x00636578
          int start_bit = LAST_NIBBLE_FIRST_BIT;
 798:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
  return true;
 79c:	76007375 			; <UNDEFINED> instruction: 0x76007375
        return false;
 7a0:	6f627265 	svcvs	0x00627265
        return false;
 7a4:	5f006573 	svcpl	0x00006573
 7a8:	74616465 	strbtvc	r6, [r1], #-1125	; 0xfffffb9b
 7ac:	682f0061 	stmdavs	pc!, {r0, r5, r6}	; <UNPREDICTABLE>
 7b0:	2f656d6f 	svccs	0x00656d6f
 7b4:	61647264 	cmnvs	r4, r4, ror #4
 7b8:	652f6576 	strvs	r6, [pc, #-1398]!	; 24a <vector_table+0x24a>
int printf(const char *fmt, ...) {
 7bc:	2f626f66 	svccs	0x00626f66
 7c0:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
 7c4:	68732f6c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, r9, sl, fp, sp}^
  va_start(args, fmt);
 7c8:	2f6c6c65 	svccs	0x006c6c65
  while (*fmt) {
 7cc:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
        if (*fmt == '%') {
 7d0:	00632e6c 	rsbeq	r2, r3, ip, ror #28
        __write_char__(*fmt);
 7d4:	7261765f 	rsbvc	r7, r1, #99614720	; 0x5f00000
        fmt++;
 7d8:	5f646d63 	svcpl	0x00646d63
  while (*fmt) {
 7dc:	63657865 	cmnvs	r5, #6619136	; 0x650000
    switch (state) {
 7e0:	6174735f 	cmnvs	r4, pc, asr r3
 7e4:	00737574 	rsbseq	r7, r3, r4, ror r5
          fmt++;
 7e8:	65725f5f 	ldrbvs	r5, [r2, #-3935]!	; 0xfffff0a1
          continue;
 7ec:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
 7f0:	5f726168 	svcpl	0x00726168
 7f4:	6e69005f 	mcrvs	0, 3, r0, cr9, cr15, {2}
 7f8:	61697469 	cmnvs	r9, r9, ror #8
 7fc:	65735f6c 	ldrbvs	r5, [r3, #-3948]!	; 0xfffff094
 800:	00707574 	rsbseq	r7, r0, r4, ror r5
        switch (*fmt) {
 804:	7261765f 	rsbvc	r7, r1, #99614720	; 0x5f00000
 808:	706c6568 	rsbvc	r6, ip, r8, ror #10
 80c:	6e616800 	cdpvs	8, 6, cr6, cr1, cr0, {0}
 810:	5f656c64 	svcpl	0x00656c64
            __write_char__(*fmt);
 814:	00626174 	rsbeq	r6, r2, r4, ror r1
 818:	6f747561 	svcvs	0x00747561
            state = CHECK_CH;
 81c:	616f6c5f 	cmnvs	pc, pc, asr ip	; <UNPREDICTABLE>
            break;
 820:	6c630064 	stclvs	0, cr0, [r3], #-400	; 0xfffffe70
 824:	5f726165 	svcpl	0x00726165
            outstr(va_arg(args, const char *));
 828:	6d6f7270 	sfmvs	f7, 2, [pc, #-448]!	; 670 <outstr+0x10>
 82c:	63007470 	movwvs	r7, #1136	; 0x470
 830:	685f646d 	ldmdavs	pc, {r0, r2, r3, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
            fmt++;
 834:	6f747369 	svcvs	0x00747369
            break;
 838:	63007972 	movwvs	r7, #2418	; 0x972
            __write_char__(va_arg(args, int));
 83c:	735f646d 	cmpvc	pc, #1828716544	; 0x6d000000
 840:	65007274 	strvs	r7, [r0, #-628]	; 0xfffffd8c
 844:	00636578 	rsbeq	r6, r3, r8, ror r5
            fmt++;
 848:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
            break;
 84c:	62655f00 	rsbvs	r5, r5, #0, 30
            if (*fmt == 'l') {
 850:	5f007373 	svcpl	0x00007373
 854:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
            if (printf_numbers(*fmt, &args, l_count)) {
 858:	4241545f 	submi	r5, r1, #1593835520	; 0x5f000000
 85c:	535f454c 	cmppl	pc, #76, 10	; 0x13000000
 860:	54524154 	ldrbpl	r4, [r2], #-340	; 0xfffffeac
              state = CHECK_CH;
 864:	6c005f5f 	stcvs	15, cr5, [r0], {95}	; 0x5f
              fmt++;
 868:	5f656e69 	svcpl	0x00656e69
              l_count++;
 86c:	66667562 	strbtvs	r7, [r6], -r2, ror #10
            if (printf_numbers(*fmt, &args, 0)) {
 870:	61645f00 	cmnvs	r4, r0, lsl #30
 874:	73006174 	movwvc	r6, #372	; 0x174
              fmt++;
 878:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
              break;
 87c:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
            return -1;
 880:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 70c <printf_numbers+0x90>
}
 884:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 888:	5f6f745f 	svcpl	0x006f745f
            return -1;
 88c:	74736968 	ldrbtvc	r6, [r3], #-2408	; 0xfffff698
 890:	0079726f 	rsbseq	r7, r9, pc, ror #4
 894:	61746f74 	cmnvs	r4, r4, ror pc
int printf2(const char *fmt, ...) {
 898:	756e5f6c 	strbvc	r5, [lr, #-3948]!	; 0xfffff094
 89c:	6f635f6d 	svcvs	0x00635f6d
    __write_char2__(*fmt);
 8a0:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 8a4:	63007364 	movwvs	r7, #868	; 0x364
  while (*fmt != '\0') {
 8a8:	655f646d 	ldrbvs	r6, [pc, #-1133]	; 443 <pair+0x3>
 8ac:	005f646e 	subseq	r6, pc, lr, ror #8
 8b0:	55415f5f 	strbpl	r5, [r1, #-3935]	; 0xfffff0a1
 8b4:	545f4f54 	ldrbpl	r4, [pc], #-3924	; 8bc <KeyExpansion>
 8b8:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
{
 8bc:	4154535f 	cmpmi	r4, pc, asr r3
  for (i = 0; i < Nk; ++i)
 8c0:	5f5f5452 	svcpl	0x005f5452
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8c4:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 8c8:	6c616963 			; <UNDEFINED> instruction: 0x6c616963
 8cc:	79656b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}^
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8d0:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
 8d4:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8d8:	765f0066 	ldrbvc	r0, [pc], -r6, rrx
 8dc:	75627261 	strbvc	r7, [r2, #-609]!	; 0xfffffd9f
 8e0:	5f646c69 	svcpl	0x00646c69
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8e4:	6f666e69 	svcvs	0x00666e69
  for (i = 0; i < Nk; ++i)
 8e8:	65727000 	ldrbvs	r7, [r2, #-0]!
 8ec:	5f786966 	svcpl	0x00786966
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8f0:	6374616d 	cmnvs	r4, #1073741851	; 0x4000001b
    j = i * 4; k=(i - Nk) * 4;
 8f4:	616c0068 	cmnvs	ip, r8, rrx
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8f8:	6d5f7473 	cfldrdvs	mvd7, [pc, #-460]	; 734 <printf_numbers+0xb8>
 8fc:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 900:	65727000 	ldrbvs	r7, [r2, #-0]!
 904:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 908:	6f72705f 	svcvs	0x0072705f
 90c:	0074706d 	rsbseq	r7, r4, sp, rrx
 910:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
 914:	68006574 	stmdavs	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
 918:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 91c:	6f645f65 	svcvs	0x00645f65
 920:	615f6e77 	cmpvs	pc, r7, ror lr	; <UNPREDICTABLE>
 924:	776f7272 			; <UNDEFINED> instruction: 0x776f7272
 928:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
 92c:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 930:	6f697463 	svcvs	0x00697463
 934:	64615f6e 	strbtvs	r5, [r1], #-3950	; 0xfffff092
 938:	6d007264 	sfmvs	f7, 4, [r0, #-400]	; 0xfffffe70
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 93c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
      k = (i - 1) * 4;
 940:	756f665f 	strbvc	r6, [pc, #-1631]!	; 2e9 <vector_table+0x2e9>
      tempa[0]=RoundKey[k + 0];
 944:	6d00646e 	cfstrsvs	mvf6, [r0, #-440]	; 0xfffffe48
 948:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
      tempa[1]=RoundKey[k + 1];
 94c:	756f635f 	strbvc	r6, [pc, #-863]!	; 5f5 <memlog_getc+0x1>
 950:	6500746e 	strvs	r7, [r0, #-1134]	; 0xfffffb92
      tempa[2]=RoundKey[k + 2];
 954:	5f636578 	svcpl	0x00636578
 958:	6f747561 	svcvs	0x00747561
      tempa[3]=RoundKey[k + 3];
 95c:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 960:	75630073 	strbvc	r0, [r3, #-115]!	; 0xffffff8d
    if (i % Nk == 0)
 964:	635f7272 	cmpvs	pc, #536870919	; 0x20000007
 968:	616d6d6f 	cmnvs	sp, pc, ror #26
        tempa[0] = tempa[1];
 96c:	705f646e 	subsvc	r6, pc, lr, ror #8
        tempa[1] = tempa[2];
 970:	65007274 	strvs	r7, [r0, #-628]	; 0xfffffd8c
        tempa[2] = tempa[3];
 974:	695f646e 	ldmdbvs	pc, {r1, r2, r3, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
        tempa[3] = u8tmp;
 978:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
        tempa[0] = getSBoxValue(tempa[0]);
 97c:	6e616800 	cdpvs	8, 6, cr6, cr1, cr0, {0}
 980:	5f656c64 	svcpl	0x00656c64
        tempa[1] = getSBoxValue(tempa[1]);
 984:	615f7075 	cmpvs	pc, r5, ror r0	; <UNPREDICTABLE>
 988:	776f7272 			; <UNDEFINED> instruction: 0x776f7272
        tempa[2] = getSBoxValue(tempa[2]);
 98c:	6f6f6c00 	svcvs	0x006f6c00
 990:	78650070 	stmdavc	r5!, {r4, r5, r6}^
        tempa[3] = getSBoxValue(tempa[3]);
 994:	74756365 	ldrbtvc	r6, [r5], #-869	; 0xfffffc9b
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 998:	72610065 	rsbvc	r0, r1, #101	; 0x65
 99c:	656d7567 	strbvs	r7, [sp, #-1383]!	; 0xfffffa99
 9a0:	735f746e 	cmpvc	pc, #1845493760	; 0x6e000000
 9a4:	00657a69 	rsbeq	r7, r5, r9, ror #20
}
 9a8:	63655f5f 	cmnvs	r5, #380	; 0x17c
 9ac:	62006f68 	andvs	r6, r0, #104, 30	; 0x1a0
{
 9b0:	695f6765 	ldmdbvs	pc, {r0, r2, r5, r6, r8, r9, sl, sp, lr}^	; <UNPREDICTABLE>
  for (i = 0; i < 4; ++i)
 9b4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 9b8:	725f5f00 	subsvc	r5, pc, #0, 30
 9bc:	5f646165 	svcpl	0x00646165
 9c0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 9c4:	005f5f32 	subseq	r5, pc, r2, lsr pc	; <UNPREDICTABLE>
 9c8:	6574655f 	ldrbvs	r6, [r4, #-1375]!	; 0xfffffaa1
 9cc:	5f007478 	svcpl	0x00007478
 9d0:	00737362 	rsbseq	r7, r3, r2, ror #6

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ROM_SIZE__+0x1090d24>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	2e30313a 	mrccs	1, 1, r3, cr0, cr10, {1}
   c:	30322d33 	eorscc	r2, r2, r3, lsr sp
  10:	302e3132 	eorcc	r3, lr, r2, lsr r1
  14:	29342d37 	ldmdbcs	r4!, {r0, r1, r2, r4, r5, r8, sl, fp, sp}
  18:	2e303120 	rsfcssp	f3, f0, f0
  1c:	20312e33 	eorscs	r2, r1, r3, lsr lr
  20:	31323032 	teqcc	r2, r2, lsr r0
  24:	31323630 	teqcc	r2, r0, lsr r6
  28:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  2c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  30:	Address 0x0000000000000030 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d453705 	stclcs	7, cr3, [r5, #-20]	; 0xffffffec
  14:	0d06004d 	stceq	0, cr0, [r6, #-308]	; 0xfffffecc
  18:	02094d07 	andeq	r4, r9, #448	; 0x1c0
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	011a0118 	tsteq	sl, r8, lsl r1
  28:	0122011e 			; <UNDEFINED> instruction: 0x0122011e

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	000003c0 	andeq	r0, r0, r0, asr #7
  1c:	00000064 	andeq	r0, r0, r4, rrx
  20:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
  24:	86038504 	strhi	r8, [r3], -r4, lsl #10
  28:	00018e02 	andeq	r8, r1, r2, lsl #28
  2c:	0000000c 	andeq	r0, r0, ip
  30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  34:	7c020001 	stcvc	0, cr0, [r2], {1}
  38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  3c:	00000014 	andeq	r0, r0, r4, lsl r0
  40:	0000002c 	andeq	r0, r0, ip, lsr #32
  44:	00000424 	andeq	r0, r0, r4, lsr #8
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	83080e41 	movwhi	r0, #36417	; 0x8e41
  50:	00018e02 	andeq	r8, r1, r2, lsl #28
  54:	0000000c 	andeq	r0, r0, ip
  58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  5c:	7c020001 	stcvc	0, cr0, [r2], {1}
  60:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  64:	00000014 	andeq	r0, r0, r4, lsl r0
  68:	00000054 	andeq	r0, r0, r4, asr r0
  6c:	00000440 	andeq	r0, r0, r0, asr #8
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	83080e41 	movwhi	r0, #36417	; 0x8e41
  78:	00018e02 	andeq	r8, r1, r2, lsl #28
  7c:	0000000c 	andeq	r0, r0, ip
  80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  84:	7c020001 	stcvc	0, cr0, [r2], {1}
  88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  8c:	00000014 	andeq	r0, r0, r4, lsl r0
  90:	0000007c 	andeq	r0, r0, ip, ror r0
  94:	0000045c 	andeq	r0, r0, ip, asr r4
  98:	00000024 	andeq	r0, r0, r4, lsr #32
  9c:	83080e41 	movwhi	r0, #36417	; 0x8e41
  a0:	00018e02 	andeq	r8, r1, r2, lsl #28
  a4:	0000000c 	andeq	r0, r0, ip
  a8:	0000007c 	andeq	r0, r0, ip, ror r0
  ac:	00000480 	andeq	r0, r0, r0, lsl #9
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	0000000c 	andeq	r0, r0, ip
  b8:	0000007c 	andeq	r0, r0, ip, ror r0
  bc:	0000049c 	muleq	r0, ip, r4
  c0:	00000024 	andeq	r0, r0, r4, lsr #32
  c4:	0000000c 	andeq	r0, r0, ip
  c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  cc:	7c020001 	stcvc	0, cr0, [r2], {1}
  d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  d4:	00000014 	andeq	r0, r0, r4, lsl r0
  d8:	000000c4 	andeq	r0, r0, r4, asr #1
  dc:	000004c0 	andeq	r0, r0, r0, asr #9
  e0:	00000024 	andeq	r0, r0, r4, lsr #32
  e4:	83080e41 	movwhi	r0, #36417	; 0x8e41
  e8:	00018e02 	andeq	r8, r1, r2, lsl #28
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	000000c4 	andeq	r0, r0, r4, asr #1
  f4:	000004e4 	andeq	r0, r0, r4, ror #9
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	0000000c 	andeq	r0, r0, ip
 100:	000000c4 	andeq	r0, r0, r4, asr #1
 104:	00000500 	andeq	r0, r0, r0, lsl #10
 108:	00000024 	andeq	r0, r0, r4, lsr #32
 10c:	0000000c 	andeq	r0, r0, ip
 110:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 114:	7c020001 	stcvc	0, cr0, [r2], {1}
 118:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 11c:	0000000c 	andeq	r0, r0, ip
 120:	0000010c 	andeq	r0, r0, ip, lsl #2
 124:	00000524 	andeq	r0, r0, r4, lsr #10
 128:	00000054 	andeq	r0, r0, r4, asr r0
 12c:	00000014 	andeq	r0, r0, r4, lsl r0
 130:	0000010c 	andeq	r0, r0, ip, lsl #2
 134:	00000578 	andeq	r0, r0, r8, ror r5
 138:	00000038 	andeq	r0, r0, r8, lsr r0
 13c:	83080e41 	movwhi	r0, #36417	; 0x8e41
 140:	00018e02 	andeq	r8, r1, r2, lsl #28
 144:	0000000c 	andeq	r0, r0, ip
 148:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 14c:	7c020001 	stcvc	0, cr0, [r2], {1}
 150:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 154:	0000000c 	andeq	r0, r0, ip
 158:	00000144 	andeq	r0, r0, r4, asr #2
 15c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 160:	00000002 	andeq	r0, r0, r2
 164:	0000000c 	andeq	r0, r0, ip
 168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 16c:	7c020001 	stcvc	0, cr0, [r2], {1}
 170:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 174:	00000020 	andeq	r0, r0, r0, lsr #32
 178:	00000164 	andeq	r0, r0, r4, ror #2
 17c:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
 180:	00000040 	andeq	r0, r0, r0, asr #32
 184:	84100e44 	ldrhi	r0, [r0], #-3652	; 0xfffff1bc
 188:	86038504 	strhi	r8, [r3], -r4, lsl #10
 18c:	59018e02 	stmdbpl	r1, {r1, r9, sl, fp, pc}
 190:	c5c4000e 	strbgt	r0, [r4, #14]
 194:	0000cec6 	andeq	ip, r0, r6, asr #29
 198:	0000000c 	andeq	r0, r0, ip
 19c:	00000164 	andeq	r0, r0, r4, ror #2
 1a0:	000005f4 	strdeq	r0, [r0], -r4
 1a4:	00000040 	andeq	r0, r0, r0, asr #32
 1a8:	0000000c 	andeq	r0, r0, ip
 1ac:	00000164 	andeq	r0, r0, r4, ror #2
 1b0:	00000634 	andeq	r0, r0, r4, lsr r6
 1b4:	0000002c 	andeq	r0, r0, ip, lsr #32
 1b8:	0000000c 	andeq	r0, r0, ip
 1bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1c0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1c8:	00000014 	andeq	r0, r0, r4, lsl r0
 1cc:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 1d0:	00000660 	andeq	r0, r0, r0, ror #12
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
 1dc:	00018e02 	andeq	r8, r1, r2, lsl #28
 1e0:	00000020 	andeq	r0, r0, r0, lsr #32
 1e4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 1e8:	0000067c 	andeq	r0, r0, ip, ror r6
 1ec:	00000140 	andeq	r0, r0, r0, asr #2
 1f0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 1f4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 1f8:	200e4101 	andcs	r4, lr, r1, lsl #2
 1fc:	0c0e0a60 			; <UNDEFINED> instruction: 0x0c0e0a60
 200:	00000b41 	andeq	r0, r0, r1, asr #22
 204:	00000038 	andeq	r0, r0, r8, lsr r0
 208:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 20c:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 210:	000000dc 	ldrdeq	r0, [r0], -ip
 214:	80100e41 	andshi	r0, r0, r1, asr #28
 218:	82038104 	andhi	r8, r3, #4, 2
 21c:	41018302 	tstmi	r1, r2, lsl #6
 220:	07841c0e 	streq	r1, [r4, lr, lsl #24]
 224:	058e0685 	streq	r0, [lr, #1669]	; 0x685
 228:	02280e41 	eoreq	r0, r8, #1040	; 0x410
 22c:	1c0e0a61 			; <UNDEFINED> instruction: 0x1c0e0a61
 230:	c4c5ce42 	strbgt	ip, [r5], #3650	; 0xe42
 234:	c341100e 	movtgt	r1, #4110	; 0x100e
 238:	0ec0c1c2 	acseqdm	f4, f2
 23c:	000b4100 	andeq	r4, fp, r0, lsl #2
 240:	0000002c 	andeq	r0, r0, ip, lsr #32
 244:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 248:	00000898 	muleq	r0, r8, r8
 24c:	00000024 	andeq	r0, r0, r4, lsr #32
 250:	80100e41 	andshi	r0, r0, r1, asr #28
 254:	82038104 	andhi	r8, r3, #4, 2
 258:	41018302 	tstmi	r1, r2, lsl #6
 25c:	0684180e 	streq	r1, [r4], lr, lsl #16
 260:	ce4b058e 	cdpgt	5, 4, cr0, cr11, cr14, {4}
 264:	41100ec4 	tstmi	r0, r4, asr #29
 268:	c0c1c2c3 	sbcgt	ip, r1, r3, asr #5
 26c:	0000000e 	andeq	r0, r0, lr
 270:	0000000c 	andeq	r0, r0, ip
 274:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 278:	7c020001 	stcvc	0, cr0, [r2], {1}
 27c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 280:	0000001c 	andeq	r0, r0, ip, lsl r0
 284:	00000270 	andeq	r0, r0, r0, ror r2
 288:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
 28c:	000000f4 	strdeq	r0, [r0], -r4
 290:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
 294:	41018e02 	tstmi	r1, r2, lsl #28
 298:	7502100e 	strvc	r1, [r2, #-14]
 29c:	0000080e 	andeq	r0, r0, lr, lsl #16
 2a0:	00000018 	andeq	r0, r0, r8, lsl r0
 2a4:	00000270 	andeq	r0, r0, r0, ror r2
 2a8:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
 2ac:	0000003e 	andeq	r0, r0, lr, lsr r0
 2b0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 2b4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 2b8:	00000001 	andeq	r0, r0, r1
 2bc:	00000018 	andeq	r0, r0, r8, lsl r0
 2c0:	00000270 	andeq	r0, r0, r0, ror r2
 2c4:	000009ee 	andeq	r0, r0, lr, ror #19
 2c8:	00000046 	andeq	r0, r0, r6, asr #32
 2cc:	84040e47 	strhi	r0, [r4], #-3655	; 0xfffff1b9
 2d0:	0ec45401 	cdpeq	4, 12, cr5, cr4, cr1, {0}
 2d4:	00000000 	andeq	r0, r0, r0
 2d8:	0000000c 	andeq	r0, r0, ip
 2dc:	00000270 	andeq	r0, r0, r0, ror r2
 2e0:	00000a34 	andeq	r0, r0, r4, lsr sl
 2e4:	00000032 	andeq	r0, r0, r2, lsr r0
 2e8:	0000000c 	andeq	r0, r0, ip
 2ec:	00000270 	andeq	r0, r0, r0, ror r2
 2f0:	00000a66 	andeq	r0, r0, r6, ror #20
 2f4:	00000012 	andeq	r0, r0, r2, lsl r0
 2f8:	00000024 	andeq	r0, r0, r4, lsr #32
 2fc:	00000270 	andeq	r0, r0, r0, ror r2
 300:	00000a78 	andeq	r0, r0, r8, ror sl
 304:	00000072 	andeq	r0, r0, r2, ror r0
 308:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
 30c:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
 310:	87078608 	strhi	r8, [r7, -r8, lsl #12]
 314:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
 318:	8b038a04 	blhi	e2b30 <__ROM_SIZE__+0xa2b30>
 31c:	00018e02 	andeq	r8, r1, r2, lsl #28
 320:	00000028 	andeq	r0, r0, r8, lsr #32
 324:	00000270 	andeq	r0, r0, r0, ror r2
 328:	00000aea 	andeq	r0, r0, sl, ror #21
 32c:	00000166 	andeq	r0, r0, r6, ror #2
 330:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
 334:	86088509 	strhi	r8, [r8], -r9, lsl #10
 338:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
 33c:	8a048905 	bhi	122758 <__ROM_SIZE__+0xe2758>
 340:	8e028b03 	vmlahi.f64	d8, d2, d3
 344:	500e4101 	andpl	r4, lr, r1, lsl #2
 348:	240eae02 	strcs	sl, [lr], #-3586	; 0xfffff1fe
 34c:	00000018 	andeq	r0, r0, r8, lsl r0
 350:	00000270 	andeq	r0, r0, r0, ror r2
 354:	00000c50 	andeq	r0, r0, r0, asr ip
 358:	00000048 	andeq	r0, r0, r8, asr #32
 35c:	8e040e47 	cdphi	14, 0, cr0, cr4, cr7, {2}
 360:	000e5601 	andeq	r5, lr, r1, lsl #12
 364:	000000ce 	andeq	r0, r0, lr, asr #1
 368:	0000000c 	andeq	r0, r0, ip
 36c:	00000270 	andeq	r0, r0, r0, ror r2
 370:	00000c98 	muleq	r0, r8, ip
 374:	00000032 	andeq	r0, r0, r2, lsr r0
 378:	00000018 	andeq	r0, r0, r8, lsl r0
 37c:	00000270 	andeq	r0, r0, r0, ror r2
 380:	00000cca 	andeq	r0, r0, sl, asr #25
 384:	00000044 	andeq	r0, r0, r4, asr #32
 388:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 38c:	86038504 	strhi	r8, [r3], -r4, lsl #10
 390:	00018e02 	andeq	r8, r1, r2, lsl #28
 394:	00000018 	andeq	r0, r0, r8, lsl r0
 398:	00000270 	andeq	r0, r0, r0, ror r2
 39c:	00000d0e 	andeq	r0, r0, lr, lsl #26
 3a0:	0000003a 	andeq	r0, r0, sl, lsr r0
 3a4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 3a8:	86038504 	strhi	r8, [r3], -r4, lsl #10
 3ac:	00018e02 	andeq	r8, r1, r2, lsl #28
 3b0:	0000000c 	andeq	r0, r0, ip
 3b4:	00000270 	andeq	r0, r0, r0, ror r2
 3b8:	00000d48 	andeq	r0, r0, r8, asr #26
 3bc:	0000001a 	andeq	r0, r0, sl, lsl r0
int car_mesg(int argc, char** argv) {
 3c0:	00000014 	andeq	r0, r0, r4, lsl r0
 3c4:	00000270 	andeq	r0, r0, r0, ror r2
    printf("Received the message:");
 3c8:	00000d62 	andeq	r0, r0, r2, ror #26
    for (ctr = 1; ctr < argc; ctr++) {
 3cc:	00000008 	andeq	r0, r0, r8
        printf(" %s", argv[ctr]);
 3d0:	83080e41 	movwhi	r0, #36417	; 0x8e41
 3d4:	00018e02 	andeq	r8, r1, r2, lsl #28
 3d8:	00000018 	andeq	r0, r0, r8, lsl r0
    for (ctr = 1; ctr < argc; ctr++) {
 3dc:	00000270 	andeq	r0, r0, r0, ror r2
    printf("\n");
 3e0:	00000d6a 	andeq	r0, r0, sl, ror #26
 3e4:	00000018 	andeq	r0, r0, r8, lsl r0
    if (argc > 0) {
 3e8:	83100e41 	tsthi	r0, #1040	; 0x410
}
 3ec:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
        if (strcmp(argv[1], "PING_REPLY") == 0) {
 3f0:	00018e02 	andeq	r8, r1, r2, lsl #28
 3f4:	00000014 	andeq	r0, r0, r4, lsl r0
            printf("Got a ping reply.\n");
 3f8:	00000270 	andeq	r0, r0, r0, ror r2
 3fc:	00000d82 	andeq	r0, r0, r2, lsl #27
            printf("strcmp didn't match %s\n", argv[1]);
 400:	0000000c 	andeq	r0, r0, ip
 404:	83080e41 	movwhi	r0, #36417	; 0x8e41
 408:	00018e02 	andeq	r8, r1, r2, lsl #28
 40c:	00000014 	andeq	r0, r0, r4, lsl r0
 410:	00000270 	andeq	r0, r0, r0, ror r2
 414:	00000d8e 	andeq	r0, r0, lr, lsl #27
 418:	0000000e 	andeq	r0, r0, lr
 41c:	83080e41 	movwhi	r0, #36417	; 0x8e41
 420:	00018e02 	andeq	r8, r1, r2, lsl #28
int ping(int argc, char** argv) {
 424:	00000014 	andeq	r0, r0, r4, lsl r0
    printf("Pinging the car.\n");
 428:	00000270 	andeq	r0, r0, r0, ror r2
    printf2("FOB_MESG PING\n");
 42c:	00000d9c 	muleq	r0, ip, sp
 430:	0000000e 	andeq	r0, r0, lr
}
 434:	83080e41 	movwhi	r0, #36417	; 0x8e41
 438:	00018e02 	andeq	r8, r1, r2, lsl #28
 43c:	0000001c 	andeq	r0, r0, ip, lsl r0
int pair(int argc, char** argv) {
 440:	00000270 	andeq	r0, r0, r0, ror r2
    printf("Sending a pair request.\n");
 444:	00000daa 	andeq	r0, r0, sl, lsr #27
    printf2("FOB_MESG PAIR\n");
 448:	00000038 	andeq	r0, r0, r8, lsr r0
 44c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
}
 450:	86058506 	strhi	r8, [r5], -r6, lsl #10
 454:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 458:	00018e02 	andeq	r8, r1, r2, lsl #28
void uputc(char c) {
 45c:	00000024 	andeq	r0, r0, r4, lsr #32
  while ((UARTFR >> 5) & 1)
 460:	00000270 	andeq	r0, r0, r0, ror r2
 464:	00000de2 	andeq	r0, r0, r2, ror #27
  UART_DR = c;
 468:	00000046 	andeq	r0, r0, r6, asr #32
  if (c == '\n')
 46c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
}
 470:	86058506 	strhi	r8, [r5], -r6, lsl #10
    uputc('\r');
 474:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
}
 478:	41018e02 	tstmi	r1, r2, lsl #28
 47c:	0e5e280e 	cdpeq	8, 5, cr2, cr14, cr14, {0}
  if (!((UARTFR >> 4) & 1)) return UART_DR;
 480:	00000018 	andeq	r0, r0, r8, lsl r0
 484:	00000020 	andeq	r0, r0, r0, lsr #32
 488:	00000270 	andeq	r0, r0, r0, ror r2
 48c:	00000e28 	andeq	r0, r0, r8, lsr #28
  return -1;
 490:	00000074 	andeq	r0, r0, r4, ror r0
}
 494:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 498:	86048505 	strhi	r8, [r4], -r5, lsl #10
  UARTCTL = 0;
 49c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 4a0:	280e4101 	stmdacs	lr, {r0, r8, lr}
  UARTIBRD = 8;
 4a4:	00140e77 	andseq	r0, r4, r7, ror lr
  UARTFBRD = 44;
 4a8:	0000000c 	andeq	r0, r0, ip
  UARTCC = 0;
 4ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  UARTLCRH = 0x60;
 4b0:	7c020001 	stcvc	0, cr0, [r2], {1}
  UARTCTL = 0x301;
 4b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
}
 4b8:	0000000c 	andeq	r0, r0, ip
 4bc:	000004a8 	andeq	r0, r0, r8, lsr #9
void u2putc(char c) {
 4c0:	00000e9c 	muleq	r0, ip, lr
  while ((UART2FR >> 5) & 1)
 4c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c8:	0000000c 	andeq	r0, r0, ip
  UART2_DR = c;
 4cc:	000004a8 	andeq	r0, r0, r8, lsr #9
  if (c == '\n')
 4d0:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
}
 4d4:	0000003e 	andeq	r0, r0, lr, lsr r0
    u2putc('\r');
 4d8:	0000000c 	andeq	r0, r0, ip
}
 4dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4e0:	7c020001 	stcvc	0, cr0, [r2], {1}
  if (!((UART2FR >> 4) & 1)) return UART2_DR;
 4e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4e8:	00000014 	andeq	r0, r0, r4, lsl r0
 4ec:	000004d8 	ldrdeq	r0, [r0], -r8
 4f0:	00000ef8 	strdeq	r0, [r0], -r8
  return -1;
 4f4:	00000030 	andeq	r0, r0, r0, lsr r0
}
 4f8:	83080e41 	movwhi	r0, #36417	; 0x8e41
 4fc:	00018e02 	andeq	r8, r1, r2, lsl #28
  UART2CTL = 0;
 500:	00000018 	andeq	r0, r0, r8, lsl r0
 504:	000004d8 	ldrdeq	r0, [r0], -r8
  UART2IBRD = 8;
 508:	00000f28 	andeq	r0, r0, r8, lsr #30
  UART2FBRD = 44;
 50c:	00000030 	andeq	r0, r0, r0, lsr r0
  UART2CC = 0;
 510:	83100e41 	tsthi	r0, #1040	; 0x410
  UART2LCRH = 0x60;
 514:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
  UART2CTL = 0x301;
 518:	00018e02 	andeq	r8, r1, r2, lsl #28
}
 51c:	00000018 	andeq	r0, r0, r8, lsl r0
 520:	000004d8 	ldrdeq	r0, [r0], -r8
  RCGCUART |= 3;
 524:	00000f58 	andeq	r0, r0, r8, asr pc
 528:	00000048 	andeq	r0, r0, r8, asr #32
 52c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 530:	86038504 	strhi	r8, [r3], -r4, lsl #10
  RCGCGPIO |= 3;
 534:	00018e02 	andeq	r8, r1, r2, lsl #28
 538:	00000018 	andeq	r0, r0, r8, lsl r0
 53c:	000004d8 	ldrdeq	r0, [r0], -r8
  GPIODEN = 0x03;
 540:	00000fa0 	andeq	r0, r0, r0, lsr #31
 544:	00000068 	andeq	r0, r0, r8, rrx
  GPIOAFSEL = 0x03;
 548:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
  GPIOPCTL |= 0x00000011;
 54c:	86038504 	strhi	r8, [r3], -r4, lsl #10
 550:	00018e02 	andeq	r8, r1, r2, lsl #28
 554:	00000018 	andeq	r0, r0, r8, lsl r0
  GPIODEN2 = 0x03;
 558:	000004d8 	ldrdeq	r0, [r0], -r8
 55c:	00001008 	andeq	r1, r0, r8
  GPIOAFSEL2 = 0x03;
 560:	00000050 	andeq	r0, r0, r0, asr r0
  GPIOPCTL2 |= 0x00000011;
 564:	83100e41 	tsthi	r0, #1040	; 0x410
 568:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
 56c:	00018e02 	andeq	r8, r1, r2, lsl #28
}
 570:	0000000c 	andeq	r0, r0, ip
 574:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
void platform_init() {
 578:	7c020001 	stcvc	0, cr0, [r2], {1}
    pin_setup();
 57c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    uart_init();
 580:	0000000c 	andeq	r0, r0, ip
    uart2_init();
 584:	00000570 	andeq	r0, r0, r0, ror r5
    set_read_char(ugetc);
 588:	00001058 	andeq	r1, r0, r8, asr r0
    set_read_char2(u2getc);
 58c:	00000010 	andeq	r0, r0, r0, lsl r0
 590:	0000000c 	andeq	r0, r0, ip
    set_write_char(uputc);
 594:	00000570 	andeq	r0, r0, r0, ror r5
    set_write_char2(u2putc);
 598:	00001068 	andeq	r1, r0, r8, rrx
 59c:	00000016 	andeq	r0, r0, r6, lsl r0
}
 5a0:	0000000c 	andeq	r0, r0, ip
 5a4:	00000570 	andeq	r0, r0, r0, ror r5
 5a8:	0000107e 	andeq	r1, r0, lr, ror r0
 5ac:	00000014 	andeq	r0, r0, r4, lsl r0
 5b0:	0000000c 	andeq	r0, r0, ip
  selected_mode = mode;
 5b4:	00000570 	andeq	r0, r0, r0, ror r5
  if (selected_mode == NONE) {
 5b8:	00001092 	muleq	r0, r2, r0
  out_buf_rgn.addr = addr;
 5bc:	00000016 	andeq	r0, r0, r6, lsl r0
  out_buf_rgn.size = size / 2;
 5c0:	0000000c 	andeq	r0, r0, ip
  out_buf_rgn.curr_index = 0;
 5c4:	00000570 	andeq	r0, r0, r0, ror r5
  inp_buf_rgn.addr = addr + size / 2;
 5c8:	000010a8 	andeq	r1, r0, r8, lsr #1
  inp_buf_rgn.curr_index = 0;
 5cc:	00000010 	andeq	r0, r0, r0, lsl r0
  if (!(selected_mode & INP)) {
 5d0:	0000000c 	andeq	r0, r0, ip
    out_buf_rgn.size = size;
 5d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  memset(addr, 0, size);
 5d8:	7c020001 	stcvc	0, cr0, [r2], {1}
 5dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  } else if (!(selected_mode & OUT)) {
 5e0:	00000020 	andeq	r0, r0, r0, lsr #32
 5e4:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    inp_buf_rgn.addr = addr;
 5e8:	000010b8 	strheq	r1, [r0], -r8
    inp_buf_rgn.size = size;
 5ec:	0000006c 	andeq	r0, r0, ip, rrx
 5f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  if (!(selected_mode & INP)) {
 5f4:	41018e02 	tstmi	r1, r2, lsl #28
 5f8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5fc:	080e6607 	stmdaeq	lr, {r0, r1, r2, r9, sl, sp, lr}
  if (inp_buf_rgn.addr[inp_buf_rgn.curr_index] == 0) {
 600:	000d0d41 	andeq	r0, sp, r1, asr #26
 604:	00000014 	andeq	r0, r0, r4, lsl r0
  int val = inp_buf_rgn.addr[inp_buf_rgn.curr_index];
 608:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  inp_buf_rgn.addr[inp_buf_rgn.curr_index] = 0;
 60c:	00001124 	andeq	r1, r0, r4, lsr #2
  inp_buf_rgn.curr_index++;
 610:	0000001c 	andeq	r0, r0, ip, lsl r0
 614:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
  if (inp_buf_rgn.curr_index == inp_buf_rgn.size) {
 618:	00018e02 	andeq	r8, r1, r2, lsl #28
}
 61c:	00000014 	andeq	r0, r0, r4, lsl r0
    inp_buf_rgn.curr_index = 0;
 620:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    return -1;
 624:	00001140 	andeq	r1, r0, r0, asr #2
 628:	00000012 	andeq	r0, r0, r2, lsl r0
    return -1;
 62c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
 630:	00018e02 	andeq	r8, r1, r2, lsl #28
  if (!(selected_mode & OUT) || c == 0) {
 634:	00000014 	andeq	r0, r0, r4, lsl r0
 638:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 63c:	00001152 	andeq	r1, r0, r2, asr r1
  out_buf_rgn.addr[out_buf_rgn.curr_index] = (uint8_t) c;
 640:	00000026 	andeq	r0, r0, r6, lsr #32
 644:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
  out_buf_rgn.curr_index++;
 648:	00018e02 	andeq	r8, r1, r2, lsl #28
  if (out_buf_rgn.curr_index == out_buf_rgn.size) {
 64c:	00000018 	andeq	r0, r0, r8, lsl r0
 650:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    out_buf_rgn.curr_index = 0;
 654:	00001178 	andeq	r1, r0, r8, ror r1
 658:	00000040 	andeq	r0, r0, r0, asr #32
 65c:	83100e41 	tsthi	r0, #1040	; 0x410
static void outstr(const char *str) {
 660:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
  while (*str != '\0') {
 664:	00018e02 	andeq	r8, r1, r2, lsl #28
    __write_char__(*str);
 668:	00000014 	andeq	r0, r0, r4, lsl r0
    str++;
 66c:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  while (*str != '\0') {
 670:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
}
 674:	00000018 	andeq	r0, r0, r8, lsl r0
 678:	83080e41 	movwhi	r0, #36417	; 0x8e41
static bool printf_numbers(const char fmt, va_list *args, int l_count) {
 67c:	00018e02 	andeq	r8, r1, r2, lsl #28
 680:	00000014 	andeq	r0, r0, r4, lsl r0
  switch (fmt) {
 684:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 688:	000011d0 	ldrdeq	r1, [r0], -r0
 68c:	00000010 	andeq	r0, r0, r0, lsl r0
      if (l_count == 0) {
 690:	83080e41 	movwhi	r0, #36417	; 0x8e41
 694:	00018e02 	andeq	r8, r1, r2, lsl #28
        value = va_arg(*args, unsigned int);
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      if (fmt == 'u') {
 6a0:	000011e0 	andeq	r1, r0, r0, ror #3
        if (value == 0) {
 6a4:	00000058 	andeq	r0, r0, r8, asr r0
          __write_char__(hextable[0]);
 6a8:	83180e42 	tsthi	r8, #1056	; 0x420
 6ac:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
  return true;
 6b0:	88038604 	stmdahi	r3, {r2, r9, sl, pc}
  switch (fmt) {
 6b4:	00018e02 	andeq	r8, r1, r2, lsl #28
      outstr("\nprintf-error\n");
 6b8:	00000018 	andeq	r0, r0, r8, lsl r0
      return false;
 6bc:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
}
 6c0:	00001238 	andeq	r1, r0, r8, lsr r2
      if (l_count == 0) {
 6c4:	00000068 	andeq	r0, r0, r8, rrx
        value = va_arg(*args, int);
 6c8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 6cc:	86038504 	strhi	r8, [r3], -r4, lsl #10
      if (value < 0) {
 6d0:	00018e02 	andeq	r8, r1, r2, lsl #28
        num[num_len++] = hextable[value % 10];
 6d4:	00000020 	andeq	r0, r0, r0, lsr #32
 6d8:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 6dc:	000012a0 	andeq	r1, r0, r0, lsr #5
 6e0:	00000044 	andeq	r0, r0, r4, asr #32
 6e4:	83100e42 	tsthi	r0, #1056	; 0x420
 6e8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
 6ec:	5b018e02 	blpl	63efc <__ROM_SIZE__+0x23efc>
 6f0:	c4c3000e 	strbgt	r0, [r3], #14
 6f4:	0000cec5 	andeq	ip, r0, r5, asr #29
        value = value / 10;
 6f8:	00000018 	andeq	r0, r0, r8, lsl r0
      } while (value > 0);
 6fc:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 700:	000012e4 	andeq	r1, r0, r4, ror #5
        __write_char__('-');
 704:	00000052 	andeq	r0, r0, r2, asr r0
 708:	83100e41 	tsthi	r0, #1040	; 0x410
        value = -value;
 70c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
        __write_char__(num[--num_len]);
 710:	00018e02 	andeq	r8, r1, r2, lsl #28
 714:	00000020 	andeq	r0, r0, r0, lsr #32
 718:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 71c:	00001336 	andeq	r1, r0, r6, lsr r3
 720:	0000003c 	andeq	r0, r0, ip, lsr r0
      while (num_len > 0) {
 724:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
  return true;
 728:	86038504 	strhi	r8, [r3], -r4, lsl #10
          num[num_len++] = hextable[value % 10];
 72c:	5a018e02 	bpl	63f3c <__ROM_SIZE__+0x23f3c>
 730:	c5c4000e 	strbgt	r0, [r4, #14]
 734:	0000cec6 	andeq	ip, r0, r6, asr #29
 738:	00000018 	andeq	r0, r0, r8, lsl r0
 73c:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 740:	00001372 	andeq	r1, r0, r2, ror r3
 744:	00000066 	andeq	r0, r0, r6, rrx
 748:	83100e41 	tsthi	r0, #1040	; 0x410
          value = value / 10;
 74c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
        } while (value > 0);
 750:	00018e02 	andeq	r8, r1, r2, lsl #28
        while (num_len > 0) {
 754:	00000018 	andeq	r0, r0, r8, lsl r0
          __write_char__(num[--num_len]);
 758:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 75c:	000013d8 	ldrdeq	r1, [r0], -r8
 760:	00000058 	andeq	r0, r0, r8, asr r0
 764:	83100e41 	tsthi	r0, #1040	; 0x410
 768:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
 76c:	00018e02 	andeq	r8, r1, r2, lsl #28
  return true;
 770:	0000000c 	andeq	r0, r0, ip
              __write_char__(hextable[val]);
 774:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 778:	00001430 	andeq	r1, r0, r0, lsr r4
              leading_zero_ignored = true;
 77c:	0000000c 	andeq	r0, r0, ip
          while (start_bit >= 0) {
 780:	0000000c 	andeq	r0, r0, ip
            int val = (value >> start_bit) & 0xF;
 784:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
            if (val || leading_zero_ignored) {
 788:	0000143c 	andeq	r1, r0, ip, lsr r4
 78c:	0000000c 	andeq	r0, r0, ip
 790:	0000000c 	andeq	r0, r0, ip
          bool leading_zero_ignored = false;
 794:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
          int start_bit = LAST_NIBBLE_FIRST_BIT;
 798:	00001448 	andeq	r1, r0, r8, asr #8
  return true;
 79c:	0000000c 	andeq	r0, r0, ip
        return false;
 7a0:	0000000c 	andeq	r0, r0, ip
        return false;
 7a4:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 7a8:	00001454 	andeq	r1, r0, r4, asr r4
 7ac:	0000000c 	andeq	r0, r0, ip
 7b0:	0000000c 	andeq	r0, r0, ip
 7b4:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 7b8:	00001460 	andeq	r1, r0, r0, ror #8
int printf(const char *fmt, ...) {
 7bc:	00000002 	andeq	r0, r0, r2
 7c0:	0000000c 	andeq	r0, r0, ip
 7c4:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  va_start(args, fmt);
 7c8:	00001462 	andeq	r1, r0, r2, ror #8
  while (*fmt) {
 7cc:	00000002 	andeq	r0, r0, r2
        if (*fmt == '%') {
 7d0:	0000000c 	andeq	r0, r0, ip
        __write_char__(*fmt);
 7d4:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
        fmt++;
 7d8:	00001464 	andeq	r1, r0, r4, ror #8
  while (*fmt) {
 7dc:	00000002 	andeq	r0, r0, r2
    switch (state) {
 7e0:	0000002c 	andeq	r0, r0, ip, lsr #32
 7e4:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
          fmt++;
 7e8:	00001466 	andeq	r1, r0, r6, ror #8
          continue;
 7ec:	000000a2 	andeq	r0, r0, r2, lsr #1
        while (*fmt && ((*fmt >= '0' && *fmt <= '9') || *fmt == '-')) {
 7f0:	83200e44 			; <UNDEFINED> instruction: 0x83200e44
 7f4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
 7f8:	88058606 	stmdahi	r5, {r1, r2, r9, sl, pc}
 7fc:	8a038904 	bhi	e2c14 <__ROM_SIZE__+0xa2c14>
 800:	02018e02 	andeq	r8, r1, #2, 28
        switch (*fmt) {
 804:	c3000e45 	movwgt	r0, #3653	; 0xe45
 808:	c8c6c5c4 	stmiagt	r6, {r2, r6, r7, r8, sl, lr, pc}^
 80c:	00cecac9 	sbceq	ip, lr, r9, asr #21
 810:	0000000c 	andeq	r0, r0, ip
            __write_char__(*fmt);
 814:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 818:	00001508 	andeq	r1, r0, r8, lsl #10
            state = CHECK_CH;
 81c:	00000004 	andeq	r0, r0, r4
            break;
 820:	00000020 	andeq	r0, r0, r0, lsr #32
 824:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
            outstr(va_arg(args, const char *));
 828:	0000150c 	andeq	r1, r0, ip, lsl #10
 82c:	00000178 	andeq	r0, r0, r8, ror r1
 830:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
            fmt++;
 834:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
            break;
 838:	780e4101 	stmdavc	lr, {r0, r8, lr}
            __write_char__(va_arg(args, int));
 83c:	0c0e0a79 			; <UNDEFINED> instruction: 0x0c0e0a79
 840:	00000b41 	andeq	r0, r0, r1, asr #22
 844:	00000014 	andeq	r0, r0, r4, lsl r0
            fmt++;
 848:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
            break;
 84c:	00001684 	andeq	r1, r0, r4, lsl #13
            if (*fmt == 'l') {
 850:	00000014 	andeq	r0, r0, r4, lsl r0
 854:	83080e41 	movwhi	r0, #36417	; 0x8e41
            if (printf_numbers(*fmt, &args, l_count)) {
 858:	00018e02 	andeq	r8, r1, r2, lsl #28
 85c:	0000001c 	andeq	r0, r0, ip, lsl r0
 860:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
              state = CHECK_CH;
 864:	00001698 	muleq	r0, r8, r6
              fmt++;
 868:	00000028 	andeq	r0, r0, r8, lsr #32
              l_count++;
 86c:	8e040e41 	cdphi	14, 0, cr0, cr4, cr1, {2}
            if (printf_numbers(*fmt, &args, 0)) {
 870:	480e4101 	stmdami	lr, {r0, r8, lr}
 874:	040e0a4a 	streq	r0, [lr], #-2634	; 0xfffff5b6
              fmt++;
 878:	00000b42 	andeq	r0, r0, r2, asr #22
              break;
 87c:	00000018 	andeq	r0, r0, r8, lsl r0
            return -1;
 880:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
}
 884:	000016c0 	andeq	r1, r0, r0, asr #13
 888:	00000030 	andeq	r0, r0, r0, lsr r0
            return -1;
 88c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 890:	86038504 	strhi	r8, [r3], -r4, lsl #10
 894:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00000030 	andeq	r0, r0, r0, lsr r0
   4:	0000004e 	andeq	r0, r0, lr, asr #32
   8:	00000050 	andeq	r0, r0, r0, asr r0
   c:	00000052 	andeq	r0, r0, r2, asr r0
  10:	000000ca 	andeq	r0, r0, sl, asr #1
  14:	0000010e 	andeq	r0, r0, lr, lsl #2
  18:	00000112 	andeq	r0, r0, r2, lsl r1
  1c:	0000013a 	andeq	r0, r0, sl, lsr r1
  20:	00000142 	andeq	r0, r0, r2, asr #2
  24:	0000015c 	andeq	r0, r0, ip, asr r1
	...
  30:	00000112 	andeq	r0, r0, r2, lsl r1
  34:	00000120 	andeq	r0, r0, r0, lsr #2
  38:	00000124 	andeq	r0, r0, r4, lsr #2
  3c:	00000134 	andeq	r0, r0, r4, lsr r1
	...
  48:	00000062 	andeq	r0, r0, r2, rrx
  4c:	000000c6 	andeq	r0, r0, r6, asr #1
  50:	0000013e 	andeq	r0, r0, lr, lsr r1
  54:	00000142 	andeq	r0, r0, r2, asr #2
	...
  60:	000001ee 	andeq	r0, r0, lr, ror #3
  64:	0000020e 	andeq	r0, r0, lr, lsl #4
  68:	0000021e 	andeq	r0, r0, lr, lsl r2
  6c:	00000222 	andeq	r0, r0, r2, lsr #4
	...
  78:	00000002 	andeq	r0, r0, r2
  7c:	00000004 	andeq	r0, r0, r4
  80:	00000006 	andeq	r0, r0, r6
  84:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
  90:	0000001e 	andeq	r0, r0, lr, lsl r0
  94:	00000020 	andeq	r0, r0, r0, lsr #32
  98:	00000022 	andeq	r0, r0, r2, lsr #32
  9c:	00000058 	andeq	r0, r0, r8, asr r0
	...
  a8:	00000078 	andeq	r0, r0, r8, ror r0
  ac:	0000007c 	andeq	r0, r0, ip, ror r0
  b0:	0000008a 	andeq	r0, r0, sl, lsl #1
  b4:	0000009c 	muleq	r0, ip, r0
	...
  c0:	00000298 	muleq	r0, r8, r2
  c4:	000002aa 	andeq	r0, r0, sl, lsr #5
  c8:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
  cc:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
	...
